<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuckyBoy🥝</title>
  
  
  <link href="https://wuwawawa.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuwawawa.github.io/"/>
  <updated>2023-05-10T12:14:01.754Z</updated>
  <id>https://wuwawawa.github.io/</id>
  
  <author>
    <name>LuckyBoy🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://wuwawawa.github.io/posts/397c083a.html"/>
    <id>https://wuwawawa.github.io/posts/397c083a.html</id>
    <published>2023-05-10T08:05:42.000Z</published>
    <updated>2023-05-10T12:14:01.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java8新特性的好处">Java8新特性的好处</h2><ol><li>速度更快</li><li>代码更少（Lambda简化代码书写）</li><li>强大的Stream API</li><li>便于并行</li><li>最大化减少空指针异常：Optional</li><li>Nashorn引擎，允许在JVM上运行JS应用</li></ol><hr><hr><h2 id="并行流与串行流">并行流与串行流</h2><ul><li>并行流就是把一个内容分为多个数据块，并用不同的线程分别处理每个数据块的流，相比较于串行流，可以很大程度上提高程序的执行效率</li><li>Java8中将其进行了优化，我们可以很容易的对数据进行并行操作。</li><li>Stream API 可以声明性地通过parallel()和sequential()在并行流与顺序流之间进行切换</li></ul><hr><hr><h2 id="Lambda表达式">Lambda表达式</h2><ul><li>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。</li><li>使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，是Java的语言表达能力得到了提升</li></ul><blockquote><span class='p red'>lambda表达式使用前提</span></blockquote><p>必须有接口,接口中有且只能有一个抽象方法(函数式接口)</p><p>Lambda表达式是可推导可以省略的，Lambda表达式可以推导出来，省略就是重写唯一的抽象方法进而可以进一步对参数和返回值进行简化</p><ol><li>举例： (o1,o2) -&gt; Integer.compare(o1,o2);</li><li>格式：<ul><li><code>-&gt;：</code>lambda操作符或箭头操作符</li><li><code>-&gt;左边：</code>lambda形参列表（其实就是接口中的抽象方法的形参列表）</li><li><code>-&gt;右边：</code>lambda体（其实就是重写的抽象方法的方法体）</li></ul></li><li>Lambda表达式的使用：（分为6种情况介绍）</li></ol><div class="tabs" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-1"><i class="fas fa-bug"></i>格式一</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-2"><i class="fas fa-cannabis"></i>格式二</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-3"><i class="fas fa-candy-cane"></i>格式三</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-4"><i class="fas fa-child"></i>格式四</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-5"><i class="fas fa-heartbeat"></i>格式五</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-6"><i class="fas fa-cookie-bite"></i>格式六</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-1"><p><code>语法格式一：</code>无参无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你 的 城 市 好 像 不 欢 迎 我&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    runnable01.run();</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable02</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;所 以 我 只 好 转 身 离 开 了&quot;</span>);</span><br><span class="line">    runnable02.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-2"><p><code>语法格式二：</code>Lambda需要一个参数，但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;其实我存过你照片 也研究过你的星座&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = (String s) -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;你喜欢的歌我也会去听 你喜欢的事物我也会想去了解&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-3"><p><code>语法格式三：</code>数据类型可以省略，因为可由<code>类型推断</code>得出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;我远比表面上更喜欢你&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = (s) -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;但我没有说&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-4"><p><code>语法格式四：</code>Lambda若只需要一个参数，参数的小括号可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;我远比表面上更喜欢你&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = s -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;但我没有说&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-5"><p><code>语法格式五：</code>Lambda需要两个或以上参数，多条执行语句，并且有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">95</span>, <span class="number">27</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = (o1, o2) -&gt; &#123;</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-6"><p><code>语法格式六：</code>当Lambda体只有一条语句时，return与{}若有，则都可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">95</span>, <span class="number">27</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="函数式接口">函数式接口</h2><ul><li>Lambda表达式的本质：作为函数式接口的实例</li><li>如果在一个接口中，只声明了一个抽象方法，则此接口就被称为函数式接口，我们可以在一个接口上使用@FunctionalInterface注解来验证该接口是否为函数式接口（如果你在该接口中写了两个方法，则编译期就会报错）</li><li>正是因为抽象方法中只有一个方法，所以我们才可以省略@Override函数声明等内容</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li><li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着Python、Scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程）</li><li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。</li><li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。</li><li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</li></ul><blockquote><p>Java内置的函数式接口介绍及使用举例</p></blockquote><table><thead><tr><th style="text-align:center">函数式接口</th><th style="text-align:center">方法</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">Consumer 消费型接口</td><td style="text-align:center">void accept(T t)</td><td style="text-align:center">对类型为T的对象应用操作</td></tr><tr><td style="text-align:center">Supplier 供给型接口</td><td style="text-align:center">T get()</td><td style="text-align:center">返回类型为T的对象</td></tr><tr><td style="text-align:center">Function 函数型接口</td><td style="text-align:center">R apply(T t)</td><td style="text-align:center">对类型为T的对象应用操作返回结果</td></tr><tr><td style="text-align:center">Predicate 断定型接口</td><td style="text-align:center">boolean test(T t)</td><td style="text-align:center">确定类型为T的对象是否满足某约束</td></tr><tr><td style="text-align:center">BiConsumer</td><td style="text-align:center">void accept(T t,U u)</td><td style="text-align:center">对类型为T,U参数应用操作</td></tr><tr><td style="text-align:center">BiPredicate</td><td style="text-align:center">boolean</td><td style="text-align:center">包含方法为：boolean test(T t,U u)</td></tr><tr><td style="text-align:center">BiFunction</td><td style="text-align:center">R apply(T t,U u)</td><td style="text-align:center">对类型为T,U参数应用操作，返回R类型的结果</td></tr><tr><td style="text-align:center">UnaryOperator(Function子接口)</td><td style="text-align:center">T apply(T t)</td><td style="text-align:center">对类型为T的对象进行一元运算</td></tr><tr><td style="text-align:center">BinaryOperator(BiFunction子接口)</td><td style="text-align:center">T apply(T t1,T t2)</td><td style="text-align:center">对类型为T的对象进行二元运算</td></tr></tbody></table><div class="tabs" id="10d20ccf-24f3-4841-8532-22635d831135"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#10d20ccf-24f3-4841-8532-22635d831135-1"><i class="fas fa-cat"></i>消费型</button></li><li class="tab"><button type="button" data-href="#10d20ccf-24f3-4841-8532-22635d831135-2"><i class="fas fa-horse"></i>断定型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="10d20ccf-24f3-4841-8532-22635d831135-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyTime</span><span class="params">(<span class="type">double</span> money, Consumer&lt;Double&gt; consumer)</span> &#123;</span><br><span class="line">    consumer.accept(money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    happyTime(<span class="number">1241</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;突然想回一趟成都了，机票花费&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式，将之前的6行代码压缩到了1行</span></span><br><span class="line">    happyTime(<span class="number">648</span>, money -&gt; System.out.println(<span class="string">&quot;学习太累了，奖励自己一发648，花费&quot;</span> + money));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">突然想回一趟成都了，机票花费1241.0</span></span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"><span class="comment">学习太累了，奖励自己一发648，花费648.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="10d20ccf-24f3-4841-8532-22635d831135-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; strings, Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(string))</span><br><span class="line">            res.add(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;东京&quot;</span>, <span class="string">&quot;西京&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;中京&quot;</span>);</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    List&lt;String&gt; list = filterString(string s, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 现在的写法，相比较之前的代码优雅了许多</span></span><br><span class="line">    List&lt;String&gt; res = filterString(string s, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[东京, 西京, 南京, 北京, 中京]</span></span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"><span class="comment">[东京, 西京, 南京, 北京, 中京]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="方法引用和构造器引用">方法引用和构造器引用</h2><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用可以看做会Lambda表达式的深层次表达，换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖</li><li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li><li>格式：使用操作符<code>::</code>将类或对象与方法名分割开来</li><li>有如下三种使用情况<ol><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ol></li></ul><hr><h3 id="方法引用">方法引用</h3><p>方法引用的使用</p><ol><li>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li><li>方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例。</li><li>使用格式： 类(或对象) :: 方法名</li><li>具体分为如下的三种情况：<ul><li>情况1：对象 :: 非静态方法</li><li>情况2：类 :: 静态方法</li><li>情况3：类 :: 非静态方法</li></ul></li><li>方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</li></ol><div class="tabs" id="5a1398c5-f32b-470b-81f3-16840cd41579"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-1"><i class="far fa-sun"></i>对象::非静态方法</button></li><li class="tab"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-2"><i class="fas fa-wind"></i>类::静态方法</button></li><li class="tab"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-3"><i class="fas fa-fire-alt"></i>类::实例方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5a1398c5-f32b-470b-81f3-16840cd41579-1"><p>抽象方法的<code>形参列表</code>和<code>返回值类型</code>与<code>方法引用</code>的方法的<code>形参列表</code>和返回值类型相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="comment">//形参列表均为(T t)，返回值均为void，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = s -&gt; System.out.println(s);</span><br><span class="line">    consumer01.accept(<span class="string">&quot;她的手只有我的手四分之三那麼大&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> System.out;</span><br><span class="line">    Consumer&lt;String&gt; consumer02 = printStream::println;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;可我還是沒能抓住&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 但貌似也可以这么写</span></span><br><span class="line">    Consumer&lt;String&gt; consumer03 = System.out::println;</span><br><span class="line">    consumer03.accept(<span class="string">&quot;花落下的时候没死 风捡起花 又丢下 花才死了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">她的手只有我的手四分之三那麼大</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">可我還是沒能抓住</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">花落下的时候没死 风捡起花 又丢下 花才死了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a1398c5-f32b-470b-81f3-16840cd41579-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//形参列表均为(T t1,T t2)，返回值均为int，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">20</span>, <span class="number">77</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = Integer::compare;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">94</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="comment">//返回值和参数列表为泛型，也可以匹配上，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Function&lt;Double,Long&gt; function01 = aDouble -&gt; Math.round(aDouble);</span><br><span class="line">    System.out.println(function01.apply(<span class="number">3.141</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Function&lt;Double,Long&gt; function02 = Math::round;</span><br><span class="line">    System.out.println(function02.apply(<span class="number">2.717</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a1398c5-f32b-470b-81f3-16840cd41579-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">94</span>, <span class="number">21</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = Integer::compareTo;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">43</span>, <span class="number">96</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    BiPredicate&lt;String,String&gt; biPredicate01 = (o1, o2) -&gt; o1.equals(o2);</span><br><span class="line">    System.out.println(biPredicate01.test(<span class="string">&quot;Kyle&quot;</span>, <span class="string">&quot;Kyle&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    BiPredicate&lt;String,String&gt; biPredicate02 = String::equals;</span><br><span class="line">    System.out.println(biPredicate02.test(<span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;Violet&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">----------------------------------</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String toString();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;Kyle&quot;</span>, <span class="number">9527</span>);</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Function&lt;Stu,String&gt; function01 = stu -&gt; stu.toString();</span><br><span class="line">    System.out.println(function01.apply(student));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Function&lt;Stu,String&gt; function02 = Stu::toString;</span><br><span class="line">    System.out.println(function02.apply(student));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="构造器引用和数组引用">构造器引用和数组引用</h3><ul><li>与函数式接口相结合，自动与函数式接口中方法兼容。</li><li>可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</li></ul><div class="tabs" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a1dd04d3-232a-4861-a5b8-a514f0e242d6-1"><i class="fas fa-atom"></i>构造器引用</button></li><li class="tab"><button type="button" data-href="#a1dd04d3-232a-4861-a5b8-a514f0e242d6-2"><i class="far fa-sun"></i>数组引用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6-1"><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    BiFunction&lt;String, Integer, Stu&gt; function01 = (string, integer) -&gt; <span class="keyword">new</span> <span class="title class_">Stu</span>(string, integer);</span><br><span class="line">    System.out.println(function01.apply(<span class="string">&quot;Kyle&quot;</span>, <span class="number">9527</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 构造器引用</span></span><br><span class="line">    BiFunction&lt;String, Integer, Stu&gt; function02 = Stu::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(function02.apply(<span class="string">&quot;Lucy&quot;</span>, <span class="number">9421</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Lucy&#x27;, id=9421&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6-2"><p>可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test13</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda 创建一个指定长度的string数组</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; function01 = (integer -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[integer]);</span><br><span class="line">    System.out.println(Arrays.toString(function01.apply(<span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 数组引用</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; function02 = String[]::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(Arrays.toString(function02.apply(<span class="number">7</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[null, null, null, null, null]</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">[null, null, null, null, null, null, null]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="强大的Stream-API⭐️">强大的Stream API⭐️</h2><h3 id="Stream-API概述">Stream API概述</h3><ul><li>Java8中有两个最为重要的改变，第一个就是Lambda表达式，另外一个则是Stream API</li><li>Stream API(java.util.stream)把真正的函数式编程风格引入到Java中，这是目前为止对Java类库最好的补充，因为Stream API可以极大地提高程序员生产力，让程序员写出高效、简介的代码</li><li>Stream是Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。</li><li>使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询，也可以使用Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式</li><li>为什么要使用Stream API<ul><li>实际开发中，项目中多数数据源都是来自MySQL、Oracle 等。但现在数据源可以更多了，有MongDB、Redis等，而这些NoSQL的数据就需要Java层面去处理。</li><li>Stream 和Collection集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算（这也就是为啥一旦执行终止操作之后，Stream 就不能被再次使用，得重新创建一个新的流才行）</li></ul></li></ul><blockquote><p>小结</p></blockquote><ol><li>Stream 关注的是对数据的运算，与CPU 打交道；<br>集合关注的是数据的存储，与内存打交道</li><li>Stream 自己不会存储数据；<br>Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream<br>Stream 操作是延迟执行的，这意味着他们会等到需要结果的时候才执行</li><li>Stream 执行流程<ul><li>Stream实例化</li><li>一系列中间操作（过滤、映射、…）</li><li>终止操作</li></ul></li><li>说明<ul><li>一系列中间操作连，对数据源的数据进行处理</li><li>一旦执行终止操作，就执行中间操作连，并产生结果，之后，不会再被使用</li></ul></li></ol><hr><h3 id="Stream的实例化">Stream的实例化</h3><div class="tabs" id="495d7dff-9394-4804-8bf5-e1083ed7e664"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-1"><i class="fas fa-award"></i>准备</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-2"><i class="fas fa-baseball-ball"></i>方式一</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-3"><i class="fas fa-bone"></i>方式二</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-4"><i class="fas fa-heartbeat"></i>方式三</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-5"><i class="fas fa-cookie-bite"></i>方式四</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="495d7dff-9394-4804-8bf5-e1083ed7e664-1"><p>假设有两个类</p><ul><li>Employee</li><li>EmployeeData</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-2"><p>通过集合创建Stream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test14</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; stream()  返回一个顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    <span class="comment">//default Stream&lt;E&gt; parallelStream  返回一个并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; employeeStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-3"><p>通过数组创建String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test15</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="comment">//调用Arrays的static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)   返回一个流</span></span><br><span class="line">    <span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line">    </span><br><span class="line">    <span class="type">Employee</span> <span class="variable">kyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>, <span class="string">&quot;Kyle&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9421</span>, <span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">    Employee[] employees = &#123;kyle, lucy&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(employees);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-4"><p>通过Stream的of()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test16</span><span class="params">()</span> &#123;</span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-5"><p>创建无限流</p><p>如果不用limit限制输出，则会一直输出下去，forEach就相当于是终止操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test17</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 迭代</span></span><br><span class="line">    <span class="comment">// 遍历前10个数</span></span><br><span class="line">    <span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成</span></span><br><span class="line">    <span class="comment">// 10个随机数</span></span><br><span class="line">    <span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="Stream的中间操作">Stream的中间操作</h3><div class="tabs" id="d3b0262c-b223-4bb1-b1a2-91366ab594fc"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d3b0262c-b223-4bb1-b1a2-91366ab594fc-1"><i class="fas fa-seedling"></i>筛选与切片</button></li><li class="tab"><button type="button" data-href="#d3b0262c-b223-4bb1-b1a2-91366ab594fc-2"><i class="fas fa-leaf"></i>映射</button></li><li class="tab"><button type="button" data-href="#d3b0262c-b223-4bb1-b1a2-91366ab594fc-3"><i class="fab fa-apple"></i>排序</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d3b0262c-b223-4bb1-b1a2-91366ab594fc-1"><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理，而在终止操作时一次性全部处理，称为<code>惰性求值</code></p><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">filter(Predicate p)</td><td style="text-align:center">接收Lambda ，从流中排除某些元素</td></tr><tr><td style="text-align:center">distinct()</td><td style="text-align:center">筛选，通过流所生成元素的hashCode() 和equals() 去除重复元素</td></tr><tr><td style="text-align:center">limit(long maxSize)</td><td style="text-align:center">截断流，使其元素不超过给定数量</td></tr><tr><td style="text-align:center">skip(long n)</td><td style="text-align:center">跳过元素，返回一个扔掉了前n 个元素的流。若流中元素不足n 个，则返回一个空流。与limit(n)互补</td></tr></tbody></table><div class="tabs" id="825df2d2-b66b-4271-bb30-790f58e7ac14"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#825df2d2-b66b-4271-bb30-790f58e7ac14-1"><i class="fas fa-bug"></i>filter</button></li><li class="tab"><button type="button" data-href="#825df2d2-b66b-4271-bb30-790f58e7ac14-2"><i class="fas fa-cannabis"></i>limit</button></li><li class="tab"><button type="button" data-href="#825df2d2-b66b-4271-bb30-790f58e7ac14-3"><i class="fas fa-candy-cane"></i>skip</button></li><li class="tab"><button type="button" data-href="#825df2d2-b66b-4271-bb30-790f58e7ac14-4"><i class="fas fa-child"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="825df2d2-b66b-4271-bb30-790f58e7ac14-1"><p>查询工资大于7000的员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">employees.stream().filter(employee -&gt; employee.getSalary() &gt; <span class="number">7000</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="825df2d2-b66b-4271-bb30-790f58e7ac14-2"><p>只输出3条员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">employees.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="825df2d2-b66b-4271-bb30-790f58e7ac14-3"><p>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">employees.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="825df2d2-b66b-4271-bb30-790f58e7ac14-4"><p>通过流所生成元素的 hashCode() 和 equals() 去除重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>, <span class="string">&quot;Kyle&quot;</span>, <span class="number">20</span>, <span class="number">9999</span>));</span><br><span class="line">employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>, <span class="string">&quot;Kyle&quot;</span>, <span class="number">20</span>, <span class="number">9999</span>));</span><br><span class="line">employees.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d3b0262c-b223-4bb1-b1a2-91366ab594fc-2"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">map(Function f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td style="text-align:center">mapToDouble(ToDoubleFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</td></tr><tr><td style="text-align:center">mapToInt(ToIntFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</td></tr><tr><td style="text-align:center">mapToLong(ToLongFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</td></tr><tr><td style="text-align:center">flatMap(Function f)</td><td style="text-align:center">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test19</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></span><br><span class="line">    <span class="comment">// 练习：将字符串转为大写并输出</span></span><br><span class="line">    strings.stream().map(s -&gt; s.toUpperCase()).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 练习：获取员工姓名长度大于3的员工的姓名。</span></span><br><span class="line">    <span class="comment">// 获取name流</span></span><br><span class="line">    employees.stream().map(Employee::getName).</span><br><span class="line">            <span class="comment">// 过滤出name长度 &gt; 3的</span></span><br><span class="line">                    filter(name -&gt; name.length() &gt; <span class="number">3</span>).</span><br><span class="line">            <span class="comment">// 遍历输出</span></span><br><span class="line">                    forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 练习：将字符串中的多个字符构成的集合转换为对应的Stream实例</span></span><br><span class="line">    strings.stream().map(LambdaTest::formStringToStream).</span><br><span class="line">            forEach(characterStream -&gt;</span><br><span class="line">            characterStream.forEach(System.out::println));</span><br><span class="line">    <span class="comment">// 使用flatMap(Function f)达到同样的效果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">    strings.stream().flatMap(LambdaTest::formStringToStream).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">formStringToStream</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AA</span></span><br><span class="line"><span class="comment">BB</span></span><br><span class="line"><span class="comment">CC</span></span><br><span class="line"><span class="comment">DD</span></span><br><span class="line"><span class="comment">--------------------------</span></span><br><span class="line"><span class="comment">比尔盖茨</span></span><br><span class="line"><span class="comment">扎克伯格</span></span><br><span class="line"><span class="comment">--------------------------</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">--------------------------</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">a</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">b</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">c</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment">d</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d3b0262c-b223-4bb1-b1a2-91366ab594fc-3"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">sorted()</td><td style="text-align:center">产生一个新流，其中按自然顺序排序</td></tr><tr><td style="text-align:center">sorted(Comparator com)</td><td style="text-align:center">产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><div class="tabs" id="f93dd61b-e0dd-4623-9b0b-663db8f61924"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f93dd61b-e0dd-4623-9b0b-663db8f61924-1"><i class="fas fa-cat"></i>自然排序</button></li><li class="tab"><button type="button" data-href="#f93dd61b-e0dd-4623-9b0b-663db8f61924-2"><i class="fas fa-horse"></i>比较器排序</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f93dd61b-e0dd-4623-9b0b-663db8f61924-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = Arrays.asList(<span class="number">13</span>, <span class="number">54</span>, <span class="number">97</span>, <span class="number">52</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">27</span>);</span><br><span class="line">nums.stream().sorted().forEach(System.out::println);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">13</span></span><br><span class="line"><span class="comment">27</span></span><br><span class="line"><span class="comment">43</span></span><br><span class="line"><span class="comment">52</span></span><br><span class="line"><span class="comment">54</span></span><br><span class="line"><span class="comment">64</span></span><br><span class="line"><span class="comment">97</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f93dd61b-e0dd-4623-9b0b-663db8f61924-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"></span><br><span class="line"><span class="comment">//定制排序，先按照年龄升序排，再按照工资降序排</span></span><br><span class="line">employees.stream().sorted((o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> Integer.compare(o1.getAge(), o2.getAge());</span><br><span class="line">    <span class="keyword">if</span> (compare != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> compare;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> -Double.compare(o1.getSalary(), o2.getSalary());</span><br><span class="line">&#125;).forEach(System.out::println);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Employee&#123;id=1002, name=&#x27;马云&#x27;, age=12, salary=9876.12&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1004, name=&#x27;雷军&#x27;, age=26, salary=7657.37&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1007, name=&#x27;任正非&#x27;, age=26, salary=4333.32&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1003, name=&#x27;刘强东&#x27;, age=33, salary=3000.82&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1001, name=&#x27;马化腾&#x27;, age=34, salary=6000.38&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1008, name=&#x27;扎克伯格&#x27;, age=35, salary=2500.32&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1006, name=&#x27;比尔盖茨&#x27;, age=42, salary=9500.43&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1005, name=&#x27;李彦宏&#x27;, age=65, salary=5555.32&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Stream的终止操作">Stream的终止操作</h3><div class="tabs" id="2f2c6303-0cfc-4618-b83c-5ae4ef119600"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2f2c6303-0cfc-4618-b83c-5ae4ef119600-1"><i class="fas fa-cat"></i>匹配与查找</button></li><li class="tab"><button type="button" data-href="#2f2c6303-0cfc-4618-b83c-5ae4ef119600-2"><i class="fas fa-horse"></i>归约</button></li><li class="tab"><button type="button" data-href="#2f2c6303-0cfc-4618-b83c-5ae4ef119600-3"><i class="fas fa-dove"></i>收集1</button></li><li class="tab"><button type="button" data-href="#2f2c6303-0cfc-4618-b83c-5ae4ef119600-4"><i class="fas fa-cookie-bite"></i>收集2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2f2c6303-0cfc-4618-b83c-5ae4ef119600-1"><ul><li>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是void 。</li><li>流进行了终止操作后，不能再次使用。</li></ul><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">allMatch(Predicate p)</td><td style="text-align:center">检查是否匹配所有元素</td></tr><tr><td style="text-align:center">anyMatch(Predicate p)</td><td style="text-align:center">检查是否至少匹配一个元素</td></tr><tr><td style="text-align:center">noneMatch(Predicate p)</td><td style="text-align:center">检查是否没有匹配所有元素</td></tr><tr><td style="text-align:center">findFirst()</td><td style="text-align:center">返回第一个元素</td></tr><tr><td style="text-align:center">findAny()</td><td style="text-align:center">返回当前流中的任意元素</td></tr><tr><td style="text-align:center">count()</td><td style="text-align:center">返回流中元素总数</td></tr><tr><td style="text-align:center">max(Comparator c)</td><td style="text-align:center">返回流中最大值</td></tr><tr><td style="text-align:center">min(Comparator c)</td><td style="text-align:center">返回流中最小值</td></tr><tr><td style="text-align:center">forEach(Consumer c)</td><td style="text-align:center">内部迭代(使用Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table><div class="tabs" id="4af6855a-8991-4e3b-a193-e90a459a705e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#4af6855a-8991-4e3b-a193-e90a459a705e-1"><i class="fas fa-cat"></i>测试方法</button></li><li class="tab"><button type="button" data-href="#4af6855a-8991-4e3b-a193-e90a459a705e-2"><i class="fas fa-horse"></i>输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="4af6855a-8991-4e3b-a193-e90a459a705e-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test21</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">// allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否所有的员工的工资是否都大于5000</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否所有的员工的工资是否都大于5000：&quot;</span>+employees.stream().allMatch(employee -&gt; employee.getSalary() &gt; <span class="number">5000</span>));</span><br><span class="line">    <span class="comment">// anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否存在员工年龄小于15</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否存在员工年龄小于15：&quot;</span>+employees.stream().anyMatch(employee -&gt; employee.getAge() &lt; <span class="number">15</span>));</span><br><span class="line">    <span class="comment">// noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class="line">    <span class="comment">// 练习：是否不存在员工姓“马”</span></span><br><span class="line">    System.out.println(<span class="string">&quot;是否不存在员工姓马：&quot;</span>+employees.stream().noneMatch(employee -&gt; employee.getName().startsWith(<span class="string">&quot;马&quot;</span>)));</span><br><span class="line">    <span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;返回第一个元素：&quot;</span>+employees.stream().findFirst());</span><br><span class="line">    <span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">    System.out.println(<span class="string">&quot;返回当前流中的任意元素&quot;</span>+employees.stream().findAny());</span><br><span class="line">    <span class="comment">//count——返回流中元素的总个数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;返回元素总数：&quot;</span>+employees.stream().count());</span><br><span class="line">    <span class="comment">//max(Comparator c)——返回流中最大值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;返回最高工资：&quot;</span>+employees.stream().map(Employee::getSalary).max(Double::compare));</span><br><span class="line">    <span class="comment">//min(Comparator c)——返回流中最小值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;返回最小年龄：&quot;</span>+employees.stream().map(Employee::getAge).min(Integer::compare));</span><br><span class="line">    <span class="comment">//forEach(Consumer c)——内部迭代</span></span><br><span class="line">    employees.stream().forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    <span class="comment">////使用集合的遍历操作</span></span><br><span class="line">    employees.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4af6855a-8991-4e3b-a193-e90a459a705e-2"><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">是否所有的员工的工资是否都大于<span class="number">5000</span><span class="built_in">：false</span></span><br><span class="line">是否存在员工年龄小于<span class="number">15</span><span class="built_in">：true</span></span><br><span class="line">是否不存在员工姓马<span class="built_in">：false</span></span><br><span class="line">返回第一个元素：Optional[Employee<span class="built_in">&#123;id</span>=<span class="number">1001</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;]</span><br><span class="line">返回当前流中的任意元素Optional[Employee<span class="built_in">&#123;id</span>=<span class="number">1001</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;]</span><br><span class="line">返回元素总数：<span class="number">8</span></span><br><span class="line">返回最高工资：Optional[<span class="number">9876.12</span>]</span><br><span class="line">返回最小年龄：Optional[<span class="number">12</span>]</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1001</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1002</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1003</span>,<span class="built_in"> name</span>=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1004</span>,<span class="built_in"> name</span>=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1005</span>,<span class="built_in"> name</span>=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1006</span>,<span class="built_in"> name</span>=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1007</span>,<span class="built_in"> name</span>=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1008</span>,<span class="built_in"> name</span>=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line">-------------</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1001</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马化腾&#x27;</span>, age=<span class="number">34</span>, salary=<span class="number">6000.38</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1002</span>,<span class="built_in"> name</span>=<span class="string">&#x27;马云&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">9876.12</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1003</span>,<span class="built_in"> name</span>=<span class="string">&#x27;刘强东&#x27;</span>, age=<span class="number">33</span>, salary=<span class="number">3000.82</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1004</span>,<span class="built_in"> name</span>=<span class="string">&#x27;雷军&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">7657.37</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1005</span>,<span class="built_in"> name</span>=<span class="string">&#x27;李彦宏&#x27;</span>, age=<span class="number">65</span>, salary=<span class="number">5555.32</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1006</span>,<span class="built_in"> name</span>=<span class="string">&#x27;比尔盖茨&#x27;</span>, age=<span class="number">42</span>, salary=<span class="number">9500.43</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1007</span>,<span class="built_in"> name</span>=<span class="string">&#x27;任正非&#x27;</span>, age=<span class="number">26</span>, salary=<span class="number">4333.32</span>&#125;</span><br><span class="line">Employee<span class="built_in">&#123;id</span>=<span class="number">1008</span>,<span class="built_in"> name</span>=<span class="string">&#x27;扎克伯格&#x27;</span>, age=<span class="number">35</span>, salary=<span class="number">2500.32</span>&#125;</span><br><span class="line">*/    </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2f2c6303-0cfc-4618-b83c-5ae4ef119600-2"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">reduce(T iden, BinaryOperator b)</td><td style="text-align:center">可以将流中元素反复结合起来，得到一个值。返回T</td></tr><tr><td style="text-align:center">reduce(BinaryOperator b)</td><td style="text-align:center">可以将流中元素反复结合起来，得到一个值。返回Optional</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test22</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; nums = Arrays.asList(<span class="number">13</span>, <span class="number">32</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">94</span>, <span class="number">20</span>, <span class="number">77</span>, <span class="number">21</span>, <span class="number">17</span>);</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">// reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">    <span class="comment">// 练习1：计算1-10的自然数的和</span></span><br><span class="line">    System.out.println(nums.stream().reduce(<span class="number">0</span>, Integer::sum));</span><br><span class="line">    <span class="comment">//reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line">    <span class="comment">// 练习2：计算公司所有员工工资总和</span></span><br><span class="line">    System.out.println(employees.stream().map(Employee::getSalary).reduce((o1, o2) -&gt; o1 + o2));</span><br><span class="line">    <span class="comment">// 别的写法，计算年龄总和</span></span><br><span class="line">    System.out.println(employees.stream().map(Employee::getAge).reduce(Integer::sum));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">328</span></span><br><span class="line"><span class="comment">Optional[48424.08]</span></span><br><span class="line"><span class="comment">Optional[273]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2f2c6303-0cfc-4618-b83c-5ae4ef119600-3"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">collect(Collector c)</td><td style="text-align:center">将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>方法测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test23</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// collect(Collector c)——将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span></span><br><span class="line">    <span class="comment">// 练习1：查找工资大于6000的员工，结果返回为一个List</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    List&lt;Employee&gt; list = employees.stream().filter(employee -&gt; employee.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">    <span class="comment">// 练习2：查找年龄大于20的员工，结果返回为一个List</span></span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>,<span class="string">&quot;Kyle&quot;</span>,<span class="number">21</span>,<span class="number">9999</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>,<span class="string">&quot;Kyle&quot;</span>,<span class="number">21</span>,<span class="number">9999</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>,<span class="string">&quot;Kyle&quot;</span>,<span class="number">21</span>,<span class="number">9999</span>));</span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">9527</span>,<span class="string">&quot;Kyle&quot;</span>,<span class="number">21</span>,<span class="number">9999</span>));</span><br><span class="line">    Set&lt;Employee&gt; set = employees.stream().filter(employee -&gt; employee.getAge() &gt; <span class="number">20</span>).collect(Collectors.toSet());</span><br><span class="line">    set.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Employee&#123;id=1001, name=&#x27;马化腾&#x27;, age=34, salary=6000.38&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1002, name=&#x27;马云&#x27;, age=12, salary=9876.12&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1004, name=&#x27;雷军&#x27;, age=26, salary=7657.37&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1006, name=&#x27;比尔盖茨&#x27;, age=42, salary=9500.43&#125;</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">Employee&#123;id=1001, name=&#x27;马化腾&#x27;, age=34, salary=6000.38&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1007, name=&#x27;任正非&#x27;, age=26, salary=4333.32&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1008, name=&#x27;扎克伯格&#x27;, age=35, salary=2500.32&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1006, name=&#x27;比尔盖茨&#x27;, age=42, salary=9500.43&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1005, name=&#x27;李彦宏&#x27;, age=65, salary=5555.32&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1003, name=&#x27;刘强东&#x27;, age=33, salary=3000.82&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=9527, name=&#x27;Kyle&#x27;, age=21, salary=9999.0&#125;</span></span><br><span class="line"><span class="comment">Employee&#123;id=1004, name=&#x27;雷军&#x27;, age=26, salary=7657.37&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2f2c6303-0cfc-4618-b83c-5ae4ef119600-4"><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到List、Set、Map)。</p><p>Collectors实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">Lambda表达式、函数式接口、Stream API</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://wuwawawa.github.io/posts/e85d694a.html"/>
    <id>https://wuwawawa.github.io/posts/e85d694a.html</id>
    <published>2023-05-10T05:04:05.000Z</published>
    <updated>2023-05-10T07:15:28.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="翻转二叉树">翻转二叉树</h2><div class="tag link"><a class="link-card" title="226. 翻转二叉树" href="https://leetcode.cn/problems/invert-binary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">226. 翻转二叉树</p><p class="url">https://leetcode.cn/problems/invert-binary-tree/</p></div></a></div><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" alt="img" style="zoom:67%;" /><p>递归三部曲</p><ol><li>确定递归函数的参数和返回值。</li><li>确定终止条件。当前节点为空的时候，就返回</li><li>确定单层递归的逻辑。因为是先前序遍历，所以先进行交换左右孩子节点，然后反转左子树，反转右子树。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归函数的终止条件，节点为空时返回</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面三句是将当前节点的左右子树交换</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> root.right;</span><br><span class="line">    root.right = root.left;</span><br><span class="line">    root.left = tmp;</span><br><span class="line">    <span class="comment">//递归交换当前节点的左子树</span></span><br><span class="line">    invertTree(root.left);</span><br><span class="line">    <span class="comment">//递归交换当前节点的 右子树</span></span><br><span class="line">    invertTree(root.right);</span><br><span class="line">    <span class="comment">//函数返回时就表示当前这个节点，以及它的左右子树</span></span><br><span class="line">    <span class="comment">//都已经交换完了</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="对称二叉树">对称二叉树</h2><div class="tag link"><a class="link-card" title="101. 对称二叉树" href="https://leetcode.cn/problems/symmetric-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">101. 对称二叉树</p><p class="url">https://leetcode.cn/problems/symmetric-tree/</p></div></a></div><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="img" style="zoom:67%;" /><p>递归三部曲</p><ol><li>确定递归函数的参数和返回值</li></ol><p>因为我们要比较的是根节点的两个子树是否是相互翻转的，进而判断这个树是不是对称树，所以要比较的是两个树，参数自然也是左子树节点和右子树节点。</p><p>返回值自然是bool类型。</p><ol start="2"><li>确定终止条件</li></ol><p>要比较两个节点数值相不相同，首先要把两个节点为空的情况弄清楚！否则后面比较数值的时候就会操作空指针了。</p><p>节点为空的情况有：（注意我们比较的其实不是左孩子和右孩子，所以如下我称之为左节点右节点）</p><ul><li>左节点为空，右节点不为空，不对称，return false</li><li>左不为空，右为空，不对称 return false</li><li>左右都为空，对称，返回true</li></ul><p>此时已经排除掉了节点为空的情况，那么剩下的就是左右节点不为空：</p><ul><li>左右都不为空，比较节点数值，不相同就return false</li></ul><p>此时左右节点不为空，且数值也不相同的情况我们也处理了。</p><ol start="3"><li>确定单层递归的逻辑</li></ol><p>此时才进入单层递归的逻辑，单层递归的逻辑就是处理 左右节点都不为空，且数值相同的情况。</p><ul><li>比较二叉树外侧是否对称：传入的是左节点的左孩子，右节点的右孩子。</li><li>比较内测是否对称，传入左节点的右孩子，右节点的左孩子。</li><li>如果左右都对称就返回true ，有一侧不对称就返回false 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用递归函数，比较左节点，右节点</span></span><br><span class="line">    <span class="keyword">return</span> dfs(root.left,root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left==<span class="literal">null</span> || right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left.val!=right.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(left.left,right.right)&amp;&amp;dfs(left.right,right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二叉树的最大深度">二叉树的最大深度</h2><div class="tag link"><a class="link-card" title="104. 二叉树的最大深度" href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">104. 二叉树的最大深度</p><p class="url">https://leetcode.cn/problems/maximum-depth-of-binary-tree/</p></div></a></div><div class="tag link"><a class="link-card" title="559. n叉树的最大深度" href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">559. n叉树的最大深度</p><p class="url">https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/</p></div></a></div><p>给定一个二叉树，找出其最大深度。</p><p><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">3</span></span><br><span class="line">  / <span class="string">\</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">20</span></span><br><span class="line"> /  <span class="string">\</span></span><br><span class="line"><span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><ol><li>确定递归函数的参数和返回值：参数就是传入树的根节点，返回就返回这棵树的深度，所以返回值为int类型。</li><li>确定终止条件：如果为空节点的话，就返回0，表示高度为0。</li><li>确定单层递归的逻辑：先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值再+1 （加1是因为算上当前中间节点）就是目前节点为根节点的树的深度。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">        <span class="type">int</span> rightDepth= maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth,rightDepth)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二叉树的最小深度">二叉树的最小深度</h2><p>给定一个二叉树，找出其最小深度。</p><p><strong>示例 1：</strong></p><img src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg" alt="img" style="zoom:67%;" /><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="平衡二叉树">平衡二叉树</h2><hr><hr><h2 id="二叉树的所有路径">二叉树的所有路径</h2><div class="tag link"><a class="link-card" title="257. 二叉树的所有路径" href="https://leetcode.cn/problems/binary-tree-paths/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">257. 二叉树的所有路径</p><p class="url">https://leetcode.cn/problems/binary-tree-paths/</p></div></a></div><p>给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。</p><p>叶子节点 是指没有子节点的节点。</p><img src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" alt="img" style="zoom:67%;" /><p>示例 1：</p><p>输入：root = [1,2,3,null,5]<br>输出：[“1-&gt;2-&gt;5”,“1-&gt;3”]</p><hr><hr><h2 id="⭐️找树左下角的值">⭐️找树左下角的值</h2><div class="tag link"><a class="link-card" title="513. 找树左下角的值" href="https://leetcode.cn/problems/find-bottom-left-tree-value/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">513. 找树左下角的值</p><p class="url">https://leetcode.cn/problems/find-bottom-left-tree-value/</p></div></a></div><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" alt="img" style="zoom:67%;" /><p>输出: 7</p><div class="tabs" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0e595ee9-d0e0-428a-b10c-1f89283cc4f9-1"><i class="fas fa-cat"></i>回溯写法</button></li><li class="tab"><button type="button" data-href="#0e595ee9-d0e0-428a-b10c-1f89283cc4f9-2"><i class="fas fa-horse"></i>精简回溯</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        traversal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left== <span class="literal">null</span> &amp;&amp; root .right ==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">                maxDepth=depth;</span><br><span class="line">                result=root.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            traversal(root.left,depth);</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            traversal(root.right,depth);</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9-2"><p>回溯逻辑其实就隐藏在<code>traversal(root.left,depth+1);</code>中的 <code>depth+1</code>。 每次函数调用完，depth依然是没有加上1的，这就是回溯了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    traversal(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root.left== <span class="literal">null</span> &amp;&amp; root .right ==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">            maxDepth=depth;</span><br><span class="line">            result=root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        traversal(root.left,depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        traversal(root.right,depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="左叶子之和">左叶子之和</h2><hr><hr><h2 id="路径总和">路径总和</h2><hr><hr><h2 id="根据序列构造二叉树">根据序列构造二叉树</h2><hr><hr><h2 id="最大二叉树">最大二叉树</h2>]]></content>
    
    
    <summary type="html">二叉树专题</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="递归" scheme="https://wuwawawa.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="回溯" scheme="https://wuwawawa.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootWeb开发</title>
    <link href="https://wuwawawa.github.io/posts/3fc60a15.html"/>
    <id>https://wuwawawa.github.io/posts/3fc60a15.html</id>
    <published>2023-05-04T07:21:40.000Z</published>
    <updated>2023-05-03T12:51:14.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-功能支持">1. 功能支持</h2><p>Spring Boot为Spring MVC提供了自动配置，大多场景都无需自定义配置</p><ul><li>内容协商视图解析器 ContentNegotiatingViewResolver 和 BeanName 视图解析器 BeanNameViewResolver</li><li>支持静态资源（包括 webjars）和静态 index.html 页支持</li><li>自动注册相关类：Converter、GenericConverter、Formatter</li><li>内容协商处理器：HttpMessageConverters</li><li>国际化：MessageCodesResolver</li></ul><p>开发规范：</p><ul><li>使用 <code>@Configuration</code> + <code>WebMvcConfigurer</code> 自定义规则，不使用 <code>@EnableWebMvc</code> 注解</li><li>声明 <code>WebMvcRegistrations</code> 的实现类改变默认底层组件</li><li>使用 <code>@EnableWebMvc</code> + <code>@Configuration</code> + <code>DelegatingWebMvcConfiguration</code> 全面接管 SpringMVC</li></ul><hr><h2 id="2-静态资源">2. 静态资源</h2><h3 id="2-1-访问规则">2.1 访问规则</h3><p>使用了Spring MVC中的<code>ResourceHttpRequestHandler</code></p><p>默认的静态资源路径是 classpath 下的，优先级由高到低为：</p><ul><li><code>/META-INF/resources</code></li><li><code>/resources</code></li><li><code>/static</code></li><li><code>/public</code></li></ul><p>的包内，<code>/</code> 表示当前项目的根路径</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230502154538517.png" alt="image-20230502154538517" style="zoom:50%;" /><p>请求方式： <code>/ + 静态资源名</code></p><p>处理原理：请求先去寻找 Controller 处理，不能处理的请求就会交给静态资源处理器，静态资源也找不到就响应 404 页面</p><div class="tabs" id="8c8c2f44-af52-4ecf-b88d-770f470b8a9e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8c8c2f44-af52-4ecf-b88d-770f470b8a9e-1"><i class="fas fa-cat"></i>修改默认资源路径</button></li><li class="tab"><button type="button" data-href="#8c8c2f44-af52-4ecf-b88d-770f470b8a9e-2"><i class="fas fa-horse"></i>修改静态资源访问前缀</button></li><li class="tab"><button type="button" data-href="#8c8c2f44-af52-4ecf-b88d-770f470b8a9e-3"><i class="fas fa-dove"></i>webjar访问资源</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8c8c2f44-af52-4ecf-b88d-770f470b8a9e-1"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">static-locations::</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><p>默认的静态资源路径将找不到了</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c8c2f44-af52-4ecf-b88d-770f470b8a9e-2"><p>默认是 <code>/**</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">static-path-pattern:</span> <span class="string">/resources/**</span></span><br></pre></td></tr></table></figure><p>访问 URL：<a href="http://localhost:8080/resources/">http://localhost:8080/resources/</a> + 静态资源名</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c8c2f44-af52-4ecf-b88d-770f470b8a9e-3"><p>把一些静态资源做成jar包，访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js%EF%BC%8C%E5%90%8E%E9%9D%A2%E5%9C%B0%E5%9D%80%E8%A6%81%E6%8C%89%E7%85%A7%E4%BE%9D%E8%B5%96%E9%87%8C%E9%9D%A2%E7%9A%84%E5%8C%85%E8%B7%AF%E5%BE%84">http://localhost:8080/webjars/jquery/3.5.1/jquery.js，后面地址要按照依赖里面的包路径</a></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230502155735696.png" alt="image-20230502155735696" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="2-2-欢迎页面">2.2 欢迎页面</h3><ul><li><p>静态资源路径下  index.html。</p><ul><li>可以配置静态资源路径</li><li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  mvc:</span></span><br><span class="line"><span class="comment">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">static-locations:</span> [<span class="string">classpath:/haha/</span>]</span><br></pre></td></tr></table></figure><ul><li>controller能处理/index。</li></ul><p>网页标签上的小图标可以自定义规则，把资源重命名为 favicon.ico 放在静态资源目录下即可</p><hr><h3 id="2-3-源码分析">2.3 源码分析</h3><ul><li>SpringBoot启动默认加载 xxxAutoConfiguration类（自动配置类）</li><li>SpringMVC功能的自动配置类<code>WebMvcAutoConfiguration</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="comment">//当前项目的根路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVLET_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="3b8ad86e-8e1b-4e01-a278-58bd0497dd4a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-1"><i class="fas fa-award"></i>内部类</button></li><li class="tab"><button type="button" data-href="#3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-2"><i class="fas fa-baseball-ball"></i>静态资源映射规则</button></li><li class="tab"><button type="button" data-href="#3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-3"><i class="fas fa-bone"></i>欢迎页</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-1"><p>内部类 WebMvcAutoConfigurationAdapter构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="comment">// 绑定 spring.mvc、spring.web、spring.resources 相关的配置属性</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class,ResourceProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware &#123;</span><br><span class="line"><span class="comment">//有参构造器所有参数的值都会从容器中确定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WebMvcAutoConfigurationAdapter</span><span class="params">(<span class="comment">/*参数*/</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.resourceProperties = resourceProperties.hasBeenCustomized() ? resourceProperties</span><br><span class="line">: webProperties.getResources();</span><br><span class="line"><span class="built_in">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="built_in">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="built_in">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="built_in">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="built_in">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line"><span class="built_in">this</span>.mvcProperties.checkConfiguration();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要的参数：</p><ul><li>ResourceProperties resourceProperties：获取和 spring.resources 绑定的所有的值的对象</li><li>WebMvcProperties mvcProperties：获取和 spring.mvc 绑定的所有的值的对象</li><li>ListableBeanFactory beanFactory：Spring 的 beanFactory</li><li>HttpMessageConverters：找到所有的 HttpMessageConverters</li><li>ResourceHandlerRegistrationCustomizer：找到 资源处理器的自定义器。</li><li>DispatcherServletPath：项目路径</li><li>ServletRegistrationBean：给应用注册 Servlet、Filter</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-2"><p>两种静态资源映射规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">//配置文件设置 spring.resources.add-mappings: false，禁用所有静态资源</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);<span class="comment">//被禁用</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册webjars静态资源的映射规则映射路径</span></span><br><span class="line">    addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    <span class="comment">//注册静态资源路径的映射规则 默认映射 staticPathPattern = &quot;/**&quot; </span></span><br><span class="line">    addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">        <span class="comment">//staticLocations = CLASSPATH_RESOURCE_LOCATIONS</span></span><br><span class="line">        registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.web&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebProperties</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Resources</span> &#123;</span><br><span class="line">    <span class="comment">//默认资源路径，优先级从高到低</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">                                                 <span class="string">&quot;classpath:/resources/&quot;</span>, </span><br><span class="line">                                                 <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;</span><br><span class="line">        <span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line">        <span class="comment">//可以进行规则重写</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStaticLocations</span><span class="params">(String[] staticLocations)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.staticLocations = appendSlashIfNecessary(staticLocations);</span><br><span class="line"><span class="built_in">this</span>.customized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3b8ad86e-8e1b-4e01-a278-58bd0497dd4a-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring.web 属性</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WelcomePageHandlerMapping <span class="title function_">welcomePageHandlerMapping</span><span class="params">(<span class="comment">/*参数*/</span>)</span> &#123;</span><br><span class="line">        <span class="type">WelcomePageHandlerMapping</span> <span class="variable">welcomePageHandlerMapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WelcomePageHandlerMapping</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TemplateAvailabilityProviders</span>(applicationContext), </span><br><span class="line">            applicationContext, getWelcomePage(),</span><br><span class="line">            <span class="comment">//staticPathPattern = &quot;/**&quot;</span></span><br><span class="line">            <span class="built_in">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">        <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">WelcomePageHandlerMapping(<span class="comment">/*参数*/</span>) &#123;</span><br><span class="line">    <span class="comment">//所以限制 staticPathPattern 必须为 /** 才能启用该功能</span></span><br><span class="line">    <span class="keyword">if</span> (welcomePage != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage);</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">        setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WelcomePageHandlerMapping，访问 / 能访问到 index.html</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="3-Rest映射">3. Rest映射</h2><p>开启 Rest 功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">hiddenmethod:</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span>   <span class="comment">#开启页面表单的Rest功能</span></span><br></pre></td></tr></table></figure><p>源码分析，注入了 HiddenHttpMethodFilte 解析 Rest 风格的访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;)</span></span><br><span class="line"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title function_">hiddenHttpMethodFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderedHiddenHttpMethodFilter</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-内嵌容器">4. 内嵌容器</h2><p>SpringBoot 嵌入式 Servlet 容器，默认支持的 WebServe：Tomcat、Jetty、Undertow</p><p>配置方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> <span class="comment">&lt;!--必须要把内嵌的 Tomcat 容器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web 应用启动，SpringBoot 导入 Web 场景包 tomcat，创建一个 Web 版的 IOC 容器：</p><ul><li><p><code>SpringApplication.run(BootApplication.class, args)</code>：应用启动</p></li><li><p><code>ConfigurableApplicationContext.run()</code>：</p><ul><li><p><code>context = createApplicationContext()</code>：<strong>创建容器</strong></p><ul><li><p><code>applicationContextFactory = ApplicationContextFactory.DEFAULT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContextFactory</span> <span class="variable">DEFAULT</span> <span class="operator">=</span> (webApplicationType) -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (webApplicationType) &#123;</span><br><span class="line">            <span class="keyword">case</span> SERVLET:</span><br><span class="line">                <span class="comment">// Servlet 容器，继承自 ServletWebServerApplicationContext</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigServletWebServerApplicationContext</span>();</span><br><span class="line">            <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                <span class="comment">// 响应式编程</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigReactiveWebServerApplicationContext</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// 普通 Spring 容器</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>applicationContextFactory.create(this.webApplicationType)</code>：根据应用类型创建容器</p></li></ul></li><li><p><code>refreshContext(context)</code>：容器启动刷新</p></li></ul></li></ul><p>内嵌容器工作流程：</p><ul><li><p>Spring 容器启动逻辑中，在实例化非懒加载的单例 Bean 之前有一个方法 <strong>onRefresh()</strong>，留给子类去扩展，Web 容器就是重写这个方法创建 WebServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//省略....</span></span><br><span class="line">createWebServer();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createWebServer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ServletWebServerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> getWebServerFactory();</span><br><span class="line">    <span class="built_in">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class="line">    createWebServer.end();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取 WebServer 工厂 ServletWebServerFactory，并且获取的数量不等于 1 会报错，Spring 底层有三种：</p><p><code>TomcatServletWebServerFactory</code>、<code>JettyServletWebServerFactory</code>、<code>UndertowServletWebServerFactory</code></p></li><li><p><strong>自动配置类 ServletWebServerFactoryAutoConfiguration</strong> 导入了 ServletWebServerFactoryConfiguration（配置类），根据条件装配判断系统中到底导入了哪个 Web 服务器的包，创建出服务器并启动</p></li><li><p>默认是 web-starter 导入 tomcat 包，容器中就有 TomcatServletWebServerFactory，创建出 Tomcat 服务器并启动，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TomcatWebServer</span><span class="params">(Tomcat tomcat, <span class="type">boolean</span> autoStart, Shutdown shutdown)</span> &#123;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">   initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化方法 initialize 中有启动方法：<code>this.tomcat.start()</code></p></li></ul><hr><hr><h2 id="5-自定义">5. 自定义</h2><h4 id="定制规则">定制规则</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="comment">//进行一些方法重写，来实现自定义的规则</span></span><br><span class="line">            <span class="comment">//比如添加一些解析器和拦截器，就是对原始容器功能的增加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//也可以不加 @Bean，直接从这里重写方法进行功能增加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="定制容器">定制容器</h4><p>@EnableWebMvc：全面接管 SpringMVC，所有规则全部自己重新配置</p><ul><li><p>@EnableWebMvc + WebMvcConfigurer + @Bean  全面接管SpringMVC</p></li><li><p>@Import(DelegatingWebMvcConfiguration.<strong>class</strong>)，该类继承 WebMvcConfigurationSupport，自动配置了一些非常底层的组件，只能保证 SpringMVC 最基本的使用</p></li></ul><p>原理：自动配置类 <strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效，WebMvcConfigurationSupport 类不能被加载，所以 @EnableWebMvc 导致配置类失效，从而接管了 SpringMVC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>注意：一般不适用此注解</p>]]></content>
    
    
    <summary type="html">SpringBoot web开发场景</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="SpringMVC" scheme="https://wuwawawa.github.io/tags/SpringMVC/"/>
    
    <category term="SpringBoot" scheme="https://wuwawawa.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自动配置原理</title>
    <link href="https://wuwawawa.github.io/posts/ec6e45b4.html"/>
    <id>https://wuwawawa.github.io/posts/ec6e45b4.html</id>
    <published>2023-05-03T14:26:54.000Z</published>
    <updated>2023-05-05T06:28:11.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-底层注解">1. 底层注解</h2><h3 id="1-1-组件添加">1.1 组件添加</h3><div class="tabs" id="ded05754-ee65-4d86-9ba1-c4e945edc966"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ded05754-ee65-4d86-9ba1-c4e945edc966-1"><i class="fas fa-atom"></i>Configuration</button></li><li class="tab"><button type="button" data-href="#ded05754-ee65-4d86-9ba1-c4e945edc966-2"><i class="far fa-sun"></i>Condition</button></li><li class="tab"><button type="button" data-href="#ded05754-ee65-4d86-9ba1-c4e945edc966-3"><i class="fas fa-wind"></i>其他</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ded05754-ee65-4d86-9ba1-c4e945edc966-1"><p>@Configuration：设置当前类为配置类</p><ul><li>proxyBeanMethods = true：Full 全模式，每个 @Bean 方法被调用多少次返回的组件都是单实例的，默认值，类组件之间<span class='p green'>有依赖关系</span>，方法会被调用得到之前单实例组件</li><li>proxyBeanMethods = false：Lite 轻量级模式，每个 @Bean 方法被调用多少次返回的组件都是新创建的，类组件之间<span class='p blue'>无依赖关系</span>用 Lite 模式加速容器启动过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的 id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ded05754-ee65-4d86-9ba1-c4e945edc966-2"><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><table><thead><tr><th style="text-align:left">注解</th><th style="text-align:left">功能说明</th></tr></thead><tbody><tr><td style="text-align:left">@ConditionalOnBean</td><td style="text-align:left">仅在当前上下文中存在某个bean时，才会实例化这个Bean</td></tr><tr><td style="text-align:left">@ConditionalOnClass</td><td style="text-align:left">某个class位于类路径上，才会实例化这个Bean</td></tr><tr><td style="text-align:left">@ConditionalOnExpression</td><td style="text-align:left">当表达式为true的时候，才会实例化这个Bean</td></tr><tr><td style="text-align:left">@ConditionalOnMissingBean</td><td style="text-align:left">仅在当前上下文中不存在某个bean时，才会实例化这个Bean</td></tr><tr><td style="text-align:left">@ConditionalOnMissingClass</td><td style="text-align:left">某个class在类路径上不存在的时候，才会实例化这个Bean</td></tr><tr><td style="text-align:left">@ConditionalOnNotWebApplication</td><td style="text-align:left">不是web应用时才会实例化这个Bean</td></tr><tr><td style="text-align:left">@AutoConfigureAfter</td><td style="text-align:left">在某个bean完成自动配置后实例化这个bean</td></tr><tr><td style="text-align:left">@AutoConfigureBefore</td><td style="text-align:left">在某个bean完成自动配置前实例化这个bean</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ded05754-ee65-4d86-9ba1-c4e945edc966-3"><p>@Bean、@Component、@Controller、@Service、@Repository和Spring中相同就不在介绍</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="1-2-原生配置文件引入">1.2 原生配置文件引入</h3><p>比如，公司使用bean.xml文件生成配置bean，然而你为了省事，想继续复用bean.xml，@ImportResource粉墨登场。</p><div class="tabs" id="b86eff17-ac9c-4c8c-86af-bc6296b6457e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b86eff17-ac9c-4c8c-86af-bc6296b6457e-1"><i class="fas fa-seedling"></i>bean.xml</button></li><li class="tab"><button type="button" data-href="#b86eff17-ac9c-4c8c-86af-bc6296b6457e-2"><i class="fas fa-leaf"></i>使用方法</button></li><li class="tab"><button type="button" data-href="#b86eff17-ac9c-4c8c-86af-bc6296b6457e-3"><i class="fab fa-apple"></i>测试类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b86eff17-ac9c-4c8c-86af-bc6296b6457e-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b86eff17-ac9c-4c8c-86af-bc6296b6457e-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b86eff17-ac9c-4c8c-86af-bc6296b6457e-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">haha</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">hehe</span> <span class="operator">=</span> run.containsBean(<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;haha：&quot;</span>+haha);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="string">&quot;hehe：&quot;</span>+hehe);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-3-配置绑定">1.3 配置绑定</h3><p>我们习惯于把经常变化的一个东西配到配置文件里面。比如把数据库的一些链接地址、账号、密码包括数据库连接池的大小等等这些属性配到properties配置文件里面，然后为了方便 , 因为我们未来可能要创建数据库连接池，我们会把这个配置文件里面的内容又一一解析到我们数据库连接池(比如javaBean我们这个对象里面)，所以我们这个实现场景就是把properties里面的所有配置绑定JavaBean里面。</p><div class="tabs" id="a3219530-2c0b-448a-a9a1-4dc2982e356b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a3219530-2c0b-448a-a9a1-4dc2982e356b-1"><i class="fas fa-cat"></i>JavaBean</button></li><li class="tab"><button type="button" data-href="#a3219530-2c0b-448a-a9a1-4dc2982e356b-2"><i class="fas fa-horse"></i>properties</button></li><li class="tab"><button type="button" data-href="#a3219530-2c0b-448a-a9a1-4dc2982e356b-3"><i class="fas fa-dove"></i>方式一</button></li><li class="tab"><button type="button" data-href="#a3219530-2c0b-448a-a9a1-4dc2982e356b-4"><i class="fas fa-dragon"></i>方式二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a3219530-2c0b-448a-a9a1-4dc2982e356b-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrand</span><span class="params">()</span>&#123;<span class="keyword">return</span> brand;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBrand</span><span class="params">(String brand)</span>&#123;<span class="built_in">this</span>.brand = brand;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPrice</span><span class="params">()</span>&#123;<span class="keyword">return</span> price;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Integer price)</span>&#123;<span class="built_in">this</span>.price = price;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> + </span><br><span class="line">                <span class="string">&quot;brand = &quot;</span> + brand + <span class="string">&#x27;\&#x27;&#x27;</span> + </span><br><span class="line">                <span class="string">&quot;, price = &quot;</span> + price + </span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a3219530-2c0b-448a-a9a1-4dc2982e356b-2"><p>假设有配置文件<code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mycar.brand</span>=<span class="string">BYD</span></span><br><span class="line"><span class="attr">mycar.price</span>=<span class="string">100000</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a3219530-2c0b-448a-a9a1-4dc2982e356b-3"><p><mark class="hl-label green">@ConfigurationProperties+@Component</mark></p><p>这种方式比较适用于一些自定义的配置</p><p>编写一个需要绑定属性的Car类,然后在Car上使用这两个注解，prefix的值与配置文件中的首个值对应（可随意命名）；只有将bean放入到Spring容器中，才能使用SpringBoot的强大工程，因为必须要使用@Component将其注入到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a3219530-2c0b-448a-a9a1-4dc2982e356b-4"><p><mark class="hl-label blue">@ConfigurationProperties+@EnableConfigurationProperties</mark></p><p>这种方式比较适用于引入第三方组件的时候，如果引入这个第三方组件并没有使用@Component注解将其注入到容器中</p><p>这种方式通常是借助与一个配置类来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(Car.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="2-装配原理">2. 装配原理</h2><p>自动装配，简单来说就是自动把第三方组件的Bean装载到Spring IOC器里面，不需要开发人员再去写Bean的装配配置。</p><p>在Spring Boot应用里面，只需要在启动类加上<code>@SpringBootApplication</code>注解就可以实现自动装配。<span class='p green'>@SpringBootApplication是一个复合注解，真正实现自动装配的注解是 @EnableAutoConfiguration。</span>自动装配的实现主要依靠三个核心关键技术。</p><ol><li><p>引入Starter启动依赖组件的时候，这个组件里面必须要包含<code>@Configuration配置类</code>，在这个配置类里面通过@Bean注解声明需要装配到IOC容器的Bean对象。</p></li><li><p>这个配置类是放在第三方的jar包里面，然后通过SpringBoot中的<code>约定优于配置思想</code>，把这个配置类的全路径放在<code>classpath:/META-INF/spring.factories</code>文件中。这样SpringBoot就可以知道第三方jar包里面的配置类的位置，这个步骤主要是用到了Spring里面的SpringFactoriesLoader来完成的。</p></li><li><p>SpringBoot拿到所第三方jar包里面声明的配置类以后，再通过Spring提供的<code>ImportSelector</code>接口，实现对这些配置类的动态加载。</p></li></ol><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501155237141.png" alt="image-20230501155237141" style="zoom:67%;" /><p><code>@SpringBootApplication</code>注解是 <code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合</p><h3 id="2-1-SpringBootConfiguration">2.1 @SpringBootConfiguration</h3><p>代表是一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line"><span class="meta">@AliasFor(annotation = Configuration.class)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-ComponentScan">2.2 @ComponentScan</h3><p>默认扫描当前类所在包及其子级包下的所有文件</p><p>在<code>ConfigurationClassParser#doProcessConfigurationClass</code>开始ComponentScan</p><p><code>Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =        this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</code></p><div class="tabs" id="657de342-5735-44c4-a46e-14abe8543c80"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#657de342-5735-44c4-a46e-14abe8543c80-1"><i class="fas fa-cat"></i>basePackages设置</button></li><li class="tab"><button type="button" data-href="#657de342-5735-44c4-a46e-14abe8543c80-2"><i class="fas fa-horse"></i>扫描位置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="657de342-5735-44c4-a46e-14abe8543c80-1"><p>查看源码<code>ComponentScanAnnotationParser#parse</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">&#125;</span><br><span class="line">  scanner.doScan(StringUtils.toStringArray(basePackages));</span><br></pre></td></tr></table></figure><p>basePackages设置的正是启动类</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501184021671.png" alt="image-20230501184021671" style="zoom:50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="657de342-5735-44c4-a46e-14abe8543c80-2"><p>查看源码<code>ClassPathScanningCandidateComponentProvider#scanCandidateComponents</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">packageSearchPath</span> <span class="operator">=</span> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">resolveBasePackage(basePackage) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">this</span>.resourcePattern;</span><br><span class="line">Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br></pre></td></tr></table></figure><p>packageSearchPath被设定为<code>&quot;classpath*:com/atguigu/boot/**/*.class&quot;</code>，启动类所在包及其子包</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>@ComponentScan和@EnableAutoConfiguration比较</p></blockquote><div class="tabs" id="7d3c7868-8dd3-400f-908b-d10e2e8e170b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7d3c7868-8dd3-400f-908b-d10e2e8e170b-1"><i class="fas fa-cat"></i>作用不同</button></li><li class="tab"><button type="button" data-href="#7d3c7868-8dd3-400f-908b-d10e2e8e170b-2"><i class="fas fa-horse"></i>扫描范围不同</button></li><li class="tab"><button type="button" data-href="#7d3c7868-8dd3-400f-908b-d10e2e8e170b-3"><i class="fas fa-dove"></i>扫描目的不同</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7d3c7868-8dd3-400f-908b-d10e2e8e170b-1"><ul><li>@ComponentScan注解用于指定要扫描的包及其子包中带有特定注解的类(@Controller,@Service,@Respority,@Component)，并将这些类注册到Spring的IOC容器中。</li><li>@EnableAutoConfiguration注解用于启用Spring Boot的自动配置功能，根据classpath下的jar包、配置文件等信息，自动配置应用程序所需的bean和其他组件。而spring.factories文件，则是用来记录项目包外需要注册的bean类名。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d3c7868-8dd3-400f-908b-d10e2e8e170b-2"><ul><li>@ComponentScan注解只扫描指定的包及其子包中带有特定注解的类，并将其注册到IOC容器中。</li><li>@EnableAutoConfiguration注解会扫描classpath下的所有jar包，并自动配置应用程序所需的bean和其他组件。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d3c7868-8dd3-400f-908b-d10e2e8e170b-3"><ul><li>@ComponentScan注解的目的是将指定的包及其子包中带有特定注解的类注册到IOC容器中。</li><li>@EnableAutoConfiguration注解的目的是根据应用程序的classpath、jar包和配置文件等信息，自动配置应用程序所需的bean和其他组件。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="2-3-SPI机制">2.3 SPI机制</h3><p>SPI：Service Provider Interface</p><p>服务提供者接口，学名为服务发现机制，它通过在ClassPath路径下的<code>META-INF/services</code>文件夹中查找文件，并自动加载文件里所定义的类。</p><blockquote><p>有什么用呢？不用行不行？到底用来解决什么问题？为何被吹捧的如此厉害？</p></blockquote><mark class="hl-label blue">列举这样一个场景：Java中连接数据库</mark> <div class="tabs" id="43c90029-eada-4f12-a525-da2ed38ed50b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#43c90029-eada-4f12-a525-da2ed38ed50b-1"><i class="fas fa-cat"></i>存在问题</button></li><li class="tab"><button type="button" data-href="#43c90029-eada-4f12-a525-da2ed38ed50b-2"><i class="fas fa-horse"></i>解决方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="43c90029-eada-4f12-a525-da2ed38ed50b-1"><p>在项目中我们通过JDBC，向数据库发送命令去执行，一般的做法是，先加载数据库驱动，然后通过driverManager对象获取connection连接对象，再创建Statement执行SQL语句，最后再处理结果集。而不同的数据库驱动由不同的数据库厂商提供，比如 MySQL驱动，Oracle驱动， SQL Server驱动或者一些其它驱动。但现在有一个问题是，java中提供的驱动是一个接口，而具体的实现类是由各个数据库厂商提供的，而接口是不可以进行实例化的，当你要实例化一个接口时必须得知道这个接口的全限定名。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501150254996.png" alt="image-20230501150254996" style="zoom: 60%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="43c90029-eada-4f12-a525-da2ed38ed50b-2"><p>其实需要解决的根本问题是：你得告诉我这个接口实现类的全限定名，然后就可以通过反射或者其它的方式，构造出这个接口的实例进而就可以调用具体的方法。</p><p>于是 java 开发者们想了这样一种方法，在项目下的 ClassPath目录中创建<code>META-INF/services</code>文件,并在这个里面创建以接口名为文件名以实现类全限定名为文件内容的文件,然后就可以通过IO获取到所有的全限定名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过IO获取到所有的全限定名</span></span><br><span class="line">List&lt;String&gt; calssNameList = IoUtil.spiLoad(Driver.class)；</span><br><span class="line"><span class="comment">//创建一个容器存储实例</span></span><br><span class="line">List&lt;Driver&gt; providers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//循环遍历，将class实例化，并添加到容器中</span></span><br><span class="line"><span class="keyword">for</span> (String className : calssNameList) &#123;</span><br><span class="line">    Class&lt;?&gt; c = Class.forName(className);</span><br><span class="line">    providers.add(c.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501151440654.png" alt="image-20230501151440654" style="zoom: 60%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>SPI这种方式就可以很好的解决不同框架之间的扩展问题。在<code>java.util.ServiceLoader#load(Class clazz)</code>完成了spi的实现，具体的思路跟上述流程类似。</p><mark class="hl-label green">SPI的变种：SpringBoot自动装配原理</mark> <div class="tabs" id="d2bb1a0b-4b17-4fe7-a714-daafc0259d37"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d2bb1a0b-4b17-4fe7-a714-daafc0259d37-1"><i class="fas fa-bug"></i>存在问题</button></li><li class="tab"><button type="button" data-href="#d2bb1a0b-4b17-4fe7-a714-daafc0259d37-2"><i class="fas fa-cannabis"></i>解决方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d2bb1a0b-4b17-4fe7-a714-daafc0259d37-1"><p>在一个SpringBoot项目中肯定会依赖一些其它框架，比如我们熟悉的mybatis-plus框架而StringBoot默认会将当前包及其子包下的bean注入到ioc中。但此时如果其它框架需要将bean注入到ioc中。因为包名是不想同的，所以不能通过扫描注入。而且在注入的过程中，要和项目尽可能的解耦。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501153354655.png" alt="image-20230501153354655" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d2bb1a0b-4b17-4fe7-a714-daafc0259d37-2"><p>为了解决这个问题，SpringBoot 参考了spi机制的设计思想：规定了在 classPath目录下<code>META-INF</code>文件中可以定义<code>spring.factories</code>的文件,在项目启动的时候会遍历所有jar包下的<code>spring.factories</code>文件,这样就可以将spring.factories文件中定义的类,加载到 ioc 中。</p><div class="fj-gallery"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501154019068.png" alt="image-20230501154019068" style="zoom:45%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230501154035913.png" alt="image-20230501154035913" style="zoom:45%;" />          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>总结</p><ol><li><p>SPI机制能够使接口与具体的实现类解耦，可以根据实际的业务情况启用或替换具体组件。</p></li><li><p>SPI机制为很多框架的扩展提供了可能。</p></li><li><p>SPI机制更多的是一种思想。</p></li></ol><hr><h3 id="2-4-EnableAutoConfiguration">2.4 @EnableAutoConfiguration</h3><p>启用 SpringBoot 的自动配置机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableAutoConfiguration</code>注解是 <code>@AutoConfigurationPackage</code>、<code>@Import(&#123;AutoConfigurationImportSelector.class&#125;)</code> 注解的集合</p><p><code>@AutoConfigurationPackage</code>注解的作用是将使用了@SpringBootApplication注解的类所在的包及其子包下的所有使用了@Configuration注解的类都纳入到Spring Boot自动配置的扫描范围内，从而让这些类的Bean定义能够被自动装配。</p><p>而<code>@Import(AutoConfigurationImportSelector.class)</code>注解的作用则是将Spring Boot默认的自动配置类引入到IOC容器中，这些自动配置类都是使用@Configuration注解标注的，通过自动扫描和条件化配置的方式，根据用户的配置和环境来选择性地将特定的Bean定义注入到IOC容器中，以满足应用程序的需求。</p><div class="tabs" id="a10aab32-5823-4cb0-a142-4f021b92d486"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a10aab32-5823-4cb0-a142-4f021b92d486-1"><i class="fas fa-bug"></i>AutoConfigurationPackage</button></li><li class="tab"><button type="button" data-href="#a10aab32-5823-4cb0-a142-4f021b92d486-2"><i class="fas fa-cannabis"></i>⭐️Import({AutoConfigurationImportSelector.class})</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a10aab32-5823-4cb0-a142-4f021b92d486-1"><p>标签名直译为：自动配置包，指定了默认的包规则。将指定的包名注册为Spring Boot自动配置的基本包，从而使Spring Boot自动配置功能能够扫描到这个包中的所有配置类。</p><p>为什么需要自动配置包呢？这是因为Spring Boot自动配置机制是通过在自动配置包及其子包中查找标注了@Configuration注解的类，并解析其中的@Bean注解来实现的。如果没有指定自动配置包，Spring Boot就无法确定应该在哪些包中查找自动配置类。而指定自动配置包，就可以让Spring Boot自动扫描指定包及其子包中的所有配置类，并对它们进行条件化装配，从而实现自动配置的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span><span class="comment">// 利用 Registrar 给容器中导入组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123; </span><br><span class="line">String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Registrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430162512630.png" alt="image-20230430162512630" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(BeanDefinitionRegistry registry, String... packageNames)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">BEAN</span> <span class="operator">=</span> AutoConfigurationPackages.class.getName();</span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(BEAN)) &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> registry.getBeanDefinition(BEAN);</span><br><span class="line">        <span class="type">ConstructorArgumentValues</span> <span class="variable">constructorArguments</span> <span class="operator">=</span> beanDefinition.getConstructorArgumentValues();</span><br><span class="line">        constructorArguments.addIndexedArgumentValue(<span class="number">0</span>, addBasePackages(constructorArguments, packageNames));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">GenericBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line">        beanDefinition.setBeanClass(AutoConfigurationPackages.BasePackages.class);</span><br><span class="line">        beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(<span class="number">0</span>, packageNames);</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        registry.registerBeanDefinition(BEAN, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过打断点得知，<code>packageNames</code>传的就是启动类所在的包名，然后这个方法就是判断容器是否注入了<code>BasePackagesBeanDefinition</code>。如果注入了就从容器获取，并将包名赋值给他的<code>basePackages</code>属性，然后执行这块的时候其实是并没有注册的，所以直接执行else。else就是直接创建一个<code>BasePackagesBeanDefinition</code>对象，然后将包名赋值给他的<code>basePackages</code>属性。</p><p><code>basePackages</code>是个set集合，但是容器当中始终只有一个<code>BasePackagesBeanDefinition</code>对象，也就是只要代码当中添加<code>@AutoConfigurationPackage</code>注解，就会将注解所在的包名添加到<code>basePackages</code>集合当中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a10aab32-5823-4cb0-a142-4f021b92d486-2"><p>AutoConfigurationImportSelector类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给容器中导入组件</span></span><br><span class="line">    <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title function_">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果自动配置没有启用，则返回空的AutoConfigurationEntry对象</span></span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取注解属性</span></span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> getAttributes(annotationMetadata);</span><br><span class="line">    <span class="comment">// 获取所有符合条件的自动配置类，并去除重复</span></span><br><span class="line">    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">    configurations = removeDuplicates(configurations);</span><br><span class="line">    <span class="comment">// 获取所有排除的自动配置类，并检查是否存在重复</span></span><br><span class="line">    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">    checkExcludedClasses(configurations, exclusions);</span><br><span class="line">    <span class="comment">// 从候选的自动配置类中移除所有排除的自动配置类，并过滤掉不符合条件的自动配置类</span></span><br><span class="line">    configurations.removeAll(exclusions);</span><br><span class="line">    configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">    <span class="comment">// 触发自动配置导入事件，通知所有自动配置导入监听器自动配置的情况</span></span><br><span class="line">    fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">    <span class="comment">// 创建并返回一个AutoConfigurationEntry对象，该对象包含应用的自动配置类和排除的自动配置类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、利用<code>getAutoConfigurationEntry(annotationMetadata);</code>给容器中批量导入一些组件<br>2、调用<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>获取到所有需要导入到容器中的配置类<br>3、利用工厂加载 <code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(@Nullable ClassLoader classLoader)；</code>得到所有的组件<br>4、从<code>META-INF/spring.factories</code>位置来加载一个文件。</p><p>默认扫描jar包里面所有META-INF/spring.factories位置的文件</p><p>spring-boot-autoconfigure-2.3.4.RELEASE.jar包里面也有META-INF/spring.factories，文件里面写死了spring-boot一启动就要给容器中加载的所有配置类</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" style="zoom:50%;" /><blockquote><p>筛选前size=130 vs筛选后size=26</p></blockquote><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430172712413.png" alt="image-20230430172712413" style="zoom: 25%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430172756327.png" alt="image-20230430172756327" style="zoom: 25%;" /><p>虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration<br>按照条件装配规则（@Conditional），最终会按需配置。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430174625456.png" alt="image-20230430174625456" style="zoom:50%;" /><ul><li></li></ul><p>以DispatcherServletAutoConfiguration为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span> <span class="comment">// 指定该自动配置类的顺序，优先级最高</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">// 声明该类是一个Spring配置类，不使用代理bean的方式</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span> <span class="comment">// 仅在Web应用程序中使用</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span> <span class="comment">// 仅当类路径中存在指定的类DispatcherServlet时才应用此配置类</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span> <span class="comment">// 在ServletWebServerFactoryAutoConfiguration自动配置之后应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="meta">@Conditional(org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line">    <span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean(name = &quot;dispatcherServlet&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">(WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个DispatcherServlet对象</span></span><br><span class="line">            <span class="type">DispatcherServlet</span> <span class="variable">dispatcherServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">            <span class="comment">// 配置DispatcherServlet属性</span></span><br><span class="line">            dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">            dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">            dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">            dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">            dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class="line">            <span class="keyword">return</span> dispatcherServlet; <span class="comment">// 返回DispatcherServlet对象</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="meta">@ConditionalOnBean(MultipartResolver.class)</span> <span class="comment">// 容器中有这个类型的组件</span></span><br><span class="line">        <span class="meta">@ConditionalOnMissingBean(name = &quot;multipartResolver&quot;)</span> <span class="comment">//容器中没有这个名字multipartResolver的组件  </span></span><br><span class="line">        <span class="keyword">public</span> MultipartResolver <span class="title function_">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> &#123;</span><br><span class="line">            <span class="comment">// 当容器中存在MultipartResolver对象且没有指定名字为DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME时，返回该对象</span></span><br><span class="line">            <span class="comment">// 主要用于检测用户是否已创建一个MultipartResolver但名称不正确</span></span><br><span class="line">            <span class="keyword">return</span> resolver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>Spring Boot 通过 <code>@EnableAutoConfiguration</code> 开启自动装配，通过 SpringFactoriesLoader 加载 <code>META-INF/spring.factories</code> 中的自动配置类实现自动装配，自动配置类其实就是通过 <code>@Conditional</code> 注解按需加载的配置类，想要其生效必须引入 <code>spring-boot-starter-xxx</code> 包实现起步依赖</p><ul><li>SpringBoot 先加载所有的自动配置类 xxxxxAutoConfiguration</li><li>每个自动配置类进行条件装配，默认都会绑定配置文件指定的值（xxxProperties 和配置文件进行了绑定）</li><li>SpringBoot 默认会在底层配好所有的组件，如果用户自己配置了以用户的优先</li><li>定制化配置：<ul><li>用户可以使用 @Bean 新建自己的组件来替换底层的组件</li><li>用户可以去看这个组件是获取的配置文件前缀值，在配置文件中修改</li></ul></li></ul><blockquote><p>如何查看自动配置了哪些</p></blockquote><p>application.properties中debug=true开启自动配置报告。可以显示哪些生效哪些没生效 Negative不生效\Positive生效</p><hr><hr><h2 id="3-启动流程">3. 启动流程</h2><p>如果想debug查看SpringBoot自动装配的流程，可以在下面方法打上断点</p><blockquote><ul><li><p>SpringApplication#refreshContext(context);</p></li><li><p>AbstractApplicationContext#invokeBeanFactoryPostProcessors(beanFactory);</p></li><li><p>PostProcessorRegistrationDelegate#invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</p></li><li><p>ConfigurationClassPostProcessor#processConfigBeanDefinitions(BeanDefinitionRegistry registry);</p><ul><li>parser.parse(candidates);<ul><li>this.deferredImportSelectorHandler.process();<ul><li>handler.processGroupImports(); 解析AutoConfigurationImportSelector.class</li></ul></li></ul></li><li>this.reader.loadBeanDefinitions(configClasses);</li></ul></li></ul></blockquote><p>应用启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BootApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动代码</span></span><br><span class="line">        SpringApplication.run(BootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SpringApplication 构造方法</code></p><ul><li><p><code>this.resourceLoader = resourceLoader</code>：资源加载器，初始为 null</p></li><li><p><code>this.webApplicationType = WebApplicationType.deduceFromClasspath()</code>：判断当前应用的类型，是响应式还是 Web 类</p></li><li><p><code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code></p><ul><li><p><code>Set&lt;String&gt; names = new LinkedHashSet&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));</code></p></li><li><p>导入<code>META-INF/spring.factories</code> ，并存入缓存，下面会用到</p></li></ul></li></ul><p><code>(new SpringApplication(primarySources)).run(args)</code></p><div class="tabs" id="9e15277e-9f6e-4253-b9c1-05e40b94a476"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9e15277e-9f6e-4253-b9c1-05e40b94a476-1"><i class="fas fa-cannabis"></i>1</button></li><li class="tab"><button type="button" data-href="#9e15277e-9f6e-4253-b9c1-05e40b94a476-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#9e15277e-9f6e-4253-b9c1-05e40b94a476-3"><i class="fas fa-tree"></i>4</button></li><li class="tab"><button type="button" data-href="#9e15277e-9f6e-4253-b9c1-05e40b94a476-4"><i class="fas fa-cookie-bite"></i>5⭐️</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9e15277e-9f6e-4253-b9c1-05e40b94a476-1"><p><mark class="hl-label blue">SpringApplication#run方法</mark></p><p>创建 IOC 容器并实现了自动装配</p><ul><li><p><code>StopWatch stopWatch = new StopWatch()</code>：停止监听器，<span class='p green'>监控整个应用的启停</span></p></li><li><p><code>stopWatch.start()</code>：记录应用的启动时间</p></li><li><p><code>printedBanner = printBanner(environment)</code>：打印 SpringBoot 标志</p></li><li><p><code>context = createApplicationContext()</code>：<span class='p red'>创建 IOC 容器</span></p><p><code>switch (this.webApplicationType)</code>：根据当前应用的类型创建 IOC 容器</p><ul><li><code>case SERVLET</code>：Web 应用环境对应 AnnotationConfigServletWebServerApplicationContext</li><li><code>case REACTIVE</code>：响应式编程对应 AnnotationConfigReactiveWebServerApplicationContext</li><li><code>default</code>：默认为 Spring 环境 AnnotationConfigApplicationContext</li></ul></li><li><p><code>context.setApplicationStartup(this.applicationStartup)</code>：设置一个启动器</p></li><li><p><code>prepareContext()</code>：<span class='p green'>配置 IOC 容器的基本信息</span></p><ul><li><code>beanFactory.registerSingleton(&quot;springBootBanner&quot;, printedBanner);</code>：向单例池中添加springBootBanner</li><li><code>load(context, sources.toArray(new Object[0]));</code>：向beanDefinitionMap添加启动类</li></ul></li><li><p><code>refreshContext(context)</code>：<span class='p green'>刷新 IOC 容器，Spring 的容器启动流程</span></p><ul><li><p><code>refresh(context);</code></p><ul><li><p><code>prepareRefresh();</code>：准备刷新应用上下文</p></li><li><p><code>prepareBeanFactory(beanFactory);</code>：设置一些BeanClassLoader和BeanPostProcessor</p></li><li><p><code>invokeBeanFactoryPostProcessors(beanFactory)</code>：实例化并调用所有注册的BeanFactoryPostProcessor bean，如果给定，则遵循显式顺序。<span class='p red'>在此处实现了自动装配</span>  <mark class="hl-label green">详见2</mark></p></li><li><p><code>registerBeanPostProcessors(beanFactory);</code>：向容器中添加BeanPostProcessor</p></li><li><p>…</p></li></ul></li></ul></li><li><p><code>afterRefresh(context, applicationArguments)</code>：留给用户自定义容器刷新完成后的处理逻辑</p></li><li><p><code>stopWatch.stop()</code>：记录应用启动完成的时间</p></li><li><p><code>listeners.started(context)</code>：所有的运行监听器调用 started() 方法</p></li><li><p><code>listeners.running(context)</code>：所有的运行监听器调用 running() 方法</p><ul><li>获取容器中的 ApplicationRunner、CommandLineRunner</li><li><code>AnnotationAwareOrderComparator.sort(runners)</code>：合并所有 runner 并且按照 @Order 进行排序</li><li><code>callRunner()</code>：遍历所有的 runner，调用 run 方法</li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9e15277e-9f6e-4253-b9c1-05e40b94a476-2"><p><mark class="hl-label blue">PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors方法</mark></p><p>//分为两类</p><ul><li><code>List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = new ArrayList&lt;&gt;();</code></li><li><code>List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = new ArrayList&lt;&gt;();</code></li></ul><br/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历所有的 BeanFactoryPostProcessor</span></span><br><span class="line"><span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">    <span class="comment">// 判断是否为 BeanDefinitionRegistryPostProcessor 类型</span></span><br><span class="line">    <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">        <span class="comment">// 将当前的 BeanFactoryPostProcessor 转换为 BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">        <span class="type">BeanDefinitionRegistryPostProcessor</span> <span class="variable">registryProcessor</span> <span class="operator">=</span></span><br><span class="line">            (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">        <span class="comment">// 调用 BeanDefinitionRegistryPostProcessor 的方法对 BeanDefinitionRegistry 进行处理</span></span><br><span class="line">        registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">        <span class="comment">// 将处理后的 BeanDefinitionRegistryPostProcessor 添加到 registryProcessors 集合中</span></span><br><span class="line">        registryProcessors.add(registryProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将普通的 BeanFactoryPostProcessor 添加到 regularPostProcessors 集合中</span></span><br><span class="line">        regularPostProcessors.add(postProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</p><ul><li><p><code>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</code></p><ul><li><p><code>currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</code><span class='p red'>getBean方法实例化BeanDefinitionRegistryPostProcessor</span></p></li><li><p><code>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</code></p><ul><li><span class='p red'>ConfigurationClassPostProcessor执行</span> <mark class="hl-label green">跳转到4</mark></li></ul></li></ul></li></ul><p>// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</p><p>// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9e15277e-9f6e-4253-b9c1-05e40b94a476-3"><p><mark class="hl-label blue">ConfigurationClassPostProcessor</mark></p><p>用来解析配置类，如果类上面加入了@Configuration，@CompentScan等，它就会你的这些配置解析出来</p><p>解析处理@PropertySource 注解<br>解析@ComponentScan注解,扫描@Configuration、@Service、@Controller、@Repository和@Component注解并注册BeanDefinition<br>解析@Import注解,然后进行实例化,并执行ImportBeanDefinitionRegistrar的registerBeanDefinitions逻辑,或者ImportSelector的selectImports逻辑<br>解析@ImportResource注解,并加载相关配置信息<br>解析方法级别@Bean注解并将返回值注册成BeanDefinition<br>注册ImportRegistry到容器中,用于处理ImportAware</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//获取bdmap所有的beanName</span></span><br><span class="line">String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有候选的 bean 名称</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">    <span class="comment">// 获取该 bean 的 BeanDefinition 对象</span></span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">beanDef</span> <span class="operator">=</span> registry.getBeanDefinition(beanName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断该 bean 是否已被标记为配置类</span></span><br><span class="line">    <span class="keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果已被标记，则在调试模式下记录日志信息</span></span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="built_in">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">        <span class="comment">// 如果该 bean 满足配置类的候选条件，则将其添加到配置类的候选集合中</span></span><br><span class="line">        configCandidates.add(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDef, beanName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断逻辑：checkConfigurationClassCandidate，判断完成后只有启动类被加入到了configCandidates集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从metadata中获取Confuguration注解</span></span><br><span class="line">Map&lt;String, Object&gt; config = metadata.getAnnotationAttributes(Configuration.class.getName());</span><br><span class="line"><span class="comment">// 根据metadata中的注解判断是full匹配还是lite匹配。</span></span><br><span class="line"><span class="keyword">if</span> (config != <span class="literal">null</span> &amp;&amp; !Boolean.FALSE.equals(config.get(<span class="string">&quot;proxyBeanMethods&quot;</span>))) &#123;</span><br><span class="line">    beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_FULL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (config != <span class="literal">null</span> || isConfigurationCandidate(metadata)) &#123;</span><br><span class="line">    beanDef.setAttribute(CONFIGURATION_CLASS_ATTRIBUTE, CONFIGURATION_CLASS_LITE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类解析的核心代码：遍历候选的 <code>BeanDefinition</code> 对象来解析 <code>@Configuration</code> 类，从而生成对应的 <code>BeanDefinition</code> 对象。在解析完一批候选的 <code>@Configuration</code> 类之后，会检查容器中是否还有新的候选 <code>@Configuration</code> 类需要解析，如果有，则会继续对新的候选 <code>@Configuration</code> 类进行解析，直到容器中没有新的候选 <code>@Configuration</code> 类为止。最终，容器中的所有 <code>@Configuration</code> 类都会被解析并转换为对应的 <code>BeanDefinition</code> 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 候选BeanDefinition的解析器</span></span><br><span class="line"><span class="type">ConfigurationClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationClassParser</span>(</span><br><span class="line">        <span class="built_in">this</span>.metadataReaderFactory, <span class="built_in">this</span>.problemReporter, <span class="built_in">this</span>.environment,</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"><span class="comment">// 需要解析的BeanDefinitionHolder容器，初始值为configCandidates</span></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(configCandidates);</span><br><span class="line"><span class="comment">// 已经解析过的ConfigurationClass容器</span></span><br><span class="line">Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(configCandidates.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 解析候选BeanDefinition中的@Configuration类</span></span><br><span class="line">    parser.parse(candidates);</span><br><span class="line">    <span class="comment">// 验证@Configuration类的依赖关系和重复导入</span></span><br><span class="line">    parser.validate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有被解析的@Configuration类</span></span><br><span class="line">    Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">    <span class="comment">// 从解析过的@Configuration类中剔除已经被处理过的</span></span><br><span class="line">    configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据@Configuration类的信息，读取其内容并创建BeanDefinition</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.reader == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reader = <span class="keyword">new</span> <span class="title class_">ConfigurationClassBeanDefinitionReader</span>(</span><br><span class="line">                registry, <span class="built_in">this</span>.sourceExtractor, <span class="built_in">this</span>.resourceLoader, <span class="built_in">this</span>.environment,</span><br><span class="line">                <span class="built_in">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// ⭐️⭐️⭐️ ③导入根据import解析出来的AutoConfiguration类中里面的bean</span></span><br><span class="line">    <span class="built_in">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line">    <span class="comment">// 将已经解析过的@Configuration类加入已处理集合</span></span><br><span class="line">    alreadyParsed.addAll(configClasses);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空当前的候选集合</span></span><br><span class="line">    candidates.clear();</span><br><span class="line">    <span class="comment">// 如果当前BeanDefinition数量大于候选集合中的数量，则需要重新扫描新的BeanDefinition</span></span><br><span class="line">    <span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line">        <span class="comment">// 更新候选BeanDefinition的名称集合</span></span><br><span class="line">        String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">        <span class="comment">// 将旧的候选名称集合转换为HashSet，便于查询</span></span><br><span class="line">        Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">        <span class="comment">// 将已经解析过的@Configuration类的名称加入Set集合</span></span><br><span class="line">        Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">            alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遍历所有新的候选名称</span></span><br><span class="line">        <span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line">            <span class="comment">// 如果该名称不在旧的候选名称中，则加入候选集合</span></span><br><span class="line">            <span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">                <span class="comment">// 获取该BeanDefinition对象</span></span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> registry.getBeanDefinition(candidateName);</span><br><span class="line">                <span class="comment">// 如果该BeanDefinition符合@Configuration类的条件，并且没有被解析过，则加入候选集合</span></span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="built_in">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">                        !alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">                    candidates.add(<span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(bd, candidateName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新候选名称集合</span></span><br><span class="line">        candidateNames = newCandidateNames;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (!candidates.isEmpty());</span><br></pre></td></tr></table></figure><p><code>parser.parse(candidates);</code>具体的解析过程核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历每一个候选的 BeanDefinitionHolder，对其进行解析</span></span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是否是 AnnotatedBeanDefinition 类型，如果是则解析注解元数据</span></span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 判断是否是 AbstractBeanDefinition 类型且已经设置 BeanClass，如果是则解析注解元数据</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 否则解析 BeanClassName 对应的类的注解元数据</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="comment">// 如果解析异常则直接抛出 BeanDefinitionStoreException</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="comment">// 如果解析异常则抛出 BeanDefinitionStoreException，给出失败的类名</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                    <span class="string">&quot;Failed to parse configuration class [&quot;</span> + bd.getBeanClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ⭐️⭐️⭐️②导入了需要解析的配置类 此处执行了AutoConfigurationImportSelector#process方法</span></span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doProcessConfigurationClass  <mark class="hl-label green">详见5</mark>   重点</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9e15277e-9f6e-4253-b9c1-05e40b94a476-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 ConfigurationClass 使用了 @Component 注解，则先递归处理所有嵌套类</span></span><br><span class="line"><span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;</span><br><span class="line">    processMemberClasses(configClass, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 @PropertySource 注解</span></span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">        sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">        org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">        processPropertySource(propertySource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                <span class="string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 @ComponentScan 注解  basePackages设置的正是启动类</span></span><br><span class="line">Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">        sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line"><span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">        !<span class="built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">        <span class="comment">// 如果当前配置类被 @ComponentScan 注解，则立即执行扫描</span></span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                <span class="built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">        <span class="comment">// 检查扫描到的 BeanDefinition 集合中是否有配置类，如果有则递归解析</span></span><br><span class="line">        <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">bdCand</span> <span class="operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">            <span class="keyword">if</span> (bdCand == <span class="literal">null</span>) &#123;</span><br><span class="line">                bdCand = holder.getBeanDefinition();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="built_in">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动类上两个import</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230502104957759.png" alt="image-20230502104957759"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①处理 @Import 注解</span></span><br><span class="line">processImports(configClass, sourceClass, getImports(sourceClass), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 @ImportResource 注解</span></span><br><span class="line"><span class="type">AnnotationAttributes</span> <span class="variable">importResource</span> <span class="operator">=</span></span><br><span class="line">        AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line"><span class="keyword">if</span> (importResource != <span class="literal">null</span>) &#123;</span><br><span class="line">    String[] resources = importResource.getStringArray(<span class="string">&quot;locations&quot;</span>);</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanDefinitionReader</span>&gt; readerClass = importResource.getClass(<span class="string">&quot;reader&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resolvedResource</span> <span class="operator">=</span> <span class="built_in">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">        configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 @Bean 方法</span></span><br><span class="line">Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line"><span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">    configClass.addBeanMethod(<span class="keyword">new</span> <span class="title class_">BeanMethod</span>(methodMetadata, configClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理接口中的默认方法</span></span><br><span class="line">processInterfaces(configClass, sourceClass);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="4-事件监听">4. 事件监听</h2><p>SpringBoot 在项目启动时，会对几个监听器进行回调，可以实现监听器接口，在项目启动时完成一些操作</p><p><code>ApplicationContextInitializer</code>、<code>SpringApplicationRunListener</code>、<code>CommandLineRunner</code>、<code>ApplicationRunner</code></p><div class="tabs" id="bf7c81bb-1e37-4601-af56-417721997df7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bf7c81bb-1e37-4601-af56-417721997df7-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#bf7c81bb-1e37-4601-af56-417721997df7-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#bf7c81bb-1e37-4601-af56-417721997df7-3"><i class="fas fa-dove"></i>3</button></li><li class="tab"><button type="button" data-href="#bf7c81bb-1e37-4601-af56-417721997df7-4"><i class="fas fa-dragon"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bf7c81bb-1e37-4601-af56-417721997df7-1"><p>MyApplicationRunner</p><p>自定义监听器的启动时机：MyApplicationRunner 和 MyCommandLineRunner 都是当项目启动后执行，使用 @Component 放入容器即可使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当项目启动后执行run方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner...run&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.asList(args.getSourceArgs()));<span class="comment">//properties配置信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bf7c81bb-1e37-4601-af56-417721997df7-2"><p>MyCommandLineRunner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner...run&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bf7c81bb-1e37-4601-af56-417721997df7-3"><p>MyApplicationContextInitializer 的启用要在 resource 文件夹下添加 META-INF/spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.context.ApplicationContextInitializer</span>=<span class="string">\</span></span><br><span class="line"><span class="string">com.example.springbootlistener.listener.MyApplicationContextInitializer</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextInitializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializer....initialize&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bf7c81bb-1e37-4601-af56-417721997df7-4"><p>MySpringApplicationRunListener 的使用要添加构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title class_">SpringApplicationRunListener</span> &#123;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MySpringApplicationRunListener</span><span class="params">(SpringApplication sa, String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;starting...项目启动中&quot;</span>);<span class="comment">//输出SPRING之前</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;environmentPrepared...环境对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPrepared...上下文对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextLoaded...上下文对象开始加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">started</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;started...上下文对象加载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">running</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running...项目启动完成，开始运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;failed...项目启动失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="5-配置文件">5. 配置文件</h2><p>SpringBoot 是基于约定的，很多配置都有默认值，如果想使用自己的配置替换默认配置，可以使用application.properties或者 application.yml（application.yaml）进行配置</p><ul><li>默认配置文件名称：application</li><li>在同一级目录下优先级为：properties &gt; yml &gt; yaml</li></ul><h3 id="4-1-yaml语法">4.1 yaml语法</h3><p>基本语法：</p><ul><li><p>大小写敏感</p></li><li><p>数据值前边必须有空格，作为分隔符</p></li><li><p>使用缩进表示层级关系</p></li><li><p>缩进时不允许使用Tab键，只允许使用空格（各个系统 Tab对应空格数目可能不同，导致层次混乱）</p></li><li><p>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</p></li><li><p>‘’#&quot; 表示注释，从这个字符一直到行尾，都会被解析器忽略</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">port:</span> <span class="number">8080</span>  </span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li></ul><p>数据格式：</p><div class="tabs" id="8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-1"><i class="fas fa-award"></i>纯量</button></li><li class="tab"><button type="button" data-href="#8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-2"><i class="fas fa-baseball-ball"></i>对象</button></li><li class="tab"><button type="button" data-href="#8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-3"><i class="fas fa-bone"></i>数组</button></li><li class="tab"><button type="button" data-href="#8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-4"><i class="fas fa-anchor"></i>参数引用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-1"><p>单个的、不可再分的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span>  <span class="comment"># 单引忽略转义字符</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n world&quot;</span>  <span class="comment"># 双引识别转义字符</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-2"><p>键值对集合，Map、Hash</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span>  </span><br><span class="line">   <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">   <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>&#125;</span><br></pre></td></tr></table></figure><p>注意：不建议使用 JSON，应该使用 yaml 语法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-3"><p>一组按次序排列的值，List、Array</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">address:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">allPerson</span><span class="comment">#List&lt;Person&gt;</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="string">name:lisi</span>, <span class="string">age:18</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="string">name:wangwu</span>, <span class="string">age:20</span>&#125;</span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">allPerson:</span> [&#123;<span class="string">name:lisi</span>, <span class="string">age:18</span>&#125;, &#123;<span class="string">name:wangwu</span>, <span class="string">age:20</span>&#125;]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c706fa9-4b8b-4bfb-aac6-92a8c17c7be7-4"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span> </span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span> <span class="comment"># 引用上边定义的name值</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="4-2-获取配置">4.2 获取配置</h3><p>三种获取配置文件的方式：</p><div class="tabs" id="2db43a24-e20c-4b2a-aa39-fd15c4f39ae0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-3"><i class="fab fa-apple"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-1"><p>注解 @Value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;address[0]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;msg1&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;msg2&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String msg2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;所有的数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot; hello Spring Boot !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-2"><p>Evironment 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;person.name&quot;</span>));</span><br><span class="line">    System.out.println(env.getProperty(<span class="string">&quot;address[0]&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; hello Spring Boot !&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2db43a24-e20c-4b2a-aa39-fd15c4f39ae0-3"><p>注解 @ConfigurationProperties 配合 @Component 使用</p><p>注意：参数 prefix 一定要指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//不扫描该组件到容器内，无法完成自动装配</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String[] address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    <span class="comment">//Person&#123;name=&#x27;zhangsan&#x27;, age=20, address=[beijing, shanghai]&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; hello Spring Boot !&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="6-自定义Starter">6. 自定义Starter</h2><p>spring boot 在配置上相比spring要简单许多, 其核心在于spring-boot-starter, 在使用spring boot来搭建一个项目时, 只需要引入官方提供的starter, 就可以直接使用, 免去了各种配置。starter简单来讲就是引入了一些相关依赖和一些初始化的配置。</p><h3 id="6-1-案例一">6.1 案例一</h3><mark class="hl-label blue">开发starter</mark> <div class="tabs" id="f449984b-9e18-4b00-b258-d815a8483b62"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f449984b-9e18-4b00-b258-d815a8483b62-1"><i class="fas fa-seedling"></i>第一步</button></li><li class="tab"><button type="button" data-href="#f449984b-9e18-4b00-b258-d815a8483b62-2"><i class="fas fa-leaf"></i>第二步</button></li><li class="tab"><button type="button" data-href="#f449984b-9e18-4b00-b258-d815a8483b62-3"><i class="fab fa-apple"></i>第三步</button></li><li class="tab"><button type="button" data-href="#f449984b-9e18-4b00-b258-d815a8483b62-4"><i class="fas fa-tree"></i>第四步</button></li><li class="tab"><button type="button" data-href="#f449984b-9e18-4b00-b258-d815a8483b62-5"><i class="fas fa-heartbeat"></i>第五步</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f449984b-9e18-4b00-b258-d815a8483b62-1"><p>创建starter工程hello-spring-boot-starter并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="string"><span class="tag">                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f449984b-9e18-4b00-b258-d815a8483b62-2"><p>创建配置属性类HelloProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *读取配置文件转换为bean</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HelloProperties&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f449984b-9e18-4b00-b258-d815a8483b62-3"><p>创建服务类HelloService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloService</span><span class="params">(String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好！我的名字叫 &quot;</span> + name + <span class="string">&quot;，我来自 &quot;</span> + address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f449984b-9e18-4b00-b258-d815a8483b62-4"><p>创建自动配置类HelloServiceAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 配置类，基于Java代码的bean配置</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造方法注入配置属性对象HelloProperties</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloServiceAutoConfiguration</span><span class="params">(HelloProperties helloProperties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化HelloService并载入Spring IoC容器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> HelloService <span class="title function_">helloService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloService</span>(helloProperties.getName(),helloProperties.getAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f449984b-9e18-4b00-b258-d815a8483b62-5"><p>在resources目录下创建META-INF/spring.factories</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">cn.itcast.config.HelloServiceAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>至此starter已经开发完成了，可以将当前starter安装到本地maven仓库供其他应用来使用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">使用starter</mark> <div class="tabs" id="dd433e8a-b1b4-46a3-8443-6088615e447a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dd433e8a-b1b4-46a3-8443-6088615e447a-1"><i class="fas fa-cat"></i>第一步</button></li><li class="tab"><button type="button" data-href="#dd433e8a-b1b4-46a3-8443-6088615e447a-2"><i class="fas fa-horse"></i>第二步</button></li><li class="tab"><button type="button" data-href="#dd433e8a-b1b4-46a3-8443-6088615e447a-3"><i class="fas fa-dove"></i>第三步</button></li><li class="tab"><button type="button" data-href="#dd433e8a-b1b4-46a3-8443-6088615e447a-4"><i class="fas fa-dragon"></i>第四步</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dd433e8a-b1b4-46a3-8443-6088615e447a-1"><p>创建maven工程myapp并配置pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导入自定义starter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dd433e8a-b1b4-46a3-8443-6088615e447a-2"><p>创建application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">hello:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xiaoming</span></span><br><span class="line">  <span class="attr">address:</span> <span class="string">beijing</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dd433e8a-b1b4-46a3-8443-6088615e447a-3"><p>创建HelloController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//HelloService在我们自定义的starter中已经完成了自动配置，所以此处可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dd433e8a-b1b4-46a3-8443-6088615e447a-4"><p>创建启动类HelloApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行启动类main方法，访问地址http://localhost:8080/hello/say</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20200310103528648.png" alt="image-20200310103528648"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="6-2-案例二">6.2 案例二</h3><p>在前面的案例一中我们通过定义starter，自动配置了一个HelloService实例。本案例我们需要通过自动配置来创建一个拦截器对象，通过此拦截器对象来实现记录日志功能。我们可以在案例一的基础上继续开发案例二。</p><mark class="hl-label blue">开发starter</mark> <div class="tabs" id="421b7b5d-e977-4116-b671-5a181d0ca04c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#421b7b5d-e977-4116-b671-5a181d0ca04c-1"><i class="fas fa-atom"></i>第一步</button></li><li class="tab"><button type="button" data-href="#421b7b5d-e977-4116-b671-5a181d0ca04c-2"><i class="far fa-sun"></i>第二步</button></li><li class="tab"><button type="button" data-href="#421b7b5d-e977-4116-b671-5a181d0ca04c-3"><i class="fas fa-wind"></i>第三步</button></li><li class="tab"><button type="button" data-href="#421b7b5d-e977-4116-b671-5a181d0ca04c-4"><i class="fas fa-fire-alt"></i>第四步</button></li><li class="tab"><button type="button" data-href="#421b7b5d-e977-4116-b671-5a181d0ca04c-5"><i class="fas fa-cookie-bite"></i>第五步</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="421b7b5d-e977-4116-b671-5a181d0ca04c-1"><p>在hello-spring-boot-starter的pom.xml文件中追加如下maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="421b7b5d-e977-4116-b671-5a181d0ca04c-2"><p>自定义MyLog注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">desc</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="421b7b5d-e977-4116-b671-5a181d0ca04c-3"><p>自定义日志拦截器MyLogInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Long&gt; startTimeThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, </span></span><br><span class="line"><span class="params">                             Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();<span class="comment">//获得被拦截的方法对象</span></span><br><span class="line">        <span class="type">MyLog</span> <span class="variable">myLog</span> <span class="operator">=</span> method.getAnnotation(MyLog.class);<span class="comment">//获得方法上的注解</span></span><br><span class="line">        <span class="keyword">if</span>(myLog != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//方法上加了MyLog注解，需要进行日志记录</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            startTimeThreadLocal.set(startTime);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, </span></span><br><span class="line"><span class="params">                           Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod)handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();<span class="comment">//获得被拦截的方法对象</span></span><br><span class="line">        <span class="type">MyLog</span> <span class="variable">myLog</span> <span class="operator">=</span> method.getAnnotation(MyLog.class);<span class="comment">//获得方法上的注解</span></span><br><span class="line">        <span class="keyword">if</span>(myLog != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//方法上加了MyLog注解，需要进行日志记录</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> startTimeThreadLocal.get();</span><br><span class="line">            <span class="type">long</span> <span class="variable">optTime</span> <span class="operator">=</span> endTime - startTime;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">requestUri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getDeclaringClass().getName() + <span class="string">&quot;.&quot;</span> + </span><br><span class="line">                method.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">methodDesc</span> <span class="operator">=</span> myLog.desc();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请求uri：&quot;</span> + requestUri);</span><br><span class="line">            System.out.println(<span class="string">&quot;请求方法名：&quot;</span> + methodName);</span><br><span class="line">            System.out.println(<span class="string">&quot;方法描述：&quot;</span> + methodDesc);</span><br><span class="line">            System.out.println(<span class="string">&quot;方法执行时间：&quot;</span> + optTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="421b7b5d-e977-4116-b671-5a181d0ca04c-4"><p>创建自动配置类MyLogAutoConfiguration，用于自动配置拦截器、参数解析器等web组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.log.MyLogInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，用于自动配置拦截器、参数解析器等web组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogAutoConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line">    <span class="comment">//注册自定义日志拦截器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyLogInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="421b7b5d-e977-4116-b671-5a181d0ca04c-5"><p>在spring.factories中追加MyLogAutoConfiguration配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">cn.itcast.config.HelloServiceAutoConfiguration,\</span></span><br><span class="line"><span class="string">cn.itcast.config.MyLogAutoConfiguration</span></span><br></pre></td></tr></table></figure><p>注意：我们在hello-spring-boot-starter中追加了新的内容，需要重新打包安装到maven仓库。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <mark class="hl-label green">使用starter</mark> <p>在myapp工程的Controller方法上加入@MyLog注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.log.MyLog;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">//HelloService在我们自定义的starter中已经完成了自动配置，所以此处可以直接注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyLog(desc = &quot;sayHello方法&quot;)</span> <span class="comment">//日志记录注解</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:8080/hello/say%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%EF%BC%9A">http://localhost:8080/hello/say，查看控制台输出：</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">请求uri：/hello/say</span></span><br><span class="line"><span class="attr">请求方法名：cn.itcast.controller.HelloController.sayHello</span></span><br><span class="line"><span class="attr">方法描述：sayHello方法</span></span><br><span class="line"><span class="attr">方法执行时间：36ms</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">自动装配流程详解、自定义Starter</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://wuwawawa.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot概述</title>
    <link href="https://wuwawawa.github.io/posts/4e03c5a1.html"/>
    <id>https://wuwawawa.github.io/posts/4e03c5a1.html</id>
    <published>2023-05-02T10:30:30.000Z</published>
    <updated>2023-05-02T07:13:40.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-Boot概述">1. Spring Boot概述</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的创建、运行、调试、部署等。使用Spring Boot可以做到专注于Spring应用的开发，而无需过多关注XML的配置。Spring Boot使用“约定大于配置”的理念，简单来说，它提供了一堆依赖打包，并已经按照使用习惯解决了依赖问题。使用Spring Boot可以不用或者只需要很少的Spring配置就可以让企业项目快速运行起来。</p><p>Spring Boot是开发者和Spring 本身框架的中间层，帮助开发者统筹管理应用的配置，提供基于实际开发中常见配置的默认处理（<span class='p red'>约定大于配置</span>），简化应用的开发，简化应用的运维；总的来说，其目的Spring Boot就是为了对Java web 的开发进行“简化”和加“快”速度，简化开发过程中引入或启动相关Spring 功能的配置。这样带来的好处就是降低开发人员对于框架的关注点，可以把更多的精力放在自己的业务代码上。</p><hr><hr><h2 id="2-为什么使用SpringBoot">2. 为什么使用SpringBoot</h2><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.</p><p>能快速创建出生产级别的Spring应用</p></blockquote><h3 id="2-1-SpringBoot优点">2.1. SpringBoot优点</h3><ol><li>独立运行的 Spring 项目</li></ol><p>Spring Boot 可以以 jar 包的形式独立运行，Spring Boot 项目只需通过命令“ java–jar xx.jar” 即可运行。</p><ol start="2"><li>内嵌 Servlet 容器</li></ol><p>Spring Boot 使用嵌入式的 Servlet 容器（例如 Tomcat、Jetty 或者 Undertow 等），应用无需打成 WAR 包 。</p><ol start="3"><li>提供 starter 简化 Maven 配置</li></ol><p>Spring Boot 提供了一系列的“starter”项目对象模型（POMS）来简化 Maven 配置。</p><ol start="4"><li>提供了大量的自动配置</li></ol><p>Spring Boot 提供了大量的默认自动配置，来简化项目的开发，开发人员也通过配置文件修改默认配置。</p><ol start="5"><li>自带应用监控</li></ol><p>Spring Boot 可以对正在运行的项目提供监控。</p><ol start="6"><li>无代码生成和 xml 配置</li></ol><p>Spring Boot 不需要任何 xml 配置即可实现 Spring 的所有配置。</p><blockquote><p>SpringBoot是整合Spring技术栈的一站式框架。SpringBoot是简化Spring技术栈的快速开发脚手架</p></blockquote><h3 id="2-2-SpringBoot缺点">2.2. SpringBoot缺点</h3><ul><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul><hr><hr><h2 id="3-SpringBoot入门案例">3. SpringBoot入门案例</h2><div class="tabs" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-1"><i class="fas fa-seedling"></i>导入依赖</button></li><li class="tab"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-2"><i class="fas fa-leaf"></i>创建主程序</button></li><li class="tab"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-3"><i class="fab fa-apple"></i>编写业务</button></li><li class="tab"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-4"><i class="fas fa-tree"></i>设置配置</button></li><li class="tab"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-5"><i class="fas fa-heartbeat"></i>运行&测试</button></li><li class="tab"><button type="button" data-href="#af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-6"><i class="fas fa-cookie-bite"></i>打包部署</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-4"><p>maven工程的resource文件夹中创建application.properties文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/2.3.7.RELEASE/reference/html/appendix-application-properties.html#common-application-properties-server">更多配置信息</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-5"><ul><li>运行<code>MainApplication</code>类</li><li>浏览器输入<code>http://localhost:8888/hello</code>，将会输出<code>Hello, Spring Boot!</code>。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af6bffe9-6ec7-427e-ab96-5aa3b94e35fb-6"><p>在pom.xml添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在IDEA的Maven插件上点击运行 clean 、package，把helloworld工程项目的打包成jar包，</p><p>打包好的jar包被生成在helloworld工程项目的target文件夹内。</p><p>用cmd运行<code>java -jar boot-01-helloworld-1.0-SNAPSHOT.jar</code>，既可以运行helloworld工程项目。</p><p>将jar包直接在目标服务器执行即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="4-SpringBoot依赖管理特性">4. SpringBoot依赖管理特性</h2><blockquote><p>父项目做依赖管理</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面项目的父项目如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它几乎声明了所有开发中常用的依赖的版本号，自动版本仲裁机制</p><blockquote><p>开发导入starter场景启动器</p></blockquote><ol><li>见到很多 spring-boot-starter-* ： *就某种场景</li><li>只要引入starter，这个场景的所有常规需要的依赖我们都自动引入</li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">更多SpringBoot所有支持的场景</a></li><li>见到的  *-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。</li></ol><mark class="hl-label blue">所有场景启动器最底层的依赖</mark> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>无需关注版本号，自动版本仲裁</p><ol><li>引入依赖默认都可以不写版本</li><li>引入非版本仲裁的jar，要写版本号。</li></ol></li><li><p>可以修改默认版本号</p><ol><li>查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>在当前项目里面重写配置，如下面的代码。</li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="5-SpringBoot自动配置特性">5. SpringBoot自动配置特性</h2><p>通过上面的入门案例</p><ul><li>自动配好Tomcat<ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认的包结构<ul><li>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</li><li>无需以前的包扫描配置</li><li>想要改变扫描路径<ul><li>@SpringBootApplication(scanBasePackages=“com.atguigu.boot”)</li><li>@ComponentScan 指定扫描路径</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">等同于</span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br></pre></td></tr></table></figure><ul><li>各种配置拥有默认值<ul><li>默认配置最终都是映射到某个类上，如：<code>MultipartProperties</code></li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li>按需加载所有自动配置项<ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li><li>…</li></ul>]]></content>
    
    
    <summary type="html">为什么使用SpringBoot、SpringBoot入门案例</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="SpringBoot" scheme="https://wuwawawa.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC</title>
    <link href="https://wuwawawa.github.io/posts/ae0f95e0.html"/>
    <id>https://wuwawawa.github.io/posts/ae0f95e0.html</id>
    <published>2023-05-01T01:32:14.000Z</published>
    <updated>2023-05-05T08:52:56.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SpringMVC简介">1. SpringMVC简介</h2><h3 id="1-1-SpringMVC概述">1.1 SpringMVC概述</h3><p>SpringMVC是一个基于Spring开发的MVC轻量级框架，Spring3.0后发布的组件，SpringMVC和Spring可以无缝整合，使用<code>DispatcherServlet</code>作为前端控制器，且内部提供了<code>处理器映射器</code>、<code>处理器适配器</code>、<code>视图解析器</code>等组件，可以简化JavaBean封装，Json转化、文件上传等操作。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427101142279.png" alt="image-20230427101142279"></p><hr><h3 id="1-2-SpringMVC快速入门">1.2 SpringMVC快速入门</h3><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427101429465.png" alt="image-20230427101429465" style="zoom: 50%;" /><div class="tabs" id="7d28f7cb-0e19-432e-b68e-e2756885d4e9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7d28f7cb-0e19-432e-b68e-e2756885d4e9-1"><i class="fas fa-seedling"></i>导入坐标</button></li><li class="tab"><button type="button" data-href="#7d28f7cb-0e19-432e-b68e-e2756885d4e9-2"><i class="fas fa-leaf"></i>配置前端控制器</button></li><li class="tab"><button type="button" data-href="#7d28f7cb-0e19-432e-b68e-e2756885d4e9-3"><i class="fas fa-tree"></i>配置spring-mvc.xml</button></li><li class="tab"><button type="button" data-href="#7d28f7cb-0e19-432e-b68e-e2756885d4e9-4"><i class="fab fa-apple"></i>编写控制器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7d28f7cb-0e19-432e-b68e-e2756885d4e9-1"><p>导入Spring整合SpringMVC的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d28f7cb-0e19-432e-b68e-e2756885d4e9-2"><p>在web.xml中配置SpringMVC的前端控制器ServletDispatcher</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定springMVC配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务器启动就创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d28f7cb-0e19-432e-b68e-e2756885d4e9-3"><p>创建springMVC的核心配置文件 spring-mvc.xml，并配置组件扫描web层</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d28f7cb-0e19-432e-b68e-e2756885d4e9-4"><p>编写一个控制器Controller，配置映射信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show 执行....&quot;</span>);</span><br><span class="line">        <span class="comment">//视图跳转到index.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-3-Controller访问容器Bean">1.3 Controller访问容器Bean</h3><p><code>DispatcherServlet</code>在进行初始化时，加载的spring-mvc.xml配置文件创建的SpringMVC容器，那么web层Controller被扫描进入到了容器中，而之前Spring容器中的Service是否可以获取到呢？下面搭建Spring的web环境进行验证</p><div class="tabs" id="35c07813-7047-4374-96bb-22a4522e4cea"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#35c07813-7047-4374-96bb-22a4522e4cea-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#35c07813-7047-4374-96bb-22a4522e4cea-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#35c07813-7047-4374-96bb-22a4522e4cea-3"><i class="fas fa-dove"></i>3</button></li><li class="tab"><button type="button" data-href="#35c07813-7047-4374-96bb-22a4522e4cea-4"><i class="fas fa-dragon"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="35c07813-7047-4374-96bb-22a4522e4cea-1"><p>创建一个applicationContext.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描非web层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除com.itheima包下使用@Controller注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="35c07813-7047-4374-96bb-22a4522e4cea-2"><p>在web.xml中配置ContextLoaderListener</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置ContextLoaderListener--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applictionContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="35c07813-7047-4374-96bb-22a4522e4cea-3"><p>编写UserService和UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl show running ... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="35c07813-7047-4374-96bb-22a4522e4cea-4"><p>修改UserController，从Spring容器中匹配Service进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/show&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show 执行....&quot;</span>);</span><br><span class="line">        <span class="comment">//调用userService的show方法</span></span><br><span class="line">        userService.show();</span><br><span class="line">        <span class="comment">//视图跳转到index.jsp</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-4-SpringMVC关键组件浅析">1.4 SpringMVC关键组件浅析</h3><p>上面已经完成的快速入门的操作，也在不知不觉中完成的Spring和SpringMVC的整合，我们只需要按照规则去定义Controller和业务方法就可以。但是在这个过程中，肯定是很多核心功能类参与到其中，这些核心功能类，一般称为组件。当请求到达服务器时，是哪个组件接收的请求，是哪个组件帮我们找到的Controller，是哪个组件帮我们调用的方法，又是哪个组件最终解析的视图？</p><p><span id="jump1"></span></p><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">描述</th><th style="text-align:left">常用组</th></tr></thead><tbody><tr><td style="text-align:left">处理器映射器：HandlerMapping</td><td style="text-align:left">匹配映射路径对应的Handler，返回可执行的处理器链对象HandlerExecutionChain对象</td><td style="text-align:left">RequestMappingHandlerMapping</td></tr><tr><td style="text-align:left">处理器适配器：HandlerAdapter</td><td style="text-align:left">匹配HandlerExecutionChain对应的适配器进行处理器调用，返回视图模型对象</td><td style="text-align:left">RequestMappingHandlerAdapter</td></tr><tr><td style="text-align:left">视图解析器：ViewResolver</td><td style="text-align:left">对视图模型对象进行解析</td><td style="text-align:left">InternalResourceViewResolver</td></tr></tbody></table><p>先简单了解一下以上三个重要组件的关系<a href="#jump2">点击跳转↓↓↓↓</a></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427103049084.png" alt="image-20230427103049084" style="zoom:80%;" /><p>SpringMVC的默认组件，SpringMVC在前端控制器DispatcherServlet加载时，就会进行初始化操作，在进行初始化时，就会加载SpringMVC默认指定的一些组件，这些默认组件配置在<code>DispatcherServlet.properties</code>文件中，该文件存在与spring-webmvc-5.3.7.jar包下的org\springframework\web\servlet\DispatcherServlet.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.web.servlet.HandlerMapping</span>=<span class="string">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.function.support.RouterFunctionMapping</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.springframework.web.servlet.HandlerAdapter</span>=<span class="string">org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,\</span></span><br><span class="line"><span class="string">org.springframework.web.servlet.function.support.HandlerFunctionAdapter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#省略其他代码</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>BeanNameUrlHandlerMapping：</li></ol><p><code>BeanNameUrlHandlerMapping</code> 是 Spring MVC 框架中最简单的处理器映射器之一，它是将请求的 URL 映射到 Spring 容器中的 Bean 名称上。当用户发送一个请求到 Spring MVC 框架时，<code>BeanNameUrlHandlerMapping</code> 会根据请求的 URL 找到对应的处理器 Bean。</p><ol start="2"><li>RequestMappingHandlerMapping：</li></ol><p><code>RequestMappingHandlerMapping</code> 是 Spring MVC 框架中常用的处理器映射器，它通过注解 <code>@RequestMapping</code> 和处理器方法的参数来确定请求的处理器。它可以将一个或多个 <code>@RequestMapping</code> 注解和一个处理器方法映射在一起，同时也支持 Ant 风格和正则表达式匹配请求路径。</p><ol start="3"><li>RouterFunctionMapping：</li></ol><p><code>RouterFunctionMapping</code> 是 Spring WebFlux 框架中的处理器映射器，它基于函数式编程模型来定义请求处理器的路由，支持 Reactive Streams 规范，可以处理大量并发请求。在 Spring WebFlux 中，我们可以使用 <code>RouterFunction</code> 来定义请求的处理路由，<code>RouterFunctionMapping</code> 会根据请求的路径和 HTTP 方法来匹配对应的 <code>RouterFunction</code>，最终返回一个匹配的处理器函数。与 Spring MVC 不同，Spring WebFlux 不需要将请求处理器映射到具体的 Java 方法上，而是可以基于函数式编程风格来实现业务逻辑。</p></blockquote><p>这些默认的组件是在<code>DispatcherServlet</code>中进行初始化加载的，在DispatcherServlet中存在集合存储着这些组件， SpringMVC的默认组件会在<code>DispatcherServlet</code>中进行维护，<span class='p red'>但是并没有存储在与SpringMVC的容器中</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title class_">FrameworkServlet</span> &#123;</span><br><span class="line">    <span class="comment">//存储处理器映射器</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line">    <span class="comment">//存储处理器适配器</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line">    <span class="comment">//存储视图解析器</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置组件代替默认组件，如果不想使用默认组件，可以将替代方案使用Spring Bean的方式进行配置，例如，在spring-mvc.xml中配置<code>RequestMappingHandlerMapping</code></p><p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;</code></p><p>当我们在Spring容器中配置了HandlerMapping，则就不会在加载默认的HandlerMapping策略了，原理比较简单， DispatcherServlet 在进行HandlerMapping初始化时，先从SpringMVC容器中找是否存在HandlerMapping，如果存在直接取出容器中的HandlerMapping，在存储到 DispatcherServlet 中的handlerMappings集合中去。</p><hr><hr><h2 id="2-SpringMVC的请求处理">2. SpringMVC的请求处理</h2><h3 id="2-1-请求映射路径的配置">2.1 请求映射路径的配置</h3><p>配置映射路径，映射器处理器才能找到Controller的方法资源，目前主流映射路径配置方式就是@RequestMapping</p><table><thead><tr><th style="text-align:left">相关注解</th><th style="text-align:left">作用</th><th style="text-align:left">使用位置</th></tr></thead><tbody><tr><td style="text-align:left">@RequestMapping</td><td style="text-align:left">设置控制器方法的访问资源路径，可以接收任何请求</td><td style="text-align:left">方法和类上</td></tr><tr><td style="text-align:left">@GetMapping</td><td style="text-align:left">设置控制器方法的访问资源路径，可以接收GET请求</td><td style="text-align:left">方法和类上</td></tr><tr><td style="text-align:left">@PostMapping</td><td style="text-align:left">设置控制器方法的访问资源路径，可以接收POST请求</td><td style="text-align:left">方法和类上</td></tr></tbody></table><p>@RequestMapping注解，主要使用在控制器的方法上，用于标识客户端访问资源路径，常用的属性有value、path 、method、headers、params等。当@RequestMapping只有一个访问路径需要指定时，使用value属性、path属性或省略value和path，当有多个属性时，value和path不能省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/show&quot;)</span><span class="comment">//使用value属性指定一个访问路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@RequestMapping(value = &#123;&quot;/show&quot;,&quot;/haohao&quot;,&quot;/abc&quot;&#125;)</span><span class="comment">//使用value属性指定多个访问路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@RequestMapping(path = &quot;/show&quot;)</span><span class="comment">//使用path属性指定一个访问路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@RequestMapping(path = &#123;&quot;/show&quot;,&quot;/haohao&quot;,&quot;/abc&quot;&#125;)</span><span class="comment">//使用path属性指定多个访问路径</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/show&quot;)</span><span class="comment">//如果只设置访问路径时，value和path可以省略</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/show&quot;,&quot;/haohao&quot;,&quot;/abc&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>当@RequestMapping 需要限定访问方式时，可以通过method属性设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求地址是/show,且请求方式必须是POST才能匹配成功</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/show&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>method的属性值是一个枚举类型，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">    GET,</span><br><span class="line">    HEAD,</span><br><span class="line">    POST,</span><br><span class="line">    PUT,</span><br><span class="line">    PATCH,</span><br><span class="line">    DELETE,</span><br><span class="line">    OPTIONS,</span><br><span class="line">    TRACE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">RequestMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@GetMapping，当请求方式是GET时，我们可以使用@GetMapping替代@RequestMapping</p><p>@PostMapping，当请求方式是POST时，我们可以使用@PostMapping替代@RequestMapping</p><p>@RequestMapping 在类上使用，@RequestMapping 、@GetMapping、@PostMapping还可以使用在Controller类上，使用在类上后，该类所有方法都公用该@RequestMapping设置的属性，访问路径则为类上的映射地址+方法上的映射地址，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/xxx&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span>, ServletContextAware &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/aaa&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">aaa</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ModelAndViewDefiningException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的访问路径为：/xxx/aaa</p><hr><h3 id="2-2-请求数据的接收">2.2 请求数据的接收</h3><h4 id="2-2-1-普通数据接收">2.2.1 普通数据接收</h4><div class="tabs" id="ecb55e13-9f27-42be-bc95-be55bab0db3e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ecb55e13-9f27-42be-bc95-be55bab0db3e-1"><i class="fas fa-award"></i>普通请求数据</button></li><li class="tab"><button type="button" data-href="#ecb55e13-9f27-42be-bc95-be55bab0db3e-2"><i class="fas fa-baseball-ball"></i>数组或集合数据</button></li><li class="tab"><button type="button" data-href="#ecb55e13-9f27-42be-bc95-be55bab0db3e-3"><i class="fas fa-bone"></i>实体JavaBean属性数据</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ecb55e13-9f27-42be-bc95-be55bab0db3e-1"><blockquote><p>接收普通请求数据，当客户端提交的数据是普通键值对形式时，直接使用同名形参接收即可</p></blockquote><p><code>username=haohao&amp;age=35</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(String username, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">&quot;==&quot;</span>+age); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接收普通请求数据，当请求参数的名称与方法参数名不一致时，可以使用@RequestParam注解进行标注</p></blockquote><p><code>username=haohao&amp;age=35</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestParam(name = &quot;username&quot;,required = true)</span> String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(name+<span class="string">&quot;==&quot;</span>+age); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ecb55e13-9f27-42be-bc95-be55bab0db3e-2"><blockquote><p>接收数组或集合数据，客户端传递多个同名参数时，可以使用数组接收</p></blockquote><p><code>hobbies=eat&amp;hobbies=sleep</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(String[] hobbies)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端传递多个同名参数时，<span class='p blue'>也可以使用单列集合接收，但是需要使用@RequestParam</span>，告知框架传递的参数是要同名设置的，不是对象属性设置的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobbies)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String hobby : hobbies) &#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接收数组或集合数据，客户端传递多个不同命参数时，也可以使用Map&lt;String,Object&gt; 进行接收，同样需要用@RequestParam 进行修饰</p></blockquote><p><code>username=haohao&amp;age=18</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String,Object&gt; params)</span>&#123;</span><br><span class="line">    params.forEach((key,value)-&gt;&#123;</span><br><span class="line">        System.out.println(key+<span class="string">&quot;==&quot;</span>+value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ecb55e13-9f27-42be-bc95-be55bab0db3e-3"><blockquote><p>接收实体JavaBean属性数据，单个JavaBean数据：提交的参数名称只要与Java的属性名一致，就可以进行自动封装</p></blockquote><p><code>username=haohao&amp;age=35&amp;hobbies=eat&amp;hobbies=sleep</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] hobbies;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//... 省略get和set方法 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收实体JavaBean属性数据，嵌套JavaBean数据：提交的参数名称用<code>.</code>去描述嵌套对象的属性关系即可</p><p><code>username=haohao&amp;address.city=tianjin&amp;address.area=jinghai</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h4 id="2-2-2-Json数据接收">2.2.2 Json数据接收</h4><blockquote><p>请求数据的接收接收Json数据格式数据，<span class='p blue'>Json数据都是以请求体的方式提交的</span>，且不是原始的键值对格式的，<span class='p green'>所以我们要使用@RequestBody注解整体接收该数据。</span></p></blockquote><p>开发测试时，可以使用Postman进行测试</p><div class="tabs" id="0630c36b-b8e8-4a06-a39d-4af3b9da3164"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0630c36b-b8e8-4a06-a39d-4af3b9da3164-1"><i class="fas fa-atom"></i>接收Json数据</button></li><li class="tab"><button type="button" data-href="#0630c36b-b8e8-4a06-a39d-4af3b9da3164-2"><i class="far fa-sun"></i>使用Json工具进行转换</button></li><li class="tab"><button type="button" data-href="#0630c36b-b8e8-4a06-a39d-4af3b9da3164-3"><i class="fas fa-wind"></i>配置RequestMappingHandlerAdapter</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0630c36b-b8e8-4a06-a39d-4af3b9da3164-1"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;haohao&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;eat&quot;</span><span class="punctuation">,</span><span class="string">&quot;sleep&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;birthday&quot;</span><span class="punctuation">:</span><span class="string">&quot;1986-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="string">&quot;tj&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span><span class="string">&quot;binhai&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/show6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show6</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span>&#123;</span><br><span class="line">    System.out.println(body); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0630c36b-b8e8-4a06-a39d-4af3b9da3164-2"><p>使用Json工具（ jackson ）将Json格式的字符串转化为JavaBean进行操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(body);</span><br><span class="line">    <span class="comment">//获得ObjectMapper</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">//将json格式字符串转化成指定的User</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> objectMapper.readValue(body, User.class);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0630c36b-b8e8-4a06-a39d-4af3b9da3164-3"><p>配置<code>RequestMappingHandlerAdapter</code>，指定消息转换器，就不用手动转换json格式字符串了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收Json数据格式数据，使用Map接收json格式字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/show&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">show</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    System.out.println(map); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h4 id="2-2-3-接收Restful风格数据">2.2.3 接收Restful风格数据</h4><p>什么是Rest风格？<br>Rest（Representational State Transfer）表象化状态转变（表述性状态转变），在2000年被提出，基于HTTP、URI 、xml、JSON等标准和协议，支持轻量级、跨平台、跨语言的架构设计。是Web服务的一种新网络应用程序的设计风格和开发方式。</p><p>Restful风格的请求，常见的规则有如下三点：</p><p>用URI表示某个模块资源，资源名称为名词；</p><table><thead><tr><th style="text-align:left">模块</th><th style="text-align:left">URI资源</th></tr></thead><tbody><tr><td style="text-align:left">用户模块user</td><td style="text-align:left"><code>http://localhost/user</code></td></tr><tr><td style="text-align:left">商品模块product</td><td style="text-align:left"><code>http://localhost/product</code></td></tr><tr><td style="text-align:left">账户模块account</td><td style="text-align:left"><code>http://localhost/account</code></td></tr><tr><td style="text-align:left">日志模块log</td><td style="text-align:left"><code>http://localhost/log</code></td></tr></tbody></table><p>用请求方式表示模块具体业务动作，例如：GET表示查询、POST表示插入、PUT表示更新、DELETE表示删除</p><table><thead><tr><th style="text-align:left">URI资源</th><th style="text-align:left">请求方式</th><th style="text-align:left">参数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>http://localhost/user/100</code></td><td style="text-align:left">GET</td><td style="text-align:left">存在URL地址中：100</td><td style="text-align:left">查询id=100的User数据</td></tr><tr><td style="text-align:left"><code>http://localhost/user</code></td><td style="text-align:left">POST</td><td style="text-align:left">存在请求体中Json：{“username”:“haohao”,“age”:18}</td><td style="text-align:left">插入User数据</td></tr><tr><td style="text-align:left"><code>http://localhost/user</code></td><td style="text-align:left">PUT</td><td style="text-align:left">存在请求体中Json：{“id”:100,“username”:“haohao”,“age”:18}</td><td style="text-align:left">修改id=100的User数据</td></tr><tr><td style="text-align:left"><code>http://localhost/user/100</code></td><td style="text-align:left">DELETE</td><td style="text-align:left">存在URL地址中：100</td><td style="text-align:left">删除id=100的User数据</td></tr><tr><td style="text-align:left"><code>http://localhost/product/5</code></td><td style="text-align:left">GET</td><td style="text-align:left">存在URL地址中：5</td><td style="text-align:left">查询id=5的Product数据</td></tr><tr><td style="text-align:left"><code>http://localhost/product</code></td><td style="text-align:left">POST</td><td style="text-align:left">存在请求体中Json：{“proName”:“小米手机”,“price”:1299}</td><td style="text-align:left">插入Product数据</td></tr><tr><td style="text-align:left"><code>http://localhost/product</code></td><td style="text-align:left">PUT</td><td style="text-align:left">存在请求体中Json：{“id”:5,“proName”:“小米手机”,“price”:1299}</td><td style="text-align:left">修改id=5的Product数据</td></tr><tr><td style="text-align:left"><code>http://localhost/product/5</code></td><td style="text-align:left">DELETE</td><td style="text-align:left">存在URL地址中：5</td><td style="text-align:left">删除id=5的Product数据</td></tr></tbody></table><p>用HTTP响应状态码表示结果，国内常用的响应包括三部分：状态码、状态信息、响应数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;haohao&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span><span class="string">&quot;执行错误&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接收Restful风格数据，Restful请求数据一般会在URL地址上携带，可以使用注解 @PathVariable(占位符参数名称)</p><p>不加注解会以为是前面键值对的形式。</p><p><code>http://localhost/user/100</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求URL资源地址包含多个参数情况</p><p><code>http://localhost/user/haohao/18</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/user/&#123;username&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">findUserByUsernameAndAge</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username,<span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username+<span class="string">&quot;==&quot;</span>+age); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-2-4-接收文件数据">2.2.4 接收文件数据</h4><p>接收文件上传的数据，文件上传的表单需要一定的要求，如下：</p><ul><li>表单的提交方式必须是POST</li><li>表单的enctype属性必须是multipart/form-data</li><li>文件上传项需要有name属性</li></ul><div class="tabs" id="337f457c-7cf8-407b-9d5b-2b5e3ba1d172"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#337f457c-7cf8-407b-9d5b-2b5e3ba1d172-1"><i class="fas fa-bug"></i>前端</button></li><li class="tab"><button type="button" data-href="#337f457c-7cf8-407b-9d5b-2b5e3ba1d172-2"><i class="fas fa-cannabis"></i>服务器端配置</button></li><li class="tab"><button type="button" data-href="#337f457c-7cf8-407b-9d5b-2b5e3ba1d172-3"><i class="fas fa-candy-cane"></i>接收代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="337f457c-7cf8-407b-9d5b-2b5e3ba1d172-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="337f457c-7cf8-407b-9d5b-2b5e3ba1d172-2"><p>服务器端，由于映射器适配器需要文件上传解析器，而该解析器默认未被注册，所以手动注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器，注意：id的名字是固定写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span><span class="comment">&lt;!--文件的编码格式 默认是ISO8859-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSizePerFile&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span><span class="comment">&lt;!--上传的每个文件限制的大小 单位字节--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3145728&quot;</span>/&gt;</span><span class="comment">&lt;!--上传文件的总大小--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span><span class="comment">&lt;!--上传文件的缓存大小--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而CommonsMultipartResolver底层使用的Apache的是Common-fileuplad等工具API进行的文件上传</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="337f457c-7cf8-407b-9d5b-2b5e3ba1d172-3"><p>使用MultipartFile类型接收上传文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestBody</span> MultipartFile myFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(myFile);</span><br><span class="line">    <span class="comment">//获得上传的文件的流对象</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> myFile.getInputStream(); <span class="comment">//使用commons-io存储到C:\haohao\abc.txt位置</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\haohao\\&quot;</span>+myFile.getOriginalFilename());</span><br><span class="line">    IOUtils.copy(inputStream,outputStream);</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    inputStream.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="2-2-5-接收请求头数据">2.2.5 接收请求头数据</h4><p>接收Http请求头数据，接收指定名称的请求头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/headers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">headers</span><span class="params">(<span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String acceptEncoding)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Accept-Encoding:&quot;</span>+acceptEncoding); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收所有的请求头信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/headersMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">headersMap</span><span class="params">(<span class="meta">@RequestHeader</span> Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">    map.forEach((k,v)-&gt;&#123;</span><br><span class="line">        System.out.println(k+<span class="string">&quot;:&quot;</span>+v);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-2-6-接收Cookie信息">2.2.6 接收Cookie信息</h4><p>获得客户端携带的Cookie数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/cookies&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">cookies</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;,defaultValue = &quot;&quot;)</span> String jsessionid)</span>&#123;</span><br><span class="line">    System.out.println(jsessionid); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-2-7-接收Request域信息">2.2.7 接收Request域信息</h4><p>获得转发Request域中数据，在进行资源之间转发时，有时需要将一些参数存储到request域中携带给下一个资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/request1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">request1</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;haohao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/request2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/request2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">request2</span><span class="params">(<span class="meta">@RequestAttribute(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(username); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-2-8-请求参数乱码的解决方案">2.2.8 请求参数乱码的解决方案</h4><p>请求参数乱码的解决方案，Spring已经提供好的CharacterEncodingFilter来进行编码过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-3-Javaweb常用对象获取">2.3 Javaweb常用对象获取</h3><p>获得Javaweb常见原生对象，有时在我们的Controller方法中需要用到Javaweb的原生对象，例如：Request、 Response等，我们只需要将需要的对象以形参的形式写在方法上，SpringMVC框架在调用Controller方法时，会自动传递实参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/javawebObject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">javawebObject</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span>&#123;</span><br><span class="line">    System.out.println(request);</span><br><span class="line">    System.out.println(response);</span><br><span class="line">    System.out.println(session);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-4-请求静态资源">2.4 请求静态资源</h3><p>静态资源请求失效的原因，当DispatcherServlet的映射路径配置为 / 的时候，那么就覆盖的Tomcat容器默认的缺省Servlet，在Tomcat的config目录下有一个web.xml 是对所有的web项目的全局配置，其中有如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url-pattern配置为 / 的Servlet我们称其为缺省的Servlet，作用是当其他Servlet都匹配不成功时，就找缺省的Servlet ，静态资源由于没有匹配成功的Servlet，所以会找缺省的DefaultServlet，该DefaultServlet具备二次去匹配静态资源的功能。但是我们配置DispatcherServlet后就将其覆盖掉了，而DispatcherServlet会将请求的静态资源的名称当成Controller的映射路径去匹配，即静态资源访问不成功了！</p><mark class="hl-label blue">静态资源请求的三种解决方案</mark> <div class="tabs" id="d96bf84b-004a-4603-b9eb-da53a7fe2732"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d96bf84b-004a-4603-b9eb-da53a7fe2732-1"><i class="fas fa-candy-cane"></i>1</button></li><li class="tab"><button type="button" data-href="#d96bf84b-004a-4603-b9eb-da53a7fe2732-2"><i class="fas fa-child"></i>2</button></li><li class="tab"><button type="button" data-href="#d96bf84b-004a-4603-b9eb-da53a7fe2732-3"><i class="fas fa-cookie-bite"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d96bf84b-004a-4603-b9eb-da53a7fe2732-1"><p>第一种方案，可以再次激活Tomcat的DefaultServlet，Servlet的url-pattern的匹配优先级是：精确匹配&gt;目录匹配&gt;扩展名匹配&gt;缺省匹配，所以可以指定某个目录下或某个扩展名的资源使用DefaultServlet进行解析：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/img/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d96bf84b-004a-4603-b9eb-da53a7fe2732-2"><p>第二种方式，在spring-mvc.xml中去配置静态资源映射，匹配映射路径的请求到指定的位置去匹配资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mapping是映射资源路径，location是对应资源所在的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/img/*&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/img/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/*&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/*&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/html/*&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/html/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d96bf84b-004a-4603-b9eb-da53a7fe2732-3"><p>第三种方式，在spring-mvc.xml中去配置&lt; mvc:default-servlet-handler &gt;，该方式是注册了一个DefaultServletHttpRequestHandler 处理器，静态资源的访问都由该处理器去处理，这也是开发中使用最多的</p><p><code>&lt;mvc:default-servlet-handler/&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="2-5-注解驱动标签">2.5 注解驱动标签</h3><p>静态资源配置的第二第三种方式我们可以正常访问静态资源了，但是Controller又无法访问了，报错404，即找不到对应的资源</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427115829513.png" alt="image-20230427115829513"></p><p>第二种方式是通过SpringMVC去解析mvc命名空间下的resources标签完成的静态资源解析。</p><p>第三种方式式通过SpringMVC去解析mvc命名空间下的default-servlet-handler标签完成的静态资源解析，根据前面所学习的自定义命名空间的解析的知识，可以发现不管是以上哪种方式，最终都会注册SimpleUrlHandlerMapping</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext context)</span> &#123;</span><br><span class="line">    <span class="comment">//创建SimpleUrlHandlerMapping类型的BeanDefinition</span></span><br><span class="line">    <span class="type">RootBeanDefinition</span> <span class="variable">handlerMappingDef</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(SimpleUrlHandlerMapping.class);</span><br><span class="line">    <span class="comment">//注册SimpleUrlHandlerMapping的BeanDefinition</span></span><br><span class="line">    context.getRegistry().registerBeanDefinition(beanName, handlerMappingDef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又结合组件浅析知识点，一旦SpringMVC容器中存在 HandlerMapping 类型的组件时，前端控制器DispatcherServlet在进行初始化时，就会从容器中获得HandlerMapping ，不在加载 dispatcherServlet.properties中默认处理器映射器策略，那也就意味着RequestMappingHandlerMapping不会被加载到了。</p><mark class="hl-label green">解决方法</mark> <p>手动将RequestMappingHandlerMapping也注册到SpringMVC容器中就可以了，这样DispatcherServlet在进行初始化时，就会从容器中同时获得RequestMappingHandlerMapping存储到DispatcherServlet中名为handlerMappings的List集合中，对@RequestMapping 注解进行解析。</p><p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt;</code></p><p>根据上面的讲解，可以总结一下，要想使用@RequestMapping正常映射到资源方法，同时静态资源还能正常访问，还可以将请求json格式字符串和JavaBean之间自由转换，我们就需要在spring-mvc.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示配置RequestMappingHandlerMapping --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 显示配置RequestMappingHandlerAdapter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置DefaultServletHttpRequestHandler--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这么复杂繁琐的配置，是不是看上去有点头大？Spring是个&quot;暖男&quot;，将上述配置浓缩成了一个简单的配置标签，那就是mvc的注解驱动，该标签内部会帮我们注册RequestMappingHandlerMapping、注册RequestMappingHandlerAdapter并注入Json消息转换器等，上述配置就可以简化成如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mvc注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置DefaultServletHttpRequestHandler--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>PS：<code>&lt;mvc:annotation-driven&gt;</code>标签在不同的版本中，帮我们注册的组件不同，Spring 3.0.X 版本注册是DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter，由于框架的发展，从Spring 3.1.X 开始注册组件变为 RequestMappingHandlerMapping和RequestMappingHandlerAdapter</p><hr><hr><h2 id="3-SpringMVC的响应处理">3. SpringMVC的响应处理</h2><p>Spring的接收请求的部分我们讲完了，下面在看一下Spring怎么给客户端响应数据，响应数据主要分为两大部分：</p><ul><li>传统同步方式：准备好模型数据，在跳转到执行页面进行展示，此方式使用越来越少了，基于历史原因，一些旧项目还在使用；</li><li>前后端分离异步方式：前端使用Ajax技术+Restful风格与服务端进行Json格式为主的数据交互，目前市场上几乎都是此种方式了。</li></ul><hr><h3 id="3-1-传统同步业务数据响应">3.1 传统同步业务数据响应</h3><p>传统同步业务在数据响应时，SpringMVC又涉及如下四种形式：</p><ul><li>请求资源转发；</li><li>请求资源重定向；</li><li>响应模型数据；</li><li>直接回写数据给客户端；</li></ul><div class="tabs" id="1b606fda-ba79-4ab2-a97d-bf3bdc7032b8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-1"><i class="fas fa-seedling"></i>请求资源转发</button></li><li class="tab"><button type="button" data-href="#1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-2"><i class="fas fa-leaf"></i>请求资源重定向</button></li><li class="tab"><button type="button" data-href="#1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-3"><i class="fab fa-apple"></i>响应模型数据</button></li><li class="tab"><button type="button" data-href="#1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-4"><i class="fas fa-tree"></i>直接回写数据给客户端</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-1"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427130024927.png" alt="image-20230427130024927"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427130126669.png" alt="image-20230427130126669"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-3"><p>响应模型数据，响应模型数据本质也是转发，在转发时可以准备模型数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/forward5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">forward5</span><span class="params">(ModelAndView modelAndView)</span>&#123;</span><br><span class="line">    <span class="comment">//准备JavaBean模型数据</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;haohao&quot;</span>);</span><br><span class="line">    <span class="comment">//设置模型</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="comment">//设置视图</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1b606fda-ba79-4ab2-a97d-bf3bdc7032b8-4"><p>直接回写数据，直接通过方法的返回值返回给客户端的字符串，但是SpringMVC默认的方法返回值是视图，可以通过@ResponseBody 注解显示的告知此处的返回值不要进行视图处理，是要以响应体的方式处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/response2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">response2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello haohao!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="3-2-前后端分离异步业务数据响应">3.2 前后端分离异步业务数据响应</h3><p>其实此处的回写数据，跟上面回写数据给客户端的语法方式一样，只不过有如下一些区别：</p><ul><li>同步方式回写数据，是将数据响应给浏览器进行页面展示的，而异步方式回写数据一般是回写给Ajax引擎的，即谁访问服务器端，服务器端就将数据响应给谁</li><li>同步方式回写的数据，一般就是一些无特定格式的字符串，而异步方式回写的数据大多是Json格式字符串</li></ul><p>回写普通数据使用@ResponseBody标注方法，直接返回字符串即可，此处不在说明；</p><div class="tabs" id="ab67edd5-269d-496f-bff8-15db18faca6b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ab67edd5-269d-496f-bff8-15db18faca6b-1"><i class="fas fa-cat"></i>回写Json格式的字符串</button></li><li class="tab"><button type="button" data-href="#ab67edd5-269d-496f-bff8-15db18faca6b-2"><i class="fas fa-horse"></i>回写JavaBean</button></li><li class="tab"><button type="button" data-href="#ab67edd5-269d-496f-bff8-15db18faca6b-3"><i class="fas fa-dove"></i>ResponseBody注解使用优化</button></li><li class="tab"><button type="button" data-href="#ab67edd5-269d-496f-bff8-15db18faca6b-4"><i class="fas fa-dragon"></i>RestController注解进一步优化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ab67edd5-269d-496f-bff8-15db18faca6b-1"><p>回写Json格式的字符串，即将直接拼接Json格式的字符串或使用工具将JavaBean转换成Json格式的字符串回写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/response3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">response3</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;haohao\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/response4&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">response4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">//创建JavaBean</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;haohao&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//使用Jackson转换成json格式的字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(user); </span><br><span class="line">    <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ab67edd5-269d-496f-bff8-15db18faca6b-2"><p>在讲解SringMVC接收请求数据时，客户端提交的Json格式的字符串，也是使用Jackson进行的手动转换成JavaBean ，可以当我们使用了@RequestBody时，直接用JavaBean就接收了Json格式的数据，原理其实就是SpringMVC底层帮我们做了转换，此处@ResponseBody也可以将JavaBean自动给我们转换成Json格式字符串回响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/response5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">response5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建JavaBean</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(); user.setUsername(<span class="string">&quot;haohao&quot;</span>); </span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//直接返回User对象</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ab67edd5-269d-496f-bff8-15db18faca6b-3"><p>@ResponseBody注解使用优化，在进行前后端分离开发时，Controller的每个方法都是直接回写数据的，所以每个方法上都得写@ResponseBody，<span class='p blue'>可以将@ResponseBody写到Controller上</span>，那么该Controller中的所有方法都具备了返回响应体数据的功能了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/response7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultInfo <span class="title function_">response7</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/response5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">response5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他方法 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ab67edd5-269d-496f-bff8-15db18faca6b-4"><p><span class='p green'>进一步优化，可以使用@RestController替代@Controller和@ResponseBody，@RestController内部具备的这两个注解的功能</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/response7&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultInfo <span class="title function_">response7</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/response5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">response5</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他方法 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="4-SpringMVC的拦截器">4. SpringMVC的拦截器</h2><h3 id="4-1-拦截器-Interceptor-简介">4.1 拦截器 Interceptor 简介</h3><p>SpringMVC的拦截器Interceptor规范，主要是对Controller资源访问时进行拦截操作的技术，当然拦截后可以进行权限控制，功能增强等都是可以的。拦截器有点类似 Javaweb 开发中的Filter，Interceptor与Filter的区别如下图：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230428215535084.png" alt="image-20230428215535084" style="zoom:67%;" /><p>由上图，对<code>Filter</code>和<code>Interceptor</code>做个对比：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Filter技术</th><th style="text-align:left">Interceptor技术</th></tr></thead><tbody><tr><td style="text-align:left">技术范畴</td><td style="text-align:left">Javaweb原生技术</td><td style="text-align:left">SpringMVC框架技术</td></tr><tr><td style="text-align:left">拦截/过滤资源</td><td style="text-align:left">可以对所有请求都过滤，包括任何Servlet、Jsp、其他资源等</td><td style="text-align:left">只对进入了SpringMVC管辖范围的才拦截，主要拦截Controller请求</td></tr><tr><td style="text-align:left">执行时机</td><td style="text-align:left">早于任何Servlet执行</td><td style="text-align:left">晚于DispatcherServlet执行</td></tr></tbody></table><span class='p blue'>实现了HandlerInterceptor接口，且被Spring管理的Bean都是拦截器</span><p>接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="line"><span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="line"><span class="params"><span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HandlerInterceptor接口方法的作用及其参数、返回值详解如下：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">作用</th><th style="text-align:left">参数</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">preHandle</td><td style="text-align:left">对拦截到的请求进行预处理，返回true放行执行处理器方法，false不放行</td><td style="text-align:left">Handler是拦截到的Controller方法处理器</td><td style="text-align:left">一旦返回false，代表终止向后执行，所有后置方法都不执行，最终方法只执行对应preHandle返回了true的</td></tr><tr><td style="text-align:left">postHandle</td><td style="text-align:left">在处理器的方法执行后，对拦截到的请求进行后处理，可以在方法中对模型数据和视图进行修改</td><td style="text-align:left">Handler是拦截到的Controller方法处理器；modelAndView是返回的模型视图对象</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">afterCompletion</td><td style="text-align:left">视图渲染完成后(整个流程结束之后)，进行最后的处理，如果请求流程中有异常，可以处理异常对象</td><td style="text-align:left">Handler是拦截到的Controller方法处理器；ex是异常对象</td><td style="text-align:left">无</td></tr></tbody></table><hr><h3 id="4-2-拦截器快速入门">4.2 拦截器快速入门</h3><div class="tabs" id="177b295e-598d-472a-ab76-335a04e1c870"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#177b295e-598d-472a-ab76-335a04e1c870-1"><i class="fas fa-heartbeat"></i>编写MyInterceptor01实现HandlerInterceptor接口</button></li><li class="tab"><button type="button" data-href="#177b295e-598d-472a-ab76-335a04e1c870-2"><i class="fas fa-cookie-bite"></i>配置Interceptor</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="177b295e-598d-472a-ab76-335a04e1c870-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor01</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller方法执行之前...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Controller方法执行之后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;渲染视图结束，整个流程完毕...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="177b295e-598d-472a-ab76-335a04e1c870-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptors.MyInterceptor1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="4-3-拦截器执行顺序">4.3 拦截器执行顺序</h3><p>拦截器三个方法的执行顺序<br>当每个拦截器都是放行状态时，三个方法的执行顺序如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230428221116031.png" alt="image-20230428221116031" style="zoom:67%;" /><p>当Interceptor1和Interceptor2处于放行，Interceptor3处于不放行时，三个方法的执行顺序如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230428221434011.png" alt="image-20230428221434011" style="zoom:67%;" /><p>拦截器执行顺序取决于 interceptor 的配置顺序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/target&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span id="jump2"></span></p><hr><h3 id="4-4-拦截器执行原理">4.4 拦截器执行原理</h3><p><a href="#jump1">点击跳转↑↑↑↑</a></p><div class="tabs" id="73c56bbf-a064-4950-b013-efd9d1f432e7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#73c56bbf-a064-4950-b013-efd9d1f432e7-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#73c56bbf-a064-4950-b013-efd9d1f432e7-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#73c56bbf-a064-4950-b013-efd9d1f432e7-3"><i class="fas fa-wind"></i>3</button></li><li class="tab"><button type="button" data-href="#73c56bbf-a064-4950-b013-efd9d1f432e7-4"><i class="fas fa-fire-alt"></i>4</button></li><li class="tab"><button type="button" data-href="#73c56bbf-a064-4950-b013-efd9d1f432e7-5"><i class="fas fa-cookie-bite"></i>5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="73c56bbf-a064-4950-b013-efd9d1f432e7-1"><p>请求到来时先会使用组件<code>HandlerMapping</code>去匹配Controller的方法（Handler）和符合拦截路径的Interceptor， Handler和多个Interceptor被封装成一个<code>HandlerExecutionChain</code>的对象<code>HandlerExecutionChain</code>定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerExecutionChain</span> &#123;</span><br><span class="line">    <span class="comment">//映射的Controller的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line">    <span class="comment">//当前Handler匹配的拦截器集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;HandlerInterceptor&gt; interceptorList;</span><br><span class="line">    <span class="comment">// ... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73c56bbf-a064-4950-b013-efd9d1f432e7-2"><p>在DispatcherServlet的doDispatch方法中执行拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="comment">//根据请求信息获得HandlerExecutionChain</span></span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandler(request);</span><br><span class="line">    <span class="comment">//获得处理器适配器</span></span><br><span class="line">    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">    <span class="comment">//执行Interceptor的前置方法，前置方法如果返回false，则该流程结束</span></span><br><span class="line">    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(request, response)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行handler，一般是HandlerMethod</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">    <span class="comment">//执行后置方法</span></span><br><span class="line">    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">    <span class="comment">//执行最终方法</span></span><br><span class="line">    <span class="built_in">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73c56bbf-a064-4950-b013-efd9d1f432e7-3"><p>跟踪 HandlerExecutionChain的applyPreHandle方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//对interceptorList进行遍历,正向遍历,与此同时使用interceptorIndex进行计数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.interceptorList.size(); <span class="built_in">this</span>.interceptorIndex = i++) &#123;</span><br><span class="line">        <span class="comment">//取出每一个Interceptor对象</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> (HandlerInterceptor)<span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="comment">//调用Interceptor的preHandle方法，如果返回false，则直接执行Interceptor的最终方法</span></span><br><span class="line">        <span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="built_in">this</span>.handler)) &#123;</span><br><span class="line">            <span class="comment">//执行Interceptor的最终方法</span></span><br><span class="line">            <span class="built_in">this</span>.triggerAfterCompletion(request, response, (Exception)<span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73c56bbf-a064-4950-b013-efd9d1f432e7-4"><p>跟踪 HandlerExecutionChain的applyPostHandle方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> ModelAndView mv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//对interceptorList进行遍历，逆向遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorList.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">//取出每一个Interceptor</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> (HandlerInterceptor)<span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="comment">//执行Interceptor的postHandle方法</span></span><br><span class="line">        interceptor.postHandle(request, response, <span class="built_in">this</span>.handler, mv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73c56bbf-a064-4950-b013-efd9d1f432e7-5"><p>跟踪HandlerExecutionChain的triggerAfterCompletion方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">triggerAfterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="meta">@Nullable</span> Exception ex)</span> &#123;</span><br><span class="line">    <span class="comment">//逆向遍历interceptorList，遍历的个数为执行的applyPreHandle次数-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">this</span>.interceptorIndex; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">//取出每一个Interceptor</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> (HandlerInterceptor)<span class="built_in">this</span>.interceptorList.get(i);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行Interceptor的afterCompletion方法</span></span><br><span class="line">            interceptor.afterCompletion(request, response, <span class="built_in">this</span>.handler, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var7) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230428221714196.png" alt="image-20230428221714196" style="zoom:67%;" /><hr><hr><h2 id="5-SpringMVC的全注解开发">5. SpringMVC的全注解开发</h2><h3 id="5-1-消除spring-mvc-xml组件">5.1 消除spring-mvc.xml组件</h3><div class="tabs" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-3"><i class="fas fa-dove"></i>3</button></li><li class="tab"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-4"><i class="fas fa-dragon"></i>4</button></li><li class="tab"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-5"><i class="fas fa-heartbeat"></i>5</button></li><li class="tab"><button type="button" data-href="#15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-6"><i class="fas fa-cookie-bite"></i>6</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-1"><p>跟之前全注解开发思路一致， xml配置文件使用核心配置类替代，xml中的标签使用对应的注解替代</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件扫描web层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置DefaultServletHttpRequestHandler--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-2"><ul><li>组件扫描，可以通过@ComponentScan注解完成；</li><li>文件上传解析器multipartResolver可以通过非自定义Bean的注解配置方式，即@Bean注解完成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">multipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        multipartResolver.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        multipartResolver.setMaxUploadSize(<span class="number">5000000</span>);</span><br><span class="line">        <span class="keyword">return</span> multipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-3"><p><code>&lt;mvc:annotation-driven&gt;</code>、<code>&lt;mvc:default-servlet-handler /&gt;</code> 和 <code>&lt;mvc:interceptor &gt; </code>怎么办呢？SpringMVC 提供了一个注解<code>@EnableWebMvc</code>，我们看一下源码，内部通过@Import 导入了<code>DelegatingWebMvcConfiguration</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">WebMvcConfigurerComposite</span> <span class="variable">configurers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurerComposite</span>();</span><br><span class="line">    <span class="comment">//从容器中注入WebMvcConfigurer类型的Bean</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvcConfigurer类型的Bean会被注入进来，然后被自动调用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-4"><p>所以可以实现WebMvcConfigurer接口，完成一些解析器、默认Servlet等的指定，WebMvcConfigurer接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//配置默认Servet处理器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//添加资源处理器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//添加视图控制器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//配置视图解析器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">configureViewResolvers</span><span class="params">(ViewResolverRegistry registry)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//添加参数解析器</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> &#123; &#125;</span><br><span class="line">    <span class="comment">//... 省略其他代码 ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-5"><p>创建MyWebMvcConfigurer实现WebMvcConfigurer接口，实现addInterceptors 和configureDefaultServletHandling方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="comment">//开启默认的Servlet处理器，可以处理静态资源了</span></span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//添加一个拦截器，并配置拦截路径</span></span><br><span class="line">        <span class="comment">//Interceptor的执行顺序也取决于添加顺序</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor1</span>()).addPathPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="15e4bd8b-7d33-4da6-bec9-4983cdcf9b98-6"><p>最后，在SpringMVC核心配置类上添加@EnableWebMvc注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMVCConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CommonsMultipartResolver</span> <span class="variable">multipartResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">        multipartResolver.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        multipartResolver.setMaxUploadSize(<span class="number">5000000</span>);</span><br><span class="line">        <span class="keyword">return</span> multipartResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="5-2-DispatcherServlet配置类">5.2 DispatcherServlet配置类</h3><div class="tabs" id="8be97b62-9b86-45b2-aa60-c48a9fd18aeb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8be97b62-9b86-45b2-aa60-c48a9fd18aeb-1"><i class="fas fa-cat"></i>xml配置</button></li><li class="tab"><button type="button" data-href="#8be97b62-9b86-45b2-aa60-c48a9fd18aeb-2"><i class="fas fa-horse"></i>注解配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8be97b62-9b86-45b2-aa60-c48a9fd18aeb-1"><p>DispatcherServlet在进行SpringMVC配置文件加载时，使用的是以下方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定springMVC配置文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务器启动就创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8be97b62-9b86-45b2-aa60-c48a9fd18aeb-2"><p>现在是使用SpringMVCConfig核心配置类提替代的spring-mvc.xml，怎么加载呢？参照Spring的ContextLoaderListener加载核心配置类的做法，定义了一个AnnotationConfigWebApplicationContext，通过代码注册核心配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationConfigWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AnnotationConfigWebApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAnnotationConfigWebApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注册核心配置类</span></span><br><span class="line">        <span class="built_in">super</span>.register(SpringMVCConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定springMVC的applicationContext全限定名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.itheima.config.MyAnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="5-3-消除web-xml">5.3 消除web.xml</h3><div class="tabs" id="9213ea2e-edef-4166-931e-30d4de02cc8d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9213ea2e-edef-4166-931e-30d4de02cc8d-1"><i class="fas fa-award"></i>web.xml</button></li><li class="tab"><button type="button" data-href="#9213ea2e-edef-4166-931e-30d4de02cc8d-2"><i class="fas fa-baseball-ball"></i>解决思路</button></li><li class="tab"><button type="button" data-href="#9213ea2e-edef-4166-931e-30d4de02cc8d-3"><i class="fas fa-bone"></i>注解配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9213ea2e-edef-4166-931e-30d4de02cc8d-1"><p>目前，几乎消除了配置文件，但是web工程的入口还是使用的web.xml进行配置的，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--指定springMVC的applicationContext全限定名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.itheima.config.MyAnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务器启动就创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9213ea2e-edef-4166-931e-30d4de02cc8d-2"><ul><li>Servlet3.0环境中，web容器提供了javax.servlet.ServletContainerInitializer接口，实现了该接口后，在对应的类加载路径的META-INF/services 目录创建一个名为javax.servlet.ServletContainerInitializer的文件，文件内容指定具体的ServletContainerInitializer实现类，那么，当web容器启动时就会运行这个初始化器做一些组件内的初始化工作；</li><li>基于这个特性，Spring就定义了一个SpringServletContainerInitializer实现了ServletContainerInitializer接口;</li><li>而SpringServletContainerInitializer会查找实现了WebApplicationInitializer的类，Spring又提供了一个WebApplicationInitializer的基础实现类AbstractAnnotationConfigDispatcherServletInitializer，当我们编写类继承AbstractAnnotationConfigDispatcherServletInitializer时，容器就会自动发现我们自己的类，在该类中我们就可以配置Spring和SpringMVC的入口了。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9213ea2e-edef-4166-931e-30d4de02cc8d-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationConfigDispatcherServletInitializer</span> <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//提供Spring容器核心配置类</span></span><br><span class="line">    <span class="comment">//返回的带有@Configuration注解的类用来配置ContextLoaderListener</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载核心配置类创建ContextLoaderListener&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ApplicationContextConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供SpringMVC容器核心配置类</span></span><br><span class="line">    <span class="comment">//返回的带有@Configuration注解的类用来配置DispatcherServlet</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载核心配置类创建DispatcherServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMVCConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供前端控制器的映射路径</span></span><br><span class="line">    <span class="comment">//将一个或多个路径映射到DispatcherServlet上</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="6-SpringMVC的组件原理剖析">6. SpringMVC的组件原理剖析</h2><h3 id="6-1-前端控制器初始化">6.1 前端控制器初始化</h3><p>前端控制器DispatcherServlet是SpringMVC的入口，也是SpringMVC的大脑，主流程的工作都是在此完成的，梳理一下DispatcherServlet 代码。DispatcherServlet 本质是个Servlet，当配置了 load-on-startup 时，会在服务器启动时就执行创建和执行初始化init方法，每次请求都会执行service方法。<br>DispatcherServlet的初始化主要做了两件事：</p><ul><li><p>获得了一个 SpringMVC 的ApplicationContext容器；</p></li><li><p>注册了 SpringMVC的九大组件。</p></li></ul><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/DispatcherServlet1.png" alt="DispatcherServlet1" style="zoom:67%;" /><div class="tabs" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-3"><i class="fas fa-candy-cane"></i>3</button></li><li class="tab"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-4"><i class="fas fa-child"></i>4</button></li><li class="tab"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-5"><i class="fas fa-heartbeat"></i>5</button></li><li class="tab"><button type="button" data-href="#ca3a4e03-2303-45ae-916c-f64e2a303cdc-6"><i class="fas fa-cookie-bite"></i>6</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-1"><p>SpringMVC 的ApplicationContext容器创建时机，Servlet 规范的 init(ServletConfig config) 方法经过子类重写 ，最终会调用 FrameworkServlet 抽象类的initWebApplicationContext() 方法，该方法中最终获得 一个根Spring容器（Spring产生的），一个子Spring容器（SpringMVC产生的）</p><p>HttpServletBean 的初始化方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="built_in">this</span>.initServletBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FrameworkServlet的initServletBean方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    <span class="built_in">this</span>.webApplicationContext = <span class="built_in">this</span>.initWebApplicationContext();<span class="comment">//初始化ApplicationContext </span></span><br><span class="line">    <span class="built_in">this</span>.initFrameworkServlet();<span class="comment">//模板设计模式，供子类覆盖实现，但是子类DispatcherServlet没做使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-2"><p>在initWebApplicationContext方法中体现的父子容器的逻辑关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//初始化ApplicationContext是一个及其关键的代码</span></span><br><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获得根容器，其实就是通过ContextLoaderListener创建的ApplicationContext</span></span><br><span class="line">    <span class="comment">//如果配置了ContextLoaderListener则获得根容器，没配置获得的是null</span></span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">            WebApplicationContextUtils.getWebApplicationContext(<span class="built_in">this</span>.getServletContext());</span><br><span class="line">    <span class="comment">//定义SpringMVC产生的ApplicationContext子容器</span></span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//==&gt;创建SpringMVC的子容器，创建同时将Spring的创建的rootContext传递了过去</span></span><br><span class="line">        wac = <span class="built_in">this</span>.createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将SpringMVC产生的ApplicationContext子容器存储到ServletContext域中</span></span><br><span class="line">    <span class="comment">//key名是：org.springframework.web.servlet.FrameworkServlet.CONTEXT.DispatcherServlet</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContextAttributeName();</span><br><span class="line">        <span class="built_in">this</span>.getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-3"><p>跟进创建子容器的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    <span class="comment">//实例化子容器ApplicationContext</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">            (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">    <span class="comment">//设置传递过来的ContextLoaderListener的rootContext为父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="comment">//获得web.xml配置的classpath:spring-mvc.xml</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> <span class="built_in">this</span>.getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//为子容器设置配置加载路径</span></span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化子容器(就是加载spring-mvc.xml配置的Bean)</span></span><br><span class="line">    <span class="built_in">this</span>.configureAndRefreshWebApplicationContext(wac);</span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-4"><p>子容器中的parent维护着父容器的引用</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427153645421.png" alt="image-20230427153645421"></p><p>父容器和子容器概念和关系：</p><ul><li>父容器：Spring 通过ContextLoaderListener为入口产生的applicationContext容器，内部主要维护的是applicationContext.xml（或相应配置类）配置的Bean信息；</li><li>子容器：SpringMVC通过DispatcherServlet的init() 方法产生的applicationContext容器，内部主要维护的是spring-mvc.xml（或相应配置类）配置的Bean信息，且内部还通过parent属性维护这父容器的引用。</li><li>Bean的检索顺序：根据上面子父容器的概念，可以知道Controller存在与子容器中，而Controller中要注入Service时，会先从子容器本身去匹配，匹配不成功时在去父容器中去匹配，于是最终从父容器中匹配到的UserService，这样子父容器就可以进行联通了。但是父容器只能从自己容器中进行匹配，不能从子容器中进行匹配。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-5"><p>注册 SpringMVC的 九大组件，在初始化容器initWebApplicationContext方法中执行了onRefresh方法，进而执行了初始化策略initStrategies方法，注册了九个解析器组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet初始化SpringMVC九大组件</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.initMultipartResolver(context);<span class="comment">//1、初始化文件上传解析器</span></span><br><span class="line">    <span class="built_in">this</span>.initLocaleResolver(context);<span class="comment">//2、初始化国际化解析器</span></span><br><span class="line">    <span class="built_in">this</span>.initThemeResolver(context);<span class="comment">//3、初始化模板解析器</span></span><br><span class="line">    <span class="built_in">this</span>.initHandlerMappings(context);<span class="comment">//4、初始化处理器映射器</span></span><br><span class="line">    <span class="built_in">this</span>.initHandlerAdapters(context);<span class="comment">//5、初始化处理器适配器</span></span><br><span class="line">    <span class="built_in">this</span>.initHandlerExceptionResolvers(context);<span class="comment">//6、初始化处理器异常解析器</span></span><br><span class="line">    <span class="built_in">this</span>.initRequestToViewNameTranslator(context);<span class="comment">//7、初始化请求视图转换器</span></span><br><span class="line">    <span class="built_in">this</span>.initViewResolvers(context);<span class="comment">//8、初始化视图解析器</span></span><br><span class="line">    <span class="built_in">this</span>.initFlashMapManager(context);<span class="comment">//9、初始化lashMapManager策略组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca3a4e03-2303-45ae-916c-f64e2a303cdc-6"><p>以 this.initHandlerMappings(context) 为例，进一步看一下初始化处理器映射器的细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义List容器存储HandlerMapping</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"><span class="comment">//初始化HandlerMapping的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlerMappings = <span class="literal">null</span>;<span class="comment">//初始化集合为null</span></span><br><span class="line">    <span class="comment">//detectAllHandlerMappings默认为true，代表是否从所有容器中(父子容器)检测HandlerMapping</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line">        <span class="comment">//从Spring容器中去匹配HandlerMapping</span></span><br><span class="line">        Map&lt;String, HandlerMapping&gt; matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(context,</span><br><span class="line">                HandlerMapping.class, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//如果从容器中获取的HandlerMapping不为null就加入到事先定义好的handlerMappings容器中</span></span><br><span class="line">        <span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.handlerMappings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(matchingBeans.values());</span><br><span class="line">            AnnotationAwareOrderComparator.sort(<span class="built_in">this</span>.handlerMappings);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果从容器中没有获得HandlerMapping，意味着handlerMappings集合是空的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//加载默认的HandlerMapping，就是加载DispatcherServlet.properties文件中的键值对</span></span><br><span class="line">            <span class="built_in">this</span>.handlerMappings = <span class="built_in">this</span>.getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427154215264.png" alt="image-20230427154215264"></p><p>初始化后，映射信息就已经被封装到HandlerMapping中了，可以在获取matchingBeans处打断点验证</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="6-2-前端控制器执行主流程">6.2 前端控制器执行主流程</h3><p>上面讲解了一下，当服务器启动时，DispatcherServlet 会执行初始化操作，接下来，每次访问都会执行service方法，我们先宏观的看一下执行流程，在去研究源码和组件执行细节</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230429111137565.png" alt="image-20230429111137565" style="zoom:67%;" /><div class="tabs" id="3437a5f1-ec27-476f-9b69-58f18848f585"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3437a5f1-ec27-476f-9b69-58f18848f585-1"><i class="fas fa-cat"></i>processRequest</button></li><li class="tab"><button type="button" data-href="#3437a5f1-ec27-476f-9b69-58f18848f585-2"><i class="fas fa-horse"></i>doService</button></li><li class="tab"><button type="button" data-href="#3437a5f1-ec27-476f-9b69-58f18848f585-3"><i class="fas fa-dove"></i>⭐️doDispatch</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3437a5f1-ec27-476f-9b69-58f18848f585-1"><p>FrameworkServlet 复写了service(HttpServletRequest request, HttpServletResponse response) 、 doGet(HttpServletRequest request, HttpServletResponse response)、doPost(HttpServletRequest request, HttpServletResponse response)等方法，这些方法都会调用processRequest方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.doService(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3437a5f1-ec27-476f-9b69-58f18848f585-2"><p>进一步调用了doService方法，该方法内部又调用了doDispatch方法，而SpringMVC 主流程最核心的方法就是doDispatch 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.doDispatch(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3437a5f1-ec27-476f-9b69-58f18848f585-3"><p>doDispatch方法源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 对原始的请求进行处理，比如 URL 的编码</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> checkMultipart(request);</span><br><span class="line">    <span class="comment">//定义处理器执行链对象</span></span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//定义模型视图对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">    <span class="comment">//匹配处理器映射器HandlerMapping，返回处理器执行链对象</span></span><br><span class="line">    mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">    <span class="comment">//匹配处理器适配器HandlerAdapter，返回处理器适配器对象</span></span><br><span class="line">    <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">    <span class="comment">//执行Interceptor的前置方法preHandle</span></span><br><span class="line">    mappedHandler.applyPreHandle(processedRequest, response);</span><br><span class="line">    <span class="comment">//处理器适配器执行控制器Handler，返回模型视图对象</span></span><br><span class="line">    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">    <span class="comment">//执行Interceptor的后置方法postHandle</span></span><br><span class="line">    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">    <span class="comment">//获取视图渲染视图</span></span><br><span class="line">    <span class="built_in">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="6-2-1-getHandler方法详解">6.2.1 getHandler方法详解</h4><p>doDispatch() 中调用 getHandler 方法获取所有的映射器</p><p>总体流程：</p><ul><li>所有的请求映射都在 HandlerMapping 中，<span class='p green'>RequestMappingHandlerMapping 处理 @RequestMapping 注解的映射规则</span></li><li>遍历所有的 HandlerMapping 看是否可以匹配当前请求，匹配成功后返回，匹配失败设置 HTTP 404 响应码</li><li>用户可以自定义的映射处理，也可以给容器中放入自定义 HandlerMapping</li></ul><p>访问 URL：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/gethandler2.jpg" alt="gethandler2" style="zoom: 33%;" /><div class="tabs" id="aaad200b-ee69-49ad-912a-ba4b279fb02d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#aaad200b-ee69-49ad-912a-ba4b279fb02d-1"><i class="fas fa-seedling"></i>1.getHandler()</button></li><li class="tab"><button type="button" data-href="#aaad200b-ee69-49ad-912a-ba4b279fb02d-2"><i class="fas fa-leaf"></i>2.getHandler()</button></li><li class="tab"><button type="button" data-href="#aaad200b-ee69-49ad-912a-ba4b279fb02d-3"><i class="fab fa-apple"></i>3.getHandlerInterna()</button></li><li class="tab"><button type="button" data-href="#aaad200b-ee69-49ad-912a-ba4b279fb02d-4"><i class="fas fa-tree"></i>4.lookupHandlerMethod()</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="aaad200b-ee69-49ad-912a-ba4b279fb02d-1"><p>HandlerMapping 处理器映射器，保存了所有 <code>@RequestMapping</code> 和 <code>handler</code> 的映射规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历所有的 HandlerMapping</span></span><br><span class="line">        <span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line">            <span class="comment">// 尝试去每个 HandlerMapping 中匹配当前请求的处理 </span></span><br><span class="line">            <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);<span class="comment">// 跳转到2</span></span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> handler;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430111413036.png" alt="image-20230430111413036" style="zoom: 50%;" /><p>有 5 个 Mapping ，查看 RequestMappingHandlerMapping ，可以查看请求映射的注册：/error、/hello，这里就可以找到对应的处理方法：com.yuyu.demo.controller.DemoController.test()</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430111649469.png" alt="image-20230430111649469" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aaad200b-ee69-49ad-912a-ba4b279fb02d-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 获取映射器，底层调用 RequestMappingInfoHandlerMapping 类的方法，又调用 AbstractHandlerMethodMapping#getHandlerInternal</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getHandlerInternal(request); <span class="comment">// 跳转到3</span></span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        handler = getDefaultHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handler == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Bean name or resolved handler?</span></span><br><span class="line">    <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">handlerName</span> <span class="operator">=</span> (String) handler;</span><br><span class="line">        handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure presence of cached lookupPath for interceptors and others</span></span><br><span class="line">    <span class="keyword">if</span> (!ServletRequestPathUtils.hasCachedPath(request)) &#123;</span><br><span class="line">        initLookupPath(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为当前请求和方法构建为一个拦截器链</span></span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">executionChain</span> <span class="operator">=</span> getHandlerExecutionChain(handler, request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> executionChain; <span class="comment">//返回到1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aaad200b-ee69-49ad-912a-ba4b279fb02d-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 地址栏的 uri，这里的 lookupPath 为 /hello</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lookupPath</span> <span class="operator">=</span> initLookupPath(request);</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="built_in">this</span>.mappingRegistry.acquireReadLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过路径从映射注册器里找到对应的映射</span></span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> lookupHandlerMethod(lookupPath, request); <span class="comment">// 跳转到4</span></span><br><span class="line">        <span class="keyword">return</span> (handlerMethod != <span class="literal">null</span> ? handlerMethod.createWithResolvedBean() : <span class="literal">null</span>); <span class="comment">//返回2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aaad200b-ee69-49ad-912a-ba4b279fb02d-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerMethod <span class="title function_">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;Match&gt; matches = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取当前的映射器与当前请求的 URI 有关的所有映射规则</span></span><br><span class="line">    List&lt;T&gt; directPathMatches = <span class="built_in">this</span>.mappingRegistry.getMappingsByDirectPath(lookupPath);</span><br><span class="line">    <span class="keyword">if</span> (directPathMatches != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 匹配某个映射规则</span></span><br><span class="line">        addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 返回找到的最匹配的 处理方法</span></span><br><span class="line">    <span class="keyword">return</span> bestMatch.getHandlerMethod(); <span class="comment">//返回到3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230430114056174.png" alt="image-20230430114056174" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="6-2-2-参数处理原理">6.2.2 参数处理原理</h4><p>doDispatch中</p><ul><li>HandlerMapping中找到能处理请求的Handler(controller.method())</li><li>为当前Handler找一个适配器HandlerAdapter</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//匹配处理器映射器HandlerMapping，返回处理器执行链对象</span></span><br><span class="line">  mappedHandler = <span class="built_in">this</span>.getHandler(processedRequest);</span><br><span class="line">  <span class="comment">//匹配处理器适配器HandlerAdapter，返回处理器适配器对象</span></span><br><span class="line">  <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><div class="tabs" id="2b53a8bd-c0b4-4fed-bb79-497cd459a76a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2b53a8bd-c0b4-4fed-bb79-497cd459a76a-1"><i class="fas fa-seedling"></i>getHandlerAdapter</button></li><li class="tab"><button type="button" data-href="#2b53a8bd-c0b4-4fed-bb79-497cd459a76a-2"><i class="fas fa-leaf"></i>handle</button></li><li class="tab"><button type="button" data-href="#2b53a8bd-c0b4-4fed-bb79-497cd459a76a-3"><i class="fab fa-apple"></i>invokeHandlerMethod</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2b53a8bd-c0b4-4fed-bb79-497cd459a76a-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerAdapter <span class="title function_">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.handlerAdapters != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter adapter : <span class="built_in">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line"><span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多数找到的都是第一个<code>RequestMappingHandlerAdapter</code>,找到适配器后返回改适配器。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230505150121343.png" alt="image-20230505150121343" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2b53a8bd-c0b4-4fed-bb79-497cd459a76a-2"><p><code>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</code></p><p>利用前面找到的HandlerAdapter，把目标Handler，以及Request和Response全部传进去，来执行目标方法。</p><p>内部的处理细节就到了</p><p><code>RequestMappingHandlerAdapter</code>#<code>handleInternal(request, response, handlerMethod)</code>方法中</p><p>在该方法里</p><p><code>mav = invokeHandlerMethod(request, response, handlerMethod);</code>执行目标方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2b53a8bd-c0b4-4fed-bb79-497cd459a76a-3"><p>在该方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletInvocableHandlerMethod</span> <span class="variable">invocableMethod</span> <span class="operator">=</span> createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="comment">//设置参数解析器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) &#123;</span><br><span class="line">    invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置返回值处理器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123;</span><br><span class="line">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 调用处理器方法并处理返回值</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br></pre></td></tr></table></figure><div class="tabs" id="7deda36b-990c-4db1-b08b-716deabfeee1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7deda36b-990c-4db1-b08b-716deabfeee1-1"><i class="fas fa-cat"></i>参数解析器</button></li><li class="tab"><button type="button" data-href="#7deda36b-990c-4db1-b08b-716deabfeee1-2"><i class="fas fa-horse"></i>返回值处理器</button></li><li class="tab"><button type="button" data-href="#7deda36b-990c-4db1-b08b-716deabfeee1-3"><i class="fas fa-dove"></i>执行目标方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7deda36b-990c-4db1-b08b-716deabfeee1-1"><p><code>argumentResolvers</code>参数解析器：确定将要执行的目标方法的每一个参数的值是什么</p><p>参数解析器共有26个，SpringMVC目标方法能写多少种参数类型。取决于参数解析器。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230505152933897.png" alt="image-20230505152933897" style="zoom: 50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7deda36b-990c-4db1-b08b-716deabfeee1-2"><p>返回值处理器共有15种</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230505153622226.png" alt="image-20230505153622226" style="zoom:50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7deda36b-990c-4db1-b08b-716deabfeee1-3"><p>把参数解析器和返回值处理器都设置到<code>invocableMethod</code>中后就可以进行方法执行了</p><p>在<code>invocableMethod.invokeAndHandle(webRequest, mavContainer);</code>方法中，真正执行了Controller中的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">请求处理、响应处理、拦截器、全注解开发、组件原理剖析</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="SpringMVC" scheme="https://wuwawawa.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合Web</title>
    <link href="https://wuwawawa.github.io/posts/6b43be99.html"/>
    <id>https://wuwawawa.github.io/posts/6b43be99.html</id>
    <published>2023-04-30T01:31:36.000Z</published>
    <updated>2023-04-29T05:55:15.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring整合web环境">1. Spring整合web环境</h2><h3 id="1-1-Javaweb三大组件及环境特点">1.1 Javaweb三大组件及环境特点</h3><p>在Java语言范畴内，web层框架都是基于Javaweb基础组件完成的，所以有必要复习一下Javaweb组件的特点</p><table><thead><tr><th style="text-align:left">组件</th><th style="text-align:left">作用</th><th style="text-align:left">特点</th></tr></thead><tbody><tr><td style="text-align:left">Servlet</td><td style="text-align:left">服务端小程序，负责接收客户端请求并作出响应的</td><td style="text-align:left">单例对象，默认第一次访问创建，可以通过配置指定服务器启动就创建，Servlet创建完毕会执行初始化init方法。每个Servlet有一个service方法，每次访问都会执行service方法，但是缺点是一个业务功能就需要配置一个Servlet</td></tr><tr><td style="text-align:left">Filter</td><td style="text-align:left">过滤器，负责对客户端请求进行过滤操作的</td><td style="text-align:left">单例对象，服务器启动时就创建，对象创建完毕执行init方法，对客户端的请求进行过滤，符合要求的放行，不符合要求的直接响应客户端，执行过滤的核心方法doFilter</td></tr><tr><td style="text-align:left">Listener</td><td style="text-align:left">监听器，负责对域对象的创建和属性变化进行监听的</td><td style="text-align:left">根据类型和作用不同，又可分为监听域对象创建销毁和域对象属性内容变化的，根据监听的域不同，又可以分为监听Request域的，监听Session域的，监听ServletContext域的</td></tr></tbody></table><mark class="hl-label green">Servlet知识补充</mark> <div class="tabs" id="ba4120be-81c6-4c79-8d1d-62ec49c11029"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ba4120be-81c6-4c79-8d1d-62ec49c11029-1"><i class="fas fa-cat"></i>实现方式</button></li><li class="tab"><button type="button" data-href="#ba4120be-81c6-4c79-8d1d-62ec49c11029-2"><i class="fas fa-dove"></i>执行原理</button></li><li class="tab"><button type="button" data-href="#ba4120be-81c6-4c79-8d1d-62ec49c11029-3"><i class="fas fa-dragon"></i>生命周期</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ba4120be-81c6-4c79-8d1d-62ec49c11029-1"><p>Servlet实现方式</p><ul><li>实现Servlet接口</li><li>继承GenericServelt抽象类（这个类是Servlet接口的一级实现类）</li><li>继承HttpServlet抽象类就可以间接的实现Servlet接口（位于javax.servlet.http包中的HttpServlet抽象类继承自GenericServlet类，是Servlet接口的二级实现类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line">    ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/874710-20170216094438629-1196159083.png" alt="img" style="zoom:50%;" /><p>在HttpServlet的API中，新增了两个特殊的方法doGet和doPost，这两个方法是对servlet方法的拆分，目的是希望不同的请求方式使用不同的方法处理。而service方法可以处理任何类型的请求。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ba4120be-81c6-4c79-8d1d-62ec49c11029-2"><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容。</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其Service方法</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ba4120be-81c6-4c79-8d1d-62ec49c11029-3"><ul><li>加载和实例化：默认情况下，当Servlet第一次被访问时，由容器创建Servlet对象</li><li>初始化：在Servlet实例化之后，容器将调用Servlet的init()方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。该方法只调用一次</li><li>请求处理：每次请求Servlet时，Servlet容器都会调用Servlet的service()方法对请求进行处理。</li><li>服务终止：当需要释放内存或者容器关闭时，容器就会调用Servlet实例的destroy()方法完成资源的释放。在destroy()方法调用之后，容器会释放这个Servlet实例，该实例随后会被Java的垃圾收集器所回收</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-2-整合web环境思路及实现">1.2 整合web环境思路及实现</h3><p>在进行Java开发时要遵循三层架构+MVC，Spring操作最核心的就是Spring容器，web层需要注入Service，service层需要注入Dao（Mapper），web层使用Servlet技术充当的话，需要在Servlet中获得Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ApplicationContextConfig.class);</span><br><span class="line"><span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> (AccountService)applicationContext.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">accountService.transferMoney(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;lucy&quot;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>Web层代码如果都去编写创建AnnotationConfigApplicationContext的代码，那么配置类重复被加载了， Spring容器也重复被创建了，不能每次想从容器中获得一个Bean都得先创建一次容器，这样肯定是不允许。所以，我们现在的诉求很简单，如下：</p><ul><li><code>ApplicationContext</code>创建一次，配置类加载一次;</li><li>最好web服务器启动时，就执行第1步操作，后续直接从容器中获取Bean使用即可;</li><li><code>ApplicationContext</code>的引用需要在web层任何位置都可以获取到。</li></ul><span class='p green'>针对以上诉求我们给出解决思路，如下</span><ul><li>在<code>ServletContextListener</code>的<code>contextInitialized</code>方法中执行<code>ApplicationContext</code>的创建。或在Servlet的init方法中执行<code>ApplicationContext</code>的创建，并给Servlet的load-on-startup属性一个数字值，确保服务器启动Servlet就创建;</li><li>将创建好的<code>ApplicationContext</code>存储到<code>ServletContext</code>域中，这样整个web层任何位置就都可以获取到了</li></ul><blockquote><p>自定义代码完成上述ContextLoaderListener和WebApplicationContextUtils（见代码）</p></blockquote><div class="tabs" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#985af088-6b5b-4ddc-844e-be0c5d5b5dec-1"><i class="fas fa-seedling"></i>ContextLoaderListener</button></li><li class="tab"><button type="button" data-href="#985af088-6b5b-4ddc-844e-be0c5d5b5dec-2"><i class="fab fa-apple"></i>配置Listener到web.xml中</button></li><li class="tab"><button type="button" data-href="#985af088-6b5b-4ddc-844e-be0c5d5b5dec-3"><i class="fas fa-leaf"></i>获取Spring容器</button></li><li class="tab"><button type="button" data-href="#985af088-6b5b-4ddc-844e-be0c5d5b5dec-4"><i class="fas fa-tree"></i>存在的问题</button></li><li class="tab"><button type="button" data-href="#985af088-6b5b-4ddc-844e-be0c5d5b5dec-5"><i class="fas fa-cookie-bite"></i>解决方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 创建Spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 将容器存储到ServletContext域中</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;applicationContext&quot;</span>,app);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.itheima.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContext.getAttribute(<span class="string">&quot;applicationContext&quot;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec-4"><p>配置文件名字和获取Spring容器key写死</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="985af088-6b5b-4ddc-844e-be0c5d5b5dec-5"><div class="tabs" id="a76920d6-2ba5-4775-ac57-231a39a2183d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a76920d6-2ba5-4775-ac57-231a39a2183d-1"><i class="fas fa-cat"></i>定义配置文件全局参数</button></li><li class="tab"><button type="button" data-href="#a76920d6-2ba5-4775-ac57-231a39a2183d-2"><i class="fas fa-horse"></i>获取配置文件名称</button></li><li class="tab"><button type="button" data-href="#a76920d6-2ba5-4775-ac57-231a39a2183d-3"><i class="fas fa-dove"></i>解耦方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a76920d6-2ba5-4775-ac57-231a39a2183d-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义全局参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.itheima.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76920d6-2ba5-4775-ac57-231a39a2183d-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String CONTEXT_CONFIG_LOCATION= <span class="string">&quot;contextConfigLocation&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="comment">//0. 获取contextConfigLocation配置文件名称</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        <span class="comment">//解析配置文件名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextConfigLocation</span> <span class="operator">=</span> servletContext.getInitParameter(CONTEXT_CONFIG_LOCATION);</span><br><span class="line">        contextConfigLocation= contextConfigLocation.substring(<span class="string">&quot;classpath:&quot;</span>.length());</span><br><span class="line">        <span class="comment">//1. 创建Spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(contextConfigLocation);</span><br><span class="line">        <span class="comment">//2. 将容器存储到ServletContext域中</span></span><br><span class="line"></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;applicationContext&quot;</span>,app);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76920d6-2ba5-4775-ac57-231a39a2183d-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplicationContextUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title function_">getWebApplicationContext</span><span class="params">(ServletContext servletContext)</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContext.getAttribute(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-3-Web开发组件spring-web">1.3 Web开发组件spring-web</h3><p>到此，就将一开始的诉求都解决了，当然我们能想到的Spring 框架自然也会想到，Spring其实已经为我们定义好了一个<code>ContextLoaderListener</code>，使用方式跟我们上面自己定义的大体一样，但是功能要比我们强百倍，所以 ，遵循Spring “拿来主义” 的精神，我们直接使用Spring提供的就可以了。开发如下：</p><div class="tabs" id="b05494f3-2fe1-4bf0-935f-436241e8a631"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b05494f3-2fe1-4bf0-935f-436241e8a631-1"><i class="fas fa-seedling"></i>导入坐标</button></li><li class="tab"><button type="button" data-href="#b05494f3-2fe1-4bf0-935f-436241e8a631-2"><i class="fas fa-leaf"></i>配置web.xml</button></li><li class="tab"><button type="button" data-href="#b05494f3-2fe1-4bf0-935f-436241e8a631-3"><i class="fab fa-apple"></i>使用</button></li><li class="tab"><button type="button" data-href="#b05494f3-2fe1-4bf0-935f-436241e8a631-4"><i class="fas fa-tree"></i>补充</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b05494f3-2fe1-4bf0-935f-436241e8a631-1"><p>先导入Spring-web的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b05494f3-2fe1-4bf0-935f-436241e8a631-2"><p>在web.xml中去配置<code>ContextLoaderListener</code>，并指定配置文件的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Listener--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b05494f3-2fe1-4bf0-935f-436241e8a631-3"><p>在Servlet中直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/accountServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">app</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> app.getBean(AccountService.class);</span><br><span class="line">        accountService.transferMoney(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;lucy&quot;</span>,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b05494f3-2fe1-4bf0-935f-436241e8a631-4"><p>如果核心配置类使用的是注解形式的，那么Spring容器是<code>AnnotationConfigWebApplicationContext</code>，如下配置方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAnnotationConfigWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AnnotationConfigWebApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyAnnotationConfigWebApplicationContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注册核心配置类</span></span><br><span class="line">        <span class="built_in">super</span>.register(ApplicationContextConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextClass<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.itheima.web.MyAnnotationConfigWebApplicationContext<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="2-Web层MVC框架思想与设计思路">2. Web层MVC框架思想与设计思路</h2><p>Java程序员在开发一般都是MVC+三层架构，MVC是web开发模式，传统的Javaweb技术栈实现的MVC如下</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427202851806.png" alt="image-20230427202851806" style="zoom: 50%;" /><p>原始Javaweb开发中，Servlet充当Controller的角色，Jsp充当View角色，JavaBean充当模型角色，后期Ajax异步流行后，在加上现在前后端分离开发模式成熟后，View就被原始Html+Vue替代。原始Javaweb开发中， Service充当Controller有很多弊端，显而易见的有如下几个：</p><table><thead><tr><th style="text-align:left">Servlet作为Controller的问题</th><th style="text-align:left">解决思路和方案</th></tr></thead><tbody><tr><td style="text-align:left">每个业务功能请求都对应一个Servlet</td><td style="text-align:left">根据业务模块去划分Controller</td></tr><tr><td style="text-align:left">每个Servlet的业务操作太繁琐</td><td style="text-align:left">将通用的行为，功能进行抽取封装</td></tr><tr><td style="text-align:left">Servlet获得Spring容器的组件只能通过客户端代码去获取，不能优雅的整合</td><td style="text-align:left">通过Spring的扩展点，去封装一个框架，从原有的Servlet完全接手过来web层的业务</td></tr></tbody></table><p>分析前端控制器基本功能如下：</p><p>1、具备可以映射到业务Bean的能力</p><p>2、具备可以解析请求参数、封装实体等共有功能</p><p>3、具备响应视图及响应其他数据的功能</p><span class='p green'>负责共有行为</span>的Servlet称之为`前端控制器`<span class='p blue'>负责业务行为</span>的JavaBean称之为`控制器Controller`<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427100450596.png" alt="image-20230427100450596" style="zoom: 67%;" />]]></content>
    
    
    <summary type="html">Spring整合web环境、Web层MVC框架思想与设计思路</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="SpringMVC" scheme="https://wuwawawa.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>基于AOP的申明式事务控制</title>
    <link href="https://wuwawawa.github.io/posts/8f292d64.html"/>
    <id>https://wuwawawa.github.io/posts/8f292d64.html</id>
    <published>2023-04-29T13:33:55.000Z</published>
    <updated>2023-04-27T01:25:52.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring事务编程概述">1. Spring事务编程概述</h2><p>事务是开发中必不可少的东西，使用JDBC开发时，我们使用connnection对事务进行控制，使用MyBatis时，我们使用<code>SqlSession</code>对事务进行控制，缺点显而易见，当我们切换数据库访问技术时，事务控制的方式总会变化， Spring 就将这些技术基础上，提供了统一的控制事务的接口。Spring的事务分为：<code>编程式事务控制</code>和<code>声明式事务控制</code></p><table><thead><tr><th>事务控制方式</th><th>解释</th></tr></thead><tbody><tr><td>编程式事务控制</td><td>Spring提供了事务控制的类和方法，使用编码的方式对业务代码进行事务控制，事务控制代码和业务操作代码耦合到了一起，开发中不使用</td></tr><tr><td>声明式事务控制</td><td>Spring将事务控制的代码封装，对外提供了Xml和注解配置方式，通过配置的方式完成事务的控制，可以达到事务控制与业务操作代码解耦合，开发中推荐使用</td></tr></tbody></table><p>Spring事务编程相关的类主要有如下三个</p><table><thead><tr><th style="text-align:left">事务控制相关类</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">平台事务管理器<br/><code>PlatformTransactionManager</code></td><td style="text-align:left">是一个接口标准，实现类都具备事务提交、回滚和获得事务对象的功能，不同持久层框架可能会有不同实现方案</td></tr><tr><td style="text-align:left">事务定义<br/><code>TransactionDefinition</code></td><td style="text-align:left">封装事务的隔离级别、传播行为、过期时间等属性信息</td></tr><tr><td style="text-align:left">事务状态<br/><code>TransactionStatus</code></td><td style="text-align:left">存储当前事务的状态信息，如果事务是否提交、是否回滚、是否有回滚点等</td></tr></tbody></table><p>虽然编程式事务控制我们不学习，但是编程式事务控制对应的这些类我们需要了解一下，因为我们在通过配置的方式进行声明式事务控制时也会看到这些类的影子</p><hr><h2 id="2-搭建测试环境">2. 搭建测试环境</h2><p>搭建一个转账的环境，dao层一个转出钱的方法，一个转入钱的方法，service层一个转账业务方法，内部分别调用dao层转出钱和转入钱的方法，准备工作如下：</p><ul><li><p>数据库准备一个账户表tb_account;</p></li><li><p>dao层准备一个AccountMapper，包括incrMoney和decrMoney两个方法；</p></li><li><p>service层准备一个transferMoney方法，分别调用incrMoney和decrMoney方法；</p></li><li><p>在applicationContext文件中进行Bean的管理配置；</p></li><li><p>测试正常转账与异常转账。</p></li></ul><hr><h2 id="3-基于xml声明式事务控制">3. 基于xml声明式事务控制</h2><p>结合上面我们学习的AOP的技术，很容易就可以想到，可以使用AOP对Service的方法进行事务的增强。</p><ul><li><p>目标类：AccountServiceImpl</p></li><li><p>切点：service业务类中的所有业务方法</p></li><li><p>通知类：Spring提供的，通知方法已经定义好，只需要配置即可</p></li></ul><p>我们分析：</p><p>目标类是我们自己定义的；</p><ul><li><p>通知类是Spring提供的，需要导入Spring事务的相关的坐标；</p></li><li><p>配置目标类AccountServiceImpl；</p></li><li><p>使用advisor标签配置切面。</p></li></ul><p>导入Spring事务的相关的坐标，spring-jdbc坐标已经引入的spring-tx坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426103319358.png" alt="image-20230426103319358"></p><p>配置目标类AccountServiceImpl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccoutServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用advisor标签配置切面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;Spring提供的通知类&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>疑问：Spring提供的通知类是谁？是谁？</p><p>是spring-tx包下的advice标签配置提供的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; </span><br><span class="line">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring提供的事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transferMoney&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;READ_COMMITTED&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--平台事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对上述配置进行详解一下<br>首先，平台事务管理器PlatformTransactionManager是Spring提供的封装事务具体操作的规范接口，封装了事务的提交和回滚方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PlatformTransactionManager</span> <span class="keyword">extends</span> <span class="title class_">TransactionManager</span> &#123;</span><br><span class="line">    TransactionStatus <span class="title function_">getTransaction</span><span class="params">(<span class="meta">@Nullable</span> TransactionDefinition var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionStatus var1)</span> <span class="keyword">throws</span> TransactionException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的持久层框架事务操作的方式有可能不同，所以不同的持久层框架有可能会有不同的平台事务管理器实现，例如，MyBatis作为持久层框架时，使用的平台事务管理器实现是DataSourceTransactionManager。 Hibernate作为持久层框架时，使用的平台事务管理器是HibernateTransactionManager。</p><p>其次，事务定义信息配置，每个事务有很多特性，例如：隔离级别、只读状态、超时时间等，这些信息在开发时可以通过connection进行指定，而此处要通过配置文件进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;方法名称&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;隔离级别&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;传播行为&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;只读状态&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;超时时间&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，name属性名称指定哪个方法要进行哪些事务的属性配置，此处需要区分的是切点表达式指定的方法与此处指定的方法的区别？切点表达式，是过滤哪些方法可以进行事务增强；事务属性信息的name，是指定哪个方法要进行哪些事务属性的配置</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230427092027314.png" alt="image-20230427092027314" style="zoom:67%;" /><p>第一层筛选是符合切面表达式的方法</p><p>第二层是对方法指定事务的属性</p><p>方法名在配置时，也可以使用 * 进行模糊匹配，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--精确匹配transferMoney方法--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transferMoney&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模糊匹配以Service结尾的方法--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*Service&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模糊匹配以insert开头的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;insert*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模糊匹配以update开头的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--模糊匹配任意方法，一般放到最后作为保底匹配--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>isolation属性：指定事务的隔离级别，事务并发存在三大问题：脏读、不可重复读、幻读/虚读。可以通过设置事务的隔离级别来保证并发问题的出现，常用的是READ_COMMITTED 和REPEATABLE_READ</p><table><thead><tr><th style="text-align:left">isolation属性</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">DEFAULT</td><td style="text-align:left">默认隔离级别，取决于当前数据库隔离级别，例如MySQL默认隔离级别是REPEATABLE_READ</td></tr><tr><td style="text-align:left">READ_UNCOMMITTED</td><td style="text-align:left">A事务可以读取到B事务尚未提交的事务记录，不能解决任何并发问题，安全性最低，性能最高</td></tr><tr><td style="text-align:left">READ_COMMITTED</td><td style="text-align:left">A事务只能读取到其他事务已经提交的记录，不能读取到未提交的记录。可以解决脏读问题，但是不能解决不可重复读和幻读</td></tr><tr><td style="text-align:left">REPEATABLE_READ</td><td style="text-align:left">A事务多次从数据库读取某条记录结果一致，可以解决不可重复读，不可以解决幻读</td></tr><tr><td style="text-align:left">SERIALIZABLE</td><td style="text-align:left">串行化，可以解决任何并发问题，安全性最高，但是性能最低</td></tr></tbody></table><p>read-only属性：设置当前的只读状态，如果是查询则设置为true，可以提高查询性能，如果是更新（增删改）操作则设置为false</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一般查询相关的业务操作都会设置为只读模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>timeout属性：设置事务执行的超时时间，单位是秒，如果超过该时间限制但事务还没有完成，则自动回滚事务 ，不在继续执行。默认值是-1，即没有超时时间限制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置查询操作的超时时间是3秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;3&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>propagation属性：设置事务的传播行为，主要解决是A方法调用B方法时，事务的传播方式问题的，例如：使用单方的事务，还是A和B都使用自己的事务等。事务的传播行为有如下七种属性值可配置</p><table><thead><tr><th style="text-align:left">事务传播行为</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">REQUIRED（默认值）</td><td style="text-align:left">A调用B，B需要事务，如果A有事务B就加入A的事务中，如果A没有事务，B就自己创建一个事务</td></tr><tr><td style="text-align:left">REQUIRED_NEW</td><td style="text-align:left">A调用B，B需要新事务，如果A有事务就挂起，B自己创建一个新的事务</td></tr><tr><td style="text-align:left">SUPPORTS</td><td style="text-align:left">A调用B，B有无事务无所谓，A有事务就加入到A事务中，A无事务B就以非事务方式执行</td></tr><tr><td style="text-align:left">NOT_SUPPORTS</td><td style="text-align:left">A调用B，B以无事务方式执行，A如有事务则挂起</td></tr><tr><td style="text-align:left">NEVER</td><td style="text-align:left">A调用B，B以无事务方式执行，A如有事务则抛出异常</td></tr><tr><td style="text-align:left">MANDATORY</td><td style="text-align:left">A调用B，B要加入A的事务中，如果A无事务就抛出异常</td></tr><tr><td style="text-align:left">NESTED</td><td style="text-align:left">A调用B，B创建一个新事务，A有事务就作为嵌套事务存在，A没事务就以创建的新事务执行</td></tr></tbody></table><p>xml方式声明式事务控制的原理浅析一下</p><p><code>&lt;tx:advice&gt;</code>标签使用的命名空间处理器是<code>TxNamespaceHandler</code>，内部注册的是解析器是<code>TxAdviceBeanDefinitionParser</code></p><p><code>this.registerBeanDefinitionParser(&quot;advice&quot;, new TxAdviceBeanDefinitionParser());</code></p><p><code>TxAdviceBeanDefinitionParser</code>中指定了要注册的BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">    <span class="keyword">return</span> TransactionInterceptor.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TxAdviceBeanDefinitionParser</code>二级父类AbstractBeanDefinitionParser的parse方法将<code>TransactionInterceptor</code>以配置的名称(myAdvice)注册到了Spring容器中</p><p><code>parserContext.registerComponent(componentDefinition);</code></p><p>TransactionInterceptor实现了MethodInterceptor接口：AOP的另一种配置方式，该方式需要通知类实现Advice的子功能接口。相当于环绕通知。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title class_">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span>, Serializable&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// Work out the target class: may be &#123;@code null&#125;.</span></span><br><span class="line">        <span class="comment">// The TransactionAttributeSource should be passed the target class</span></span><br><span class="line">        <span class="comment">// as well as the method, which may be from an interface.</span></span><br><span class="line">        Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="literal">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Adapt to TransactionAspectSupport&#x27;s invokeWithinTransaction...</span></span><br><span class="line">        <span class="keyword">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TransactionInterceptor</code>中的invoke方法会被执行，跟踪invoke方法，最终会看到事务的开启和提交</p><ul><li>在AbstractPlatformTransactionManager开启的事务；</li><li>在TransactionAspectSupport提交了事务。</li></ul><hr><h2 id="4-基于注解声明式事务控制">4. 基于注解声明式事务控制</h2><p>注解就是对xml的替代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line">    <span class="comment">//&lt;tx:method name=&quot;*&quot; isolation=&quot;REPEATABLE_READ&quot; propagation=&quot;REQUIRED“/&gt;</span></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ,propagation = Propagation.REQUIRED,readOnly = false,timeout = 5)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferMoney</span><span class="params">(String decrAccountName, String incrAccountName, <span class="type">int</span> money)</span> &#123;</span><br><span class="line">        accountMapper.decrMoney(decrAccountName,money); <span class="comment">//转出钱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>; <span class="comment">//模拟某些逻辑产生的异常</span></span><br><span class="line">        accountMapper.incrMoney(incrAccountName,money); <span class="comment">//转入钱</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，使用的事务的注解，平台事务管理器仍然需要配置，还需要进行事务注解开关的开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用全注解的话，使用如下配置类的形式代替配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.service&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.itheima.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">tansactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略其他配置 ...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Spring事务编程</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>基于注解配置的AOP</title>
    <link href="https://wuwawawa.github.io/posts/62726e73.html"/>
    <id>https://wuwawawa.github.io/posts/62726e73.html</id>
    <published>2023-04-28T13:33:28.000Z</published>
    <updated>2023-04-26T12:46:24.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-注解方式AOP基本使用">1. 注解方式AOP基本使用</h2><p>Spring的AOP也提供了注解方式配置，使用相应的注解替代之前的xml配置，xml配置AOP时，我们主要配置了三部分：<code>目标类被Spring容器管理</code>、<code>通知类被Spring管理</code>、<code>通知与切点的织入（切面）</code>，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.TargetImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;advices&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Advices&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;advices&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目标类被Spring容器管理、通知类被Spring管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetImpl</span> <span class="keyword">implements</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show Target running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前通知...&quot;</span>); </span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后通知...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置aop，其实配置aop主要就是配置通知类中的哪个方法（通知类型）对应的切点表达式是什么</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426100037391.png" alt="image-20230426100037391"></p><p>注解@Aspect、@Around需要被Spring解析，所以在Spring核心配置文件中需要配置aspectj的自动代理</p><p><code>&lt;aop:aspectj-autoproxy/&gt;</code></p><p>如果核心配置使用的是配置类的话，需要配置注解方式的aop自动代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.aop&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>    <span class="comment">//第三步</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123; &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-注解方式AOP配置详解">2. 注解方式AOP配置详解</h2><p>各种注解方式通知类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置通知</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//后置通知</span></span><br><span class="line"><span class="meta">@AfterReturning(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterReturning</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//环绕通知</span></span><br><span class="line"><span class="meta">@Around(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;&#125;</span><br><span class="line"><span class="comment">//异常通知</span></span><br><span class="line"><span class="meta">@AfterThrowing(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowing</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//最终通知</span></span><br><span class="line"><span class="meta">@After(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>切点表达式的抽取，使用一个空方法，将切点表达式标注在空方法上，其他通知方法引用即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnoAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//切点表达式抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;AnnoAdvice.pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterReturning</span><span class="params">(JoinPoint joinPoint)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// ...  省略其他代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="3-注解方式AOP原理剖析">3. 注解方式AOP原理剖析</h2><p>之前在使用xml配置AOP时，是借助的Spring的外部命名空间的加载方式完成的，使用注解配置后，就抛弃了<code>&lt;aop:config&gt;</code>标签，而该标签最终加载了名为<code>AspectJAwareAdvisorAutoProxyCreator</code>的<code>BeanPostProcessor</code> ，最终，在该<code>BeanPostProcessor</code>中完成了代理对象的生成。同样，从aspectj-autoproxy标签的解析器入手</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启aop aspectj的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>this.registerBeanDefinitionParser(&quot;aspectj-autoproxy&quot;, new AspectJAutoProxyBeanDefinitionParser());</code></p><p>而<code>AspectJAutoProxyBeanDefinitionParser</code>代码内部，最终也是执行了和xml方式AOP一样的代码</p><p><code>registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source)</code></p><p>如果使用的是核心配置类的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.aop&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>查看<code>@EnableAspectJAutoProxy</code>源码，使用的也是@Import导入相关解析类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Import导入的<code>AspectJAutoProxyRegistrar</code>源码，一路追踪下去，最终还是注册了<code>AnnotationAwareAspectJAutoProxyCreator</code> 这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(</span></span><br><span class="line"><span class="params">            AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">       <span class="comment">//省略部分代码。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title function_">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry, (Object)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BeanDefinition <span class="title function_">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="params">(BeanDefinitionRegistry registry, <span class="meta">@Nullable</span> Object source)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator.class, registry, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426102339961.png" alt="image-20230426102339961"></p>]]></content>
    
    
    <summary type="html">注解方式AOP使用</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>基于xml配置的AOP</title>
    <link href="https://wuwawawa.github.io/posts/a160028.html"/>
    <id>https://wuwawawa.github.io/posts/a160028.html</id>
    <published>2023-04-27T13:33:20.000Z</published>
    <updated>2023-05-05T08:56:52.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-xml方式AOP快速入门">1. xml方式AOP快速入门</h2><p>前面我们自己编写的AOP基础代码还是存在一些问题的，主要如下：</p><ul><li><p>被增强的包名在代码写死了</p></li><li><p>通知对象的方法在代码中写死了</p></li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425231850726.png" alt="image-20230425231850726"></p><p>通过配置文件的方式去解决上述问题</p><ul><li><p>配置哪些包、哪些类、哪些方法需要被增强</p></li><li><p>配置目标方法要被哪些通知方法所增强，在目标方法执行之前还是之后执行增强</p></li></ul><p>配置方式的设计、配置文件（注解）的解析工作，Spring已经帮我们封装好了</p><mark class="hl-label blue">xml方式配置AOP的步骤</mark> <p>1、导入AOP相关坐标；</p><p>2、准备目标类、准备增强类，并配置给Spring管理；</p><p>3、配置切点表达式（哪些方法被增强）；</p><p>4、配置织入（切点被哪些通知方法增强，是前置增强还是后置增强）。</p><div class="tabs" id="18de34b1-8a24-42ce-9eda-2e237858faad"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#18de34b1-8a24-42ce-9eda-2e237858faad-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#18de34b1-8a24-42ce-9eda-2e237858faad-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#18de34b1-8a24-42ce-9eda-2e237858faad-3"><i class="fab fa-apple"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="18de34b1-8a24-42ce-9eda-2e237858faad-1"><p>1、导入AOP相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring-context坐标下已经包含spring-aop的包了，所以就不用额外导入了</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425232107831.png" alt="image-20230425232107831"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="18de34b1-8a24-42ce-9eda-2e237858faad-2"><p>2、准备目标类、准备增强类，并配置给Spring管理</p><div class="tabs" id="d7ca60e6-5710-474b-bdcd-465e32637d66"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d7ca60e6-5710-474b-bdcd-465e32637d66-1"><i class="fas fa-cat"></i>userService</button></li><li class="tab"><button type="button" data-href="#d7ca60e6-5710-474b-bdcd-465e32637d66-2"><i class="fas fa-horse"></i>UserServiceImpl</button></li><li class="tab"><button type="button" data-href="#d7ca60e6-5710-474b-bdcd-465e32637d66-3"><i class="fas fa-dove"></i>增强类</button></li><li class="tab"><button type="button" data-href="#d7ca60e6-5710-474b-bdcd-465e32637d66-4"><i class="fas fa-dragon"></i>配置给Spring管理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d7ca60e6-5710-474b-bdcd-465e32637d66-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d7ca60e6-5710-474b-bdcd-465e32637d66-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d7ca60e6-5710-474b-bdcd-465e32637d66-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeAdvice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterAdvice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d7ca60e6-5710-474b-bdcd-465e32637d66-4"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标类,内部的方法是连接点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知类,内部的方法是增强方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“myAdvice</span>&quot; <span class="attr">class</span>=<span class="string">&quot;com.itheima.advice.MyAdvice&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="18de34b1-8a24-42ce-9eda-2e237858faad-3"><p>3、配置切点表达式（哪些方法被增强）</p><p>4、配置织入（切点被哪些通知方法增强，是前置增强还是后置增强）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切点表达式,对哪些方法进行增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.itheima.service.impl.UserServiceImpl.show1())&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切面=切点+通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定前置通知方法是beforeAdvice--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定后置通知方法是afterAdvice--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="2-xml方式AOP配置详解">2. xml方式AOP配置详解</h2><p>xml配置AOP的方式还是比较简单的，下面看一下AOP详细配置的细节：</p><ul><li>切点表达式的配置方式</li><li>切点表达式的配置语法</li><li>通知的类型</li><li>AOP的配置的两种方式</li></ul><mark class="hl-label blue">切点表达式的配置方式</mark> <p>切点表达式的配置方式有两种，直接将切点表达式配置在通知上，也可以将切点表达式抽取到外面，在通知上进行引用</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426082456137.png" alt="image-20230426082456137" style="zoom:67%;" /><mark class="hl-label green">切点表达式的配置语法</mark> <p>切点表达式是配置要对哪些连接点（哪些类的哪些方法）进行通知的增强，语法如下：</p><p><code>execution([访问修饰符]返回值类型 包名.类名.方法名(参数))</code></p><p>其中，</p><ul><li><p>访问修饰符可以省略不写；</p></li><li><p>返回值类型、某一级包名、类名、方法名可以使用<code>*</code>表示任意；</p></li><li><p>包名与类名之间使用单点<code>.</code>表示该包下的类，使用双点<code>..</code>表示该包及其子包下的类；</p></li><li><p>参数列表可以使用两个点<code>..</code>表示任意参数。</p></li></ul><p>切点表达式举几个例子方便理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示访问修饰符为public、无返回值、在com.itheima.aop包下的TargetImpl类的无参方法show</span></span><br><span class="line">execution(<span class="keyword">public</span> <span class="keyword">void</span> com.itheima.aop.TargetImpl.show())</span><br><span class="line"><span class="comment">//表述com.itheima.aop包下的TargetImpl类的任意方法</span></span><br><span class="line">execution(* com.itheima.aop.TargetImpl.*(..))</span><br><span class="line"><span class="comment">//表示com.itheima.aop包下的任意类的任意方法</span></span><br><span class="line">execution(* com.itheima.aop.*.*(..))</span><br><span class="line"><span class="comment">//表示com.itheima.aop包及其子包下的任意类的任意方法</span></span><br><span class="line">execution(* com.itheima.aop..*.*(..))</span><br><span class="line"><span class="comment">//表示任意包中的任意类的任意方法</span></span><br><span class="line">execution(* *..*.*(..))</span><br></pre></td></tr></table></figure><mark class="hl-label blue">通知的类型</mark> <p>AspectJ的通知由以下五种类型</p><table><thead><tr><th>通知名称</th><th>配置方式</th><th>执行时机</th></tr></thead><tbody><tr><td>前置通知</td><td>&lt; aop:before &gt;</td><td>目标方法执行之前执行</td></tr><tr><td>后置通知</td><td>&lt; aop:after-returning&gt;</td><td>目标方法执行之后执行，目标方法异常时，不在执行</td></tr><tr><td>环绕通知</td><td>&lt; aop:around &gt;</td><td>目标方法执行前后执行，目标方法异常时，环绕后方法不在执行</td></tr><tr><td>异常通知</td><td>&lt; aop:after-throwing &gt;</td><td>目标方法抛出异常时执行，异常通知方法执行，且后置通知和环绕后通知不在执行</td></tr><tr><td>最终通知</td><td>&lt; aop:after &gt;</td><td>不管目标方法是否有异常，最终都会执行</td></tr></tbody></table><div class="tabs" id="c73ab74c-7728-4125-864d-68ba4ba92ce2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c73ab74c-7728-4125-864d-68ba4ba92ce2-1"><i class="fas fa-bug"></i>环绕通知</button></li><li class="tab"><button type="button" data-href="#c73ab74c-7728-4125-864d-68ba4ba92ce2-2"><i class="fas fa-cannabis"></i>异常通知</button></li><li class="tab"><button type="button" data-href="#c73ab74c-7728-4125-864d-68ba4ba92ce2-3"><i class="fas fa-candy-cane"></i>最终通知</button></li><li class="tab"><button type="button" data-href="#c73ab74c-7728-4125-864d-68ba4ba92ce2-4"><i class="fas fa-child"></i>参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c73ab74c-7728-4125-864d-68ba4ba92ce2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//环绕前</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕前通知&quot;</span>); </span><br><span class="line">    <span class="comment">//目标方法</span></span><br><span class="line">    joinPoint.proceed();</span><br><span class="line">    <span class="comment">//环绕后</span></span><br><span class="line">    System.out.println(<span class="string">&quot;环绕后通知&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;aop:around method=&quot;around&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c73ab74c-7728-4125-864d-68ba4ba92ce2-2"><p>当目标方法抛出异常时，异常通知方法执行，且后置通知和环绕后通知不在执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;目标方法抛出异常了，后置通知和环绕后通知不在执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c73ab74c-7728-4125-864d-68ba4ba92ce2-3"><p>类似异常捕获中的finally，不管目标方法有没有异常，最终都会执行的通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不管目标方法有无异常，我都会执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;myPointcut&quot;/&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c73ab74c-7728-4125-864d-68ba4ba92ce2-4"><p>通知方法在被调用时，Spring可以为其传递一些必要的参数</p><table><thead><tr><th>参数类型</th><th>作用</th></tr></thead><tbody><tr><td>JoinPoint</td><td>连接点对象，任何通知都可使用，可以获得当前目标对象、目标方法参数等信息</td></tr><tr><td>ProceedingJoinPoint</td><td>JoinPoint子类对象，主要是在环绕通知中执行proceed()，进而执行目标方法</td></tr><tr><td>Throwable</td><td>异常对象，使用在异常通知中，需要在配置文件中指出异常对象名称</td></tr></tbody></table><div class="tabs" id="1b1e2623-a6b7-47c1-838e-59af11c2de32"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1b1e2623-a6b7-47c1-838e-59af11c2de32-1"><i class="fas fa-atom"></i>JoinPoint</button></li><li class="tab"><button type="button" data-href="#1b1e2623-a6b7-47c1-838e-59af11c2de32-2"><i class="far fa-sun"></i>ProceedingJoinPoint</button></li><li class="tab"><button type="button" data-href="#1b1e2623-a6b7-47c1-838e-59af11c2de32-3"><i class="fas fa-wind"></i>Throwable</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1b1e2623-a6b7-47c1-838e-59af11c2de32-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 通知方法名称(JoinPoint joinPoint)&#123;</span><br><span class="line">    <span class="comment">//获得目标方法的参数</span></span><br><span class="line">    System.out.println(joinPoint.getArgs());</span><br><span class="line">    <span class="comment">//获得目标对象</span></span><br><span class="line">    System.out.println(joinPoint.getTarget());</span><br><span class="line">    <span class="comment">//获得精确的切点表达式信息</span></span><br><span class="line">    System.out.println(joinPoint.getStaticPart());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1b1e2623-a6b7-47c1-838e-59af11c2de32-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(joinPoint.getArgs());<span class="comment">//获得目标方法的参数</span></span><br><span class="line">    System.out.println(joinPoint.getTarget());<span class="comment">//获得目标对象</span></span><br><span class="line">    System.out.println(joinPoint.getStaticPart());<span class="comment">//获得精确的切点表达式信息Object result = joinPoint.proceed();//执行目标方法</span></span><br><span class="line">    <span class="keyword">return</span> result;<span class="comment">//返回目标方法返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1b1e2623-a6b7-47c1-838e-59af11c2de32-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable th)</span>&#123;</span><br><span class="line">    <span class="comment">//获得异常信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;异常对象是：&quot;</span>+th+<span class="string">&quot;异常信息是：&quot;</span>+th.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;aop:after-throwing method=&quot;afterThrowing&quot; pointcut-ref=&quot;myPointcut&quot; throwing=&quot;th&quot;/&gt;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">注解方式AOP配置</mark> <p>AOP的另一种配置方式，该方式需要通知类实现Advice的子功能接口</p><p><code>public interface Advice &#123; &#125;</code></p><p>Advice的子功能接口</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426083824964.png" alt="image-20230426083824964" style="zoom:67%;" /><p>例如：通知类实现了前置通知和后置通知接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advices</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is before Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is afterReturn Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面使用advisor标签配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将通知和切点进行结合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;advices&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.itheima.aop.TargetImpl.show())&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>又例如：通知类实现了方法拦截器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置逻辑功能...&quot;</span>);</span><br><span class="line">        <span class="comment">//执行目标方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span></span><br><span class="line">                methodInvocation.getMethod().invoke(methodInvocation.getThis(),methodInvocation.getArguments());</span><br><span class="line">        System.out.println(<span class="string">&quot;后置逻辑功能...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切面使用advisor标签配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将通知和切点进行结合 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">“myMethodInterceptor</span>&quot; <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.itheima.aop.TargetImpl.show())&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用aspect和advisor配置区别如下：</p></blockquote><div class="tabs" id="9ba70f6a-2861-4c17-8034-c845a9333ab3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9ba70f6a-2861-4c17-8034-c845a9333ab3-1"><i class="fas fa-award"></i>1配置语法不同</button></li><li class="tab"><button type="button" data-href="#9ba70f6a-2861-4c17-8034-c845a9333ab3-2"><i class="fas fa-baseball-ball"></i>2通知类的定义要求不同</button></li><li class="tab"><button type="button" data-href="#9ba70f6a-2861-4c17-8034-c845a9333ab3-3"><i class="fas fa-bone"></i>3可配置的切面数量不同</button></li><li class="tab"><button type="button" data-href="#9ba70f6a-2861-4c17-8034-c845a9333ab3-4"><i class="fas fa-anchor"></i>4使用场景不同</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9ba70f6a-2861-4c17-8034-c845a9333ab3-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用advisor配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- advice-ref:通知Bean的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;advices&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.itheima.aop.TargetImpl.show())&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用aspect配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ref:通知Bean的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;advices&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(void com.itheima.aop.TargetImpl.show())&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9ba70f6a-2861-4c17-8034-c845a9333ab3-2"><p>advisor 需要的通知类需要实现Advice的子功能接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advices</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is before Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is afterReturn Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aspect 不需要通知类实现任何接口，在配置的时候指定哪些方法属于哪种通知类型即可，更加灵活方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advices</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is before Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is afterReturn Advice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9ba70f6a-2861-4c17-8034-c845a9333ab3-3"><ul><li>一个<code>advisor</code>只能配置一个固定通知和一个切点表达式；</li><li>一个<code>aspect</code>可以配置多个通知和多个切点表达式任意组合，粒度更细。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9ba70f6a-2861-4c17-8034-c845a9333ab3-4"><ul><li>如果通知类型多、允许随意搭配情况下可以使用aspect进行配置；</li><li>如果通知类型单一、且通知类中通知方法一次性都会使用到的情况下可以使用advisor进行配置；</li><li>在通知类型已经固定，不用人为指定通知类型时，可以使用advisor进行配置，例如后面要学习的Spring事务控制的配置；</li></ul><p>由于实际开发中，自定义aop功能的配置大多使用aspect的配置方式，所以我们后面主要讲解aspect的配置， advisor是为了后面Spring声明式事务控制做铺垫，此处大家了解即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h2 id="3-xml方式AOP原理剖析">3. xml方式AOP原理剖析</h2><p>通过xml方式配置AOP时，我们引入了AOP的命名空间，根据讲解的，要去找spring-aop包下的META-INF，在去找spring.handlers文件</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426085403463.png" alt="image-20230426085403463"></p><p><code>http\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler</code></p><p>最终加载的是 AopNamespaceHandler，该Handler的init方法中注册了config标签对应的解析器</p><p><code>this.registerBeanDefinitionParser(&quot;config&quot;, new ConfigBeanDefinitionParser());</code></p><p>以<code>ConfigBeanDefinitionParser</code>作为入口进行源码剖析，最终会注册一个<code>AspectJAwareAdvisorAutoProxyCreator</code>进入到Spring容器中，那该类作用是什么呢？看一下集成体系图</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426193205755.png" alt="image-20230426193205755"></p><p><code>AspectJAwareAdvisorAutoProxyCreator</code>的上上级父类<code>AbstractAutoProxyCreator</code>中的<code>postProcessAfterInitialization</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数bean：为目标对象</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(<span class="meta">@Nullable</span> Object bean, String beanName)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="built_in">this</span>.getCacheKey(bean.getClass(), beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.earlyProxyReferences.remove(cacheKey) != bean) &#123;</span><br><span class="line">            /如果需要被增强，则wrapIfNecessary方法最终返回的就是一个Proxy对象</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过断点方式观察，当bean是匹配切点表达式时，<code>this.wrapIfNecessary(bean, beanName, cacheKey)</code>返回的是一个<code>JDKDynamicAopProxy</code></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426094655874.png" alt="image-20230426094655874"></p><p>可以在深入一点，对wrapIfNecessary在剖析一下，看看是不是我们熟知的通过JDK的<code>Proxy.newProxyInstance(ClassLoaderloader, Class&lt;?&gt;[] interfaces,InvocationHandlerh) </code>的方式创建的代理对象呢？经过如下一系列源码跟踪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==&gt; <span class="built_in">this</span>.wrapIfNecessary(bean, beanName, cacheKey)</span><br><span class="line">==&gt; <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="built_in">this</span>.createProxy(参数省略)</span><br><span class="line">==&gt; proxyFactory.getProxy(classLoader)</span><br><span class="line">==&gt; <span class="built_in">this</span>.createAopProxy().getProxy(classLoader)</span><br><span class="line">==&gt; getProxy()是一个接口方法，实现类有两个，如下截图</span><br><span class="line">==&gt; Proxy.newProxyInstance(classLoader, <span class="built_in">this</span>.proxiedInterfaces, <span class="built_in">this</span>)</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426094759365.png" alt="image-20230426094759365"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426094809490.png" alt="image-20230426094809490"   /><p>动态代理的实现的选择，在调用getProxy() 方法时，我们可选用的 AopProxy接口有两个实现类，如上图，这两种都是动态生成代理对象的方式，一种就是基于JDK的，一种是基于Cglib的</p><table><thead><tr><th>代理技术</th><th>使用条件</th><th>配置方式</th></tr></thead><tbody><tr><td>JDK 动态代理技术</td><td>目标类有接口，是基于接口动态生成实现类的代理对象</td><td>目标类有接口的情况下，默认方式</td></tr><tr><td>Cglib动态代理技术</td><td>目标类无接口且不能使用final修饰，是基于被代理对象动态生成子对象为代理对象</td><td>目标类无接口时，默认使用该方式；目标类有接口时，手动配置<code>&lt;aop:configproxy-target-class=“true”&gt;</code>强制使用Cglib方式</td></tr></tbody></table><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426094935078.png" alt="image-20230426094935078" style="zoom:67%;" /><p>JDK的动态代理代码，之前已经写过了，下面看一下Cglib基于超类的动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Target</span>();<span class="comment">//目标对象</span></span><br><span class="line"><span class="type">Advices</span> <span class="variable">advices</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Advices</span>();<span class="comment">//通知对象</span></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();<span class="comment">//增强器对象</span></span><br><span class="line">enhancer.setSuperclass(Target.class);<span class="comment">//增强器设置父类</span></span><br><span class="line"><span class="comment">//增强器设置回调</span></span><br><span class="line">enhancer.setCallback((MethodInterceptor )(o, method, objects, methodProxy) -&gt; &#123;</span><br><span class="line">    advices.before();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, objects); advices.afterReturning();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line"><span class="type">Target</span> <span class="variable">targetProxy</span> <span class="operator">=</span> (Target) enhancer.create();</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> targetProxy.show(<span class="string">&quot;haohao&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">xml方式AOP配置</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>AOP简介</title>
    <link href="https://wuwawawa.github.io/posts/637d34d.html"/>
    <id>https://wuwawawa.github.io/posts/637d34d.html</id>
    <published>2023-04-26T13:32:28.000Z</published>
    <updated>2023-04-25T15:08:46.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AOP的概念">1. AOP的概念</h2><p>AOP，Aspect Oriented Programming，面向切面编程，是对面向对象编程OOP的升华。OOP是纵向对一个事物的抽象，一个对象包括静态的属性信息，包括动态的方法信息等。而AOP是横向的对不同事物的抽象，属性与属性、方法与方法、对象与对象都可以组成一个切面，而用这种思维去设计编程的方式叫做面向切面编程。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425225226776.png" alt="image-20230425225226776" style="zoom:67%;" /><hr><h2 id="2-AOP思想的实现方案">2. AOP思想的实现方案</h2><p><code>动态代理技术</code>，在运行期间，对目标对象的方法进行增强，代理对象同名方法内可以执行原有逻辑的同时嵌入执行其他增强逻辑或其他对象的方法。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425225336104.png" alt="image-20230425225336104"  /><hr><h2 id="3-模拟AOP的基础代码">3. 模拟AOP的基础代码</h2><p>在之前学习<code>BeanPostProcessor</code>时，在<code>BeanPostProcessor</code>的<code>after</code>方法中使用动态代理对Bean进行了增强，实际存储到单例池<code>singleObjects</code>中的不是当前目标对象本身，而是当前目标对象的代理对象Proxy，这样在调用目标对象方法时，<span class='p red'>实际调用的是代理对象Proxy的同名方法</span>，起到了目标方法前后都进行增强的功能，对该方式进行一下优化，将增强的方法提取出去到一个增强类中，且只对<code>com.itheima.service.impl</code>包下的任何类的任何方法进行增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义增强类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;beforeAdvice ...&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterAdvice ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockAopBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>, ApplicationContextAware &#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;<span class="comment">//注入Spring容器对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">MyAdvice</span> <span class="variable">myAdvice</span> <span class="operator">=</span> applicationContext.getBean(MyAdvice.class);<span class="comment">//获得Advice对象String packageName = bean.getClass().getPackage().getName();</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;com.itheima.service.impl&quot;</span>.equals(packageName))&#123;</span><br><span class="line">            <span class="comment">//对Bean进行动态代理，返回的是Proxy代理对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">proxyBean</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                    bean.getClass().getClassLoader(),</span><br><span class="line">                    bean.getClass().getInterfaces(),</span><br><span class="line">                    (Object proxy, Method method, Object[] args) -&gt; &#123;</span><br><span class="line">                        myAdvice.beforeAdvice();<span class="comment">//执行Advice的before方法</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(bean, args);<span class="comment">//执行目标</span></span><br><span class="line">                        myAdvice.afterAdvice();<span class="comment">//执行Advice的after方法</span></span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//返回代理对象</span></span><br><span class="line">            <span class="keyword">return</span> proxyBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-AOP相关概念">4. AOP相关概念</h2><table><thead><tr><th style="text-align:left">概念</th><th style="text-align:left">单词</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left">目标对象</td><td style="text-align:left">Target</td><td style="text-align:left">被增强的方法所在的对象</td></tr><tr><td style="text-align:left">代理对象</td><td style="text-align:left">Proxy</td><td style="text-align:left">对目标对象进行增强后的对象，客户端实际调用的对象</td></tr><tr><td style="text-align:left">连接点</td><td style="text-align:left">Joinpoint</td><td style="text-align:left">目标对象中可以被增强的方法</td></tr><tr><td style="text-align:left">切入点</td><td style="text-align:left">Pointcut</td><td style="text-align:left">目标对象中实际被增强的方法</td></tr><tr><td style="text-align:left">通知\增强</td><td style="text-align:left">Advice</td><td style="text-align:left">增强部分的代码逻辑</td></tr><tr><td style="text-align:left">切面</td><td style="text-align:left">Aspect</td><td style="text-align:left">增强和切入点的组合</td></tr><tr><td style="text-align:left">织入</td><td style="text-align:left">Weaving</td><td style="text-align:left">将通知和切入点组合动态组合的过程</td></tr></tbody></table><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425230804795.png" alt="image-20230425230804795"></p>]]></content>
    
    
    <summary type="html">AOP概念、实现方案、基础代码</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>基于注解的Spring应用</title>
    <link href="https://wuwawawa.github.io/posts/93be85ee.html"/>
    <id>https://wuwawawa.github.io/posts/93be85ee.html</id>
    <published>2023-04-25T09:06:46.000Z</published>
    <updated>2023-04-26T08:38:30.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Bean基本注解开发">1. Bean基本注解开发</h2><p>Spring除了xml配置文件进行配置之外，还可以使用注解方式进行配置，注解方式慢慢成为xml配置的替代方案。我们有了xml开发的经验，学习注解开发就方便了许多，注解开发更加快捷方便。Spring提供的注解有三个版本：</p><ul><li>2.0时代，Spring开始出现注解</li><li>2.5时代，Spring的Bean配置可以使用注解完成</li><li>3.0时代，Spring其他配置也可以使用注解完成，我们进入全注解时代</li></ul><p>基本Bean注解，主要是使用注解的方式替代原有xml的<code>&lt;bean&gt;</code>标签及其标签属性的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">abstract</span>=<span class="string">&quot;&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>@Component</code>注解替代<code>&lt;bean&gt;</code>标签</p><table><thead><tr><th>xml配置</th><th>注解</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt; </code></td><td>@Component</td><td>被该注解标识的类，会在指定扫描范围内被Spring加载并实例化</td></tr></tbody></table><p>可以通过@Component注解的value属性指定当前Bean实例的beanName，也可以省略不写，不写的情况下为当前类名首字母小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取方式：applicationContext.getBean(&quot;userDao&quot;);</span></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取方式：applicationContext.getBean(&quot;userDaoImpl&quot;);</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解对需要被Spring实例化的Bean进行标注，但是需要告诉Spring去哪找这些Bean，要配置组件扫描路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/xmlSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 告知Spring框架去itheima包及其子包下去扫描使用了注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@Component就单纯一个value属性，那么xml配置<code>&lt;bean&gt;</code>时那些属性怎么进行配置呢？Spring 是通过注解方式去配置的之前<code>&lt;bean&gt;</code>标签中的那些属性，例如：@Scope</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">abstract</span>=<span class="string">&quot;&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用@Component 注解替代<code>&lt;bean&gt;</code>标签</p><table><thead><tr><th>xml配置</th><th>注解</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;bean scope=&quot;&quot;&gt;</code></td><td>@Scope</td><td>在类上或使用了@Bean标注的方法上，标注Bean的作用范围，取值为singleton或prototype</td></tr><tr><td><code>&lt;bean lazy-init=&quot;&quot;&gt;</code></td><td>@Lazy</td><td>在类上或使用了@Bean标注的方法上，标注Bean是否延迟加载，取值为true和false</td></tr><tr><td><code>&lt;bean init-method=&quot;&quot;&gt;</code></td><td>@PostConstruct</td><td>在方法上使用，标注Bean的实例化后执行的方法</td></tr><tr><td><code>&lt;bean destroy-method=&quot;&quot;&gt;</code></td><td>@PreDestroy</td><td>在方法上使用，标注Bean的销毁前执行方法</td></tr></tbody></table><p>使用上述注解完成UserDaoImpl的基本配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Lazy(true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于JavaEE开发是分层的，为了每层Bean标识的注解语义化更加明确，@Component又衍生出如下三个注解：</p><table><thead><tr><th style="text-align:left">@Component衍生注解</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">@Repository</td><td style="text-align:left">在Dao层类上使用</td></tr><tr><td style="text-align:left">@Service</td><td style="text-align:left">在Service层类上使用</td></tr><tr><td style="text-align:left">@Controller</td><td style="text-align:left">在Web层类上使用</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Controller(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-Bean依赖注入注解开发">2. Bean依赖注入注解开发</h2><p>Bean依赖注入的注解，主要是使用注解的方式替代xml的<code>&lt;property&gt;</code>标签完成属性的注入操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring主要提供如下注解，用于在Bean内部进行属性注入的：</p><table><thead><tr><th style="text-align:left">属性注入注解</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">@Value</td><td style="text-align:left">使用在字段或方法上，用于注入普通数据</td></tr><tr><td style="text-align:left">@Autowired</td><td style="text-align:left">使用在字段或方法上，用于根据类型(byType)注入引用数据</td></tr><tr><td style="text-align:left">@Qualifier</td><td style="text-align:left">使用在字段或方法上，结合@Autowired，根据名称注入</td></tr><tr><td style="text-align:left">@Resource</td><td style="text-align:left">使用在字段或方法上，根据类型或名称进行注入</td></tr></tbody></table><hr><h3 id="2-1-Value注解">2.1 @Value注解</h3><p>通过@Value 直接注入普通属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;haohao&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者通过set方法注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;haohao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过@Value 注入properties文件中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载properties文件</p><p><code>&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</code></p><hr><h3 id="2-2-Autowired注解">2.2 @Autowired注解</h3><p>@Autowired注解，用于根据类型进行注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用在属性上直接注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//使用在方法上直接注入</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当容器中同一类型的Bean实例有多个时，会尝试自动根据名字进行二次匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配当前Bean</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;userDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>当容器中同一类型的Bean实例有多个时，且名字与被注入Bean名称不匹配时会报错</p><p><code>@Autowired</code>和<code>@Qualifier</code>配合使用，直接匹配名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;userDao2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-Resource注解">2.3 @Resource注解</h3><p>@Resource注解既可以根据类型注入，也可以根据名称注入，无参就是根据类型注入，有参数就是根据名称注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="meta">@Resource(name = &quot;userDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PS：@Resource注解存在与 javax.annotation 包中，Spring对其进行了解析</p><hr><h2 id="3-非自定义Bean注解开发">3. 非自定义Bean注解开发</h2><p>非自定义Bean不能像自定义Bean一样使用@Component进行管理，非自定义Bean要通过工厂的方式进行实例化，使用@Bean标注方法即可，@Bean的属性为beanName，如不指定为当前工厂方法名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将方法返回值Bean实例以@Bean注解指定的名称存储到Spring容器中</span></span><br><span class="line"><span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>(); </span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>); dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span class='p red'>PS：工厂方法所在类必须要被Spring管理</span><p>如果@Bean工厂方法需要参数的话，则有如下几种注入方式：</p><ul><li>使用@Autowired 根据类型自动进行Bean的匹配，@Autowired可以省略 ；</li><li>使用@Qualifier 根据名称进行Bean的匹配；</li><li>使用@Value 根据名称进行普通数据类型匹配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//根据类型匹配参数</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">objectDemo01</span><span class="params">(UserDao userDao)</span>&#123;</span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">objectDemo02</span><span class="params">(<span class="meta">@Qualifier(&quot;userDao&quot;)</span> UserDao userDao, <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span> String username)</span>&#123;</span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-Bean配置类的注解开发">4. Bean配置类的注解开发</h2><p><code>@Component</code>等注解替代了<code>&lt;bean&gt;</code>标签，但是像<code>&lt;import&gt;</code>、<code>&lt;context:componentScan&gt;</code> 等非<code>&lt;bean&gt;</code>标签怎样去使用注解替代呢？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加载properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入其他xml文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>定义一个配置类替代原有的xml配置文件，<code>&lt;bean&gt;</code>标签以外的标签，一般都是在配置类上使用注解完成的</p><mark class="hl-label blue">@Configuration</mark> <p>注解标识的类为配置类，替代原有xml配置文件，该注解第一个作用是标识该类是一个配置类，第二个作用是具备@Component作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label green">@ComponentScan</mark> <p>组件扫描配置，替代原有xml文件中的<code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>base-package的配置方式：</p><ul><li>指定一个或多个包名：扫描指定包及其子包下使用注解的类</li><li>不配置包名：扫描当前@componentScan注解配置类所在包及其子包下的类</li></ul><mark class="hl-label blue">@PropertySource</mark> <p>注解用于加载外部properties资源配置，替代原有xml中的<code>&lt;context:property-placeholder location=“”/&gt; </code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;,&quot;classpath:xxx.properties&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label green">@Import</mark> <p>用于加载其他配置类，替代原有xml中的<code>&lt;import resource=&quot;classpath:beans.xml&quot;/&gt;</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span> </span><br><span class="line"><span class="meta">@Import(OtherConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><a href="#jump">点击跳转↓↓↓</a></p><hr><h2 id="5-Spring-配置其他注解">5. Spring 配置其他注解</h2><mark class="hl-label blue">@Primary</mark> <p>注解用于标注相同类型的Bean优先被使用权，@Primary 是Spring3.0引入的，与@Component和@Bean一起使用，标注该Bean的优先级更高，则在通过类型获取Bean或通过@Autowired根据类型进行注入时，会选用优先级更高的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;userDao2&quot;)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserDao <span class="title function_">userDao01</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> UserDao <span class="title function_">userDao02</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl2</span>();&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label green">@Profile</mark> <p>注解的作用同于xml配置时学习profile属性，是进行环境切换使用的</p><p><code>&lt;beans profile=&quot;test&quot;&gt;</code></p><p>注解 @Profile 标注在类或方法上，标注当前产生的Bean从属于哪个环境，只有激活了当前环境，被标注的Bean才能被注册到Spring容器里，不指定环境的Bean，任何环境下都能注册到Spring容器里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;userDao2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以使用以下两种方式指定被激活的环境：</p><ul><li>使用命令行动态参数，虚拟机参数位置加载<code> -Dspring.profiles.active=test</code></li><li>使用代码的方式设置环境变量 <code>System.setProperty(&quot;spring.profiles.active&quot;,&quot;test&quot;);</code></li></ul><hr><h2 id="6-Spring注解的解析原理">6. Spring注解的解析原理</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425190233499.png" alt="image-20230425190233499" style="zoom:80%;" /><p>结论：只要将Bean对应的BeanDefinition注册到beanDefinitionMap中，就可以经历整个SpringBean的生命周期，最终实例化进入单例池中</p><p>使用@Component等注解配置完毕后，要配置组件扫描才能使注解生效</p><ul><li><p>xml配置组件扫描：</p><p><code>&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</code></p></li><li><p>配置类配置组件扫描：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>使用xml方式配置组件扫描，而component-scan是一个context命名空间下的自定义标签，所以要找到对应的命名空间处理器NamespaceHandler 和 解析器，查看spring-context包下的spring.handlers文件</p><p><code>http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler</code></p><p>查看 ContextNamespaceHandler 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;component-scan&quot;</span>, <span class="keyword">new</span> <span class="title class_">ComponentScanBeanDefinitionParser</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将ComponentScanBeanDefinitionParser进行了注册，对其源码进行跟踪，最终将标注的@Component的类，生成对应的BeanDefiition进行了注册。整个过程中没有用到bean工厂后处理器，而是用到解析器进行扫描。</p><p>使用配置类配置组件扫描，使用AnnotationConfigApplicationContext容器在进行创建时，内部调用了如下代码，该工具注册了几个Bean后处理器：</p><p><code>AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);</code></p><p><code>AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</code></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230426150923790.png" alt="image-20230426150923790" style="zoom:67%;" /><p>其中，ConfigurationClassPostProcessor 是一个 BeanDefinitionRegistryPostProcessor ，经过一系列源码调用，最终也别指定到了ClassPathBeanDefinitionScanner 的doScan 方法（与xml方式最终终点一致）</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425195826452.png" alt="image-20230425195826452" style="zoom:67%;" /><hr><h2 id="7-Spring注解方式整合第三方框架">7. Spring注解方式整合第三方框架</h2><p>第三方框架整合，依然使用MyBatis作为整合对象，之前我们已经使用xml方式整合了MyBatis，现在使用注解方式无非就是将xml标签替换为注解，将xml配置文件替换为配置类而已，原有xml方式整合配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactoryBean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Mapper包扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用@Bean将DataSource和SqlSessionFactoryBean存储到Spring容器中，而MapperScannerConfigurer使用注解@MapperScan进行指明需要扫描的Mapper在哪个包下，使用注解整合MyBatis配置方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//标注当前类是一个配置类（替代配置文件）</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.itheima.mapper&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span> String driver,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span> String url,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span> String username,</span></span><br><span class="line"><span class="params">            <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span> String password</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span id="jump"></span></p><p>注解方式，Spring整合MyBatis的原理，关键在于@MapperScan，@MapperScan不是Spring提供的注解，是MyBatis为了整合Spring，在整合包org.mybatis.spring.annotation中提供的注解，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;MapperScannerRegistrar.class&#125;)</span></span><br><span class="line"><span class="meta">@Repeatable(MapperScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapperScan &#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; annotationClass() <span class="keyword">default</span> Annotation.class; </span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注一下@Import({MapperScannerRegistrar.class})，当@MapperScan被扫描加载时，会解析@Import注解，从而加载指定的类，此处就是加载了MapperScannerRegistrar</p><p>MapperScannerRegistrar实现了ImportBeanDefinitionRegistrar接口，Spring会自动调用registerBeanDefinitions方法，该方法中又注册MapperScannerConfigurer类，而MapperScannerConfigurer类作用是扫描Mapper，向容器中注册Mapper对应的MapperFactoryBean，前面讲过，此处不在赘述了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperScannerRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware &#123;</span><br><span class="line">    <span class="comment">//默认执行registerBeanDefinitions方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annoMeta, AnnotationAttributes annoAttrs, BeanDefinitionRegistry registry, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span></span><br><span class="line">                BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class="line">        <span class="comment">//... 省略其他代码 ...</span></span><br><span class="line">        <span class="comment">//注册BeanDefinition</span></span><br><span class="line">        registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring与MyBatis注解方式整合有个重要的技术点就是<code>@Import</code>。</p><p>第三方框架与Spring整合xml方式很多是凭借自定义标签完成的，而第三方框架与Spring整合注解方式很多是靠@Import注解完成的。</p><p>@Import可以导入如下三种类：</p><ul><li>普通的配置类</li><li>实现ImportSelector接口的类</li><li>实现ImportBeanDefinitionRegistrar接口的类</li></ul><p>@Import导入实现了ImportSelector接口的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;MyImportSelector.class&#125;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">//返回要进行注册的Bean的全限定名数组</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;User2.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImportSelector接口selectImports方法的参数AnnotationMetadata代表注解的媒体数据，可以获得当前注解修饰的类的元信息，例如：获得组件扫描的包名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">//获得指定类型注解的全部信息</span></span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes =</span><br><span class="line">                annotationMetadata.getAnnotationAttributes(ComponentScan.class.getName());</span><br><span class="line">        <span class="comment">//获得全部信息中basePackages信息</span></span><br><span class="line">        String[] basePackages = (String[]) annotationAttributes.get(<span class="string">&quot;basePackages&quot;</span>);</span><br><span class="line">        <span class="comment">//打印结果是com.itheima</span></span><br><span class="line">        System.out.println(basePackages[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;User2.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Import导入实现ImportBeanDefinitionRegistrar接口的类，实现了该接口的类的registerBeanDefinitions方法会被自动调用，在该方法内可以注册BeanDefinition</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span><br><span class="line"><span class="params">                                        BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//使用给定的BeanDefinitionRegistry参数，手动注册BeanDefinition</span></span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">        beanDefinition.setBeanClassName(<span class="string">&quot;com.itheima.pojo.User2&quot;</span>);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;user2&quot;</span>,beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Bean基本注解开发、Spring注解的解析原理、Spring注解方式整合第三方框架</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>基于xml的Spring应用</title>
    <link href="https://wuwawawa.github.io/posts/42f6a7bf.html"/>
    <id>https://wuwawawa.github.io/posts/42f6a7bf.html</id>
    <published>2023-04-24T09:05:49.000Z</published>
    <updated>2023-04-26T08:38:27.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-SpringBean的配置详解">1. SpringBean的配置详解</h2><p>Spring开发中主要是对Bean的配置，Bean的常用配置一览如下：</p><table><thead><tr><th style="text-align:left">Xml配置方式</th><th>功能描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></td><td>Bean的id和全限定名配置</td></tr><tr><td style="text-align:left"><code>&lt;bean name=&quot;&quot;&gt;</code></td><td>通过name设置Bean的别名，通过别名也能直接获取到Bean实例</td></tr><tr><td style="text-align:left"><code>&lt;bean scope=&quot;&quot;&gt;</code></td><td>Bean的作用范围，BeanFactory作为容器时取值singleton和prototype</td></tr><tr><td style="text-align:left"><code>&lt;bean lazy-init=&quot;&quot;&gt;</code></td><td>Bean的实例化时机，是否延迟加载。BeanFactory作为容器时无效</td></tr><tr><td style="text-align:left"><code>&lt;bean init-method=&quot;&quot;&gt;</code></td><td>Bean实例化后自动执行的初始化方法，method指定方法名</td></tr><tr><td style="text-align:left"><code>&lt;bean destroy-method=&quot;&quot;&gt;</code></td><td>Bean实例销毁前的方法，method指定方法名</td></tr><tr><td style="text-align:left"><code>&lt;bean autowire=&quot;&quot;&gt;</code></td><td>设置自动注入模式，常用的有按照类型byType，按照名字byName</td></tr><tr><td style="text-align:left"><code>&lt;bean factory-bean=&quot;&quot; factory-method=&quot;&quot;/&gt;</code></td><td>指定哪个工厂Bean的哪个方法完成Bean的创建</td></tr></tbody></table><hr><h3 id="1-1-Bean的基础配置">1.1 Bean的基础配置</h3><p>例如：配置UserDaoImpl由Spring容器负责管理</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot;/&gt;</code></p><p>此时存储到Spring容器（singleObjects单例池）中的Bean的<code>beanName</code>是userDao，值是UserDaoImpl对象，可以根据beanName获取Bean实例</p><p><code>applicationContext.getBean(&quot;userDao&quot;);</code></p><p>如果不配置id，则Spring会把当前Bean实例的全限定名作为<code>beanName</code></p><p><code>applicationContext.getBean(&quot;com.itheima.dao.impl.UserDaoImpl&quot;);</code></p><hr><h3 id="1-2-Bean的别名配置">1.2 Bean的别名配置</h3><p>可以为当前Bean指定多个别名，根据别名也可以获得Bean对象</p><p><code>&lt;bean id=&quot;userDao&quot; name=&quot;aaa,bbb,ccc&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot;/&gt;</code></p><p>此时多个名称都可以获得UserDaoImpl实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">applicationContext.getBean(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">applicationContext.getBean(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">applicationContext.getBean(<span class="string">&quot;ccc&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424163859339.png" alt="image-20230424163859339"></p><hr><h3 id="1-3-Bean的范围配置">1.3 Bean的范围配置</h3><p>默认情况下，单纯的Spring环境Bean的作用范围有两个：<code>Singleton</code>和<code>Prototype</code></p><ul><li><p><code>singleton</code>：单例，默认值，Spring容器创建的时候，就会进行Bean的实例化，并存储到容器内部的单例池中，每次getBean时都是从单例池中获取相同的Bean实例；</p></li><li><p><code>prototype</code>：原型，Spring容器初始化时不会创建Bean实例，当调用getBean时才会实例化Bean，每次getBean都会创建一个新的Bean实例。</p></li></ul><div class="tabs" id="25d155c3-6343-4664-920b-58f09aaf9a33"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#25d155c3-6343-4664-920b-58f09aaf9a33-1"><i class="fas fa-atom"></i>设置为singleton时</button></li><li class="tab"><button type="button" data-href="#25d155c3-6343-4664-920b-58f09aaf9a33-2"><i class="far fa-sun"></i>设置为prototype时</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="25d155c3-6343-4664-920b-58f09aaf9a33-1"><p>当scope设置为singleton时，获得两次对象打印结果是一样的</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; scope=&quot;singleton&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">userDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">userDao2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">System.out.println(userDao);  <span class="comment">//com.itheima.dao.impl.UserDaoImpl@631330c</span></span><br><span class="line">System.out.println(userDao2); <span class="comment">//com.itheima.dao.impl.UserDaoImpl@631330c</span></span><br></pre></td></tr></table></figure><p>通过断点调试，观察可以发现单例池中存在userDao实例</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423173834190.png" alt="image-20230423173834190" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="25d155c3-6343-4664-920b-58f09aaf9a33-2"><p>当scope设置为prototype时，获得两次对象打印结果是不一样的</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; scope=&quot;prototype&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">userDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">userDao2</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">System.out.println(userDao);  <span class="comment">//com.itheima.dao.impl.UserDaoImpl@4d50efb8</span></span><br><span class="line">System.out.println(userDao2); <span class="comment">//com.itheima.dao.impl.UserDaoImpl@7e2d773b</span></span><br></pre></td></tr></table></figure><p>通过断点调试，观察可以发现单例池中不存在userDao实例，但是userDao的信息已经被存储到beanDefinitionMap中了</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423173945599.png" alt="image-20230423173945599" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="1-4-Bean的延迟加载">1.4 Bean的延迟加载</h3><p>当lazy-init设置为true时为延迟加载，也就是当Spring容器创建的时候，不会立即创建Bean实例，等待用到时在创建Bean实例并存储到单例池中去，后续在使用该Bean直接从单例池获取即可，本质上该Bean还是单例的</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; lazy-init=&quot;true&quot;/&gt;</code></p><hr><h3 id="1-5-Bean的初始化销毁方法配置">1.5 Bean的初始化销毁方法配置</h3><p>Bean在被实例化后，可以执行指定的初始化方法完成一些初始化的操作，Bean在销毁之前也可以执行指定的销毁方法完成一些操作，初始化方法名称和销毁方法名称通过</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展：除此之外，我们还可以通过实现InitializingBean接口，完成一些Bean的初始化操作，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>,InitializingBean &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl 创建了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行时机早于 init method 配置的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span> <span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; InitializingBean...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-6-Bean的实例化配置">1.6 Bean的实例化配置</h3><p>Spring的实例化方式主要如下两种：</p><ul><li><p>构造方式实例化：底层通过构造方法对Bean进行实例化</p></li><li><p>工厂方式实例化：底层通过调用自定义的工厂方法对Bean进行实例化</p></li></ul><p>构造方式实例化Bean又分为无参构造方法实例化和有参构造方法实例化，Spring中配置的<code>&lt;bean&gt;</code>几乎都是无参构造该方式，此处不在赘述。下面讲解有参构造方法实例化Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">(String name)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有参构造在实例化Bean时，需要参数的注入，通过<code>&lt;constructor-arg&gt;</code>标签，嵌入在<code>&lt;bean&gt;</code>标签内部提供构造参数，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haohao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>工厂方式实例化Bean，又分为如下三种：</p><ul><li><p>静态工厂方法实例化Bean</p></li><li><p>实例工厂方法实例化Bean</p></li><li><p>实现FactoryBean规范延迟实例化Bean</p></li></ul><div class="tabs" id="e67eb33f-cfdb-49fc-959f-2d57a6a55639"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e67eb33f-cfdb-49fc-959f-2d57a6a55639-1"><i class="fas fa-cat"></i>静态工厂方法实例化Bean</button></li><li class="tab"><button type="button" data-href="#e67eb33f-cfdb-49fc-959f-2d57a6a55639-2"><i class="fas fa-horse"></i>实例工厂方法实例化Bean</button></li><li class="tab"><button type="button" data-href="#e67eb33f-cfdb-49fc-959f-2d57a6a55639-3"><i class="fas fa-dove"></i>实现FactoryBean规范延迟实例化Bean</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e67eb33f-cfdb-49fc-959f-2d57a6a55639-1"><p>静态工厂方法实例化Bean，其实就是定义一个工厂类，提供一个静态方法用于生产Bean实例，在将该工厂类及其静态方法配置给Spring即可</p><p><mark class="hl-label blue">通过工厂创建bean之前可以进行一些其他业务逻辑操作，比较灵活，例如获取第三方jar包的bean</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> &#123;</span><br><span class="line">    <span class="comment">//非静态工厂方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title function_">getUserDao</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="comment">//可以在此编写一些其他逻辑代码</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态工厂方法实例化Bean，其实就是定义一个工厂类，提供一个静态方法用于生产Bean实例，在将该工厂类及其静态方法配置给Spring即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haohao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：<code>&lt;constructor-arg&gt;</code>标签不仅仅是为构造方法传递参数，只要是为了实例化对象而传递的参数都可以通过<code>&lt;constructor-arg&gt;</code>标签完成，例如上面通过静态工厂方法实例化Bean所传递的参数也是要通过<code>&lt;constructor-arg&gt;</code>进行传递的</p><p>测试代码，直接通过ApplicationContext获得userDao即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ClassPathxmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">userDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">System.out.println(userDao);</span><br></pre></td></tr></table></figure><p>断点调试，UserDaoImpl实例对象会存在于单例池中</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423193549373.png" alt="image-20230423193549373" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e67eb33f-cfdb-49fc-959f-2d57a6a55639-2"><p>实例工厂方法，也就是非静态工厂方法产生Bean实例，与静态工厂方式比较，该方式需要先有工厂对象，在用工厂对象去调用非静态方法，所以在进行配置时，要先配置工厂Bean，在配置目标Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean2</span>&#123;</span><br><span class="line">    <span class="comment">//非静态工厂方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//可以在此编写一些其他逻辑代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例工厂方法，也就是非静态工厂方法产生Bean实例，与静态工厂方式比较，该方式需要先有工厂对象，在用工厂对象去调用非静态方法，所以在进行配置时，要先配置工厂Bean，在配置目标Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置实例工厂Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoFactoryBean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean2&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置实例工厂Bean的哪个方法作为工厂方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userDaoFactoryBean2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;haohao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码同上，直接通过ApplicationContext获得userDao即可，不在赘述</p><p>通过断点观察单例池singletonObjects，发现单例池中既有工厂Bean实例，也有目标Bean实例，且都是在Spring容器创建时，就完成了Bean的实例化</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423194001835.png" alt="image-20230423194001835" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e67eb33f-cfdb-49fc-959f-2d57a6a55639-3"><p>上面不管是静态工厂方式还是非静态工厂方式，都是自定义的工厂方法，Spring提供了FactoryBean的接口规范，FactoryBean接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得实例对象方法</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得实例对象类型方法</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义工厂实现FactoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean3</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType () &#123;</span><br><span class="line">            <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置FactoryBean交由Spring管理即可</p><p><code>&lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.factory.UserDaoFactoryBean3&quot;/&gt;</code></p><p>通过Spring容器根据beanName可以正常获得UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ClassPathxmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">userDao</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">System.out.println(userDao);</span><br></pre></td></tr></table></figure><p>通过断点观察发现Spring容器创建时，FactoryBean被实例化了，并存储到了单例池singletonObjects中，但是getObject() 方法尚未被执行，UserDaoImpl也没被实例化，当首次用到UserDaoImpl时，才调用getObject() ，此工厂方式产生的Bean实例不会存储到单例池singletonObjects中，会存储到factoryBeanObjectCache缓存池中，并且后期每次使用到userDao都从该缓存池中返回的是同一个userDao实例。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423194742761.png" alt="image-20230423194742761" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="1-7-Bean的依赖注入配置">1.7 Bean的依赖注入配置</h3><p>Bean的依赖注入有两种方式:</p><table><thead><tr><th>注入方式</th><th>配置方式</th></tr></thead><tbody><tr><td>通过Bean的set方法注入</td><td><code>&lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;/&gt;</code> <br/><code>&lt;property name=&quot;userDao&quot; value=&quot;haohao&quot;/&gt;</code></td></tr><tr><td>通过构造Bean的方法进行注入</td><td><code>&lt;constructor-argname=&quot;name&quot; ref=&quot;userDao&quot;/&gt; </code><br/><code>&lt;constructor-argname=&quot;name&quot; value=&quot;haohao&quot;/&gt;</code></td></tr></tbody></table><p>其中，ref 是reference 的缩写形式，翻译为：涉及，参考的意思，用于引用其他Bean的id。value 用于注入普通属性值。</p><p>依赖注入的数据类型有如下三种：</p><p>普通数据类型，例如：String、int、boolean等，通过value属性指定。</p><p>引用数据类型，例如：UserDaoImpl、DataSource等，通过ref属性指定。</p><p>集合数据类型，例如：List、Map、Properties等。</p><div class="tabs" id="a553bb0c-fed5-43e5-b67f-081ec5172601"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a553bb0c-fed5-43e5-b67f-081ec5172601-1"><i class="fas fa-cat"></i>注入List<T>集合普通数据</button></li><li class="tab"><button type="button" data-href="#a553bb0c-fed5-43e5-b67f-081ec5172601-2"><i class="fas fa-horse"></i>注入List<T>集合引用数据</button></li><li class="tab"><button type="button" data-href="#a553bb0c-fed5-43e5-b67f-081ec5172601-3"><i class="fas fa-dove"></i>注入Set<T>集合</button></li><li class="tab"><button type="button" data-href="#a553bb0c-fed5-43e5-b67f-081ec5172601-4"><i class="fas fa-dragon"></i>注入Map<K,V>集合</button></li><li class="tab"><button type="button" data-href="#a553bb0c-fed5-43e5-b67f-081ec5172601-5"><i class="fas fa-heartbeat"></i>注入Properties键值对</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a553bb0c-fed5-43e5-b67f-081ec5172601-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setStrList</span> <span class="params">(List&lt;String&gt; strList)</span> &#123;</span><br><span class="line">    strList.forEach(str-&gt;&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>haohao<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>niaoniao<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a553bb0c-fed5-43e5-b67f-081ec5172601-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setobiList</span><span class="params">(List&lt;UserDao&gt; objList)</span> &#123;</span><br><span class="line">    objList.forEach(obj -&gt; &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImp1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImp1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以直接引用容器中存在的Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 UserDao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置 UserService--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a553bb0c-fed5-43e5-b67f-081ec5172601-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入泛型为字符串的 Set 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueSet</span><span class="params">(Set&lt;String&gt; valueSet)</span> &#123;</span><br><span class="line">    valueSet.forEach(str -&gt; &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注入泛型为对象的 Set 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjSet</span><span class="params">(Set&lt;UserDao&gt; objSet)</span> &#123;</span><br><span class="line">    objSet.forEach(obj -&gt; &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入泛型为字符串的Set集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;valueSet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>muzi<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>muran<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注入泛型为对象的Set集合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objSet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a553bb0c-fed5-43e5-b67f-081ec5172601-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入值为字符串的 Map 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueMap</span><span class="params">(Map&lt;String, String&gt; valueMap)</span> &#123;</span><br><span class="line">    valueMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;==&quot;</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入值为对象的 Map 集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjMap</span><span class="params">(Map&lt;String, UserDao&gt; objMap)</span> &#123;</span><br><span class="line">    objMap.forEach((k, v) -&gt; &#123;</span><br><span class="line">        System.out.println(k + <span class="string">&quot;==&quot;</span> + v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!- 注入值为字符串的Map集合 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;valueMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;AAA&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;bbb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BBB&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ccc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!- 注入值为对象的Map集合 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ud&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ud2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ud3&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao3&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a553bb0c-fed5-43e5-b67f-081ec5172601-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入 Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span>&#123;</span><br><span class="line">    properties.forEach((k,v)-&gt;&#123;</span><br><span class="line">    System.out.println( k+<span class="string">&quot;===&quot;</span>+v);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;xxx&quot;</span> &lt;/<span class="attr">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;yyy&quot;</span> &lt;/<span class="attr">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>扩展：自动装配方式</p><p>如果被注入的属性类型是Bean引用的话，那么可以在<code>&lt;bean&gt;</code>标签中使用autowire属性去配置自动注入方式，属性值有两个：</p><ul><li><p>byName：通过属性名自动装配，即去匹配setXxx与id=“xxx”（name=“xxx”）是否一致；</p></li><li><p>byType：通过Bean的类型从容器中匹配，匹配出多个相同Bean类型时，报错。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-8-Spring的其他配置标签">1.8 Spring的其他配置标签</h3><p>Spring 的xml标签大体上分为两类，一种是默认标签，一种是自定义标签</p><p>默认标签：就是不用额外导入其他命名空间约束的标签，例如<code>&lt;bean&gt;</code>标签</p><p>自定义标签：就是需要额外引入其他命名空间约束，并通过前缀引用的标签，例如<code>&lt;context:property-placeholder/&gt;</code> 标签</p><p>Spring的默认标签用到的是Spring的默认命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该命名空间约束下的默认标签如下：</p><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;beans&gt;</code></td><td>一般作为xml 配置根标签，其他标签都是该标签的子标签</td></tr><tr><td><code>&lt;bean&gt;</code></td><td>Bean的配置标签，上面已经详解了，此处不再阐述</td></tr><tr><td><code>&lt;import&gt;</code></td><td>外部资源导入标签</td></tr><tr><td><code>&lt;alias&gt;</code></td><td>指定Bean的别名标签，使用较少</td></tr></tbody></table><div class="tabs" id="98818658-50eb-4d2a-80b7-7de4192d3ffb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#98818658-50eb-4d2a-80b7-7de4192d3ffb-1"><i class="fas fa-atom"></i>beans标签</button></li><li class="tab"><button type="button" data-href="#98818658-50eb-4d2a-80b7-7de4192d3ffb-2"><i class="far fa-sun"></i>import标签</button></li><li class="tab"><button type="button" data-href="#98818658-50eb-4d2a-80b7-7de4192d3ffb-3"><i class="fas fa-wind"></i>alias标签</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="98818658-50eb-4d2a-80b7-7de4192d3ffb-1"><p>除了经常用的做为根标签外，还可以嵌套在根标签内，使用profile属性切换开发环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置测试环境下，需要加载的Bean实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">                           </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置开发环境下，需要加载的 Bean 实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">profile</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以使用以下两种方式指定被激活的环境：</p><ul><li><p>使用命令行动态参数，虚拟机参数位置加载<code>-Dspring.profiles.active=test</code></p></li><li><p>使用代码的方式设置环境变量<code>System.setProperty(&quot;spring.profiles.active&quot;,&quot;test&quot;)</code></p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="98818658-50eb-4d2a-80b7-7de4192d3ffb-2"><p>用于导入其他配置文件，项目变大后，就会导致一个配置文件内容过多，可以将一个配置文件根据业务某块进行拆分，拆分后，最终通过<import>标签导入到一个主配置文件中，项目加载主配置文件就连同<code>&lt;import&gt;</code>导入的文件一并加载了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入用户模块配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:UserModuleApplicationContext.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入商品模块配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:ProductModuleApplicationContext.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="98818658-50eb-4d2a-80b7-7de4192d3ffb-3"><p>为某个Bean添加别名，与在<code>&lt;bean&gt;</code>标签上使用name属性添加别名的方式一样，我们为UserServiceImpl指定四个别名：aaa、bbb、xxx、yyy</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 UserService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aaa,bbb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;yyy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>断点调试，在beanFactory中维护着一个名为aliasMap的Map&lt;String,String&gt;集合，存储别名和beanName之间的映射关系</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423214921470.png" alt="image-20230423214921470" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>Spring的自定义标签需要引入外部的命名空间，并为外部的命名空间指定前缀，使用&lt;前缀:标签&gt; 形式的标签，称之为自定义标签，自定义标签的解析流程也是Spring xml扩展点方式之一，在《Spring整合其他框架》章节进行详细介绍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">:property</span> <span class="attr">placeholder</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc</span> <span class="attr">:annotation</span> <span class="attr">driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo</span> <span class="attr">:application</span> <span class="attr">name</span>=<span class="string">&quot;application&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-Spring的get方法">2. Spring的get方法</h2><table><thead><tr><th>方法定义</th><th>返回值和参数</th></tr></thead><tbody><tr><td><code>Object getBean(String beanName)</code></td><td>根据beanName从容器中获取Bean实例，要求容器中Bean唯一，返回值为Object，需要强转</td></tr><tr><td><code>T getBean (Class type)</code></td><td>根据Class类型从容器中获取Bean实例，要求容器中Bean类型唯一，返回值为Class类型实例，无需强转</td></tr><tr><td><code>T getBean (String beanName，Class type)</code></td><td>根据beanName从容器中获得Bean实例，返回值为Class类型实例，无需强转</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据 beanName 获取容器中的 Bean 实例，需要手动强转</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"><span class="comment">//根据 Bean 类型去容器中匹配对应的 Bean 实例，如存在多个匹配 Bean 则报错</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService2</span> <span class="operator">=</span> applicationContext.getBean( UserService.class);</span><br><span class="line"><span class="comment">//根据 beanName 获取容器中的 Bean 实例，指定 Bean 的 Type 类型</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService3</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>,UserService.class);</span><br></pre></td></tr></table></figure><hr><h2 id="3-Spring-配置非自定义Bean">3. Spring 配置非自定义Bean</h2><p>以上在xml 中配置的Bean都是自己定义的，例如：UserDaoImpl，UserServiceImpl。但是，在实际开发中有些功能类并不是我们自己定义的，而是使用的第三方jar包中的，那么，这些Bean要想让Spring进行管理，也需要对其进行配置</p><p>配置非自定义的Bean需要考虑如下两个问题：</p><ul><li><span class='p green'>被配置的Bean的实例化方式是什么？无参构造、有参构造、静态工厂方式还是实例工厂方式；</span></li><li><span class='p green'>被配置的Bean是否需要注入必要属性。</span></li></ul><div class="tabs" id="55b8c86c-f110-454d-be11-14d2cb2cbed3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#55b8c86c-f110-454d-be11-14d2cb2cbed3-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#55b8c86c-f110-454d-be11-14d2cb2cbed3-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#55b8c86c-f110-454d-be11-14d2cb2cbed3-3"><i class="fas fa-dove"></i>3</button></li><li class="tab"><button type="button" data-href="#55b8c86c-f110-454d-be11-14d2cb2cbed3-4"><i class="fas fa-dragon"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="55b8c86c-f110-454d-be11-14d2cb2cbed3-1"><p>1)配置 Druid 数据源交由Spring管理</p><p><mark class="hl-label green">导入Druid坐标</mark></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><mark class="hl-label blue">传统配置方式</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">druidDataSource.setDriverClassName();</span><br><span class="line">druidDataSource.setUrl();</span><br><span class="line">druidDataSource.setUsername();</span><br><span class="line">druidDataSource.setPassword();</span><br></pre></td></tr></table></figure><p><mark class="hl-label green">配置DruidDataSource交由Spring管理</mark></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置 DruidDataSource数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置必要属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="55b8c86c-f110-454d-be11-14d2cb2cbed3-2"><p>传统代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">DriverManager.getConnection(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;user&quot;</span>,<span class="string">&quot;password&quot;</span>);</span><br></pre></td></tr></table></figure><p>2)配置Connection交由Spring管理</p><p>Connection 的产生是通过DriverManager的静态方法getConnection获取的，所以我们要用静态工厂方式配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.Class&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;forName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;connection&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.sql.DriverManager&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getConnection&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="55b8c86c-f110-454d-be11-14d2cb2cbed3-3"><p>3)配置日期对象交由Spring管理</p><p>产生一个指定日期格式的对象，原始代码按如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">currentTimeStr</span> <span class="operator">=</span> <span class="string">&quot;2023-08-27 07:20:00&quot;</span>;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>); </span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> simpleDateFormat.parse(currentTimeStr);</span><br></pre></td></tr></table></figure><p>可以看成是实例工厂方式，使用Spring配置方式产生Date实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleDateFormat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.text.SimpleDateFormat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;simpleDateFormat&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;parse&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2023-08-27 07:20:00&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="55b8c86c-f110-454d-be11-14d2cb2cbed3-4"><p>4)配置MyBatis的SqlSessionFactory交由Spring管理</p><p><mark class="hl-label green">导入MyBatis的相关坐标</mark></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><mark class="hl-label green">MyBatis原始获得SqlSessionFactory的方式</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载mybatis核心配置文件，使用Spring静态工厂方式</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(“mybatis-conifg.xml”); </span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象，使用Spring无参构造方式</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//调用SqlSessionFactoryBuilder的build方法，使用Spring实例工厂方式</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(in);</span><br></pre></td></tr></table></figure><p><mark class="hl-label green">SqlSessionFactory交由Spring管理配置如下</mark></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态工厂方式产生Bean实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“inputStream”</span> <span class="attr">class</span>=<span class="string">“org.apache.ibatis.io.Resources”</span> <span class="attr">factory-method</span>=<span class="string">“getResourceAsStream”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">“resource”</span> <span class="attr">value</span>=<span class="string">“mybatis-config.xml/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无参构造方式产生Bean实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactoryBuilder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.SqlSessionFactoryBuilder&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--实例工厂方式产生Bean实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;sqlSessionFactoryBuilder&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;build&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;inputStream&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputStream&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="4-Bean-实例化的基本流程">4. Bean 实例化的基本流程</h2><p>Spring容器在进行初始化时，会将xml配置的<code>&lt;bean&gt;</code>的信息封装成一个<code>BeanDefinition</code>对象，所有的<code>BeanDefinition</code>存储到一个名为<code>beanDefinitionMap</code>的Map集合中去，Spring框架在对该Map进行遍历，使用反射创建Bean实例对象，创建好的Bean对象存储在一个名为<code>singletonObjects</code>的Map集合中，当调用getBean方法时则最终从该Map集合中取出Bean实例对象返回。</p><blockquote><p>Bean信息定义对象-BeanDefinition</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>信息封装=&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinition</span> <span class="keyword">extends</span> <span class="title class_">AttributeAccessor</span>, BeanMetadataElement &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">SCOPE_SINGLETON</span> <span class="operator">=</span> <span class="string">&quot;singleton&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">SCOPE_PROTOTYPE</span> <span class="operator">=</span> <span class="string">&quot;prototype&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ROLE_APPLICATION</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ROLE_SUPPORT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ROLE_INFRASTRUCTURE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setParentName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getParentName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBeanClassName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getBeanClassName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setScope</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getScope</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setLazyInit</span><span class="params">(<span class="type">boolean</span> var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isLazyInit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDependsOn</span><span class="params">(<span class="meta">@Nullable</span> String... var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String[] getDependsOn();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setAutowireCandidate</span><span class="params">(<span class="type">boolean</span> var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAutowireCandidate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPrimary</span><span class="params">(<span class="type">boolean</span> var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPrimary</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setFactoryBeanName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getFactoryBeanName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setFactoryMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getFactoryMethodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ConstructorArgumentValues <span class="title function_">getConstructorArgumentValues</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasConstructorArgumentValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">this</span>.getConstructorArgumentValues().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MutablePropertyValues <span class="title function_">getPropertyValues</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">hasPropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="built_in">this</span>.getPropertyValues().isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setInitMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getInitMethodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDestroyMethodName</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getDestroyMethodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setRole</span><span class="params">(<span class="type">int</span> var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getRole</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(<span class="meta">@Nullable</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ResolvableType <span class="title function_">getResolvableType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isAbstract</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    String <span class="title function_">getResourceDescription</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    BeanDefinition <span class="title function_">getOriginatingBeanDefinition</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DefaultListableBeanFactory对象内部维护着一个Map用于存储封装好的BeanDefinitionMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> extends ... implements ... &#123;</span><br><span class="line">    <span class="comment">//存储Bean实例的单例池</span></span><br><span class="line">    <span class="comment">//key:是Bean的beanName，value:是Bean的实例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring框架会取出beanDefinitionMap中的每个BeanDefinition信息，反射构造方法或调用指定的工厂方法生成Bean实例对象，所以<span class='p red'>只要将BeanDefinition注册到beanDefinitionMap这个Map中，Spring就会进行对应的Bean的实例化操作</span></p><p>Bean实例及单例池singletonObjects， beanDefinitionMap中的BeanDefinition会被转化成对应的Bean实例对象 ，存储到单例池singletonObjects中去，在DefaultListableBeanFactory的上四级父类DefaultSingletonBeanRegistry中，维护着singletonObjects，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> extends ... implements ... &#123;</span><br><span class="line">  <span class="comment">//存储Bean实例的单例池</span></span><br><span class="line"><span class="comment">////key:是Bean的beanName，value:是Bean的实例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">256</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载xml配置文件，解析获取配置中的每个<code>&lt;bean&gt;</code>的信息，封装成一个个的BeanDefinition对象;</li><li>将BeanDefinition存储在一个名为beanDefinitionMap的Map&lt;String,BeanDefinition&gt;中;</li><li>ApplicationContext底层遍历beanDefinitionMap，反射创建Bean实例对象;</li><li>创建好的Bean实例对象，被存储到一个名为singletonObjects的Map&lt;String,Object&gt;中;</li><li>当执行applicationContext.getBean(beanName)时，从singletonObjects去匹配Bean实例返回。</li></ul><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423222703341.png" alt="image-20230423222703341" style="zoom:67%;" /><hr><h2 id="5-Spring的后处理器">5. Spring的后处理器</h2><p>Spring的后处理器是Spring对外开发的重要扩展点，允许我们介入到Bean的整个实例化流程中来，以达到动态注册BeanDefinition，动态修改BeanDefinition，以及动态修改Bean的作用。Spring主要有两种后处理器：</p><ul><li>BeanFactoryPostProcessor：Bean工厂后处理器，在BeanDefinitionMap填充完毕，Bean实例化之前执行；</li><li>BeanPostProcessor：Bean后处理器，一般在Bean实例化之后，填充到单例池singletonObjects之前执行。</li></ul><hr><h3 id="5-1-BeanFactoryPostProcessor">5.1 BeanFactoryPostProcessor</h3><p>BeanFactoryPostProcessor是一个接口规范，实现了该接口的类只要交由Spring容器管理的话，那么Spring就会回调该接口的方法。用于对BeanDefinition注册和修改的功能。BeanFactoryPostProcessor 定义如下：</p><blockquote><p>容器会检查每个bean定义，以确定是否有实现<code>BeanFactoryPostProcessor</code>接口的类。对于实现了<code>BeanFactoryPostProcessor</code>接口的bean，容器将实例化它们存储到单例池中并调用其<code>postProcessBeanFactory()</code>方法。需要注意的是，<code>BeanFactoryPostProcessor</code>的实例化和执行会在其他普通bean实例化之前完成。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">编写BeanFactoryPostProcessor</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanFactoryPostProcessor执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">配置BeanFactoryPostProcessor</mark> <p><code>&lt;bean class=&quot;com.itheima.processor.MyBeanFactoryPostProcessor&quot;/&gt;</code></p><p>postProcessBeanFactory参数本质就是DefaultListableBeanFactory，拿到BeanFactory的引用，自然就可以对beanDefinitionMap中的BeanDefinition进行操作了，例如对UserDaoImpl的BeanDefinition进行修改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">userDaoBD</span> <span class="operator">=</span> beanFactory.getBeanDefinition(“userDao”);<span class="comment">//获得UserDao定义对象</span></span><br><span class="line">        userDaoBD.setBeanClassName(<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl2&quot;</span>); <span class="comment">//修改class</span></span><br><span class="line">        <span class="comment">//userDaoBD.setInitMethodName(methodName); //修改初始化方法</span></span><br><span class="line">        <span class="comment">//userDaoBD.setLazyInit(true); //修改是否懒加载</span></span><br><span class="line">        <span class="comment">//... 省略其他的设置方式 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经对指定的BeanDefinition进行了修改操作，下面对BeanDefiition进行注册操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">//强转成子类DefaultListableBeanFactory</span></span><br><span class="line">        <span class="keyword">if</span> (configurableListableBeanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">            <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> (DefaultListableBeanFactory) configurableListableBeanFactory;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">            beanDefinition.setBeanClassName(<span class="string">&quot;com.itheima.dao.UserDaoImpl2&quot;</span>);</span><br><span class="line">            <span class="comment">//进行注册操作</span></span><br><span class="line">            beanFactory.registerBeanDefinition(<span class="string">&quot;userDao2&quot;</span>, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 提供了一个BeanFactoryPostProcessor的子接口BeanDefinitionRegistryPostProcessor专门用于注册BeanDefinition操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor2</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="keyword">throws</span> BeansException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry beanDefinitionRegistry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">        beanDefinition.setBeanClassName(<span class="string">&quot;com.itheima.dao.UserDaoImpl2&quot;</span>);</span><br><span class="line">        beanDefinitionRegistry.registerBeanDefinition(<span class="string">&quot;userDao2&quot;</span>,beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424215830258.png" alt="image-20230424215830258" style="zoom:67%;" /><p>BeanFactoryPostProcessor在SpringBean的实例化过程中的体现</p><blockquote><p>案例：使用Spring的BeanFactoryPostProcessor扩展点完成自定义注解扫描</p></blockquote><div class="tabs" id="7dacba6b-844c-4cf2-9dca-00983f8d5747"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7dacba6b-844c-4cf2-9dca-00983f8d5747-1"><i class="fas fa-cat"></i>要求</button></li><li class="tab"><button type="button" data-href="#7dacba6b-844c-4cf2-9dca-00983f8d5747-2"><i class="fas fa-horse"></i>BaseClassScanUtils</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7dacba6b-844c-4cf2-9dca-00983f8d5747-1"><p>要求如下：</p><ul><li>自定义@MyComponent注解，使用在类上；</li><li>使用资料中提供好的扫描器工具BaseClassScanUtils 完成指定包的类扫描；</li><li>自定义BeanFactoryPostProcessor完成注解@MyComponent的解析，解析后最终被Spring管理。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7dacba6b-844c-4cf2-9dca-00983f8d5747-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.CachingMetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseClassScanUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置资源规则</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">RESOURCE_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;//.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Class&gt; <span class="title function_">scanMyComponentAnnotation</span><span class="params">(String basePackage)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建容器存储使用了指定注解的Bean字节码对象</span></span><br><span class="line">        Map&lt;String, Class&gt; annotationClassMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//spring工具类，可以获取指定路径下的全部类</span></span><br><span class="line">        <span class="type">ResourcePatternResolver</span> <span class="variable">resourcePatternResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">                    ClassUtils.convertClassNameToResourcePath(basePackage) + RESOURCE_PATTERN;</span><br><span class="line">            Resource[] resources = resourcePatternResolver.getResources(pattern);</span><br><span class="line">            <span class="comment">//MetadataReader 的工厂类</span></span><br><span class="line">            <span class="type">MetadataReaderFactory</span> <span class="variable">refractory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachingMetadataReaderFactory</span>(resourcePatternResolver);</span><br><span class="line">            <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">                <span class="comment">//用于读取类信息</span></span><br><span class="line">                <span class="type">MetadataReader</span> <span class="variable">reader</span> <span class="operator">=</span> refractory.getMetadataReader(resource);</span><br><span class="line">                <span class="comment">//扫描到的class</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">classname</span> <span class="operator">=</span> reader.getClassMetadata().getClassName();</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(classname);</span><br><span class="line">                <span class="comment">//判断是否属于指定的注解类型</span></span><br><span class="line">                <span class="keyword">if</span>(clazz.isAnnotationPresent(MyComponent.class))&#123;</span><br><span class="line">                    <span class="comment">//获得注解对象</span></span><br><span class="line">                    <span class="type">MyComponent</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(MyComponent.class);</span><br><span class="line">                    <span class="comment">//获得属value属性值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">                    <span class="comment">//判断是否为&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span>(beanName!=<span class="literal">null</span>&amp;&amp;!beanName.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                        <span class="comment">//存储到Map中去</span></span><br><span class="line">                        annotationClassMap.put(beanName,clazz);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果没有为&quot;&quot;,那就把当前类的类名作为beanName</span></span><br><span class="line">                    annotationClassMap.put(clazz.getSimpleName(),clazz);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> annotationClassMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Class&gt; stringClassMap = scanMyComponentAnnotation(<span class="string">&quot;com.itheima&quot;</span>);</span><br><span class="line">        System.out.println(stringClassMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>自定义@MyComponent注解，使用在类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyComponent &#123;</span><br><span class="line">  <span class="comment">//显示的指定Bean的beanName</span></span><br><span class="line">String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类上使用@MyComponent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyComponent(&quot;otherBean&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OtherBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义BeanFactoryPostProcessor完成注解解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">//指定要扫描的包</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> <span class="string">&quot;com.itheima&quot;</span>;</span><br><span class="line">    <span class="comment">//调用扫描工具扫描指定包及其子包下的@MyComponent</span></span><br><span class="line">    Map&lt;String, Class&gt; myComponentClassMap = BaseClassScanUtils.scanMyComponentAnnotation(basePackage);</span><br><span class="line">    <span class="comment">//遍历Map集合，创建BeanDefinition对象进行注册</span></span><br><span class="line">    myComponentClassMap.forEach((beanName,clazz)-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">            beanDefinition.setBeanClassName(clazz.getName());</span><br><span class="line">            registry.registerBeanDefinition(beanName,beanDefinition);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-2-BeanPostProcessor">5.2 BeanPostProcessor</h3><p>Bean被实例化后，到最终缓存到名为singletonObjects单例池之前，中间会经过Bean的初始化过程，例如：属性的填充、初始方法init的执行等，其中有一个对外进行扩展的点BeanPostProcessor，我们称为<code>Bean后处理器</code>。跟上面的<code>Bean工厂后处理器</code>相似，它也是一个接口，实现了该接口并被容器管理的BeanPostProcessor，会在流程节点上被Spring自动调用。</p><p>BeanPostProcessor的接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">//在属性注入完毕，init初始化方法执行之前被回调</span></span><br><span class="line">    <span class="keyword">default</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="comment">//在初始化方法执行之后，被添加到单例池singletonObjects之前被回调</span></span><br><span class="line">    <span class="keyword">default</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="58f502e6-72ed-483a-970c-d5e3ccc5138f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#58f502e6-72ed-483a-970c-d5e3ccc5138f-1"><i class="fas fa-bug"></i>自定义MyBeanPostProcessor</button></li><li class="tab"><button type="button" data-href="#58f502e6-72ed-483a-970c-d5e3ccc5138f-2"><i class="fas fa-cannabis"></i>bean</button></li><li class="tab"><button type="button" data-href="#58f502e6-72ed-483a-970c-d5e3ccc5138f-3"><i class="fas fa-candy-cane"></i>配置MyBeanPostProcessor和bean</button></li><li class="tab"><button type="button" data-href="#58f502e6-72ed-483a-970c-d5e3ccc5138f-4"><i class="fas fa-child"></i>输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="58f502e6-72ed-483a-970c-d5e3ccc5138f-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="comment">//参数： bean是当前被实例化的Bean，beanName是当前Bean实例在容器中的名称返回值：当前Bean实例对象 </span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor的before方法...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 参数： bean是当前被实例化的Bean，beanName是当前Bean实例在容器中的名称返回值：当前Bean实例对象 </span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanPostProcessor的after方法...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="58f502e6-72ed-483a-970c-d5e3ccc5138f-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userDao创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init初始化方法执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;属性设置之后执行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="58f502e6-72ed-483a-970c-d5e3ccc5138f-3"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.processor.MyBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="58f502e6-72ed-483a-970c-d5e3ccc5138f-4"><p>测试控制台打印结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserDaoImpl创建了... </span><br><span class="line">BeanPostProcessor的before方法... </span><br><span class="line">UserDaoImpl属性填充...</span><br><span class="line">UserDaoImpl初始化方法执行...</span><br><span class="line">BeanPostProcessor的after方法...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>案例：对Bean方法进行执行时间日志增强</p></blockquote><div class="tabs" id="614a8299-edfc-4f4b-84ad-56c9e3409235"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#614a8299-edfc-4f4b-84ad-56c9e3409235-1"><i class="fas fa-cat"></i>要求</button></li><li class="tab"><button type="button" data-href="#614a8299-edfc-4f4b-84ad-56c9e3409235-2"><i class="fas fa-horse"></i>分析</button></li><li class="tab"><button type="button" data-href="#614a8299-edfc-4f4b-84ad-56c9e3409235-3"><i class="fas fa-dove"></i>实现</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="614a8299-edfc-4f4b-84ad-56c9e3409235-1"><p>要求如下：</p><ul><li>Bean的方法执行之前控制台打印当前时间；</li><li>Bean的方法执行之后控制台打印当前时间。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="614a8299-edfc-4f4b-84ad-56c9e3409235-2"><p>分析：</p><ul><li>对方法进行增强主要就是代理设计模式和包装设计模式；</li><li>由于Bean方法不确定，所以使用动态代理在运行期间执行增强操作；</li><li>在Bean实例创建完毕后，进入到单例池之前，使用Proxy代替真是的目标Bean</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="614a8299-edfc-4f4b-84ad-56c9e3409235-3"><p>编写BeanPostProcessor，增强逻辑编写在after方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeLogBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用动态代理对目标Bean进行增强，返回proxy对象，进而存储到单例池singletonObjects中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanProxy</span> <span class="operator">=</span> Proxy.newProxyInstance(</span><br><span class="line">                bean.getClass().getClassLoader(),</span><br><span class="line">                bean.getClass().getInterfaces(),</span><br><span class="line">                (proxy, method, args) -&gt; &#123;</span><br><span class="line">                    <span class="comment">//1、输出开始时间</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法：&quot;</span> + method.getName() + <span class="string">&quot;-开始时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                    <span class="comment">//2、执行目标方法</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(bean, args);</span><br><span class="line">                    <span class="comment">//3、输出结束时间</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;方法：&quot;</span> + method.getName() + <span class="string">&quot;-结束时间：&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> beanProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置到spring</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.processor.TimeLogBeanPostProcessor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425091408067.png" alt="image-20230425091408067" style="zoom:67%;" /><p>BeanPostProcessor 在 SpringBean的实例化过程中的体现</p><hr><h2 id="6-Spring-Bean的生命周期">6. Spring Bean的生命周期</h2><p>Spring Bean的生命周期是从 Bean 实例化之后，即通过反射创建出对象之后，到Bean成为一个完整对象，最终存储到单例池中，这个过程被称为Spring Bean的生命周期。Spring Bean的生命周期大体上分为三个阶段：</p><ul><li>Bean的实例化阶段：Spring框架会取出BeanDefinition的信息进行判断当前Bean的范围是否是singleton的，是否不是延迟加载的，是否不是FactoryBean等，最终将一个普通的singleton的Bean通过反射进行实例化；</li><li>Bean的初始化阶段：Bean创建之后还仅仅是个&quot;半成品&quot;，还需要对Bean实例的属性进行填充、执行一些Aware接口方法、执行BeanPostProcessor方法、执行InitializingBean接口的初始化方法、执行自定义初始化init方法等。该阶段是Spring最具技术含量和复杂度的阶段，Aop增强功能，后面要学习的Spring的注解功能等、 spring高频面试题Bean的循环引用问题都是在这个阶段体现的；</li><li>Bean的完成阶段：经过初始化阶段，Bean就成为了一个完整的Spring Bean，被存储到单例池singletonObjects中去了，即完成了Spring Bean的整个生命周期。</li></ul><p>由于Bean的初始化阶段的步骤比较复杂，所以着重研究Bean的初始化阶段Spring Bean的初始化过程涉及如下几个过程：</p><ul><li>Bean实例的属性填充</li><li>Aware接口属性注入</li><li>BeanPostProcessor的before()方法回调</li><li>InitializingBean接口的初始化方法回调</li><li>自定义初始化方法init回调</li><li>BeanPostProcessor的after()方法回调</li></ul><p>BeanDefinition 中有对当前Bean实体的注入信息通过属性propertyValues进行了存储，例如UserService的属性信息如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423231423474.png" alt="image-20230423231423474" style="zoom:67%;" /><p>Spring在进行属性注入时，会分为如下几种情况：</p><ul><li>注入普通属性，String、int或存储基本类型的集合时，直接通过set方法的反射设置进去；</li><li>注入单向对象引用属性时，从容器中getBean获取后通过set方法反射设置进去，如果容器中没有，则先创建被注入对象Bean实例（完成整个生命周期）后，在进行注入操作；</li><li>注入双向对象引用属性时，就比较复杂了，涉及了循环引用（循环依赖）问题，下面会详细阐述解决方案。</li></ul><p>多个实体之间相互依赖并形成闭环的情况就叫做&quot;循环依赖&quot;，也叫做&quot;循环引用&quot;</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424094314831.png" alt="image-20230424094314831" style="zoom: 50%" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;userService&quot;</span> class=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;userService&quot;</span> ref=<span class="string">&quot;userService&quot;</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>代码验证后，分析出UserService与UserDao实例化与初始化的顺序如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425094829935.png" alt="image-20230425094829935" style="zoom: 50%;" /><p>Spring提供了<span class='p red'>三级缓存</span>存储<code>完整Bean实例</code>和<code>半成品Bean实例</code> ，用于解决循环引用问题<br>在DefaultListableBeanFactory的上四级父类DefaultSingletonBeanRegistry中提供如下三个Map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> ... &#123;</span><br><span class="line">        <span class="comment">//1、最终存储单例Bean成品的容器，即实例化和初始化都完成的Bean，称之为&quot;一级缓存&quot;</span></span><br><span class="line">        Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="comment">//2、早期Bean单例池，缓存半成品对象，且当前对象已经被其他对象引用了，称之为&quot;二级缓存&quot;</span></span><br><span class="line">        Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//3、单例Bean的工厂池，缓存半成品对象，对象未被引用，使用时在通过工厂创建Bean，称之为&quot;三级缓存&quot;</span></span><br><span class="line">        Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService和UserDao循环依赖的过程结合上述三级缓存描述一下:</p><ul><li>UserService 实例化对象，但尚未初始化，将UserService存储到三级缓存；</li><li>UserService 属性注入，需要UserDao，从缓存中获取，没有UserDao；</li><li>UserDao实例化对象，但尚未初始化，将UserDao存储到到三级缓存；</li><li>UserDao属性注入，需要UserService，从三级缓存获取UserService，UserService从三级缓存移入二级缓存；</li><li>UserDao执行其他生命周期过程，最终成为一个完成Bean，存储到一级缓存，删除二三级缓存；</li><li>UserService 注入UserDao；</li><li>UserService执行其他生命周期过程，最终成为一个完成Bean，存储到一级缓存，删除二三级缓存</li></ul><mark class="hl-label blue">循环引用执行流程</mark> <div class="tabs" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-3"><i class="fas fa-wind"></i>3</button></li><li class="tab"><button type="button" data-href="#dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-4"><i class="fas fa-fire-alt"></i>4</button></li><li class="tab"><button type="button" data-href="#dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-5"><i class="fas fa-cookie-bite"></i>源码流程图</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-1"><p>① 首先创建userService，创建完毕后存入到三级缓存中②需要userDao，从三级缓存中寻找，没有，执行Dao的创建</p><p>③创建userDao，创建完毕后存入到三级缓存中</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425095416327.png" alt="image-20230425095416327" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-2"><p>④userdDao初始化，需要注入userService。⑤从一级二级三级缓存中获取userService，并设置给userDao。</p><p>⑥将userService从三级缓存中删除，存储到二级缓存中。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425095909615.png" alt="image-20230425095909615" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-3"><p>⑦执行userDao的其他初始化流程。⑧执行完毕，将userDao从三级缓存中删除，存储到一级缓存中</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425100228892.png" alt="image-20230425100228892" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-4"><p>⑨回溯到创建userService创建过程。</p><p>⑩将userDao设置给userService，其他初始化流程结束后，将userService从二级缓存中删除，存入到一级缓存中。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425100607480.png" alt="image-20230425100607480" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dbb1608a-78e1-4a08-8a89-ba25d12d8d9b-5"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230425101012174.png" alt="image-20230425101012174"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>常用的Aware接口</p><p>Aware接口是一种框架辅助属性注入的一种思想，其他框架中也可以看到类似的接口。框架具备高度封装性，我们接触到的一般都是业务代码，一个底层功能API不能轻易的获取到，但是这不意味着永远用不到这些对象，如果用到了，就可以使用框架提供的类似Aware的接口，让框架给我们注入该对象。</p><table><thead><tr><th>Aware接口</th><th>回调方法</th><th>作用</th></tr></thead><tbody><tr><td>ServletContextAware</td><td>setServletContext(ServletContext context)</td><td>Spring框架回调方法注入ServletContext对象， web环境下才生效</td></tr><tr><td>BeanFactoryAware</td><td>setBeanFactory(BeanFactory factory)</td><td>Spring框架回调方法注入beanFactory对象</td></tr><tr><td>BeanNameAware</td><td>setBeanName(String beanName)</td><td>Spring框架回调方法注入beanFactory对象</td></tr><tr><td>ApplicationContextAware</td><td>setApplicationContext(ApplicationContext applicationContext)</td><td>Spring框架回调方法注入applicationContext 对象</td></tr></tbody></table><hr><h2 id="7-Spring-IoC整体流程总结">7. Spring IoC整体流程总结</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424095821127.png" alt="image-20230424095821127" style="zoom:67%;" /><hr><h2 id="8-Spring-xml方式整合第三方框架">8. Spring xml方式整合第三方框架</h2><p>xml整合第三方框架有两种整合方案：</p><ul><li><p>不需要自定义名空间，不需要使用Spring的配置文件配置第三方框架本身内容，例如：MyBatis；</p></li><li><p>需要引入第三方框架命名空间，需要使用Spring的配置文件配置第三方框架本身内容，例如：Dubbo。</p></li></ul><hr><h3 id="8-1-Spring整合MyBatis">8.1 Spring整合MyBatis</h3><mark class="hl-label blue">原始操作代码</mark> <p>导包：mysql-connector-java和mybatis</p><div class="tabs" id="bc92cbb3-b048-4ec6-9f44-184d564f7310"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bc92cbb3-b048-4ec6-9f44-184d564f7310-1"><i class="fas fa-seedling"></i>创建User和userMapper</button></li><li class="tab"><button type="button" data-href="#bc92cbb3-b048-4ec6-9f44-184d564f7310-2"><i class="fas fa-leaf"></i>创建UserMapper.xml和配置文件</button></li><li class="tab"><button type="button" data-href="#bc92cbb3-b048-4ec6-9f44-184d564f7310-3"><i class="fab fa-apple"></i>测试</button></li><li class="tab"><button type="button" data-href="#bc92cbb3-b048-4ec6-9f44-184d564f7310-4"><i class="fas fa-cookie-bite"></i>spring需要整合的地方</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bc92cbb3-b048-4ec6-9f44-184d564f7310-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bc92cbb3-b048-4ec6-9f44-184d564f7310-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bc92cbb3-b048-4ec6-9f44-184d564f7310-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> builder.build(in);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bc92cbb3-b048-4ec6-9f44-184d564f7310-4"><p>sping整合mybatis就是把这些代码和配置文件消除掉，帮你创建mapper</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyBatisTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws <span class="keyword">Exception</span> &#123;</span><br><span class="line"></span><br><span class="line">      -  InputStream <span class="keyword">in</span> = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</span><br><span class="line">      -  SqlSessionFactoryBuilder builder = <span class="built_in">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">      -  SqlSessionFactory sqlSessionFactory = builder.build(<span class="keyword">in</span>);</span><br><span class="line">      -  SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">      -  UserMapper mapper = sqlSession.getMapper(UserMapper.<span class="keyword">class</span>);</span><br><span class="line">        List&lt;<span class="keyword">User</span>&gt; <span class="keyword">all</span> = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">User</span> <span class="keyword">user</span> : <span class="keyword">all</span>) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>之前已经在Spring中简单的配置了SqlSessionFactory，但是这不是正规的整合方式，MyBatis提供了mybatis-spring.jar专门用于两大框架的整合。</p><mark class="hl-label green">Spring整合MyBatis</mark> <ul><li>导入MyBatis整合Spring的相关坐标；mybatis-spring和spring-jdbc</li><li>编写Mapper和Mapper.xml；</li><li>配置SqlSessionFactoryBean和MapperScannerConfigurer；</li><li>编写测试代码</li></ul><div class="tabs" id="aafffedc-d448-489f-847a-e8728eac2260"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#aafffedc-d448-489f-847a-e8728eac2260-1"><i class="fas fa-horse"></i>编写Mapper和Mapper.xml</button></li><li class="tab"><button type="button" data-href="#aafffedc-d448-489f-847a-e8728eac2260-2"><i class="fas fa-cat"></i>配置SqlSessionFactoryBean和MapperScannerConfigurer</button></li><li class="tab"><button type="button" data-href="#aafffedc-d448-489f-847a-e8728eac2260-3"><i class="fas fa-dove"></i>编写测试代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="aafffedc-d448-489f-847a-e8728eac2260-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aafffedc-d448-489f-847a-e8728eac2260-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactoryBean，作用将SqlSessionFactory存储到spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置MapperScannerConfigurer，作用扫描指定的包，产生Mapper对象存储到spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SqlSessionFactoryBean实现FactoryBean接口:向spring容器提供SqlSessionFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.spring;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;SqlSessionFactory&gt;, InitializingBean, ApplicationListener&lt;ApplicationEvent&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现FactoryBean接口</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.sqlSessionFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.afterPropertiesSet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MapperScannerConfigurer实现BeanDefinitionRegistryPostProcessor接口:对mapper（例如userMapper）进行扫描，并存储到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.mybatis.spring.mapper;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperScannerConfigurer</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span>, InitializingBean, ApplicationContextAware, BeanNameAware &#123;</span><br><span class="line">    <span class="comment">//实现BeanDefinitionRegistryPostProcessor接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class="line">            <span class="built_in">this</span>.processPropertyPlaceHolders();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPathMapperScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathMapperScanner</span>(registry);</span><br><span class="line">        scanner.setAddToConfig(<span class="built_in">this</span>.addToConfig);</span><br><span class="line">        scanner.setAnnotationClass(<span class="built_in">this</span>.annotationClass);</span><br><span class="line">        scanner.setMarkerInterface(<span class="built_in">this</span>.markerInterface);</span><br><span class="line">        scanner.setSqlSessionFactory(<span class="built_in">this</span>.sqlSessionFactory);</span><br><span class="line">        scanner.setSqlSessionTemplate(<span class="built_in">this</span>.sqlSessionTemplate);</span><br><span class="line">        scanner.setSqlSessionFactoryBeanName(<span class="built_in">this</span>.sqlSessionFactoryBeanName);</span><br><span class="line">        scanner.setSqlSessionTemplateBeanName(<span class="built_in">this</span>.sqlSessionTemplateBeanName);</span><br><span class="line">        scanner.setResourceLoader(<span class="built_in">this</span>.applicationContext);</span><br><span class="line">        scanner.setBeanNameGenerator(<span class="built_in">this</span>.nameGenerator);</span><br><span class="line">        scanner.setMapperFactoryBeanClass(<span class="built_in">this</span>.mapperFactoryBeanClass);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(<span class="built_in">this</span>.lazyInitialization)) &#123;</span><br><span class="line">            scanner.setLazyInitialization(Boolean.valueOf(<span class="built_in">this</span>.lazyInitialization));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        scanner.registerFilters();</span><br><span class="line">        scanner.scan(StringUtils.tokenizeToStringArray(<span class="built_in">this</span>.basePackage, <span class="string">&quot;,; \t\n&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="aafffedc-d448-489f-847a-e8728eac2260-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathxmlApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> </span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathxmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>); </span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> applicationContext.getBean(UserMapper.class); </span><br><span class="line">List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">System.out.println(all);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label blue">Spring整合MyBatis的原理剖析</mark> <p>整合包里提供了一个SqlSessionFactoryBean和一个扫描Mapper的配置对象，SqlSessionFactoryBean一旦被实例化，就开始扫描Mapper并通过动态代理产生Mapper的实现类存储到Spring容器中。相关的有如下四个类：</p><ul><li>SqlSessionFactoryBean：需要进行配置，用于提供SqlSessionFactory；</li><li>MapperScannerConfigurer：需要进行配置，用于扫描指定mapper注册BeanDefinition；</li><li>MapperFactoryBean：Mapper的FactoryBean，获得指定Mapper时调用getObject方法；</li><li>ClassPathMapperScanner：definition.setAutowireMode(2)  修改了自动注入状态，所以MapperFactoryBean中的setSqlSessionFactory会自动注入进去。</li></ul><p>配置SqlSessionFactoryBean作用是向容器中提供SqlSessionFactory，SqlSessionFactoryBean实现了FactoryBean和InitializingBean两个接口，所以会自动执行getObject() 和afterPropertiesSet()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBean <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;SqlSessionFactory&gt;, InitializingBean&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="built_in">this</span>.sqlSessionFactory = <span class="built_in">this</span>.buildSqlSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置MapperScannerConfigurer作用是扫描Mapper，向容器中注册Mapper对应的MapperFactoryBean， MapperScannerConfigurer实现了BeanDefinitionRegistryPostProcessor和InitializingBean两个接口，会在postProcessBeanDefinitionRegistry方法中向容器中注册MapperFactoryBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MapperScannerConfigurer</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span>, InitializingBean&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathMapperScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathMapperScanner</span>(registry);</span><br><span class="line">        scanner.scan(StringUtils.tokenizeToStringArray(<span class="built_in">this</span>.basePackage, <span class="string">&quot;,; \t\n&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassPathMapperScanner</span> <span class="keyword">extends</span> <span class="title class_">ClassPathBeanDefinitionScanner</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="built_in">super</span>.doScan(basePackages);</span><br><span class="line">        <span class="keyword">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.processBeanDefinitions(beanDefinitions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;</span><br><span class="line">        <span class="comment">//设置Mapper的beanClass是org.mybatis.spring.mapper.MapperFactoryBean</span></span><br><span class="line">        definition.setBeanClass(<span class="built_in">this</span>.mapperFactoryBeanClass);</span><br><span class="line">        definition.setAutowireMode(<span class="number">2</span>); <span class="comment">//设置MapperBeanFactory 进行自动注入</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">scan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doScan(basePackages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        <span class="comment">//将扫描到的类注册到beanDefinitionMap中，此时beanClass是当前类全限定名</span></span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">        <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> applicationContext.getBean(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperFactoryBean</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MapperFactoryBean</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSessionTemplate = <span class="built_in">this</span>.createSqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getSqlSession().getMapper(<span class="built_in">this</span>.mapperInterface);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-2-Spring整合Dubbo">8.2 Spring整合Dubbo</h3><p>Spring 整合其他组件时就不像MyBatis这么简单了，例如Dubbo框架在于Spring进行整合时，要使用Dubbo提供的命名空间的扩展方式，自定义了一些Dubbo的标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:dubbo=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--配置应用名称--&gt;</span><br><span class="line">    &lt;dubbo:application name=<span class="string">&quot;dubbo1-consumer&quot;</span>/&gt;</span><br><span class="line">    &lt;!--配置注册中心地址--&gt;</span><br><span class="line">    &lt;dubbo:registry address=<span class="string">&quot;zookeeper://localhost:2181&quot;</span>/&gt;</span><br><span class="line">    &lt;!--扫描dubbo的注解--&gt;</span><br><span class="line">    &lt;dubbo:annotation <span class="keyword">package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>/&gt;</span><br><span class="line">    &lt;!--消费者配置--&gt;</span><br><span class="line">    &lt;dubbo:consumer check=<span class="string">&quot;false&quot;</span> timeout=<span class="string">&quot;1000&quot;</span> retries=<span class="string">&quot;0&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>为了降低我们此处的学习成本，不在引入Dubbo第三方框架了，以Spring的 context 命名空间去进行讲解，该方式也是命名空间扩展方式。需求：加载外部properties文件，将键值对存储在Spring容器中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis </span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>引入context命名空间，在使用context命名空间的标签，使用SpEL表达式在xml或注解中根据key获得value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;context:property-placeholder location=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>其实，加载的properties文件中的属性最终通过Spring解析后会被存储到了Spring容器的environment中去，不仅自己定义的属性会进行存储，Spring也会把环境相关的一些属性进行存储</p><div class="fj-gallery"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424103808426.png" alt="image-20230424103808426"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424103835267.png" alt="image-20230424103835267"  />          </div><p>原理剖析解析过程，只能从源头ClassPathXmlApplicationContext入手，经历复杂的源码追踪，找到如下两个点：</p><p>1）在创建DefaultNamespaceHandlerResolver时，为处理器映射地址handlerMappingsLocation属性赋值，并加载命名空间处理器到Map&lt;String, Object&gt; handlerMappings 中去</p><p><code>this.handlerMappingsLocation = &quot;META-INF/spring.handlers&quot;;</code></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424104152200.png" alt="image-20230424104152200"></p><div class="fj-gallery"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424104205461.png" alt="image-20230424104205461"></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424104216181.png" alt="image-20230424104216181"></p>          </div><p>第一点完成后，Map集合handlerMappings就被填充了很多XxxNamespaceHandler，继续往下追代码</p><p>2）在DefaultBeanDefinitionDocumentReader的parseBeanDefinitions方法中，发现如下逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是默认命名空间</span></span><br><span class="line"><span class="keyword">if</span> (delegate.isDefaultNamespace(ele))&#123;</span><br><span class="line">    <span class="built_in">this</span>.parseDefaultElement(ele, delegate);</span><br><span class="line">    <span class="comment">//否则是自定义命名空间</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    delegate.parseCustomElement(ele);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是默认命名空间，则执行parseDefaultElement方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;import&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.importBeanDefinitionResource(ele);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;alias&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.processAliasRegistration(ele);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;bean&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;beans&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是自定义命名空间，则执行parseCustomElement方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BeanDefinition <span class="title function_">parseCustomElement</span><span class="params">(Element ele, <span class="meta">@Nullable</span> BeanDefinition containingBd)</span> &#123;</span><br><span class="line">    <span class="comment">//解析命名空间</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">namespaceUri</span> <span class="operator">=</span> <span class="built_in">this</span>.getNamespaceURI(ele);</span><br><span class="line">    <span class="comment">//获得命名空间解析器</span></span><br><span class="line">    <span class="type">NamespaceHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="built_in">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">    <span class="comment">//解析执行的标签</span></span><br><span class="line">    <span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> <span class="title class_">ParserContext</span>(<span class="built_in">this</span>.readerContext, <span class="built_in">this</span>, containingBd));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行resovle方法时，就是从Map&lt;String, Object&gt; handlerMappings中根据命名空间名称获得对应的处理器对象，此处是ContextNamespaceHandler，最终执行NamespaceHandler的parse方法</p><p>ContextNamespaceHandler源码如下，间接实现了NamespaceHandler接口，初始化方法init会被自动调用。由于context命名空间下有多个标签，所以每个标签又单独注册了对应的解析器，注册到了其父类NamespaceHandlerSupport的Map&lt;String, BeanDefinitionParser&gt; parsers中去了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextNamespaceHandler</span> <span class="keyword">extends</span> <span class="title class_">NamespaceHandlerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ContextNamespaceHandler</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;property-placeholder&quot;</span>, <span class="keyword">new</span> <span class="title class_">PropertyPlaceholderBeanDefinitionParser</span>());</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;property-override&quot;</span>, <span class="keyword">new</span> <span class="title class_">PropertyOverrideBeanDefinitionParser</span>());</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;annotation-config&quot;</span>, <span class="keyword">new</span> <span class="title class_">AnnotationConfigBeanDefinitionParser</span>());</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;component-scan&quot;</span>, <span class="keyword">new</span> <span class="title class_">ComponentScanBeanDefinitionParser</span>()); <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;load-time-weaver&quot;</span>, <span class="keyword">new</span> <span class="title class_">LoadTimeWeaverBeanDefinitionParser</span>()); <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;spring-configured&quot;</span>, <span class="keyword">new</span> <span class="title class_">SpringConfiguredBeanDefinitionParser</span>()); <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;mbean-export&quot;</span>, <span class="keyword">new</span> <span class="title class_">MBeanExportBeanDefinitionParser</span>());</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;mbean-server&quot;</span>, <span class="keyword">new</span> <span class="title class_">MBeanServerBeanDefinitionParser</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述分析，我们清楚的了解了外部命名空间标签的执行流程，如下：</p><ul><li>将自定义标签的约束 与 物理约束文件与网络约束名称的约束 以键值对形式存储到一个spring.schemas文件里 ，该文件存储在类加载路径的 META-INF里，Spring会自动加载到;</li><li>将自定义命名空间的名称 与 自定义命名空间的处理器映射关系 以键值对形式存在到一个叫spring.handlers文件里，该文件存储在类加载路径的 META-INF里，Spring会自动加载到;</li><li>准备好NamespaceHandler，如果命名空间只有一个标签，那么直接在parse方法中进行解析即可，一般解析结果就是注册该标签对应的BeanDefinition。如果命名空间里有多个标签，那么可以在init方法中为每个标签都注册一个BeanDefinitionParser，在执行NamespaceHandler的parse方法时在分流给不同的BeanDefinitionParser进行解析(重写doParse方法即可)。</li></ul><blockquote><p>案例：设想自己是一名架构师，进行某一个框架与Spring的集成开发，效果是通过一个指示标签，向Spring容器中自动注入一个BeanPostProcessor</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/xmlSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:haohao</span>=<span class="string">&quot;http://www.itheima.com/haohao&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.itheima.com/haohao</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.itheima.com/haohao/haohao-annotation.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">haohao:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤分析：</p><ol><li>确定命名空间名称、schema虚拟路径、标签名称；</li><li>编写schema约束文件haohao-annotation.xsd</li><li>在类加载路径下创建META目录，编写约束映射文件spring.schemas和处理器映射文件spring.handlers</li><li>编写命名空间处理器 HaohaoNamespaceHandler，在init方法中注册HaohaoBeanDefinitionParser</li><li>编写标签的解析器 HaohaoBeanDefinitionParser，在parse方法中注册HaohaoBeanPostProcessor</li><li>编写HaohaoBeanPostProcessor</li></ol><p>=======以上五步是框架开发者写的，以下是框架使用者写的===========</p><ol><li>在applicationContext.xml配置文件中引入命名空间</li><li>在applicationContext.xml配置文件中使用自定义的标签</li></ol><p>编写schema约束文件haohao-annotation.xsd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.itheima.com/haohao&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">xmlns:xsd</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">targetNamespace</span>=<span class="string">&quot;http://www.itheima.com/haohao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">&quot;annotation-driven&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在类加载路径下创建META目录，编写约束映射文件spring.schemas和处理器映射文件spring.handlers</p><div class="fj-gallery"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424110332628.png" alt="image-20230424110332628"></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230424110402498.png" alt="image-20230424110402498"></p>          </div><p>编写命名空间处理器HaohaoNamespaceHandler，在init方法中注册HaohaoBeanDefinitionParser</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaohaoNamespaceHandler</span> <span class="keyword">extends</span> <span class="title class_">NamespaceHandlerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerBeanDefinitionParser(<span class="string">&quot;annotation-driven&quot;</span>,<span class="keyword">new</span> <span class="title class_">HaohaoBeanDefinitionParser</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写标签的解析器HaohaoBeanDefinitionParser，在parse方法中注册HaohaoBeanPostProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaohaoBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class="line">        <span class="comment">//创建HaohaoBeanPostProcessor的BeanDefinitionRootBeanDefinition </span></span><br><span class="line">        beanDefinition = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>();</span><br><span class="line">        beanDefinition.setBeanClass(HaohaoBeanPostProcessor.class);</span><br><span class="line">        <span class="comment">//注册HaohaoBeanPostProcessor</span></span><br><span class="line">        parserContext.getRegistry().registerBeanDefinition(<span class="string">&quot;haohaoBeanPostProcessor&quot;</span>,beanDefinition);</span><br><span class="line">        <span class="keyword">return</span> beanDefinition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写HaohaoBeanPostProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaohaoBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自动注入HaohaoBeanPostProcessor成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">SpringBean的配置详解、Bean实例化的基本流程、Bean的生命周期、Spring IoC整体流程总结</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架的诞生</title>
    <link href="https://wuwawawa.github.io/posts/ed620e7e.html"/>
    <id>https://wuwawawa.github.io/posts/ed620e7e.html</id>
    <published>2023-04-23T08:04:42.000Z</published>
    <updated>2023-04-24T07:21:41.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Spring框架概述">1. Spring框架概述</h2><p>spring是一个开源的轻量级Java开发应用框架，可以简化企业级应用开发。Spring解决了开发者在JavaEE开发中遇到的许多常见的问题，提供了功能强大IOC、AOP及Web MVC等功能。是当前企业中Java开发几乎不能缺少的框架之一。Spring的生态及其完善，不管是Spring哪个领域的解决方案都是依附于在Spring Framework基础框架的。</p><blockquote><p>Spring 框架的历史</p></blockquote><ul><li><p>Jsp默默扛下所有；</p></li><li><p>MVC+三层架构分工明确，但开发成本及其高；</p></li><li><p>EJB 重量级框架出现，走出一个困境，有进入另一个困境；</p></li><li><p>Spring 春天来到，随之，SSH风生水起、称霸武林；</p></li><li><p>Spring 稳住江湖大哥位置，SSM开始上位；</p></li><li><p>Spring 本着“拿来主义”的思维快速发展，生态不断健全；</p></li><li><p>SpringBoot又一里程碑崛起，把“约定大于配置“思想玩儿的炉火纯青；</p></li><li><p>SpringCloud打包了微服务众多解决方案，应对互联网项目更加easy！</p></li></ul><blockquote><p>Spring Framework技术栈图示</p></blockquote><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423161638018.png" alt="image-20230423161638018" style="zoom:67%;" /><hr><h2 id="2-BeanFactory快速入门">2. BeanFactory快速入门</h2><p>根据下图，分析一下Spring的BeanFactory的开发步骤：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423161748796.png" alt="image-20230423161748796" style="zoom:67%;" /><p>1）导入Spring的jar包或Maven坐标；</p><p>2）定义UserService接口及其UserServiceImpl实现类；</p><p>3）创建beans.xml配置文件，将UserServiceImpl的信息配置到该xml中；</p><p>4）编写测试代码，创建BeanFactory，加载配置文件，获取UserService实例对象。</p><div class="tabs" id="8bb75834-8a57-41f0-8bb5-ffd577f454e4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8bb75834-8a57-41f0-8bb5-ffd577f454e4-1"><i class="fas fa-award"></i>1</button></li><li class="tab"><button type="button" data-href="#8bb75834-8a57-41f0-8bb5-ffd577f454e4-2"><i class="fas fa-baseball-ball"></i>2</button></li><li class="tab"><button type="button" data-href="#8bb75834-8a57-41f0-8bb5-ffd577f454e4-3"><i class="fas fa-bone"></i>3</button></li><li class="tab"><button type="button" data-href="#8bb75834-8a57-41f0-8bb5-ffd577f454e4-4"><i class="fas fa-anchor"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8bb75834-8a57-41f0-8bb5-ffd577f454e4-1"><p>1）导入Spring的jar包或Maven坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring核心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8bb75834-8a57-41f0-8bb5-ffd577f454e4-2"><p>2）定义UserService接口及其UserServiceImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8bb75834-8a57-41f0-8bb5-ffd577f454e4-3"><p>3）创建beans.xml配置文件，将UserServiceImpl的信息配置到该xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8bb75834-8a57-41f0-8bb5-ffd577f454e4-4"><p>4）编写测试代码，创建BeanFactory，加载配置文件，获取UserService实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 BeanFactory</span></span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"><span class="comment">//创建读取器</span></span><br><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">reader.loadBeanDefinitions(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取 Bean 实例对象</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">System.out.println(userService);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>上面使用BeanFactory完成了IOC思想的实现，下面去实现以下DI依赖注入：</p><p>1）定义UserDao接口及其UserDaoImpl实现类；</p><p>2）修改UserServiceImpl代码，添加一个setUserDao(UserDaouserDao)用于接收注入的对象；</p><p>3）修改beans.xml配置文件，在UserDaoImpl的<code>&lt;bean&gt;</code>中嵌入<code>&lt;property&gt;</code>配置注入；</p><p>4）修改测试代码，获得UserService时，setUserService方法执行了注入操作。</p><div class="tabs" id="9d9f568f-b81b-4495-9067-137af7cc9140"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9d9f568f-b81b-4495-9067-137af7cc9140-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#9d9f568f-b81b-4495-9067-137af7cc9140-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#9d9f568f-b81b-4495-9067-137af7cc9140-3"><i class="fas fa-wind"></i>3</button></li><li class="tab"><button type="button" data-href="#9d9f568f-b81b-4495-9067-137af7cc9140-4"><i class="fas fa-fire-alt"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9d9f568f-b81b-4495-9067-137af7cc9140-1"><p>1）定义UserDao接口及其UserDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9d9f568f-b81b-4495-9067-137af7cc9140-2"><p>2）修改UserServiceImpl代码，添加一个setUserDao(UserDaouserDao)用于接收注入的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Beanractory去调用该方法从容器中获得userDao设置到此处</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BeanFactory去调用该方法获得userDao设置到此处&quot;</span>+userDao);</span><br><span class="line">        <span class="built_in">this</span>.userDao=userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9d9f568f-b81b-4495-9067-137af7cc9140-3"><p>3）修改beans.xml配置文件，在UserDaoImpl的<code>&lt;bean&gt;</code>中嵌入<code>&lt;property&gt;</code>配置注入；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>property里name值setUserDao set后面</p><p>ref为下面的bean</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9d9f568f-b81b-4495-9067-137af7cc9140-4"><p>4）编写测试代码，创建BeanFactory，加载配置文件，获取UserService实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 BeanFactory</span></span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"><span class="comment">//创建读取器</span></span><br><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">reader.loadBeanDefinitions(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取 Bean 实例对象</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) beanFactory.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">System.out.println(userService);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory去调用该方法获得userDao设置到此处com.itheima.dao.impl.UserDaoImpl@3b81a1bc</span><br><span class="line">com.itheima.service.impl.UserServiceImpl@64616ca2</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h2 id="3-ApplicationContext快速入门">3. ApplicationContext快速入门</h2><p>ApplicationContext称为<code>Spring容器</code>，内部封装了BeanFactory，比BeanFactory功能更丰富更强大，使用ApplicationContext进行开发时 ，xml配置文件的名称习惯写成<code>applicationContext.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 ApplicationContext, 加载配置文件，实例化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//根据 beanName 获得容器中的 Bean 实例</span></span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">System.out.println(userService);</span><br></pre></td></tr></table></figure><hr><h2 id="4-二者关系">4. 二者关系</h2><p>1）BeanFactory是Spring的早期接口，称为Spring的Bean工厂，ApplicationContext是后期更高级接口，称之为Spring 容器；</p><p>2）ApplicationContext在BeanFactory基础上对功能进行了扩展，例如：监听功能、国际化功能等。BeanFactory的API更偏向底层，ApplicationContext的API大多数是对这些底层API的封装；</p><p>3）Bean创建的主要逻辑和功能都被封装在BeanFactory中，ApplicationContext不仅继承了BeanFactory，而且ApplicationContext内部还维护着BeanFactory的引用，所以，ApplicationContext与BeanFactory既有继承关系，又有融合关系。</p><p>4）Bean的初始化时机不同，原始BeanFactory是在首次调用getBean时才进行Bean的创建，而ApplicationContext则是配置文件加载，容器一创建就将Bean都实例化并初始化好。</p><p>ApplicationContext除了继承了BeanFactory外，还继承了ApplicationEventPublisher（事件发布器）、ResouresPatternResolver（资源解析器）、MessageSource（消息资源）等。但是ApplicationContext的核心功能还是BeanFactory。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423165150023.png" alt="image-20230423165150023" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423165208430.png" alt="image-20230423165208430" style="zoom:67%;" /><p>applicationContext内部维护着beanFactory的引用，在学习过程中会查看beanFactory内部维护的属性，断点查看如下图示内容的</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423165303864.png" alt="image-20230423165303864" style="zoom:67%;" /><p>验证BeanFactory和ApplicationContext对Bean的初始化时机，在UserDaoImpl的无参构造内打印一句话，验证构造方法的执行时机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建了&quot;</span>);            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断点观察，BeanFactory方式时，当调用getBean方法时才会把需要的Bean实例创建，即延迟加载；而ApplicationContext是加载配置文件，容器创建时就将所有的Bean实例都创建好了，存储到一个单例池中，当调用getBean时直接从单例池中获取Bean实例返回</p><hr><h2 id="5-BeanFactory的继承体系">5. BeanFactory的继承体系</h2><p>BeanFactory是核心接口，项目运行过程中肯定有具体实现参与，这个具体实现就是DefaultListableBeanFactory，而ApplicationContext内部维护的Beanfactory的实现类也是它</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423165709449.png" alt="image-20230423165709449" style="zoom:67%;" /><hr><h2 id="6-ApplicationContext的继承体系">6. ApplicationContext的继承体系</h2><p>只在Spring基础环境下，即只导入spring-context坐标时，此时ApplicationContext的继承体系</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423165759705.png" alt="image-20230423165759705" style="zoom:67%;" /><p>只在Spring基础环境下，常用的三个ApplicationContext作用如下：</p><table><thead><tr><th style="text-align:left">实现类</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">ClassPathXmlApplicationContext</td><td style="text-align:left">加载类路径下的xml配置的ApplicationContext</td></tr><tr><td style="text-align:left">FileSystemXmlApplicationContext</td><td style="text-align:left">加载磁盘路径下的xml配置的ApplicationContext</td></tr><tr><td style="text-align:left">AnnotationConfigApplicationContext</td><td style="text-align:left">加载注解配置类的ApplicationContext</td></tr></tbody></table><p>如果Spring基础环境中加入了其他组件解决方案，如web层解决方案，即导入spring-web坐标，此时ApplicationContext的继承体系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web&lt;/artifactId</span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423170256684.png" alt="image-20230423170256684" style="zoom:67%;" /><p>在Spring的web环境下，常用的两个ApplicationContext作用如下：</p><table><thead><tr><th style="text-align:left">实现类</th><th style="text-align:left">功能描述</th></tr></thead><tbody><tr><td style="text-align:left">XmlWebApplicationContext</td><td style="text-align:left">web环境下，加载类路径下的xml配置的ApplicationContext</td></tr><tr><td style="text-align:left">AnnotationConfigWebApplicationContext</td><td style="text-align:left">web环境下，加载磁盘路径下的xml配置的ApplicationContext</td></tr></tbody></table><p>PS：web环境下的这两个ApplicationContext，在学习Spring集成web时在进行讲解</p>]]></content>
    
    
    <summary type="html">Spring框架概述、BeanFactory和ApplicationContext</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring初探:IoC、DI、AOP</title>
    <link href="https://wuwawawa.github.io/posts/d063f224.html"/>
    <id>https://wuwawawa.github.io/posts/d063f224.html</id>
    <published>2023-04-22T13:44:50.000Z</published>
    <updated>2023-04-26T04:57:29.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-传统JavaWeb开发的困惑">1. 传统JavaWeb开发的困惑</h2><mark class="hl-label blue">传统Javaweb开发代码分析-用户模块</mark> <div class="tabs" id="3fae8efb-4c0d-4648-8df8-5c8e424a061a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3fae8efb-4c0d-4648-8df8-5c8e424a061a-1"><i class="fas fa-seedling"></i>用户登录业务方法</button></li><li class="tab"><button type="button" data-href="#3fae8efb-4c0d-4648-8df8-5c8e424a061a-2"><i class="fas fa-leaf"></i>用户注册业务方法</button></li><li class="tab"><button type="button" data-href="#3fae8efb-4c0d-4648-8df8-5c8e424a061a-3"><i class="fab fa-apple"></i>困惑一</button></li><li class="tab"><button type="button" data-href="#3fae8efb-4c0d-4648-8df8-5c8e424a061a-4"><i class="fas fa-tree"></i>困惑二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3fae8efb-4c0d-4648-8df8-5c8e424a061a-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423122315518.png" alt="image-20230423122315518" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3fae8efb-4c0d-4648-8df8-5c8e424a061a-2"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423122343089.png" alt="image-20230423122343089" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3fae8efb-4c0d-4648-8df8-5c8e424a061a-3"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423125441852.png" alt="image-20230423125441852" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3fae8efb-4c0d-4648-8df8-5c8e424a061a-4"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423125512612.png" alt="image-20230423125512612" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">解决方案</mark> <div class="tabs" id="1d8f70ba-8c37-4943-8c5a-e8b45231eaa3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1d8f70ba-8c37-4943-8c5a-e8b45231eaa3-1"><i class="fas fa-heartbeat"></i>1</button></li><li class="tab"><button type="button" data-href="#1d8f70ba-8c37-4943-8c5a-e8b45231eaa3-2"><i class="fas fa-cookie-bite"></i>2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1d8f70ba-8c37-4943-8c5a-e8b45231eaa3-1"><p>困惑一：层与层之间紧密耦合在了一起，接口与具体实现紧密耦合在了一起</p><p>解决思路：程序代码中不要手动new对象，第三方根据要求为程序提供需要的Bean对象</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423125825700.png" alt="image-20230423125825700" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1d8f70ba-8c37-4943-8c5a-e8b45231eaa3-2"><p>困惑二：通用的事务功能耦合在业务代码中，通用的日志功能耦合在业务代码中</p><p>解决思路：程序代码中不要手动new对象，第三方根据要求为程序提供需要的Bean对象的代理对象，代理对象内部动态结合业务和通用功能</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423125854402.png" alt="image-20230423125854402" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="2-IoC控制反转思想的提出">2. IoC控制反转思想的提出</h2><p>实际开发中，对象之间的耦合关系，就类似手表内部的齿轮，每个齿轮都紧密啮合在一起，一旦某个齿轮发生故障，那么整个系统也意味着崩溃。尽可能让对象之间的关系保持松耦合状态是我们期望的。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423130540687.png" alt="image-20230423130540687" style="zoom:67%;" /><p>IoC思想：<code>Inversion of Control</code>，翻译为“控制反转”或“反转控制”，强调的是原来在程序中创建Bean的权利反转给第三方。</p><p>例如：原来在程序中手动的去new UserServiceImpl()，手动的去new UserDaoImpl()，而根据IoC思想的指导，寻求一个第三方去创建UserServiceImpl对象和UserDaoImpl对象。这样程序与具体对象就失去的直接联系。</p><blockquote><p>谁去充当第三方角色呢？</p></blockquote><p>工厂设计模式，BeanFactory来充当第三方的角色，来产生Bean实例</p><blockquote><p>BeanFactory怎么知道产生哪些Bean实例呢？</p></blockquote><p>可以使用配置文件配置Bean的基本信息，BeanFactory根据配置文件来生产Bean实例</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423153610877.png" alt="image-20230423153610877" style="zoom:67%;" />例如，用IoC思想去反转UserServiceImpl的创建权，由原来程序中创建反转给通过BeanFactory去创建</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423153658959.png" alt="image-20230423153658959" style="zoom:67%;" /><hr><h2 id="3-DI依赖注入思想的提出">3. DI依赖注入思想的提出</h2><p>上面使用<code>BeanFactory</code>的方式已经实现的&quot;控制反转&quot;，将<code>Bean</code>的创建权交给了<code>BeanFactory</code>，如果我们想将<code>UserDao</code>的创建权也反转给<code>BeanFactory</code>，与此同时<code>UserService</code>内部还需要用到<code>UserDao</code>实例对象，那应该怎样操作呢？</p><div class="tabs" id="729b726d-36b9-4c2c-a60c-bd3ffb9ac2cb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#729b726d-36b9-4c2c-a60c-bd3ffb9ac2cb-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#729b726d-36b9-4c2c-a60c-bd3ffb9ac2cb-2"><i class="fas fa-cannabis"></i>2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="729b726d-36b9-4c2c-a60c-bd3ffb9ac2cb-1"><p>1）在程序中，通过<code>BeanFactory</code>获得<code>UserService</code></p><p>2）在程序中，通过<code>BeanFactory</code>获得<code>UserDao</code></p><p>3）在程序中，将<code>UserDao</code>设置给<code>UserService</code></p><p><mark class="hl-label blue">该方式是否存在一些问题？</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423153956265.png" alt="image-20230423153956265" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="729b726d-36b9-4c2c-a60c-bd3ffb9ac2cb-2"><p>UserService存在于BeanFactory中，UserDao也存在于BeanFactory中，可以在BeanFactory内部进行结合</p><p>将UserDao在BeanFactory内部设置给UserService的过程叫做<span class='p red'>“注入”</span>，而UserService需要依赖UserDao的注入才能正常工作，这个过程叫做<span class='p red'>“依赖注入”</span></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423154346151.png" alt="image-20230423154346151" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>面试题：IoC 和DI 的关系？</p></blockquote><p>首先，先回答IoC和DI的是什么：</p><p>IoC：Inversion of Control，控制反转，将Bean的创建权由原来程序反转给第三方</p><p>DI：Dependency Injection，依赖注入，某个Bean的完整创建依赖于其他Bean（或普通参数）的注入</p><p>其次，在回答IoC和DI的关系：</p><p>第一种观点：IoC强调的是Bean创建权的反转，而DI强调的是Bean的依赖关系，认为不是一回事</p><p>第二种观点：IoC强调的是Bean创建权的反转，而DI强调的是通过注入的方式反转Bean的创建权，认为DI是IoC的其中一种实现方式</p><hr><h2 id="4-AOP面向切面思想的提出">4. AOP面向切面思想的提出</h2><p>IoC和DI思想主要是解决前面我们的困惑一，困惑二还没有解决</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423154737954.png" alt="image-20230423154737954" style="zoom: 50%;" /><p>困惑二的解决方案是，借助于IoC思想，将Bean的创建权反转给BeanFactory，而BeanFactory生产的Bean是目标Bean的代理对象，这样就可以在代理对象中对目标对象方法进行相应的增强。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423155019793.png" alt="image-20230423155019793" style="zoom:67%;" /><p>AOP，<code>Aspect Oriented Programming</code>，面向切面编程，是对面向对象编程OOP的升华。OOP是纵向对一个事物的抽象，一个对象包括静态的属性信息，包括动态的方法信息等。而AOP是横向的对不同事物的抽象，<code>属性与属性</code>、<code>方法与方法</code>、<code>对象与对象</code>都可以组成一个<code>切面</code>，而用这种思维去设计编程的方式叫做面向切面编程。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423155253872.png" alt="image-20230423155253872" style="zoom:67%;" /><blockquote><p>三种思想总结</p></blockquote><p>1）IoC控制反转，是将程序创建Bean的权利反转给第三方；</p><p>2）DI依赖注入，某个完整Bean需要依赖于其他Bean（或属性）的注入；</p><p>3）AOP面向切面编程，用横向抽取方法（属性、对象等）思想，组装成一个功能性切面。</p><hr><h2 id="5-框架概念的出现">5. 框架概念的出现</h2><p>上面提出了一些思想来解决遇到的问题，而这些思想的实现就需要通过编码去落地，往往我们把具备一定业务领域解决方案的&quot;工具&quot;称为框架。</p><p>框架的基本特点：</p><ul><li>框架（Framework），是基于基础技术之上，从众多业务中抽取出的通用解决方案；</li><li>框架是一个半成品，使用框架规定的语法开发可以提高开发效率，可以用简单的代码就能完成复杂的基础业务；</li><li>框架内部使用大量的设计模式、算法、底层代码操作技术，如反射、内省、xml解析、注解解析等；</li><li>框架一般都具备扩展性；</li><li>有了框架，我们可以将精力尽可能的投入在纯业务开发上而不用去费心技术实现以及一些辅助业务。</li></ul><p>Java中常用的框架：</p><p>不同语言，不同领域都有属于自己的框架，使用框架开发是作为程序员的最基础的底线。Java语言中的框架，可以分为基础框架和服务框架：</p><ul><li><p>基础框架：完成基本业务操作的框架，如MyBatis、Spring、SpringMVC、Struts2、Hibernate等</p></li><li><p>服务框架：特定领域的框架，一般还可以对外提供服务框架，如MQ、ES、Nacos等</p></li></ul><hr><h2 id="6-思想、框架和编码关系">6. 思想、框架和编码关系</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230423155505826.png" alt="image-20230423155505826" style="zoom:67%;" /><ul><li><p>架构师（高级程序员）：把思想落地变为实现的人，例如上面的设计和BeanFactory的编写，即框架的设计和实现者。</p></li><li><p>程序员：使用框架完成业务的人，其中UserServiceImpl、beans.xml、测试类都是我们编写的。</p></li></ul>]]></content>
    
    
    <summary type="html">传统Javaweb 开发的困惑和IoC、DI和AOP思想提出</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据备份与恢复</title>
    <link href="https://wuwawawa.github.io/posts/73985825.html"/>
    <id>https://wuwawawa.github.io/posts/73985825.html</id>
    <published>2023-04-21T06:33:21.000Z</published>
    <updated>2023-04-18T07:12:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>在任何数据库环境中，总会有<code>不确定的意外</code>情况发生，比如例外的停电、计算机系统中的各种软硬件故障、人为破坏、管理员误操作等是不可避免的，这些情况可能会导致<code>数据的丢失</code>、<code>服务器瘫痪</code>等严重的后果。存在多个服务器时，会出现主从服务器之间的数据同步问题。</p><p>为了有效防止数据丢失，并将损失降到最低，应定期对MySQL数据库服务器做备份。如果数据库中的数据丢失或者出现错误，可以使用备份的数据进行恢复。主从服务器之间的数据同步问题可以通过复制功能实现。</p><h2 id="1-物理备份与逻辑备份">1. 物理备份与逻辑备份</h2><p>**物理备份：**备份数据文件，转储数据库物理文件到某一目录。物理备份恢复速度比较快，但占用空间比较大，MySQL中可以用 <code>xtrabackup</code> 工具来进行物理备份。</p><p>**逻辑备份：**对数据库对象利用工具进行导出工作，汇总入备份文件内。逻辑备份恢复速度慢，但占用空间小，更灵活。MySQL 中常用的逻辑备份工具为 <code>mysqldump</code> 。逻辑备份就是 <code>备份sql语句</code> ，在恢复的时候执行备份的sql语句实现数据库数据的重现。</p><hr><h2 id="2-mysqldump实现逻辑备份">2. mysqldump实现逻辑备份</h2><p>mysqldump是MySQL提供的一个非常有用的数据库备份工具。</p><h3 id="2-1-备份一个数据库">2.1 备份一个数据库</h3><p>mysqldump命令执行时，可以将数据库备份成一个<code>文本文件</code>，该文件中实际上包含多个<code>CREATE</code>和<code>INSERT</code>语句，使用这些语句可以重新创建表和插入数据。</p><ul><li>查出需要备份的表的结构，在文本文件中生成一个CREATE语句</li><li>将表中的所有记录转换为一条INSERT语句。</li></ul><p><strong>基本语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump –u 用户名称 –h 主机名称 –p密码 待备份的数据库名称[tbname, [tbname...]]<span class="operator">&gt;</span> 备份文件名称.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><blockquote><p>说明： 备份的文件并非一定要求后缀名为.sql，例如后缀名为.txt的文件也是可以的。</p></blockquote><p>举例：使用root用户备份atguigu数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu<span class="operator">&gt;</span>atguigu.sql #备份文件存储在当前目录下</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigudb1 <span class="operator">&gt;</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu.sql</span><br></pre></td></tr></table></figure><p>备份文件剖析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost Database: atguigu</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version 8.0.26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Current Database: `atguigu`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="comment">/*!32312 IF NOT EXISTS*/</span> `atguigu` <span class="comment">/*!40100 DEFAULT CHARACTER SET</span></span><br><span class="line"><span class="comment">utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span>;</span><br><span class="line"></span><br><span class="line">USE `atguigu`;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `student`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`studentno` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`class` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`studentno`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;张三_back&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;一班&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="string">&#x27;二班&#x27;</span>),(<span class="number">20</span>,<span class="string">&#x27;钱七&#x27;</span>,<span class="string">&#x27;&gt;三班&#x27;</span>),(<span class="number">22</span>,<span class="string">&#x27;zhang3_update&#x27;</span>,<span class="string">&#x27;1ban&#x27;</span>),(<span class="number">24</span>,<span class="string">&#x27;wang5&#x27;</span>,<span class="string">&#x27;2ban&#x27;</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `student` ENABLE KEYS */</span>;</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">-- Dump completed on 2022-01-07 9:58:23</span></span><br></pre></td></tr></table></figure><h3 id="2-2-备份全部数据库">2.2 备份全部数据库</h3><p>若想用mysqldump备份整个实例，可以使用 --all-databases 或 -A 参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>pxxxxxx <span class="comment">--all-databases &gt; all_database.sql</span></span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>pxxxxxx <span class="operator">-</span>A <span class="operator">&gt;</span> all_database.sql</span><br></pre></td></tr></table></figure><h3 id="2-3-备份部分数据库">2.3 备份部分数据库</h3><p>使用 <code>--databases</code> 或 <code>-B</code> 参数了，该参数后面跟数据库名称，多个数据库间用空格隔开。如果指定 databases参数，备份文件中会存在创建数据库的语句，如果不指定参数，则不存在。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump –u <span class="keyword">user</span> –h host –p <span class="comment">--databases [数据库的名称1 [数据库的名称2...]] &gt; 备份文件名称.sql</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--databases atguigu atguigu12 &gt;two_database.sql</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="operator">-</span>B atguigu atguigu12 <span class="operator">&gt;</span> two_database.sql</span><br></pre></td></tr></table></figure><h3 id="2-4-备份部分表">2.4 备份部分表</h3><p>比如，在表变更前做个备份。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump –u <span class="keyword">user</span> –h host –p 数据库的名称 [表名<span class="number">1</span> [表名<span class="number">2.</span>..]] <span class="operator">&gt;</span> 备份文件名称.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><p>举例：备份atguigu数据库下的book表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu book<span class="operator">&gt;</span> book.sql</span><br></pre></td></tr></table></figure><p>book.sql文件内容如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu book<span class="operator">&gt;</span> book.sql<span class="operator">^</span>C</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# ls</span><br><span class="line">kk kubekey kubekey<span class="operator">-</span>v1<span class="number">.1</span><span class="number">.1</span><span class="operator">-</span>linux<span class="operator">-</span>amd64.tar.gz README.md test1.sql two_database.sql</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu book<span class="operator">&gt;</span> book.sql</span><br><span class="line">Enter password:</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# ls</span><br><span class="line">book.sql kk kubekey kubekey<span class="operator">-</span>v1<span class="number">.1</span><span class="number">.1</span><span class="operator">-</span>linux<span class="operator">-</span>amd64.tar.gz README.md test1.sql</span><br><span class="line">two_database.sql</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# vi book.sql</span><br><span class="line"><span class="comment">-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost Database: atguigu</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version 8.0.26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `book`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `book`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `book` (</span><br><span class="line">`bookid` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`card` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`test` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`bookid`),</span><br><span class="line">KEY `Y` (`card`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">101</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `book`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line">LOCK TABLES `book` WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `book` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `book` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">9</span>,<span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="number">10</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),(<span class="number">4</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),(<span class="number">5</span>,<span class="number">7</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="number">10</span>,<span class="keyword">NULL</span>),(<span class="number">7</span>,<span class="number">11</span>,<span class="keyword">NULL</span>),(<span class="number">8</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">9</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">10</span>,<span class="number">17</span>,<span class="keyword">NULL</span>),(<span class="number">11</span>,<span class="number">19</span>,<span class="keyword">NULL</span>),(<span class="number">12</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">14</span>,<span class="number">14</span>,<span class="keyword">NULL</span>),(<span class="number">15</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">16</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">17</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),(<span class="number">18</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">19</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="number">11</span>,<span class="keyword">NULL</span>),(<span class="number">21</span>,<span class="number">9</span>,<span class="keyword">NULL</span>),(<span class="number">22</span>,<span class="number">20</span>,<span class="keyword">NULL</span>),(<span class="number">23</span>,<span class="number">13</span>,<span class="keyword">NULL</span>),(<span class="number">24</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">25</span>,<span class="number">18</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">26</span>,<span class="number">20</span>,<span class="keyword">NULL</span>),(<span class="number">27</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">28</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">29</span>,<span class="number">15</span>,<span class="keyword">NULL</span>),(<span class="number">30</span>,<span class="number">15</span>,<span class="keyword">NULL</span>),(<span class="number">31</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">32</span>,<span class="number">11</span>,<span class="keyword">NULL</span>),(<span class="number">33</span>,<span class="number">20</span>,<span class="keyword">NULL</span>),(<span class="number">34</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">35</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),(<span class="number">36</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">37</span>,<span class="number">17</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">38</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">39</span>,<span class="number">16</span>,<span class="keyword">NULL</span>),(<span class="number">40</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">41</span>,<span class="number">18</span>,<span class="keyword">NULL</span>),(<span class="number">42</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">43</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">44</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">45</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">46</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">47</span>,<span class="number">15</span>,<span class="keyword">NULL</span>),(<span class="number">48</span>,<span class="number">17</span>,<span class="keyword">NULL</span>),(<span class="number">49</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">50</span>,<span class="number">16</span>,<span class="keyword">NULL</span>),(<span class="number">51</span>,<span class="number">13</span>,<span class="keyword">NULL</span>),(<span class="number">52</span>,<span class="number">17</span>,<span class="keyword">NULL</span>),(<span class="number">53</span>,<span class="number">7</span>,<span class="keyword">NULL</span>),(<span class="number">54</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">55</span>,<span class="number">9</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">56</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">57</span>,<span class="number">14</span>,<span class="keyword">NULL</span>),(<span class="number">58</span>,<span class="number">7</span>,<span class="keyword">NULL</span>),(<span class="number">59</span>,<span class="number">15</span>,<span class="keyword">NULL</span>),(<span class="number">60</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">61</span>,<span class="number">13</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">62</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),(<span class="number">63</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">64</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">65</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">66</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">67</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),(<span class="number">68</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">69</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">70</span>,<span class="number">10</span>,<span class="keyword">NULL</span>),(<span class="number">71</span>,<span class="number">16</span>,<span class="keyword">NULL</span>),(<span class="number">72</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),(<span class="number">73</span>,<span class="number">14</span>,<span class="keyword">NULL</span>),(<span class="number">74</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">75</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),(<span class="number">76</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">77</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">78</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">79</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">80</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">81</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">82</span>,<span class="number">14</span>,<span class="keyword">NULL</span>),(<span class="number">83</span>,<span class="number">5</span>,<span class="keyword">NULL</span>),(<span class="number">84</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),(<span class="number">85</span>,<span class="number">2</span>,<span class="keyword">NULL</span>),(<span class="number">86</span>,<span class="number">20</span>,<span class="keyword">NULL</span>),(<span class="number">87</span>,<span class="number">12</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">88</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">89</span>,<span class="number">8</span>,<span class="keyword">NULL</span>),(<span class="number">90</span>,<span class="number">18</span>,<span class="keyword">NULL</span>),(<span class="number">91</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">92</span>,<span class="number">3</span>,<span class="keyword">NULL</span>),(<span class="number">93</span>,<span class="number">6</span>,<span class="keyword">NULL</span>),(<span class="number">94</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),</span><br><span class="line">(<span class="number">95</span>,<span class="number">4</span>,<span class="keyword">NULL</span>),(<span class="number">96</span>,<span class="number">17</span>,<span class="keyword">NULL</span>),(<span class="number">97</span>,<span class="number">15</span>,<span class="keyword">NULL</span>),(<span class="number">98</span>,<span class="number">1</span>,<span class="keyword">NULL</span>),(<span class="number">99</span>,<span class="number">20</span>,<span class="keyword">NULL</span>),(<span class="number">100</span>,<span class="number">15</span>,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `book` ENABLE KEYS */</span>;</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br></pre></td></tr></table></figure><p>可以看到，book文件和备份的库文件类似。不同的是，book文件只包含book表的DROP、CREATE和 INSERT语句。</p><p>备份多张表使用下面的命令，比如备份book和account表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#备份多张表</span><br><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu book account <span class="operator">&gt;</span> <span class="number">2</span>_tables_bak.sql</span><br></pre></td></tr></table></figure><h3 id="2-5-备份单表的部分数据">2.5 备份单表的部分数据</h3><p>有些时候一张表的数据量很大，我们只需要部分数据。这时就可以使用 --where 选项了。where后面附带需要满足的条件。</p><p>举例：备份student表中id小于10的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu student <span class="comment">--where=&quot;id &lt; 10 &quot; &gt; student_part_id10_low_bak.sql</span></span><br></pre></td></tr></table></figure><p>内容如下所示，insert语句只有id小于10的部分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES `student` WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `student` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">100002</span>,<span class="string">&#x27;JugxTY&#x27;</span>,<span class="number">157</span>,<span class="number">280</span>),(<span class="number">2</span>,<span class="number">100003</span>,<span class="string">&#x27;QyUcCJ&#x27;</span>,<span class="number">251</span>,<span class="number">277</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">100004</span>,<span class="string">&#x27;lATUPp&#x27;</span>,<span class="number">80</span>,<span class="number">404</span>),(<span class="number">4</span>,<span class="number">100005</span>,<span class="string">&#x27;BmFsXI&#x27;</span>,<span class="number">240</span>,<span class="number">171</span>),(<span class="number">5</span>,<span class="number">100006</span>,<span class="string">&#x27;mkpSwJ&#x27;</span>,<span class="number">388</span>,<span class="number">476</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="number">100007</span>,<span class="string">&#x27;ujMgwN&#x27;</span>,<span class="number">259</span>,<span class="number">124</span>),(<span class="number">7</span>,<span class="number">100008</span>,<span class="string">&#x27;HBJTqX&#x27;</span>,<span class="number">429</span>,<span class="number">168</span>),(<span class="number">8</span>,<span class="number">100009</span>,<span class="string">&#x27;dvQSQA&#x27;</span>,<span class="number">61</span>,<span class="number">504</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="number">100010</span>,<span class="string">&#x27;HljpVJ&#x27;</span>,<span class="number">234</span>,<span class="number">185</span>);</span><br></pre></td></tr></table></figure><h3 id="2-6-排除某些表的备份">2.6 排除某些表的备份</h3><p>如果我们想备份某个库，但是某些表数据量很大或者与业务关联不大，这个时候可以考虑排除掉这些表，同样的，选项 <code>--ignore-table</code> 可以完成这个功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu <span class="comment">--ignore-table=atguigu.student &gt; no_stu_bak.sql</span></span><br></pre></td></tr></table></figure><p>通过如下指定判定文件中没有student表结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;student&quot; no_stu_bak.sql</span><br></pre></td></tr></table></figure><h3 id="2-7-只备份结构或只备份数据">2.7 只备份结构或只备份数据</h3><p>只备份结构的话可以使用 <code>--no-data</code> 简写为 <code>-d</code> 选项；只备份数据可以使用 <code>--no-create-info</code> 简写为 <code>-t</code>选项。</p><ul><li><p>只备份结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu <span class="comment">--no-data &gt; atguigu_no_data_bak.sql</span></span><br><span class="line">#使用grep命令，没有找到<span class="keyword">insert</span>相关语句，表示没有数据备份。</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# grep &quot;INSERT&quot; atguigu_no_data_bak.sql</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]#</span><br></pre></td></tr></table></figure></li><li><p>只备份数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu <span class="comment">--no-create-info &gt; atguigu_no_create_info_bak.sql</span></span><br><span class="line">#使用grep命令，没有找到<span class="keyword">create</span>相关语句，表示没有数据结构。</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]# grep &quot;CREATE&quot; atguigu_no_create_info_bak.sql</span><br><span class="line">[root<span class="variable">@node1</span> <span class="operator">~</span>]#</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-8-备份中包含存储过程、函数、事件">2.8 备份中包含存储过程、函数、事件</h3><p>mysqldump备份默认是不包含存储过程，自定义函数及事件的。可以使用 <code>--routines</code> 或 <code>-R</code> 选项来备份存储过程及函数，使用 <code>--events</code> 或 <code>-E</code> 参数来备份事件。</p><p>举例：备份整个atguigu库，包含存储过程及事件：</p><ul><li>使用下面的SQL可以查看当前库有哪些存储过程或者函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> SPECIFIC_NAME,ROUTINE_TYPE ,ROUTINE_SCHEMA <span class="keyword">FROM</span></span><br><span class="line">information_schema.Routines <span class="keyword">WHERE</span> ROUTINE_SCHEMA<span class="operator">=</span>&quot;atguigu&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> SPECIFIC_NAME <span class="operator">|</span> ROUTINE_TYPE <span class="operator">|</span> ROUTINE_SCHEMA <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+----------------+</span></span><br><span class="line"><span class="operator">|</span> rand_num      <span class="operator">|</span> <span class="keyword">FUNCTION</span>     <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> rand_string   <span class="operator">|</span> <span class="keyword">FUNCTION</span>     <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BatchInsert   <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> insert_class  <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> insert_order  <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> insert_stu    <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> insert_user   <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ts_insert     <span class="operator">|</span> <span class="keyword">PROCEDURE</span>    <span class="operator">|</span> atguigu        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+--------------+----------------+</span></span><br><span class="line"><span class="number">9</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>下面备份atguigu库的数据，函数以及存储过程。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="operator">-</span>R <span class="operator">-</span>E <span class="comment">--databases atguigu &gt; fun_atguigu_bak.sql</span></span><br></pre></td></tr></table></figure><p>查询备份文件中是否存在函数，如下所示，可以看到确实包含了函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="operator">-</span>C <span class="number">5</span> &quot;rand_num&quot; fun_atguigu_bak.sql</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping routines for database &#x27;atguigu&#x27;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">/*!50003 DROP FUNCTION IF EXISTS `rand_num` */</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @saved_cs_client = @@character_set_client */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET @saved_cs_results = @@character_set_results */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET @saved_col_connection = @@collation_connection */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET character_set_client = utf8mb3 */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET character_set_results = utf8mb3 */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET collation_connection = utf8_general_ci */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET @saved_sql_mode = @@sql_mode */</span> ;</span><br><span class="line"><span class="comment">/*!50003 SET sql_mode =</span></span><br><span class="line"><span class="comment">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISIO</span></span><br><span class="line"><span class="comment">N_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27; */</span> ;</span><br><span class="line">DELIMITER ;;</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">FUNCTION</span> `rand_num`(from_num <span class="type">BIGINT</span> ,to_num <span class="type">BIGINT</span>) <span class="keyword">RETURNS</span></span><br><span class="line"><span class="type">bigint</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">BIGINT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(from_num <span class="operator">+</span>RAND()<span class="operator">*</span>(to_num <span class="operator">-</span> from_num<span class="operator">+</span><span class="number">1</span>)) ;</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span> ;;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    REPEAT</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> class ( classname,address,monitor ) <span class="keyword">VALUES</span></span><br><span class="line">    (rand_string(<span class="number">8</span>),rand_string(<span class="number">10</span>),rand_num());</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> ;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; #设置手动提交事务</span><br><span class="line">    REPEAT #循环</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>; #赋值</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_test (order_id, trans_id ) <span class="keyword">VALUES</span></span><br><span class="line">    (rand_num(<span class="number">1</span>,<span class="number">7000000</span>),rand_num(<span class="number">100000000000000000</span>,<span class="number">700000000000000000</span>));</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>; #提交事务</span><br><span class="line"><span class="keyword">END</span> ;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; #设置手动提交事务</span><br><span class="line">    REPEAT #循环</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>; #赋值</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (stuno, name ,age ,classId ) <span class="keyword">VALUES</span></span><br><span class="line">    ((<span class="keyword">START</span><span class="operator">+</span>i),rand_string(<span class="number">6</span>),rand_num(),rand_num());</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>; #提交事务</span><br><span class="line"><span class="keyword">END</span> ;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    REPEAT</span><br><span class="line">    <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` ( name,age,sex ) <span class="keyword">VALUES</span> (&quot;atguigu&quot;,rand_num(<span class="number">1</span>,<span class="number">20</span>),&quot;male&quot;);</span><br><span class="line">    UNTIL i <span class="operator">=</span> max_num</span><br><span class="line">    <span class="keyword">END</span> REPEAT;</span><br><span class="line">    <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">END</span> ;;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h3 id="2-9-mysqldump常用选项">2.9 mysqldump常用选项</h3><p>mysqldump其他常用选项如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--add-drop-database：在每个CREATE DATABASE语句前添加DROP DATABASE语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--add-drop-tables：在每个CREATE TABLE语句前添加DROP TABLE语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--add-locking：用LOCK TABLES和UNLOCK TABLES语句引用每个表转储。重载转储文件时插入得更快。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--all-database, -A：转储所有数据库中的所有表。与使用--database选项相同，在命令行中命名所有数据库。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--comment[=0|1]：如果设置为0，禁止转储文件中的其他信息，例如程序版本、服务器版本和主机。--skipcomments与--comments=0的结果相同。默认值为1，即包括额外信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--compact：产生少量输出。该选项禁用注释并启用--skip-add-drop-tables、--no-set-names、--skipdisable-keys和--skip-add-locking选项。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--compatible=name：产生与其他数据库系统或旧的MySQL服务器更兼容的输出，值可以为ansi、MySQL323、MySQL40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_table_options或者no_field_options。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--complete_insert, -c：使用包括列名的完整的INSERT语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--debug[=debug_options], -#[debug_options]：写调试日志。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--delete，-D：导入文本文件前清空表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--default-character-set=charset：使用charsets默认字符集。如果没有指定，就使用utf8。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--delete--master-logs：在主复制服务器上，完成转储操作后删除二进制日志。该选项自动启用-masterdata。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--extended-insert，-e：使用包括几个VALUES列表的多行INSERT语法。这样使得转储文件更小，重载文件时可以加速插入。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--flush-logs，-F：开始转储前刷新MySQL服务器日志文件。该选项要求RELOAD权限。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--force，-f：在表转储过程中，即使出现SQL错误也继续。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--lock-all-tables，-x：对所有数据库中的所有表加锁。在整体转储过程中通过全局锁定来实现。该选项自动关闭--single-transaction和--lock-tables。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--lock-tables，-l：开始转储前锁定所有表。用READ LOCAL锁定表以允许并行插入MyISAM表。对于事务表（例如InnoDB和BDB），--single-transaction是一个更好的选项，因为它根本不需要锁定表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-create-db，-n：该选项禁用CREATE DATABASE /*!32312 IF NOT EXIST*/db_name语句，如果给出--database或--all-database选项，就包含到输出中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-create-info，-t：只导出数据，而不添加CREATE TABLE语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-data，-d：不写表的任何行信息，只转储表的结构。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--opt：该选项是速记，它可以快速进行转储操作并产生一个能很快装入MySQL服务器的转储文件。该选项默认开启，但可以用--skip-opt禁用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--password[=password]，-p[password]：当连接服务器时使用的密码。</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span>port<span class="operator">=</span>port_num，<span class="operator">-</span>P port_num：用于连接的TCP<span class="operator">/</span>IP端口号。</span><br><span class="line"></span><br><span class="line"><span class="comment">--protocol=&#123;TCP|SOCKET|PIPE|MEMORY&#125;：使用的连接协议。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--replace，-r –replace和--ignore：控制替换或复制唯一键值已有记录的输入记录的处理。如果指定--replace，新行替换有相同的唯一键值的已有行；如果指定--ignore，复制已有的唯一键值的输入行被跳过。如果不指定这两个选项，当发现一个复制键值时会出现一个错误，并且忽视文本文件的剩余部分。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--silent，-s：沉默模式。只有出现错误时才输出。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--socket=path，-S path：当连接localhost时使用的套接字文件（为默认主机）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--user=user_name，-u user_name：当连接服务器时MySQL使用的用户名。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--verbose，-v：冗长模式，打印出程序操作的详细信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--xml，-X：产生XML输出。</span></span><br></pre></td></tr></table></figure><p>运行帮助命令 <code>mysqldump --help</code> ，可以获得特定版本的完整选项列表。</p><blockquote><p>提示 如果运行mysqldump没有–quick或–opt选项，mysqldump在转储结果前将整个结果集装入内 存。如果转储大数据库可能会出现问题，该选项默认启用，但可以用–skip-opt禁用。如果使用最 新版本的mysqldump程序备份数据，并用于恢复到比较旧版本的MySQL服务器中，则不要使用–opt 或-e选项。</p></blockquote><hr><h2 id="3-mysql命令恢复数据">3. mysql命令恢复数据</h2><p>使用mysqldump命令将数据库中的数据备份成一个文本文件。需要恢复时，可以使用<code>mysql命令</code>来恢复备份的数据。</p><p>mysql命令可以执行备份文件中的<code>CREATE语句</code>和<code>INSERT语句</code>。通过CREATE语句来创建数据库和表。通过INSERT语句来插入备份的数据。</p><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –u root –p [dbname] <span class="operator">&lt;</span> backup.sql</span><br></pre></td></tr></table></figure><p>其中，dbname参数表示数据库名称。该参数是可选参数，可以指定数据库名，也可以不指定。指定数据库名时，表示还原该数据库下的表。此时需要确保MySQL服务器中已经创建了该名的数据库。不指定数据库名，表示还原文件中所有的数据库。此时sql文件中包含有CREATE DATABASE语句，不需要MySQL服务器中已存在的这些数据库。</p><h3 id="3-1-单库备份中恢复单库">3.1 单库备份中恢复单库</h3><p>使用root用户，将之前练习中备份的atguigu.sql文件中的备份导入数据库中，命令如下：</p><p>如果备份文件中包含了创建数据库的语句，则恢复的时候不需要指定数据库名称，如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="operator">&lt;</span> atguigu.sql</span><br></pre></td></tr></table></figure><p>否则需要指定数据库名称，如下所示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu4<span class="operator">&lt;</span> atguigu.sql</span><br></pre></td></tr></table></figure><h3 id="3-2-全量备份恢复">3.2 全量备份恢复</h3><p>如果我们现在有昨天的全量备份，现在想整个恢复，则可以这样操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql –u root –p <span class="operator">&lt;</span> all.sql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>pxxxxxx <span class="operator">&lt;</span> all.sql</span><br></pre></td></tr></table></figure><p>执行完后，MySQL数据库中就已经恢复了all.sql文件中的所有数据库。</p><h3 id="3-3-全量备份恢复">3.3 全量备份恢复</h3><p>可能有这样的需求，比如说我们只想恢复某一个库，但是我们有的是整个实例的备份，这个时候我们可以从全量备份中分离出单个库的备份。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="operator">-</span>n <span class="string">&#x27;/^-- Current Database: `atguigu`/,/^-- Current Database: `/p&#x27;</span> all_database.sql <span class="operator">&gt;</span> atguigu.sql</span><br><span class="line">#分离完成后我们再导入atguigu.sql即可恢复单个库</span><br></pre></td></tr></table></figure><h3 id="3-4-从单库备份中恢复单表">3.4 从单库备份中恢复单表</h3><p>这个需求还是比较常见的。比如说我们知道哪个表误操作了，那么就可以用单表恢复的方式来恢复。</p><p>举例：我们有atguigu整库的备份，但是由于class表误操作，需要单独恢复出这张表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat atguigu.sql <span class="operator">|</span> sed <span class="operator">-</span>e <span class="string">&#x27;/./&#123;H;$!d;&#125;&#x27;</span> <span class="operator">-</span>e <span class="string">&#x27;x;/CREATE TABLE `class`/!d;q&#x27;</span> <span class="operator">&gt;</span> class_structure.sql</span><br><span class="line">cat atguigu.sql <span class="operator">|</span> grep <span class="comment">--ignore-case &#x27;insert into `class`&#x27; &gt; class_data.sql</span></span><br><span class="line">#用shell语法分离出创建表的语句及插入数据的语句后 再依次导出即可完成恢复</span><br><span class="line"></span><br><span class="line">use atguigu;</span><br><span class="line">mysql<span class="operator">&gt;</span> source class_structure.sql;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> source class_data.sql;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><hr><h2 id="4-物理备份：直接复制整个数据库">4. 物理备份：直接复制整个数据库</h2><p>直接将MySQL中的数据库文件复制出来。这种方法最简单，速度也最快。MySQL的数据库目录位置不一 定相同：</p><ul><li>在Windows平台下，MySQL 8.0存放数据库的目录通常默认为 “ C:\ProgramData\MySQL\MySQL Server 8.0\Data ”或者其他用户自定义目录；</li><li>在Linux平台下，数据库目录位置通常为/var/lib/mysql/；</li><li>在MAC OSX平台下，数据库目录位置通常为“/usr/local/mysql/data”</li></ul><p>但为了保证备份的一致性。需要保证：</p><ul><li>方式1：备份前，将服务器停止。</li><li>方式2：备份前，对相关表执行 FLUSH TABLES WITH READ LOCK 操作。这样当复制数据库目录中 的文件时，允许其他客户继续查询表。同时，FLUSH TABLES语句来确保开始备份前将所有激活的索 引页写入硬盘。</li></ul><p>这种方式方便、快速，但不是最好的备份方法，因为实际情况可能 <code>不允许停止MySQL服务器</code> 或者 <code>锁住表</code> ，而且这种方法 对InnoDB存储引擎 的表不适用。对于MyISAM存储引擎的表，这样备份和还原很方便，但是还原时最好是相同版本的MySQL数据库，否则可能会存在文件类型不同的情况。</p><p>注意，物理备份完毕后，执行 UNLOCK TABLES 来结算其他客户对表的修改行为。</p><blockquote><p>说明： 在MySQL版本号中，第一个数字表示主版本号，主版本号相同的MySQL数据库文件格式相同。</p></blockquote><p>此外，还可以考虑使用相关工具实现备份。比如， <code>MySQLhotcopy</code> 工具。MySQLhotcopy是一个Perl脚本，它使用LOCK TABLES、FLUSH TABLES和cp或scp来快速备份数据库。它是备份数据库或单个表最快的途径，但它只能运行在数据库目录所在的机器上，并且只能备份MyISAM类型的表。多用于mysql5.5之前。</p><h2 id="5-物理恢复：直接复制到数据库目录">5. 物理恢复：直接复制到数据库目录</h2><p><strong>步骤：</strong></p><p>1）演示删除备份的数据库中指定表的数据</p><p>2）将备份的数据库数据拷贝到数据目录下，并重启MySQL服务器</p><p>3）查询相关表的数据是否恢复。需要使用下面的<code> chown</code> 操作。</p><p><strong>要求：</strong></p><ul><li>必须确保备份数据的数据库和待恢复的数据库服务器的主版本号相同。<ul><li>因为只有MySQL数据库主版本号相同时，才能保证这两个MySQL数据库文件类型是相同的。</li></ul></li><li>这种方式对 <code>MyISAM类型的表比较有效</code> ，对于InnoDB类型的表则不可用。<ul><li>因为InnoDB表的表空间不能直接复制。</li></ul></li><li>在Linux操作系统下，复制到数据库目录后，一定要将数据库的用户和组变成mysql，命令如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown <span class="operator">-</span>R mysql.mysql <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>dbname</span><br></pre></td></tr></table></figure><p>其中，两个mysql分别表示组和用户；“-R”参数可以改变文件夹下的所有子文件的用户和组；“dbname”参数表示数据库目录。</p><blockquote><p>提示 Linux操作系统下的权限设置非常严格。通常情况下，MySQL数据库只有root用户和mysql用户 组下的mysql用户才可以访问，因此将数据库目录复制到指定文件夹后，一定要使用chown命令将 文件夹的用户组变为mysql，将用户变为mysql。</p></blockquote><hr><h2 id="6-表的导出与导入">6. 表的导出与导入</h2><h3 id="6-1-表的导出">6.1 表的导出</h3><div class="tabs" id="e07d7d47-d1c0-4a68-b584-44dd00f1d25b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e07d7d47-d1c0-4a68-b584-44dd00f1d25b-1"><i class="fas fa-award"></i>SELECT…INTO OUTFILE导出文本文件</button></li><li class="tab"><button type="button" data-href="#e07d7d47-d1c0-4a68-b584-44dd00f1d25b-2"><i class="fas fa-baseball-ball"></i>mysqldump命令导出文本文件</button></li><li class="tab"><button type="button" data-href="#e07d7d47-d1c0-4a68-b584-44dd00f1d25b-3"><i class="fas fa-bone"></i>mysql命令导出文本文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e07d7d47-d1c0-4a68-b584-44dd00f1d25b-1"><p>在MySQL中，可以使用SELECT…INTO OUTFILE语句将表的内容导出成一个文本文件。</p><p>**举例：**使用SELECT…INTO OUTFILE将atguigu数据库中account表中的记录导出到文本文件。</p><p>（1）选择数据库atguigu，并查询account表，执行结果如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use atguigu;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> balance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三 <span class="operator">|</span> <span class="number">90</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四 <span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 王五 <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>（2）mysql默认对导出的目录有权限限制，也就是说使用命令行进行导出的时候，需要指定目录进行操作。</p><p>查询secure_file_priv值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name            <span class="operator">|</span> <span class="keyword">Value</span>                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> require_secure_transport <span class="operator">|</span> OFF                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> secure_file_priv         <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">-</span>files<span class="operator">/</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------+-----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure><p>参数secure_file_priv的可选值和作用分别是：</p><ul><li><p>如果设置为empty，表示不限制文件生成的位置，这是不安全的设置；</p></li><li><p>如果设買为—个表示路径的字符串，就要求生成的文件只能放在这个指定的目录，或者它的子目录；</p></li><li><p>如果设置为NULL，就表示禁止在这个MySQL实例上执行select… into outfile 操作。</p></li></ul><p>（3）上面结果中显示，secure_file_priv变量的值为/var/lib/mysql-files/，导出目录设置为该目录，SQL语句如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account <span class="keyword">INTO</span> OUTFILE &quot;/var/lib/mysql-files/account.txt&quot;;</span><br></pre></td></tr></table></figure><p>（4）查看 /var/lib/mysql-files/account.txt`文件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 张三 <span class="number">90</span></span><br><span class="line"><span class="number">2</span> 李四 <span class="number">100</span></span><br><span class="line"><span class="number">3</span> 王五 <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e07d7d47-d1c0-4a68-b584-44dd00f1d25b-2"><p>**举例1：**使用mysqldump命令将将atguigu数据库中account表中的记录导出到文本文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="operator">-</span>T &quot;/var/lib/mysql-files/&quot; atguigu account</span><br></pre></td></tr></table></figure><p>mysqldump命令执行完毕后，在指定的目录/var/lib/mysql-files/下生成了account.sql和account.txt文件。</p><p>打开account.sql文件，其内容包含创建account表的CREATE语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account.sql</span><br><span class="line"><span class="comment">-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost Database: atguigu</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version 8.0.26</span></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `account`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`balance` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump completed on 2022-01-07 23:19:27</span></span><br></pre></td></tr></table></figure><p>打开account.txt文件，其内容只包含account表中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account.txt</span><br><span class="line"><span class="number">1</span> 张三 <span class="number">90</span></span><br><span class="line"><span class="number">2</span> 李四 <span class="number">100</span></span><br><span class="line"><span class="number">3</span> 王五 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>**举例2：**使用mysqldump将atguigu数据库中的account表导出到文本文件，使用FIELDS选项，要求字段之 间使用逗号“，”间隔，所有字符类型字段值用双引号括起来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="operator">-</span>T &quot;/var/lib/mysql-files/&quot; atguigu account <span class="comment">--fields-terminatedby=&#x27;,&#x27; --fields-optionally-enclosed-by=&#x27;\&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>语句mysqldump语句执行成功之后，指定目录下会出现两个文件account.sql和account.txt。</p><p>打开account.sql文件，其内容包含创建account表的CREATE语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account.sql</span><br><span class="line"><span class="comment">-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: localhost Database: atguigu</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version 8.0.26</span></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `account`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`balance` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">-- Dump completed on 2022-01-07 23:36:39</span></span><br></pre></td></tr></table></figure><p>打开account.txt文件，其内容包含创建account表的数据。从文件中可以看出，字段之间用逗号隔开，字 符类型的值被双引号括起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account.txt</span><br><span class="line"><span class="number">1</span>,&quot;张三&quot;,<span class="number">90</span></span><br><span class="line"><span class="number">2</span>,&quot;李四&quot;,<span class="number">100</span></span><br><span class="line"><span class="number">3</span>,&quot;王五&quot;,<span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e07d7d47-d1c0-4a68-b584-44dd00f1d25b-3"><p>**举例1：**使用mysql语句导出atguigu数据中account表中的记录到文本文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--execute=&quot;SELECT * FROM account;&quot; atguigu&gt; &quot;/var/lib/mysql-files/account.txt&quot;</span></span><br></pre></td></tr></table></figure><p>打开account.txt文件，其内容包含创建account表的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account.txt</span><br><span class="line">id name balance</span><br><span class="line"><span class="number">1</span> 张三 <span class="number">90</span></span><br><span class="line"><span class="number">2</span> 李四 <span class="number">100</span></span><br><span class="line"><span class="number">3</span> 王五 <span class="number">0</span></span><br></pre></td></tr></table></figure><p>**举例2：**将atguigu数据库account表中的记录导出到文本文件，使用–veritcal参数将该条件记录分为多行显示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--vertical --execute=&quot;SELECT * FROM account;&quot; atguigu &gt; &quot;/var/lib/mysql-files/account_1.txt&quot;</span></span><br></pre></td></tr></table></figure><p>打开account_1.txt文件，其内容包含创建account表的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account_1.txt</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">id: <span class="number">1</span></span><br><span class="line">name: 张三</span><br><span class="line">balance: <span class="number">90</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">id: <span class="number">2</span></span><br><span class="line">name: 李四</span><br><span class="line">balance: <span class="number">100</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">id: <span class="number">3</span></span><br><span class="line">name: 王五</span><br><span class="line">balance: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>**举例3：**将atguigu数据库account表中的记录导出到xml文件，使用–xml参数，具体语句如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--xml --execute=&quot;SELECT * FROM account;&quot; atguigu&gt;&quot;/var/lib/mysqlfiles/account_3.xml&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@node1</span> mysql<span class="operator">-</span>files]# cat account_3.xml</span><br><span class="line"><span class="operator">&lt;</span>?xml version<span class="operator">=</span>&quot;1.0&quot;?<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>resultset statement<span class="operator">=</span>&quot;SELECT * FROM account&quot;</span><br><span class="line">xmlns:xsi<span class="operator">=</span>&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;id&quot;<span class="operator">&gt;</span><span class="number">1</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;name&quot;<span class="operator">&gt;</span>张三<span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;balance&quot;<span class="operator">&gt;</span><span class="number">90</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;id&quot;<span class="operator">&gt;</span><span class="number">2</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;name&quot;<span class="operator">&gt;</span>李四<span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;balance&quot;<span class="operator">&gt;</span><span class="number">100</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;id&quot;<span class="operator">&gt;</span><span class="number">3</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;name&quot;<span class="operator">&gt;</span>王五<span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>field name<span class="operator">=</span>&quot;balance&quot;<span class="operator">&gt;</span><span class="number">0</span><span class="operator">&lt;</span><span class="operator">/</span>field<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="type">row</span><span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>resultset<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>说明：如果要将表数据导出到html文件中，可以使用 <code>--html</code> 选项。然后可以使用浏览器打开。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="6-2-表的导入">6.2 表的导入</h3><div class="tabs" id="2ca277d6-de61-4154-9f69-1b38e2f5ecd3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2ca277d6-de61-4154-9f69-1b38e2f5ecd3-1"><i class="fas fa-seedling"></i>LOAD DATA INFILE方式导入文本文件</button></li><li class="tab"><button type="button" data-href="#2ca277d6-de61-4154-9f69-1b38e2f5ecd3-2"><i class="fas fa-leaf"></i>mysqlimport方式导入文本文件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2ca277d6-de61-4154-9f69-1b38e2f5ecd3-1"><p><strong>举例1：</strong></p><p>使用SELECT…INTO OUTFILE将atguigu数据库中account表的记录导出到文本文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> atguigu.account <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/lib/mysql-files/account_0.txt&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除account表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> atguigu.account;</span><br></pre></td></tr></table></figure><p>从文本文件account.txt中恢复数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/var/lib/mysql-files/account_0.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> atguigu.account;</span><br></pre></td></tr></table></figure><p>查询account表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> balance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三     <span class="operator">|</span> <span class="number">90</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四     <span class="operator">|</span> <span class="number">100</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 王五     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>举例2：</strong> 选择数据库atguigu，使用SELECT…INTO OUTFILE将atguigu数据库account表中的记录导出到文本文件，使用FIELDS选项和LINES选项，要求字段之间使用逗号&quot;，&quot;间隔，所有字段值用双引号括起来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> atguigu.account <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/lib/mysql-files/account_1.txt&#x27;</span> FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;\&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除account表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> atguigu.account;</span><br></pre></td></tr></table></figure><p>从/var/lib/mysql-files/account.txt中导入数据到account表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/var/lib/mysql-files/account_1.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> atguigu.account FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;\&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>查询account表中的数据，具体SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> balance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三     <span class="operator">|</span> <span class="number">90</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四     <span class="operator">|</span> <span class="number">100</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 王五     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2ca277d6-de61-4154-9f69-1b38e2f5ecd3-2"><p><strong>举例：</strong></p><p>导出文件account.txt，字段之间使用逗号&quot;，&quot;间隔，字段值用双引号括起来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> atguigu.account <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/lib/mysql-files/account.txt&#x27;</span> FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;,&#x27;</span> ENCLOSED <span class="keyword">BY</span> <span class="string">&#x27;\&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除account表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> atguigu.account;</span><br></pre></td></tr></table></figure><p>使用mysqlimport命令将account.txt文件内容导入到数据库atguigu的account表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlimport <span class="operator">-</span>uroot <span class="operator">-</span>p atguigu <span class="string">&#x27;/var/lib/mysql-files/account.txt&#x27;</span> <span class="comment">--fields-terminated-by=&#x27;,&#x27; --fields-optionally-enclosed-by=&#x27;\&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>查询account表中的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> balance <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> 张三     <span class="operator">|</span> <span class="number">90</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> 李四     <span class="operator">|</span> <span class="number">100</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> 王五     <span class="operator">|</span> <span class="number">0</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+---------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="7-数据库迁移">7. 数据库迁移</h2><h3 id="7-1-概述">7.1 概述</h3><p>数据迁移（data migration）是指选择、准备、提取和转换数据，并<strong>将数据从一个计算机存储系统永久地传输到另一个计算机存储系统的过程</strong>。此外，<code> 验证迁移数据的完整性</code> 和 <code>退役原来旧的数据存储</code> ，也被认为是整个数据迁移过程的一部分。</p><p>数据库迁移的原因是多样的，包括服务器或存储设备更换、维护或升级，应用程序迁移，网站集成，灾难恢复和数据中心迁移。</p><p>根据不同的需求可能要采取不同的迁移方案，但总体来讲，MySQL 数据迁移方案大致可以分为<code>物理迁移</code>和 <code>逻辑迁移</code> 两类。通常以尽可能 <code>自动化</code> 的方式执行，从而将人力资源从繁琐的任务中解放出来。</p><h3 id="7-2-迁移方案">7.2 迁移方案</h3><ul><li>物理迁移</li></ul><p>物理迁移适用于大数据量下的整体迁移。使用物理迁移方案的优点是比较快速，但需要停机迁移并且要 求 MySQL 版本及配置必须和原服务器相同，也可能引起未知问题。</p><p>物理迁移包括拷贝数据文件和使用 XtraBackup 备份工具两种。</p><p>不同服务器之间可以采用物理迁移，我们可以在新的服务器上安装好同版本的数据库软件，创建好相同目录，建议配置文件也要和原数据库相同，然后从原数据库方拷贝来数据文件及日志文件，配置好文件组权限，之后在新服务器这边使用 mysqld 命令启动数据库。</p><ul><li>逻辑迁移</li></ul><p>逻辑迁移适用范围更广，无论是 <code>部分迁移</code> 还是 <code>全量迁移</code> ，都可以使用逻辑迁移。逻辑迁移中使用最多的就是通过 mysqldump 等备份工具。</p><h3 id="7-3-迁移注意点">7.3 迁移注意点</h3><p><strong>1. 相同版本的数据库之间迁移注意点</strong></p><p>指的是在主版本号相同的MySQL数据库之间进行数据库移动。</p><p><code>方式1</code>： 因为迁移前后MySQL数据库的 <code>主版本号相同</code> ，所以可以通过复制数据库目录来实现数据库迁移，但是物理迁移方式只适用于MyISAM引擎的表。对于InnoDB表，不能用直接复制文件的方式备份数据库。</p><p><code>方式2</code>： 最常见和最安全的方式是使用 <code>mysqldump命令</code> 导出数据，然后在目标数据库服务器中使用 MySQL命令导入。</p><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#host1的机器中备份所有数据库,并将数据库迁移到名为host2的机器上</span><br><span class="line">mysqldump –h host1 –uroot –p –<span class="operator">-</span><span class="keyword">all</span><span class="operator">-</span>databases<span class="operator">|</span></span><br><span class="line">mysql –h host2 –uroot –p</span><br></pre></td></tr></table></figure><p>在上述语句中，“|”符号表示管道，其作用是将mysqldump备份的文件给mysql命令；“–all-databases”表示要迁移所有的数据库。通过这种方式可以直接实现迁移。</p><p><strong>2. 不同版本的数据库之间迁移注意点</strong></p><p>例如，原来很多服务器使用5.7版本的MySQL数据库，在8.0版本推出来以后，改进了5.7版本的很多缺陷， 因此需要把数据库升级到8.0版本</p><p>旧版本与新版本的MySQL可能使用不同的默认字符集，例如有的旧版本中使用latin1作为默认字符集，而最新版本的MySQL默认字符集为utf8mb4。如果数据库中有中文数据，那么迁移过程中需要对 <code>默认字符集</code> 进行修改 ，不然可能无法正常显示数据。</p><p>高版本的MySQL数据库通常都会 <code>兼容低版本</code> ，因此可以从低版本的MySQL数据库迁移到高版本的MySQL 数据库。</p><p><strong>3. 不同数据库之间迁移注意点</strong></p><p>不同数据库之间迁移是指从其他类型的数据库迁移到MySQL数据库，或者从MySQL数据库迁移到其他类 型的数据库。这种迁移没有普适的解决方法。</p><p>迁移之前，需要了解不同数据库的架构， <code>比较它们之间的差异</code> 。不同数据库中定义相同类型的数据的 <code>关键字可能会不同</code> 。例如，MySQL中日期字段分为DATE和TIME两种，而ORACLE日期字段只有DATE；SQL Server数据库中有ntext、Image等数据类型，MySQL数据库没有这些数据类型；MySQL支持的ENUM和SET 类型，这些SQL Server数据库不支持。</p><p>另外，数据库厂商并没有完全按照SQL标准来设计数据库系统，导致不同的数据库系统的 <code>SQL语句</code> 有差别。例如，微软的SQL Server软件使用的是T-SQL语句，T-SQL中包含了非标准的SQL语句，不能和MySQL的SQL语句兼容。</p><p>不同类型数据库之间的差异造成了互相 <code>迁移的困难</code> ，这些差异其实是商业公司故意造成的技术壁垒。但 是不同类型的数据库之间的迁移并 <code>不是完全不可能</code> 。例如，可以使用<code> MyODBC</code> 实现MySQL和SQL Server之 间的迁移。MySQL官方提供的工具 <code>MySQL Migration Toolkit</code> 也可以在不同数据之间进行数据迁移。 MySQL迁移到Oracle时，需要使用mysqldump命令导出sql文件，然后， <code>手动更改</code> sql文件中的CREATE语句。</p><h3 id="7-4-迁移小结">7.4 迁移小结</h3><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718165515965.png" alt="image-20220718165515965" style="zoom:67%;" /><hr><h2 id="8-删库了不敢跑，能干点啥？">8. 删库了不敢跑，能干点啥？</h2><p>传统的高可用架构是不能预防误删数据的，因为主库的一个<code>drop table</code>命令，会通过binlog传给所有从库和级联从库，进而导致整个集群的实例都会执行这个命令。</p><p>为了找到解决误删数据的更高效的方法，我们需要先对和MySQL相关的误删数据，做下分类：</p><ol><li>使用delete语句误删数据行;</li><li>使用drop table或者truncate table语句误删数据表；</li><li>使用drop database语句误删数据库；</li><li>使用rm命令误删整个MySQL实例。</li></ol><h3 id="8-1-delete：误删行">8.1 delete：误删行</h3><mark class="hl-label green">处理措施1：数据恢复</mark> <p>使用<code>Flashback</code>工具恢复数据。</p><p>原理：修改binlog 内容，拿回原库重放。如果误删数据涉及到了多个事务的话，需要将事务的顺字调过来再执行。</p><p>使用前提：binlog_format=row 和 binlog_row_image=FULL。</p><mark class="hl-label green">处理措施2：预防</mark> <ul><li><p>代码上线前，必须SQL审查、审计。</p></li><li><p>建议可以打开安全模式，把<code>sql_safe_updates</code>参数设置为 on。强制要求加 where 条件且where后需要是索引字段，否则必须使用limit。否则就会报错。</p></li></ul><h3 id="8-2-truncate-drop-：误删库-表">8.2 truncate/drop ：误删库/表</h3><p>背景：</p><p>delete全表是很慢的，需要生成回滚日志、写redo、写binlog。所以，从性能角度考虑，优先考虑使用truncate table或者drop table命令。</p><p>使用delete命令删除的数据，你还可以用Flashback来恢复。而使用truncate /drop table和drop database命令删除的数据，就没办法通过Flashback来恢复了。因为，即使我们配置了 binlog_format=row，执行这三个命令时，记录的 binlog还是statement格式。binlog里面就只有一个truncate/drop 语句，这些信息是恢复不出数据的。</p><p>方案：</p><p>这种情况下恢复数据，需要使用<code>全量备份</code>与<code>增量日志</code>结合的方式。</p><p>方案的前提：有定期的全量备份，并且实时备份binlog。</p><p>举例：有人误删了一个库，时间为下午3点。步骤如下：</p><ol><li><p>取最近一次<code>全量备份</code>。假设设置数据库库是一天一备，最近备份数据是当天凌晨2点；</p></li><li><p>用备份恢复出一个临时库；（注意：这里选择临时库，而不是直接操作主库)</p></li><li><p>取出凌晨2点之后的binlog日志；</p></li><li><p>剔除误删除数据的语句外，其它语句全部应用到临时库。（前面讲过binlog的恢复）</p></li><li><p>最后恢复到主库</p></li></ol><h3 id="8-3-预防使用truncate-drop误删库-表">8.3 预防使用truncate/drop误删库/表</h3><p>上面我们说了使用truncate /drop语句误删库/表的恢复方案，在生产环境中可以通过下面建议的方案来尽量的避免类似的误操作。</p><p>（1) 权限分离</p><ul><li><p>限制帐户权限，核心的数据库，一般都不能随便分配写权限，想要获取写权限需要审批。比如只给业务开发人员DML权限，不给truncate/drop权限。即使是DBA团队成员，日常也都规定只使用只读账号，必要的时候才使用有更新权限的账号。</p></li><li><p>不同的账号，不同的数据之间要进行权限分离，避免一个账号可以删除所有库。</p></li></ul><p>（2)制定操作规范</p><p>比如在删除数据表之前，必须先对表做改名操作（比如加 _to_be_deleted)。然后，观察一段时间，确保对业务无影响以后再删除这张表。</p><p>(3) 设置延迟复制备库</p><p>简单的说延迟复制就是设置一个固定的延迟时间，比如1个小时，让从库落后主库一个小时。出现误删除操作1小时内，到这个备库上执行stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。</p><p>这里通过 CHANGE MASTER TO MASTER_DELAY=N命令，可以指定这个备库持续保持跟主库有N秒的延迟。比如把N设置为3600，即代表1个小时。</p><p>此外，延迟复制还可以用来解决以下问题：</p><p>① 用来做延迟測试，比如做好的数据库读写分离，把从库作为读库，那么想知道当数据产生延迟的时候到底会发生什么，就可以使用这个特性模拟延迟。</p><p>②用于老数据的查询等需求，比如你经常需要查看某天前一个表或者字段的数值，你可能需要把备份恢复后进行查看，如果有延迟从库，比如延迟一周，那么就可以解决这样类似的需求。</p><h3 id="8-4-rm：误删MySQL实例">8.4 rm：误删MySQL实例</h3><p>对于一个有高可用机制的MySQL集群来说，不用担心rm删除数据了。只是删掉了其中某一个节点的数据的话，HA系统就会开始工作，选出一个新的主库，从而保证整个集群的正常工作。我们要做的就是在这个节点上把数据恢复回来，再接入整个集群。</p><p>但如果是恶意地把整个集群删除，那就需要考虑跨机房备份，跨城市备份。</p>]]></content>
    
    
    <summary type="html">物理备份、逻辑备份、数据库迁移</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://wuwawawa.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>主从复制</title>
    <link href="https://wuwawawa.github.io/posts/351b5179.html"/>
    <id>https://wuwawawa.github.io/posts/351b5179.html</id>
    <published>2023-04-20T05:40:41.000Z</published>
    <updated>2023-04-19T03:55:14.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-主从复制概述">1. 主从复制概述</h2><h3 id="1-1-如何提升数据库并发能力">1.1 如何提升数据库并发能力</h3><p>在实际工作中，我们常常将<code>Redis</code>作为缓存与<code>MySQL</code>配合来使用，当有请求的时候，首先会从缓存中进行查找，如果存在就直接取出。如果不存在再访问数据库，这样就<code>提升了读取的效率</code>，也减少了对后端数据库的<code>访问压力</code>。Redis的缓存架构是<code>高并发架构</code>中非常重要的一环。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715202237535.png" alt="image-20220715202237535" style="zoom: 67%;" /><p>此外，一般应用对数据库而言都是“<code>读多写少</code>”，也就说对数据库读取数据的压力比较大，有一个思路就是采用数据库集群的方案，做<code>主从架构</code>、进行<code>读写分离</code>，这样同样可以提升数据库的并发处理能力。但并不是所有的应用都需要对数据库进行主从架构的设置，毕竟设置架构本身是有成本的。</p><p>如果我们的目的在于提升数据库高并发访问的效率，那么首先考虑的是如何<code>优化SQL和索引</code>，这种方式 简单有效；其次才是采用<code>缓存的策略</code>，比如使用 Redis将热点数据保存在内存数据库中，提升读取的效率；最后才是对数据库采用<code>主从架构</code>，进行读写分离。</p><p>按照上面的方式进行优化，使用和维护的成本是由低到高的。</p><h3 id="1-2-主从复制的作用">1.2 主从复制的作用</h3><p>主从同步设计不仅可以提高数据库的吞吐量，还有以下 3 个方面的作用。</p><span class='p green'>第1个作用：读写分离。</span>我们可以通过主从复制的方式来`同步数据`，然后通过读写分离提高数据库并发处理能力。<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715212521601.png" alt="image-20220715212521601" style="zoom:50%;" /><p>其中一个是Master主库，负责写入数据，我们称之为：写库。</p><p>其他都是Slave从库，负责读取数据，我们称之为：读库。</p><p>当主库进行更新的时候，会自动将数据复制到从库中，而我们在客户端读取数据的时候，会从从库进行读取。</p><p>面对“读多写少”的需求，采用读写分离的方式，可以实现<code>更高的并发访问</code>。同时，我们还能对从服务器进行<code>负载均衡</code>，让不同的读请求按照策略均匀地分发到不同的从服务器上，让<code>读取更加顺畅</code>。读取顺畅的另一个原因，就是<code>减少了锁表</code>的影响，比如我们让主库负责写，当主库出现写锁的时候，不会影响到从库进行SELECT的读取。</p><span class='p green'>第2个作用就是数据备份。</span>我们通过主从复制将主库上的数据复制到从库上，相当于一种`热备份机制`，也就是在主库正常运行的情况下进行的备份，不会影响到服务。<br/><span class='p green'>第3个作用是具有高可用性。</span>数据备份实际上是一种冗余的机制，通过这种冗余的方式可以换取数据库的高可用性，也就是当服务器出现故障或宕机的情况下，可以切换到从服务器上，保证服务的正常运行。<p>关于高可用性的程度，我们可以用一个指标衡量，即正常可用时间/全年时间。比如要达到全年99.999%的时间都可用，就意味着系统在一年中的不可用时间不得超过 3652460(1-99.999%）=5.256 分钟（含系统崩溃的时间、日常维护操作导致的停机时间等），其他时间都需要保持可用的状态。</p><p>实际上，更高的高可用性，意味着需要付出更高的成本代价。在现实中我们需要结合业务需求和成本来进行选择。</p><hr><h2 id="2-主从复制的原理">2. 主从复制的原理</h2><p><code>Slave</code>会从<code>Master</code>读取<code>binlog</code>来进行数据同步。</p><h3 id="2-1-原理剖析">2.1 原理剖析</h3><mark class="hl-label blue">三个线程</mark> <p>实际上主从同步的原理就是基于 binlog 进行数据同步的。在主从复制过程中，会基于<code>3个线程</code>来操作，一个主库线程，两个从库线程。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715215944767.png" alt="image-20220715215944767" style="zoom:67%;" /><p><code>二进制日志转储线程</code>（Binlog dump thread）是一个主库线程。当从库线程连接的时候， 主库可以将二进 制日志发送给从库，当主库读取事件（Event）的时候，会在 Binlog 上<code>加锁</code>，读取完成之后，再将锁释放掉。</p><p><code>从库I/O线程</code>会连接到主库，向主库发送请求更新 Binlog。这时从库的 I/O 线程就可以读取到主库的二进制日志转储线程发送的 Binlog 更新部分，并且拷贝到本地的中继日志 （Relay log）。</p><p><code>从库SQL线程</code>会读取从库中的中继日志，并且执行日志中的事件，将从库中的数据与主库保持同步。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715220037213.png" alt="image-20220715220037213" style="zoom:67%;" /><blockquote><p>注意：</p><p>不是所有版本的MySQL都默认开启服务器的二进制日志。在进行主从同步的时候，我们需要先检查服务器是否已经开启了二进制日志。</p><p>除非特殊指定，默认情况下从服务器会执行所有主服务器中保存的事件。也可以通过配置，使从服务器执行特定的事件。</p></blockquote><mark class="hl-label green">复制三步骤</mark> <p>步骤1：<code>Master</code>将写操作记录到二进制日志（<code>binlog</code>）。</p><p>步骤2：<code>Slave</code>将<code>Master</code>的binary log events拷贝到它的中继日志（<code>relay log</code>）；</p><p>步骤3：<code>Slave</code>重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的，而且重启后从<code>接入点</code>开始复制。</p><mark class="hl-label red">复制的问题</mark> <p>复制的最大问题：<code>延时</code></p><hr><h3 id="2-2-复制的基本原则">2.2 复制的基本原则</h3><ul><li>每个<code>Slave</code>只有一个<code>Master</code></li><li>每个<code>Slave</code>只能有一个唯一的服务器ID</li><li>每个<code>Master</code>可以有多个<code>Slave</code></li></ul><h2 id="3-一主一从架构搭建">3. 一主一从架构搭建</h2><p>一台<code>主机</code>用于处理所有<code>写请求</code>，一台<code>从机</code>负责所有<code>读请求</code>，架构图如下:</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715220852836.png" alt="image-20220715220852836" style="zoom:67%;" /><h3 id="3-1-准备工作">3.1 准备工作</h3><p>1、准备 2台 CentOS 虚拟机</p><p>2、每台虚拟机上需要安装好MySQL (可以是MySQL8.0 )</p><p>说明：前面我们讲过如何克隆一台CentOS。大家可以在一台CentOS上安装好MySQL，进而通过克隆的方式复制出1台包含MySQL的虚拟机。</p><p>注意：克隆的方式需要修改新克隆出来主机的：①<code>MAC地址</code>②<code>hostname</code>③<code>IP 地址</code>④<code>UUID</code>。</p><p>此外，克隆的方式生成的虚拟机（包含MySQL Server），则克隆的虚拟机MySQL Server的UUID相同，必须修改，否则在有些场景会报错。比如：<code>show slave status\G</code>，报如下的错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last_IO_Error: Fatal error: The slave I<span class="operator">/</span>O thread stops because master <span class="keyword">and</span> slave have</span><br><span class="line">equal MySQL server UUIDs; these UUIDs must be different <span class="keyword">for</span> replication <span class="keyword">to</span> work.</span><br></pre></td></tr></table></figure><p>修改MySQL Server 的UUID方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>auto.cnf</span><br><span class="line"></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="3-2-主机配置文件">3.2 主机配置文件</h3><p>建议mysql版本一致且后台以服务运行，主从所有配置项都配置在<code>[mysqld]</code>节点下，且都是小写字母。</p><p>具体参数配置如下：</p><ul><li>必选</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[必须]主服务器唯一ID</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#[必须]启用二进制日志,指名路径。比如：自己本地的路径/log/mysqlbin</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">atguigu-bin</span></span><br></pre></td></tr></table></figure><ul><li>可选</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#[可选] 0（默认）表示读写（主机），1表示只读（从机）</span></span><br><span class="line"><span class="attr">read-only</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#设置日志文件保留的时长，单位是秒</span></span><br><span class="line"><span class="attr">binlog_expire_logs_seconds</span>=<span class="string">6000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#控制单个二进制日志大小。此参数的最大和默认值是1GB</span></span><br><span class="line"><span class="attr">max_binlog_size</span>=<span class="string">200M</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#[可选]设置不要复制的数据库</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=<span class="string">test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#[可选]设置需要复制的数据库,默认全部记录。比如：binlog-do-db=atguigu_master_slave</span></span><br><span class="line"><span class="attr">binlog-do-db</span>=<span class="string">需要复制的主数据库名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#[可选]设置binlog格式</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br></pre></td></tr></table></figure><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：</p><p>先搭建完主从复制，再创建数据库。</p><p>MySQL主从复制起始时，从机不继承主机数据。</p></blockquote><p><strong>① binlog格式设置：</strong></p><p>格式1：<code>STATEMENT模式</code>（基于SQL语句的复制(statement-based replication, SBR)）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br></pre></td></tr></table></figure><p>每一条会修改数据的sql语句会记录到binlog中。这是默认的binlog格式。</p><ul><li>SBR 的优点：<ul><li>历史悠久，技术成熟</li><li>不需要记录每一行的变化，减少了binlog日志量，文件较小</li><li>binlog中包含了所有数据库更改信息，可以据此来审核数据库的安全等情况</li><li>binlog可以用于实时的还原，而不仅仅用于复制</li><li>主从版本可以不一样，从服务器版本可以比主服务器版本高</li></ul></li><li>SBR 的缺点：<ul><li>不是所有的UPDATE语句都能被复制，尤其是包含不确定操作的时候</li></ul></li><li>使用以下函数的语句也无法被复制：LOAD_FILE()、UUID()、USER()、FOUND_ROWS()、SYSDATE() (除非启动时启用了 --sysdate-is-now 选项)<ul><li>INSERT … SELECT 会产生比 RBR 更多的行级锁</li><li>复制需要进行全表扫描(WHERE 语句中没有使用到索引)的 UPDATE 时，需要比 RBR 请求更多的行级锁</li><li>对于有 AUTO_INCREMENT 字段的 InnoDB表而言，INSERT 语句会阻塞其他 INSERT 语句</li><li>对于一些复杂的语句，在从服务器上的耗资源情况会更严重，而 RBR 模式下，只会对那个发 生变化的记录产生影响</li><li>执行复杂语句如果出错的话，会消耗更多资源</li><li>数据表必须几乎和主服务器保持一致才行，否则可能会导致复制出错</li></ul></li></ul><p><strong>② ROW模式（基于行的复制(row-based replication, RBR)）</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">binlog_format</span>=<span class="string">ROW</span></span><br></pre></td></tr></table></figure><p>5.1.5版本的MySQL才开始支持，不记录每条sql语句的上下文信息，仅记录哪条数据被修改了，修改成什么样了。</p><ul><li>RBR 的优点：<ul><li>任何情况都可以被复制，这对复制来说是最<code>安全可靠</code>的。（比如：不会出现某些特定情况下 的存储过程、function、trigger的调用和触发无法被正确复制的问题）</li><li>多数情况下，从服务器上的表如果有主键的话，复制就会快了很多</li><li>复制以下几种语句时的行锁更少：INSERT … SELECT、包含 AUTO_INCREMENT 字段的 INSERT、 没有附带条件或者并没有修改很多记录的 UPDATE 或 DELETE 语句</li><li>执行 INSERT，UPDATE，DELETE 语句时锁更少</li><li>从服务器上采用 多线程 来执行复制成为可能</li></ul></li><li>RBR 的缺点：<ul><li>binlog 大了很多</li><li>复杂的回滚时 binlog 中会包含大量的数据</li><li>主服务器上执行 UPDATE 语句时，所有发生变化的记录都会写到 binlog 中，而 SBR 只会写一次，这会导致频繁发生 binlog 的并发写问题</li><li>无法从 binlog 中看到都复制了些什么语句</li></ul></li></ul><p><strong>③ MIXED模式（混合模式复制(mixed-based replication, MBR)）</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">binlog_format</span>=<span class="string">MIXED</span></span><br></pre></td></tr></table></figure><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>在Mixed模式下，一般的语句修改使用statment格式保存binlog。如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog。</p><p>MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。</p><h3 id="3-3-从机配置文件">3.3 从机配置文件</h3><p>要求主从所有配置项都配置在<code>my.cnf</code>的<code>[mysqld]</code>栏位下，且都是小写字母。</p><ul><li>必选</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#[必须]从服务器唯一ID</span><br><span class="line">server<span class="operator">-</span>id<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>可选</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#[可选]启用中继日志</span><br><span class="line">relay<span class="operator">-</span>log<span class="operator">=</span>mysql<span class="operator">-</span>relay</span><br></pre></td></tr></table></figure><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：主从机都关闭防火墙<br>service iptables stop #CentOS 6<br>systemctl stop firewalld.service #CentOS 7</p></blockquote><h3 id="3-4-主机：建立账户并授权">3.4 主机：建立账户并授权</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在主机MySQL里执行授权主从复制的命令</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;从机器数据库IP&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;abc123&#x27;</span>; #<span class="number">5.5</span>,<span class="number">5.7</span></span><br></pre></td></tr></table></figure><span class='p red'>注意：如果使用的是MySQL8，需要如下的方式建立账户，并授权slave:</span><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#此语句必须执行。否则见下面。</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;slave1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在从机执行show slave status\G时报错：</p><p>Last_IO_Error: error connecting to master ‘slave1@192.168.1.150:3306’ - retry-time: 60 retries: 1 message:</p><p>Authentication plugin ‘caching_sha2_password’ reported error: Authentication requires secure connection.</p></blockquote><p>查询Master的状态，并记录下File和Position的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718140722740.png" alt="image-20220718140722740"></p><ul><li>记录下File和Position的值</li></ul><blockquote><p>注意：执行完此步骤后<span class='p red'>不要再操作主服务器MySQL</span>，防止主服务器状态值变化。</p></blockquote><h3 id="3-5-从机：配置需要复制的主机">3.5 从机：配置需要复制的主机</h3><p>步骤1：从机上复制主机的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;主机的IP地址&#x27;</span>,</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;主机用户名&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;主机用户名的密码&#x27;</span>,</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.具体数字&#x27;</span>,</span><br><span class="line">MASTER_LOG_POS<span class="operator">=</span>具体值;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.1.150&#x27;</span>,MASTER_USER<span class="operator">=</span><span class="string">&#x27;slave1&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,MASTER_LOG_F</span><br><span class="line">ILE<span class="operator">=</span><span class="string">&#x27;atguigu-bin.000007&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">154</span>;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718140946747.png" alt="image-20220718140946747"></p><p><strong>步骤2：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#启动slave同步</span><br><span class="line"><span class="keyword">START</span> SLAVE;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718141825228.png" alt="image-20220718141825228"></p><p>如果报错：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718141841862.png" alt="image-20220718141841862"></p><p>可以执行如下操作，删除之前的relay_log信息。然后重新执行 CHANGE MASTER TO …语句即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> reset slave; #删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件</span><br></pre></td></tr></table></figure><p>接着，查看同步状态：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718141951374.png" alt="image-20220718141951374"></p><blockquote><p>上面两个参数都是Yes，则说明主从配置成功！</p></blockquote><p>显式如下的情况，就是不正确的。可能错误的原因有：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 网络不通</span><br><span class="line"><span class="bullet">2.</span> 账户密码错误</span><br><span class="line"><span class="bullet">3.</span> 防火墙</span><br><span class="line"><span class="bullet">4.</span> mysql配置文件问题</span><br><span class="line"><span class="bullet">5.</span> 连接服务器时语法</span><br><span class="line"><span class="bullet">6.</span> 主服务器mysql权限</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718142045114.png" alt="image-20220718142045114" style="zoom:80%;" /><h3 id="3-6-测试">3.6 测试</h3><p>主机新建库、新建表、insert记录，从机复制：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE atguigu_master_slave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytbl(id <span class="type">INT</span>,NAME <span class="type">VARCHAR</span>(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytbl <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;zhang3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytbl <span class="keyword">VALUES</span>(<span class="number">2</span>,@<span class="variable">@hostname</span>);</span><br></pre></td></tr></table></figure><h3 id="3-7-停止主从同步">3.7 停止主从同步</h3><ul><li>停止主从同步命令：</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><ul><li><p>如何重新配置主从</p><p>如果停止从服务器复制功能，再使用需要重新配置主从。否则会报错如下：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718142549168.png" alt="image-20220718142549168"></p></li></ul><p>重新配置主从，需要在从机上执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)</span><br></pre></td></tr></table></figure><h3 id="3-8-搭建主从复制：双主双从">3.8 搭建主从复制：双主双从</h3><p>一个主机m1用于处理所有写请求，它的从机s1和另一台主机m2还有它的从机s2负责所有读请求。当m1主机宕机后，m2主机负责写请求，m1、m2互为备机。结构图如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718143705843.png" alt="image-20220718143705843" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718143716620.png" alt="image-20220718143716620" style="zoom:67%;" /><hr><h2 id="4-同步数据一致性问题">4. 同步数据一致性问题</h2><p><strong>主从同步的要求：</strong></p><ul><li>读库和写库的数据一致(最终一致)；</li><li>写数据必须写到写库；</li><li>读数据必须到读库(不一定)；</li></ul><h3 id="4-1-理解主从延迟问题">4.1 理解主从延迟问题</h3><p>进行主从同步的内容是二进制日志，它是一个文件，在进行<code>网络传输</code>的过程中就一定会<code>存在主从延迟</code>（比如 500ms），这样就可能造成用户在从库上读取的数据不是最新的数据，也就是主从同步中的<code>数据不一致性</code>问题。</p><p>举例：导致主从延迟的时间点主要包括以下三个：</p><ol><li>主库A执行完成一个事务，写入binlog，我们把这个时刻记为T1；</li><li>之后传给从库B，我们把从库B接收完这个binlog的时刻记为T2;</li><li>从库B执行完成这个事务，我们把这个时刻记为T3。</li></ol><hr><h3 id="4-2-主从延迟问题原因">4.2 主从延迟问题原因</h3><p>在网络正常的时候，日志从主库传给从库所需的时间是很短的，即T2-T1的值是非常小的。即，网络正常情况下，主备延迟的主要来源是备库接收完binlog和执行完这个事务之间的时间差。</p><span class='p red'>主备延迟最直接的表现是，从库消费中继日志（relay log）的速度，比主库生产binlog的速度要慢。</span>造成原因：<p>1、从库的机器性能比主库要差</p><p>2、从库的压力大</p><p>3、大事务的执行</p><p>举例1：一次性用delete语句删除太多数据</p><p>结论：后续再删除数据的时候，要控制每个事务删除的数据量，分成多次删除。</p><p>举例2：一次性用insert…select插入太多数据</p><p>举例3：大表DDL</p><p>比如在主库对一张500W的表添加一个字段耗费了10分钟，那么从节点上也会耗费10分钟。</p><hr><h3 id="4-3-如何减少主从延迟">4.3 如何减少主从延迟</h3><p>若想要减少主从延迟的时间，可以采取下面的办法：</p><ol><li>降低多线程大事务并发的概率，优化业务逻辑</li><li>优化SQL，避免慢SQL，<code>减少批量操作</code>，建议写脚本以update-sleep这样的形式完成。</li><li><code>提高从库机器的配置</code>，减少主库写binlog和从库读binlog的效率差。</li><li>尽量采用<code>短的链路</code>，也就是主库和从库服务器的距离尽量要短，提升端口带宽，减少binlog传输的网络延时。</li><li>实时性要求的业务读强制走主库，从库只做灾备，备份。</li></ol><hr><h3 id="4-4-如何解决一致性问题">4.4 如何解决一致性问题</h3><p>如果操作的数据存储在同一个数据库中，那么对数据进行更新的时候，可以对记录加写锁，这样在读取的时候就不会发生数据不一致的情况。但这时从库的作用就是<code>备份</code>，并没有起到<code>读写分离</code>，分担主库<code>读压力</code>的作用。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718144341584.png" alt="image-20220718144341584" style="zoom: 67%;" /><p>读写分离情况下，解决主从同步中数据不一致的问题， 就是解决主从之间<code>数据复制方式</code>的问题，如果按照数据一致性<code>从弱到强</code>来进行划分，有以下 3 种复制方式。</p><hr><div class="tabs" id="2ca9db54-a14a-42f7-8fa9-449c9b638852"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2ca9db54-a14a-42f7-8fa9-449c9b638852-1"><i class="fas fa-cat"></i>方法 1：异步复制</button></li><li class="tab"><button type="button" data-href="#2ca9db54-a14a-42f7-8fa9-449c9b638852-2"><i class="fas fa-horse"></i>方法 2：半同步复制</button></li><li class="tab"><button type="button" data-href="#2ca9db54-a14a-42f7-8fa9-449c9b638852-3"><i class="fas fa-dove"></i>方法 3：组复制</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2ca9db54-a14a-42f7-8fa9-449c9b638852-1"><p>异步模式就是客户端提交 COMMIT 之后不需要等从库返回任何结果，而是直接将结果返回给客户端，这样做的好处是不会影响主库写的效率，但可能会存在主库宕机，而Binlog还没有同步到从库的情况，也就是此时的主库和从库数据不一致。这时候从从库中选择一个作为新主，那么新主则可能缺少原来主服务器中已提交的事务。所以，这种复制模式下的数据一致性是最弱的。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718144410731.png" alt="image-20220718144410731" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2ca9db54-a14a-42f7-8fa9-449c9b638852-2"><p>MysQL5.5版本之后开始支持半同步复制的方式。原理是在客户端提交 COMMIT 之后不直接将结果返回给客户端， 而是等待至少有一个从库接收到了 Binlog，并且写入到中继日志中，再返回给客户端。</p><p>这样做的好处就是提高了数据的一致性，当然相比于异步复制来说，至少多增加了一个网络连接的延迟，降低了主库写的效率。</p><p>在MysQL5.7版本中还增加了一个<code>rpl_semi_sync_master_wait_for_slave_count</code>参数，可以对应答的从库数量进行设置，默认为1，也就是说只要有1个从库进行了响应，就可以返回给客户端。如果将这个参数调大， 可以提升数据一致性的强度，但也会增加主库等待从库响应的时间。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718144958357.png" alt="image-20220718144958357" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2ca9db54-a14a-42f7-8fa9-449c9b638852-3"><p>异步复制和半同步复制都无法最终保证数据的一致性问题，半同步复制是通过判断从库响应的个数来决定是否返回给客户端，虽然数据一致性相比于异步复制有提升，但仍然无法满足对数据一致性要求高的场景，比如金融领域。MGR 很好地弥补了这两种复制模式的不足。</p><p>组复制技术，简称 MGR（MySQL Group Replication）。是 MySQL 在 5.7.17 版本中推出的一种新的数据复制技术，这种复制技术是基于Paxos协议的状态机复制。</p><p><mark class="hl-label green">MGR是如何工作的</mark></p><p>首先我们将多个节点共同组成一个复制组，在<code>执行读写（RW）事务</code>的时候，需要通过一致性协议层 （Consensus 层）的同意，也就是读写事务想要进行提交，必须要经过组里“大多数人”（对应 Node 节点）的同意，大多数指的是同意的节点数量需要大于 （N/2+1），这样才可以进行提交，而不是原发起方一个说了算。而针对<code>只读（RO）事务</code>则不需要经过组内同意，直接 COMMIT 即可。</p><p>在一个复制组内有多个节点组成，它们各自维护了自己的数据副本，并且在一致性协议层实现了原子消 息和全局有序消息，从而保证组内数据的一致性。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718145235499.png" alt="image-20220718145235499" style="zoom:67%;" /><p>MGR 将 MySQL 带入了数据强一致性的时代，是一个划时代的创新，其中一个重要的原因就是MGR 是基 于 Paxos 协议的。Paxos 算法是由 2013 年的图灵奖获得者 Leslie Lamport 于 1990 年提出的，有关这个算法的决策机制可以搜一下。事实上，Paxos 算法提出来之后就作为<code>分布式一致性算法</code>被广泛应用，比如 Apache 的 ZooKeeper 也是基于 Paxos 实现的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="5-知识延伸">5. 知识延伸</h2><p>在主从架构的配置中，如果想要采取读写分离的策略，我们可以<code>自己编写程序</code>，也可以通过<code>第三方的中间件</code>来实现。</p><ul><li>自己编写程序的好处就在于比较自主，我们可以自己判断哪些查询在从库上来执行，针对实时性要 求高的需求，我们还可以考虑哪些查询可以在主库上执行。同时，程序直接连接数据库，减少了中间件层，相当于减少了性能损耗。</li><li>采用中间件的方法有很明显的优势，<code>功能强大</code>，<code>使用简单</code>。但因为在客户端和数据库之间增加了 中间件层会有一些<code>性能损耗</code>，同时商业中间件也是有使用成本的。我们也可以考虑采取一些优秀的开源工具。</li></ul><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718145428456.png" alt="image-20220718145428456" style="zoom:67%;" /><p>①<code>Cobar</code>属于阿里B2B事业群，始于2008年，在阿里服役3年多，接管3000+个MySQL数据库的 schema,集群日处理在线SQL请求50亿次以上。由于Cobar发起人的离职，Cobar停止维护。</p><p>②<code>Mycat</code>是开源社区在阿里cobar基础上进行二次开发，解决了cobar存在的问题，并且加入了许多新的功能在其中。青出于蓝而胜于蓝。</p><p>③<code>OneProxy</code>基于MySQL官方的proxy思想利用c语言进行开发的，OneProxy是一款商业 收费 的中间件。舍弃了一些功能，专注在 性能和稳定性上 。</p><p>④<code>kingshard</code>由小团队用go语言开发，还需要发展，需要不断完善。</p><p>⑤<code>Vitess</code>是Youtube生产在使用，架构很复杂。不支持MySQL原生协议，使用 需要大量改造成 本 。</p><p>⑥<code>Atlas</code>是360团队基于mysql proxy改写，功能还需完善，高并发下不稳定。</p><p>⑦<code>MaxScale</code>是mariadb（MySQL原作者维护的一个版本） 研发的中间件</p><p>⑧<code>MySQLRoute</code>是MySQL官方Oracle公司发布的中间件</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718145523643.png" alt="image-20220718145523643" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718145534856.png" alt="image-20220718145534856" style="zoom:67%;" /><p>主备切换：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220718145548526.png" alt="image-20220718145548526" style="zoom:67%;" /><ul><li>主动切换</li><li>被动切换</li><li>如何判断主库出问题了？如何解决过程中的数据不一致性问题 ?</li></ul>]]></content>
    
    
    <summary type="html">主从复制原理、一主一从架构搭建、同步数据一致性问题</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://wuwawawa.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>其他数据库日志</title>
    <link href="https://wuwawawa.github.io/posts/a42250fc.html"/>
    <id>https://wuwawawa.github.io/posts/a42250fc.html</id>
    <published>2023-04-19T03:05:41.000Z</published>
    <updated>2023-04-18T08:32:23.779Z</updated>
    
    <content type="html"><![CDATA[<p>我们在讲解数据库事务时，讲过两种日志：重做日志、回滚日志。</p><p>对于线上数据库应用系统，突然遭遇<code>数据库宕机</code>怎么办？在这种情况下，<code>定位宕机的原因</code>就非常关键。我们可以查看数据库的<code>错误日志</code>。因为日志中记录了数据库运行中的诊断信息，包括了错误、警告和注释等信息。比如：</p><p>从日志中发现某个连接中的 SQL 操作发生了死循环，导致内存不足，被系统强行终止了。明确了原因，处理起来也就轻松了，系统很快就恢复了运行。</p><p>除了发现错误，日志在数据复制、数据恢复、操作审计，以及确保数据的永久性和一致性等方面，都有着不可替代的作用。</p><p><strong>千万不要小看日志</strong>。很多看似奇怪的问题，答案往往就藏在日志里。很多情况下，只有通过查看日志才 能发现问题的原因，真正解决问题。所以，一定要学会查看日志，养成检查日志的习惯，对提升你的数 据库应用开发能力至关重要。</p><p>MySQL8.0 官网日志地址： <a href="https://dev.mysql.com/doc/refman/8.0/en/server-logs.html">https://dev.mysql.com/doc/refman/8.0/en/server-logs.html</a></p><hr><h2 id="1-MySQL支持的日志">1. MySQL支持的日志</h2><h3 id="1-1-日志类型">1.1 日志类型</h3><p>MySQL有不同类型的日志文件，用来存储不同类型的日志，分为<code>二进制日志</code>、<code>错误日志</code>、<code>通用查询日志</code>和<code>慢查询日志</code>，这也是常用的4种。MySQL 8又新增两种支持的日志： 中继日志 和 数据定义语句日志 。使用这些日志文件，可以查看MySQL内部发生的事情。</p><p>这6类日志分别为：</p><ul><li><strong>慢查询日志</strong>：记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。</li><li><strong>通用查询日志</strong>：记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令， 对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。</li><li><strong>错误日志</strong>：记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的 状态，从而对服务器进行维护。</li><li><strong>二进制日志</strong>：记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故 障时数据的无损失恢复。</li><li><strong>中继日志</strong>：用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。 从服务器通过读取中继日志的内容，来同步主服务器上的操作。</li><li><strong>数据定义语句日志</strong>：记录数据定义语句执行的元数据操作。</li></ul><p>除二进制日志外，其他日志都是<code>文本文件</code>。默认情况下，所有日志创建于<code>MySQL数据目录</code>中。</p><h3 id="1-2-日志的弊端">1.2 日志的弊端</h3><ul><li>日志功能会<code>降低MySQL数据库的性能</code>。例如，在查询非常频繁的MySQL数据库系统中，如果开启了通用查询日志和慢查询日志，MySQL数据库会花费很多时间记录日志。</li><li>日志会<code>占用大量的磁盘空间</code>。对于用户量非常大，操作非常频繁的数据库，日志文件需要的存储空间设置比数据库文件需要的存储空间还要大。</li></ul><hr><h2 id="2-慢查询日志-slow-query-log">2. 慢查询日志(slow query log)</h2><p>前面章节《性能分析工具的使用》已经详细讲述。</p><div class="tag link"><a class="link-card" title="性能分析工具的使用" href="/posts/2678f2d3.html#4-定位执行慢的SQL-慢查询日志"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">性能分析工具的使用</p><p class="url">/posts/2678f2d3.html#4-定位执行慢的SQL-慢查询日志</p></div></a></div><hr><h2 id="3-通用查询日志-general-query-log">3. 通用查询日志(general query log)</h2><p>通用查询日志用来<code>记录用户的所有操作</code>，包括启动和关闭MySQL服务、所有用户的连接开始时间和截止 时间、发给 MySQL数据库服务器的所有 SQL指令等。当我们的数据发生异常时，<span class='p green'>查看通用查询日志， 还原操作时的具体场景</span>，可以帮助我们准确定位问题。</p><h3 id="3-1-问题场景">3.1 问题场景</h3><p>在电商系统中，购买商品并且使用微信支付完成以后，却发现支付中心的记录并没有新增，此时用户再次使用支付宝支付，就会出现重复支付的问题。但是当去数据库中查询数据的时候，会发现只有一条记录存在。那么此时给到的现象就是只有一条支付记录，但是用户却支付了两次。</p><p>我们对系统进行了仔细检查，没有发现数据问题，因为用户编号和订单编号以及第三方流水号都是对的。可是用户确实支付了两次，这个时候，我们想到了检查通用查询日志，看看当天到底发生了什么。</p><p>查看之后，发现：1月1日下午2点，用户使用微信支付完以后，但是由于网络故障，支付中心没有及时收到微信支付的回调通知，导致当时没有写入数据。1月1日下午2点30，用户又使用支付宝支付，此时记录更新到支付中心。1月1日晚上9点，微信的回调通知过来了，但是支付中心已经存在了支付宝的记录，所以只能覆盖记录了。</p><p>由于网络的原因导致了重复支付。至于解决问题的方案就很多了，这里省略。</p><p>可以看到通用查询日志可以帮助我们了解操作发生的具体时间和操作的细节，对找出异常发生的原因极其关键。</p><hr><h3 id="2-查看当前状态">2 查看当前状态</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name    <span class="operator">|</span> <span class="keyword">Value</span>                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="operator">|</span> general_log      <span class="operator">|</span> OFF                          <span class="operator">|</span> #通用查询日志处于关闭状态</span><br><span class="line"><span class="operator">|</span> general_log_file <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>fortune01.log <span class="operator">|</span> #通用查询日志文件的名称 主机名</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><p>说明1：系统变量 genera_log 的值是OFF，即通用查询日志处于关闭状态。在MySQL中，这个参数的<code>默认值是关闭的</code>。因为一旦开启记录通用查询日志，MySQL会记录所有的连接起止和相关的SQL操作，这样会消耗系统资源并且占用磁盘空间。我们可以通过手动修改变量的值，在需要的时候开启日志。</p><p>说明2：通用查询日志文件的名称是fortune01.log。存储路径是/var/ib/mysql，默认也是数据路径。这样我们就知道在哪里可以查看通用查询日志的内容了。</p><hr><h3 id="3-3-启动日志">3.3 启动日志</h3><p><strong>方式1：永久性方式</strong></p><p>修改my.cnf或者my.ini配置文件来设置。在[mysqld]组下加入log选项，并重启MySQL服务。格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">general_log</span>=<span class="string">ON</span></span><br><span class="line"><span class="attr">general_log_file</span>=<span class="string">[path[filename]] #日志文件所在目录路径，filename为日志文件</span></span><br></pre></td></tr></table></figure><p>如果不指定目录和文件名，通用查询日志将默认存储在MySQL数据目录中的hostname.log文件中， hostname表示主机名。</p><p><strong>方式2：临时性方式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span><span class="keyword">on</span>; # 开启通用查询日志</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log_file<span class="operator">=</span>’path<span class="operator">/</span>filename’; # 设置日志文件保存位置</span><br></pre></td></tr></table></figure><p>对应的，关闭操作SQL命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span>off; # 关闭通用查询日志</span><br></pre></td></tr></table></figure><p>查看设置后情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-查看日志">3.4 查看日志</h3><p>通用查询日志是以<code>文本文件</code>的形式存储在文件系统中的，可以使用<code>文本编辑器</code>直接打开日志文件。每台 MySQL服务器的通用查询日志内容是不同的。</p><ul><li>在Windows操作系统中，使用文本文件查看器；</li><li>在Linux系统中，可以使用vi工具或者gedit工具查看；</li><li>在Mac OSX系统中，可以使用文本文件查看器或者vi等工具查看。</li></ul><p>从<code>SHOW VARIABLES LIKE 'general_log%'</code>; 结果中可以看到通用查询日志的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span>usr<span class="operator">/</span>sbin<span class="operator">/</span>mysqld, Version: <span class="number">8.0</span><span class="number">.26</span> (MySQL Community Server <span class="operator">-</span> GPL). started <span class="keyword">with</span>:</span><br><span class="line">Tcp port: <span class="number">3306</span> Unix socket: <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>mysql.sock</span><br><span class="line"><span class="type">Time</span> Id Command Argument</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">44</span>:<span class="number">58.052890</span>Z <span class="number">10</span> Query <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%general%&#x27;</span></span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">45</span>:<span class="number">15.666672</span>Z <span class="number">10</span> Query <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span></span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">45</span>:<span class="number">28.970765</span>Z <span class="number">10</span> Query <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">47</span>:<span class="number">38.706804</span>Z <span class="number">11</span> <span class="keyword">Connect</span> root<span class="variable">@localhost</span> <span class="keyword">on</span> <span class="keyword">using</span> Socket</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">47</span>:<span class="number">38.707435</span>Z <span class="number">11</span> Query <span class="keyword">select</span> @<span class="variable">@version</span>_comment limit <span class="number">1</span></span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">21.384886</span>Z <span class="number">12</span> <span class="keyword">Connect</span> root<span class="variable">@172</span><span class="number">.16</span><span class="number">.210</span><span class="number">.1</span> <span class="keyword">on</span> <span class="keyword">using</span> TCP<span class="operator">/</span>IP</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">21.385253</span>Z <span class="number">12</span> Query <span class="keyword">SET</span> NAMES utf8</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">21.385640</span>Z <span class="number">12</span> Query USE`atguigu12`</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">21.386179</span>Z <span class="number">12</span> Query <span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">WHERE</span> Table_Type <span class="operator">!=</span></span><br><span class="line"><span class="string">&#x27;VIEW&#x27;</span></span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">23.901778</span>Z <span class="number">13</span> <span class="keyword">Connect</span> root<span class="variable">@172</span><span class="number">.16</span><span class="number">.210</span><span class="number">.1</span> <span class="keyword">on</span> <span class="keyword">using</span> TCP<span class="operator">/</span>IP</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">23.902128</span>Z <span class="number">13</span> Query <span class="keyword">SET</span> NAMES utf8</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">23.905179</span>Z <span class="number">13</span> Query USE`atguigu`</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">23.905825</span>Z <span class="number">13</span> Query <span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">WHERE</span> Table_Type <span class="operator">!=</span></span><br><span class="line"><span class="string">&#x27;VIEW&#x27;</span></span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">32.163833</span>Z <span class="number">14</span> <span class="keyword">Connect</span> root<span class="variable">@172</span><span class="number">.16</span><span class="number">.210</span><span class="number">.1</span> <span class="keyword">on</span> <span class="keyword">using</span> TCP<span class="operator">/</span>IP</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">32.164451</span>Z <span class="number">14</span> Query <span class="keyword">SET</span> NAMES utf8</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">32.164840</span>Z <span class="number">14</span> Query USE`atguigu`</span><br><span class="line"><span class="number">2022</span><span class="number">-01</span><span class="number">-04</span>T07:<span class="number">48</span>:<span class="number">40.006687</span>Z <span class="number">14</span> Query <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account</span><br></pre></td></tr></table></figure><p>在通用查询日志里面，我们可以清楚地看到，什么时候开启了新的客户端登陆数据库，登录之后做了什么 SQL 操作，针对的是哪个数据表等信息。</p><h3 id="3-5-停止日志">3.5 停止日志</h3><p><strong>方式1：永久性方式</strong></p><p>修改<code>my.cnf</code>或者<code>my.ini</code>文件，把[mysqld]组下的<code>general_log</code>值设置为<code>OFF</code>或者把general_log一项 注释掉。修改保存后，再<code>重启MySQL服务</code>，即可生效。</p><p>举例1：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">general_log</span>=<span class="string">OFF</span></span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment">#general_log=ON</span></span><br></pre></td></tr></table></figure><p><strong>方式2：临时性方式</strong></p><p>使用SET语句停止MySQL通用查询日志功能：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log<span class="operator">=</span>off;</span><br></pre></td></tr></table></figure><p>查询通用日志功能：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-6-删除-刷新日志">3.6 删除\刷新日志</h3><p>如果数据的使用非常频繁，那么通用查询日志会占用服务器非常大的磁盘空间。数据管理员可以删除很长时间之前的查询日志，以保证MySQL服务器上的硬盘空间。</p><p><strong>手动删除文件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>可以看出，通用查询日志的目录默认为MySQL数据目录。在该目录下手动删除通用查询日志 atguigu01.log</p><p>使用如下命令重新生成查询日志文件，具体命令如下。刷新MySQL数据目录，发现创建了新的日志文 件。前提一定要开启通用日志。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br></pre></td></tr></table></figure><p>如果希望备份旧的通用查询日志，就必须先将旧的日志文件复制出来或者改名，然后执行上面的mysqladmin命令。正确流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mysql-data-directory # 输入自己的通用日志文件所在目录</span><br><span class="line">mv mysql.general.log mysql.general.log.old # 指定旧的文件名 以及 新的文件名</span><br><span class="line">mysqladmin -uroot -p flush-logs</span><br></pre></td></tr></table></figure><h2 id="4-错误日志-error-log">4. 错误日志(error log)</h2><p>错误日志记录了 MySQL服务器启动、停止运行的时间，以及系统启动、运行和停止过程中的诊断信息，包括<code>错误</code>、<code>警告</code>和<code>提示</code>等。</p><p>通过错误日志可以查看系统的运行状态，便于即时发现故障、修复故障。如果MySQL服务<code>出现异常</code>，错误日志是发现问题、解决故障的<code>首选</code>。</p><h3 id="4-1-启动日志">4.1 启动日志</h3><p>在MySQL数据库中，错误日志功能是<code>默认开启</code>的。而且，错误日志<code>无法被禁止</code>。</p><p>默认情况下，错误日志存储在MySQL数据库的数据文件夹下，名称默认为<code>mysqld.log</code>（Linux系统）或<code>hostname.err</code>（mac系统）。如果需要制定文件名，则需要在my.cnf或者my.ini中做如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">log-error</span>=<span class="string">[path/[filename]] #path为日志文件所在的目录路径，filename为日志文件名</span></span><br></pre></td></tr></table></figure><p>修改配置项后，需要重启MySQL服务以生效。</p><h3 id="4-2-查看日志">4.2 查看日志</h3><p>MySQL错误日志是以文本文件形式存储的，可以使用文本编辑器直接查看。</p><p>查询错误日志的存储路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_err%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name              <span class="operator">|</span> <span class="keyword">Value</span>                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_error                  <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log                    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_services         <span class="operator">|</span> log_filter_internal; log_sink_internal <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_suppression_list <span class="operator">|</span>                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_error_verbosity        <span class="operator">|</span> <span class="number">2</span>                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+----------------------------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>执行结果中可以看到错误日志文件是mysqld.log，位于MySQL默认的数据目录下。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715160657093.png" alt="image-20220715160657093"  /><h3 id="4-3-删除-刷新日志">4.3 删除\刷新日志</h3><p>对于很久以前的错误日志，数据库管理员查看这些错误日志的可能性不大，可以将这些错误日志删除， 以保证MySQL服务器上的<code>硬盘空间</code>。MySQL的错误日志是以文本文件的形式存储在文件系统中的，可以<code>直接删除</code>。</p><ul><li>第一步（方式1）：删除操作</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm <span class="operator">-</span>f <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>mysqld.log</span><br></pre></td></tr></table></figure><p>在运行状态下删除错误日志文件后，MySQL并不会自动创建日志文件。</p><ul><li>第一步（方式2）：重命名文件</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log.old</span><br></pre></td></tr></table></figure><ul><li>第二步：重建日志</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br></pre></td></tr></table></figure><p>可能会报错</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@atguigu01</span> log]# mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p flush<span class="operator">-</span>logs</span><br><span class="line">Enter password:</span><br><span class="line">mysqladmin: refresh failed; error: <span class="string">&#x27;Could not open file &#x27;</span><span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log<span class="string">&#x27; for</span></span><br><span class="line"><span class="string">error logging.&#x27;</span></span><br></pre></td></tr></table></figure><p>官网提示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715161132368.png" alt="image-20220715161132368"></p><p>补充操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install <span class="operator">-</span>omysql <span class="operator">-</span>gmysql <span class="operator">-</span>m0644 <span class="operator">/</span>dev<span class="operator">/</span><span class="keyword">null</span> <span class="operator">/</span>var<span class="operator">/</span>log<span class="operator">/</span>mysqld.log</span><br></pre></td></tr></table></figure><p><code>flush-logs</code>指令操作：</p><ul><li><p>MysQL 5.5.7以前的版本，flush-logs将错误日志文件重命名为flename.err_old，并创建新的日志文件。</p></li><li><p>从MySQL5.5.7开始，flush-ogs只是重新打开日志文件，并不做日志备份和创建的操作。</p></li><li><p>如果日志文件不存在，MySQL启动或者执行flush-logs时会自动创建新的日志文件。重新创建错误日志，大小为0字节。</p></li></ul><h3 id="4-4-MySQL-8-0-新特性">4.4 MySQL 8.0 新特性</h3><p>MySQL8.0里对错误日志的改进。MySQL8.0的错误日志可以理解为一个全新的日志，在这个版本里，接受了来自社区的广泛批评意见，在这些意见和建议的基础上生成了新的日志， 下面这些是来自社区的意见：</p><ul><li><p>默认情况下内容过于冗长</p></li><li><p>遗漏了有用的信息</p></li><li><p>难以过滤某些信息</p></li><li><p>没有标识错误信息的子系统源</p></li><li><p>没有错误代码，解析消息需要识别错误</p></li><li><p>引导消息可能会丢失</p></li><li><p>固定格式</p></li></ul><p>针对这些意见，MySQL做了如下改变：</p><ul><li><p>采用组件架构，通过不同的组件执行日志的写入和过滤功能</p></li><li><p>写入错误日志的全部信息都具有唯一的错误代码从10000开始</p></li><li><p>增加了一个新的消息分类《system》用于在错误日志中始终可见的非错误但服务器状态更改事件的消息增加了额外的附加信息，例如关机时的版本信息，谁发起的关机等等</p></li><li><p>两种过滤方式，Internal和Dragnet</p></li><li><p>三种写入形式，经典、JSON和syseventlog</p></li></ul><blockquote><p>小结：</p><p>通常情况下，管理员不需要查看错误日志。但是，MySQL服务器发生异常时，管理员可以从错误日志中找到发生异常的时间、原因，然后根据这些信息来解决异常。</p></blockquote><hr><h2 id="5-二进制日志-bin-log">5. 二进制日志(bin log)</h2><p>binlog可以说是MySQL中比较<code>重要</code>的日志了，在日常开发及运维过程中，经常会遇到。</p><p>binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的<code>DDL</code>和<code>DML</code>等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、 show等）。</p><p>它以<code>事件形式</code>记录并保存在<code>二进制文件</code>中。通过这些信息，我们可以再现数据更新操作的全过程。</p><blockquote><p>如果想要记录所有语句（例如，为了识别有问题的查询），需要使用通用查询日志。</p></blockquote><p>binlog主要应用场景：</p><ul><li><p>一是用于<code>数据恢复</code>，如果MysQL数据库意外停止，可以通过二进制日志文件来查看用户执行了哪些操作，对数据库服务器文件做了哪些修改，然后根据二进制日志文件中的记录来恢复数据库服务器。</p></li><li><p>二是用于<code>数据复制</code>，由于日志的延续性和时效性，master把它的二进制日志传递给slaves来达到master-slave数据一致的目的。</p></li></ul><p>可以说MysQL数据库的<span class='p red'>数据备份、主备、主主、主从</span>都离不开binlog，需要依靠binlog来同步数据，保证数据一致性。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715161842703.png" alt="image-20220715161842703"></p><h3 id="5-1-查看默认情况">5.1 查看默认情况</h3><p>查看记录二进制日志是否开启：在MySQL8中默认情况下，二进制文件是开启的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_bin                         <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_basename                <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>binlog            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_index                   <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>binlog.index      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_trust_function_creators <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_use_v1_row_events       <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sql_log_bin                     <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><code>log_bin_basename</code>：是binlog日志的基本文件名，后面会追加标识来表示每一个文件</p><p><code>log_bin_ index</code>：是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录</p><p><code>log_bin_trust_function_creators</code>：限制存储过程，前面我们己经讲过了，这是因为二进制日志的一个重要功能是用于主从复制，而存储函数有可能导致主从的数据不一致。所以当开启二进制日志后，需要限制存储函数的创建、修改、调用</p><p><code>log_bin_use_v1_row_events</code>此只读系统变量已弃用。ON表示使用版本1二进制日志行，OFF表示使用版本2 二进制日志行(MySQL 5.6 的默认值为2）</p><hr><h3 id="5-2-日志参数设置">5.2 日志参数设置</h3><p><strong>方式1：永久性方式</strong></p><p>修改MySQL的<code>my.cnf</code>或<code>my.ini</code>文件可以设置二进制日志的相关参数：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">atguigu-bin</span></span><br><span class="line"><span class="attr">binlog_expire_logs_seconds</span>=<span class="string">600</span></span><br><span class="line"><span class="attr">max_binlog_size</span>=<span class="string">100M</span></span><br></pre></td></tr></table></figure><blockquote><p>提示：</p><ol><li>log-bin=mysql-bin #打开日志(主机需要打开)，这个mysql-bin也可以自定义，这里也可以加上路径， 如：/home/www/mysql_bin_log/mysql-bin</li><li>binlog_expire_logs_seconds：此参数控制二进制日志文件保留的时长，单位是秒，默认2592000 30天 --14400 4小时；86400 1天；259200 3天；</li><li>max_binlog_size：控制单个二进制日志大小，当前日志文件大小超过此变量时，执行切换动作。此参数的<code>最大和默认值是1GB</code>，该设置并<code>不能严格控制Binlog的大小</code>，尤其是Binlog比比较靠近最大值而又遇到一个比较大事务时，为了保证事务的完整性，可能不做切换日志的动作，只能将该事务的所有SQL都记录进当前日志，直到事务结束。一般情况下可采取默认值。</li></ol></blockquote><p>重新启动MySQL服务，查询二进制日志的信息，执行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%log_bin%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                   <span class="operator">|</span> <span class="keyword">Value</span>                            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> log_bin                         <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_basename                <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>bin       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_index                   <span class="operator">|</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>bin.index <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_trust_function_creators <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> log_bin_use_v1_row_events       <span class="operator">|</span> OFF                              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sql_log_bin                     <span class="operator">|</span> <span class="keyword">ON</span>                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------------------+----------------------------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>设置带文件夹的bin-log日志存放目录</strong></p><p>如果想改变日志文件的目录和名称，可以对my.cnf或my.ini中的log_bin参数修改如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">&quot;/var/lib/mysql/binlog/atguigu-bin&quot;</span></span><br></pre></td></tr></table></figure><p>注意：新建的文件夹需要使用mysql用户，使用下面的命令即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown <span class="operator">-</span>R <span class="operator">-</span>v mysql:mysql binlog</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715164107352.png" alt="image-20220715164107352" /><p><strong>方式2：临时性方式</strong></p><p>如果不希望通过修改配置文件并重启的方式设置二进制日志的话，还可以使用如下指令，需要注意的是 在mysql8中只有<code>会话级别</code>的设置，没有了global级别的设置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">global</span> 级别</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="keyword">global</span> sql_log_bin<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">ERROR <span class="number">1228</span> (HY000): Variable <span class="string">&#x27;sql_log_bin&#x27;</span> <span class="keyword">is</span> a SESSION variable <span class="keyword">and</span> can`t be used</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span></span><br><span class="line"></span><br><span class="line"># session级别</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> sql_log_bin<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> 秒)</span><br></pre></td></tr></table></figure><h3 id="5-3-查看日志">5.3 查看日志</h3><p>当MySQL创建二进制日志文件时，先创建一个以“filename”为名称、以“.index”为后缀的文件，再创建一 个以“filename”为名称、以“.000001”为后缀的文件。</p><p>MySQL服务<code>重新启动一次</code>，以“.000001”为后缀的文件就会增加一个，并且后缀名按1递增。即日志文件的 个数与MySQL服务启动的次数相同；如果日志长度超过了<code>max_binlog_size</code>的上限（默认是1GB），就会创建一个新的日志文件。</p><p>查看当前的二进制日志文件列表及大小。指令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="type">BINARY</span> LOGS;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> File_size <span class="operator">|</span> Encrypted <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span> <span class="number">156</span>       <span class="operator">|</span> <span class="keyword">No</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----------+-----------+</span></span><br><span class="line"><span class="number">1</span> 行于数据集 (<span class="number">0.02</span> 秒)</span><br></pre></td></tr></table></figure><p>所有对数据库的修改都会记录在binlog中。但binlog是二进制文件，无法直接查看，想要更直观的观测它就要借助<code>mysqlbinlog</code>命令工具了。指令如下：在查看执行，先执行一条SQL语句，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;张三_back&#x27;</span> <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>开始查看binlog</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715164718970.png" alt="image-20220715164718970"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715164743351.png" alt="image-20220715164743351" /><p>执行结果可以看到，这是一个简单的日志文件，日志中记录了用户的一些操作，这里并没有出现具体的SQL语句，这是因为binlog关键字后面的内容是经过编码后的<code>二进制日志</code>。</p><p>这里一个update语句包含如下事件</p><ul><li><p>Query 事件负责开始一个事务(BEGIN)</p></li><li><p>Table_map事件负责映射需要的表</p></li><li><p>Update_rows事件负责写入数据</p></li><li><p>Xid事件负责结束事务</p></li></ul><p>下面命令将行事件以<code>伪SQL的形式</code>表现出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="operator">-</span>v &quot;/var/lib/mysql/binlog/atguigu-bin.000002&quot;</span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">324</span> CRC32 <span class="number">0x6b31978b</span> Query thread_id<span class="operator">=</span><span class="number">10</span></span><br><span class="line">exec_time<span class="operator">=</span><span class="number">0</span> error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1641345397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.pseudo_thread_id<span class="operator">=</span><span class="number">10</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.sql_auto_is_null<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">@<span class="variable">@session</span>.unique_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.autocommit<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.sql_mode<span class="operator">=</span><span class="number">1168113696</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.auto_increment_increment<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.auto_increment_offset<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb3 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">@<span class="variable">@session</span>.character_set_client<span class="operator">=</span><span class="number">33</span>,@<span class="variable">@session</span>.collation_connection<span class="operator">=</span><span class="number">33</span>,@<span class="variable">@session</span>.collatio</span><br><span class="line">n_server<span class="operator">=</span><span class="number">255</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.lc_time_names<span class="operator">=</span><span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.collation_database<span class="operator">=</span><span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80011 SET @@session.default_collation_for_utf8mb4=255*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">324</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">391</span> CRC32 <span class="number">0x74f89890</span> Table_map:</span><br><span class="line">`atguigu14`.`student`mapped <span class="keyword">to</span> number <span class="number">85</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">391</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">470</span> CRC32 <span class="number">0xc9920491</span> Update_rows: <span class="keyword">table</span> id</span><br><span class="line"><span class="number">85</span> flags: STMT_END_F</span><br><span class="line"></span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">dfHUYRMBAAAAQwAAAIcBAAAAAFUAAAAAAAEACWF0Z3VpZ3UxNAAHc3R1ZGVudAADAw8PBDwAHgAG</span></span><br><span class="line"><span class="string">AQEAAgEhkJj4dA==</span></span><br><span class="line"><span class="string">dfHUYR8BAAAATwAAANYBAAAAAFUAAAAAAAEAAgAD//8AAQAAAAblvKDkuIkG5LiA54+tAAEAAAAL</span></span><br><span class="line"><span class="string">5byg5LiJX2JhY2sG5LiA54+tkQSSyQ==</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line">### <span class="keyword">UPDATE</span>`atguigu`.`student`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">### <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">### <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br><span class="line">### <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;一班&#x27;</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">### <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">### <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;张三_back&#x27;</span></span><br><span class="line">### <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;一班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">470</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">501</span> CRC32 <span class="number">0xca01d30f</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br></pre></td></tr></table></figure><p>前面的命令同时显示binlog格式的语句，使用如下命令不显示它</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="operator">-</span>v <span class="comment">--base64-output=DECODE-ROWS &quot;/var/lib/mysql/binlog/atguigu-bin.000002&quot;</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">324</span> CRC32 <span class="number">0x6b31978b</span> Query thread_id<span class="operator">=</span><span class="number">10</span></span><br><span class="line">exec_time<span class="operator">=</span><span class="number">0</span> error_code<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1641345397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.pseudo_thread_id<span class="operator">=</span><span class="number">10</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.foreign_key_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.sql_auto_is_null<span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">@<span class="variable">@session</span>.unique_checks<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.autocommit<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.sql_mode<span class="operator">=</span><span class="number">1168113696</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.auto_increment_increment<span class="operator">=</span><span class="number">1</span>, @<span class="variable">@session</span>.auto_increment_offset<span class="operator">=</span><span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb3 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">@<span class="variable">@session</span>.character_set_client<span class="operator">=</span><span class="number">33</span>,@<span class="variable">@session</span>.collation_connection<span class="operator">=</span><span class="number">33</span>,@<span class="variable">@session</span>.collatio</span><br><span class="line">n_server<span class="operator">=</span><span class="number">255</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.lc_time_names<span class="operator">=</span><span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@session</span>.collation_database<span class="operator">=</span><span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!80011 SET @@session.default_collation_for_utf8mb4=255*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">324</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">391</span> CRC32 <span class="number">0x74f89890</span> Table_map:</span><br><span class="line">`atguigu14`.`student`mapped <span class="keyword">to</span> number <span class="number">85</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">391</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">470</span> CRC32 <span class="number">0xc9920491</span> Update_rows: <span class="keyword">table</span> id</span><br><span class="line"><span class="number">85</span> flags: STMT_END_F</span><br><span class="line">### <span class="keyword">UPDATE</span>`atguigu14`.`student`</span><br><span class="line">### <span class="keyword">WHERE</span></span><br><span class="line">### <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">### <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;张三&#x27;</span></span><br><span class="line">### <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;一班&#x27;</span></span><br><span class="line">### <span class="keyword">SET</span></span><br><span class="line">### <span class="variable">@1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">### <span class="variable">@2</span><span class="operator">=</span><span class="string">&#x27;张三_back&#x27;</span></span><br><span class="line">### <span class="variable">@3</span><span class="operator">=</span><span class="string">&#x27;一班&#x27;</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">470</span></span><br><span class="line">#<span class="number">220105</span> <span class="number">9</span>:<span class="number">16</span>:<span class="number">37</span> server id <span class="number">1</span> end_log_pos <span class="number">501</span> CRC32 <span class="number">0xca01d30f</span> Xid <span class="operator">=</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>关于mysqlbinlog工具的使用技巧还有很多，例如只解析对某个库的操作或者某个时间段内的操作等。简单分享几个常用的语句，更多操作可以参考官方文档。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 可查看参数帮助</span><br><span class="line">mysqlbinlog <span class="comment">--no-defaults --help</span></span><br><span class="line"># 查看最后<span class="number">100</span>行</span><br><span class="line">mysqlbinlog <span class="comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |tail</span></span><br><span class="line"><span class="number">-100</span></span><br><span class="line"># 根据position查找</span><br><span class="line">mysqlbinlog <span class="comment">--no-defaults --base64-output=decode-rows -vv atguigu-bin.000002 |grep -A</span></span><br><span class="line"><span class="number">20</span> <span class="string">&#x27;4939002&#x27;</span></span><br></pre></td></tr></table></figure><p>上面这种办法读取出binlog日志的全文内容比较多，不容易分辨查看到pos点信息，下面介绍一种更为方便的查询命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> binlog events [<span class="keyword">IN</span> <span class="string">&#x27;log_name&#x27;</span>] [<span class="keyword">FROM</span> pos] [LIMIT [<span class="keyword">offset</span>,] row_count];</span><br></pre></td></tr></table></figure><p>*<code>IN 'log_name'</code>：指定要查询的binlog文件名（不指定就是第一个binlog文件）　<br>*<code>FROM pos</code>：指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算）<br>*<code>LIMIT [offset]</code>：偏移量(不指定就是0)<br>*<code>row_count</code>:查询总条数（不指定就是所有行）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;atguigu-bin.000002&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Log_name           <span class="operator">|</span> Pos <span class="operator">|</span> Event_type     <span class="operator">|</span> Server_id <span class="operator">|</span> End_log_pos <span class="operator">|</span> Info                                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">4</span>   <span class="operator">|</span> Format_desc    <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">125</span>         <span class="operator">|</span> Server ver: <span class="number">8.0</span><span class="number">.26</span>, Binlog ver: <span class="number">4</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">125</span> <span class="operator">|</span> Previous_gtids <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">156</span>         <span class="operator">|</span>                                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">156</span> <span class="operator">|</span> Anonymous_Gtid <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">235</span>         <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">235</span> <span class="operator">|</span> Query          <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">324</span>         <span class="operator">|</span> <span class="keyword">BEGIN</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">324</span> <span class="operator">|</span> Table_map      <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">391</span>         <span class="operator">|</span> table_id: <span class="number">85</span>(atguigu14.student)                        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">391</span> <span class="operator">|</span> Update_rows    <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">470</span>         <span class="operator">|</span> table_id: <span class="number">85</span>flags: STMT_END_F                          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">470</span> <span class="operator">|</span> Xid            <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">501</span>         <span class="operator">|</span> <span class="keyword">COMMIT</span> <span class="comment">/*xid=15 */</span>                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">501</span> <span class="operator">|</span> Anonymous_Gtid <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">578</span>         <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">578</span> <span class="operator">|</span> Query     <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">721</span> <span class="operator">|</span> use`atguigu14`; <span class="keyword">create</span> <span class="keyword">table</span> test(id <span class="type">int</span>, title <span class="type">varchar</span>(<span class="number">100</span>)) <span class="comment">/* xid=19 */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">721</span> <span class="operator">|</span> Anonymous_Gtid <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">800</span>         <span class="operator">|</span> <span class="keyword">SET</span> @<span class="variable">@SESSION</span>.GTID_NEXT<span class="operator">=</span> <span class="string">&#x27;ANONYMOUS&#x27;</span>                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">800</span> <span class="operator">|</span> Query          <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">880</span>         <span class="operator">|</span> <span class="keyword">BEGIN</span>                                                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">880</span> <span class="operator">|</span> Table_map      <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">943</span>         <span class="operator">|</span> table_id: <span class="number">89</span>(atguigu14.test)                           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">943</span> <span class="operator">|</span> Write_rows     <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">992</span>         <span class="operator">|</span> table_id: <span class="number">89</span> flags: STMT_END_F                         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> atguigu<span class="operator">-</span>bin<span class="number">.000002</span> <span class="operator">|</span> <span class="number">992</span> <span class="operator">|</span> Xid            <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span> <span class="number">1023</span>        <span class="operator">|</span> <span class="keyword">COMMIT</span> <span class="comment">/*xid=21 */</span>                                     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+</span></span><br><span class="line"><span class="number">14</span> 行于数据集 (<span class="number">0.02</span> 秒)</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715165603879.png" alt="image-20220715165603879"  /><p>上面我们讲了这么多都是基于binlog的默认格式，binlog格式查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> binlog_format <span class="operator">|</span> <span class="type">ROW</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> 行于数据集 (<span class="number">0.02</span> 秒)</span><br></pre></td></tr></table></figure><p>除此之外，binlog还有2种格式，分别是<code>Statement</code>和<code>Mixed</code></p><ul><li><p>Statement</p><p>每一条会修改数据的sql都会记录在binlog中。</p><p>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。</p></li><li><p>Row</p><p>5.1.5版本的MySQL才开始支持row level 的复制，它不记录sql语句上下文相关信息，仅保存哪条记录被修改。</p><p>优点：row level 的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下 的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题。</p></li><li><p>Mixed</p><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>详细情况，下章讲解。</p></li></ul><h3 id="5-4-使用日志恢复数据">5.4 使用日志恢复数据</h3><p>如果MySQL服务器启用了二进制日志，在数据库出现意外丢失数据时，可以使用MySQLbinlog工具从指定的时间点开始（例如，最后一次备份）直到现在或另一个指定的时间点的日志中回复数据。</p><p>mysqlbinlog恢复数据的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [option] filename<span class="operator">|</span>mysql –uuser <span class="operator">-</span>ppass;</span><br></pre></td></tr></table></figure><p>这个命令可以这样理解：使用mysqlbinlog命令来读取filename中的内容，然后使用mysql命令将这些内容恢复到数据库中。</p><p>*<code>filename</code>：是日志文件名。</p><p>*<code>option</code>：可选项，比较重要的两对option参数是–start-date、–stop-date 和 --start-position、-- stop-position。<br>*<code>--start-date</code>和<code>--stop-date</code>：可以指定恢复数据库的起始时间点和结束时间点。<br>*<code>--start-position</code>和<code>--stop-position</code>：可以指定恢复数据的开始位置和结束位置。</p><blockquote><p>注意：使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必须在atguigu-bin.000002之前恢复。</p></blockquote><p>详见p189，由于翻页过快，这部分没办法记录。</p><h3 id="5-5-删除二进制日志">5.5 删除二进制日志</h3><p>MySQL的二进制文件可以配置自动删除，同时MySQL也提供了安全的手动删除二进制文件的方法。<code>PURGE MASTER LOGS</code>只删除指定部分的二进制日志文件，<code>RESET MASTER</code>删除所有的二进制日志文 件。具体如下：</p><p><strong>1. PURGE MASTER LOGS：删除指定日志文件</strong></p><p>PURGE MASTER LOGS语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS <span class="keyword">TO</span> ‘指定日志文件名’</span><br><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS BEFORE ‘指定日期’</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715165603879.png" alt="image-20220715165603879"  /><p>上面我们讲了这么多都是基于binlog的默认格式，binlog格式查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="operator">|</span> binlog_format <span class="operator">|</span> <span class="type">ROW</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-------+</span></span><br><span class="line"><span class="number">1</span> 行于数据集 (<span class="number">0.02</span> 秒)</span><br></pre></td></tr></table></figure><p>除此之外，binlog还有2种格式，分别是<code>Statement</code>和<code>Mixed</code></p><ul><li><p>Statement</p><p>每一条会修改数据的sql都会记录在binlog中。</p><p>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。</p></li><li><p>Row</p><p>5.1.5版本的MySQL才开始支持row level 的复制，它不记录sql语句上下文相关信息，仅保存哪条记录被修改。</p><p>优点：row level 的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下 的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题。</p></li><li><p>Mixed</p><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>详细情况，下章讲解。</p></li></ul><h3 id="5-4-使用日志恢复数据-2">5.4 使用日志恢复数据</h3><p>如果MySQL服务器启用了二进制日志，在数据库出现意外丢失数据时，可以使用MySQLbinlog工具从指定的时间点开始（例如，最后一次备份）直到现在或另一个指定的时间点的日志中回复数据。</p><p>mysqlbinlog恢复数据的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [option] filename<span class="operator">|</span>mysql –uuser <span class="operator">-</span>ppass;</span><br></pre></td></tr></table></figure><p>这个命令可以这样理解：使用mysqlbinlog命令来读取filename中的内容，然后使用mysql命令将这些内容恢复到数据库中。</p><p>*<code>filename</code>：是日志文件名。</p><p>*<code>option</code>：可选项，比较重要的两对option参数是–start-date、–stop-date 和 --start-position、-- stop-position。<br>*<code>--start-date</code>和<code>--stop-date</code>：可以指定恢复数据库的起始时间点和结束时间点。<br>*<code>--start-position</code>和<code>--stop-position</code>：可以指定恢复数据的开始位置和结束位置。</p><blockquote><p>注意：使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必须在atguigu-bin.000002之前恢复。</p></blockquote><h3 id="5-5-删除二进制日志-2">5.5 删除二进制日志</h3><p>MySQL的二进制文件可以配置自动删除，同时MySQL也提供了安全的手动删除二进制文件的方法。<code>PURGE MASTER LOGS</code>只删除指定部分的二进制日志文件，<code>RESET MASTER</code>删除所有的二进制日志文 件。具体如下：</p><p><strong>1. PURGE MASTER LOGS：删除指定日志文件</strong></p><p>PURGE MASTER LOGS语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS <span class="keyword">TO</span> ‘指定日志文件名’</span><br><span class="line">PURGE &#123;MASTER <span class="operator">|</span> <span class="type">BINARY</span>&#125; LOGS BEFORE ‘指定日期’</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715171712026.png" alt="image-20220715171712026"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715172015185.png" alt="image-20220715172015185"  /><p><strong>2. RESET MASTER: 删除所有二进制日志文件</strong></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715172104967.png" alt="image-20220715172104967"  /><h3 id="5-6-其它场景">5.6 其它场景</h3><p>二进制日志可以通过数据库的<code>全量备份</code>和二进制日志中保存的<code>增量信息</code>，完成数据库的<code>无损失恢复</code>。 但是，如果遇到数据量大、数据库和数据表很多（比如分库分表的应用）的场景，用二进制日志进行数据恢复，是很有挑战性的，因为起止位置不容易管理。</p><p>在这种情况下，一个有效的解决办法是<code>配置主从数据库服务器</code>，甚至是<code>一主多从</code>的架构，把二进制日志文件的内容通过中继日志，同步到从数据库服务器中，这样就可以有效避免数据库故障导致的数据异常等问题。</p><hr><h2 id="6-再谈二进制日志-binlog">6. 再谈二进制日志(binlog)</h2><h3 id="6-1-写入机制">6.1 写入机制</h3><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到<code>binlog cache</code>，事务提交的时候，再把binlog cache写到binlog文件中。因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。</p><p>我们可以通过<code>binlog_cache_size</code>参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（Swap）。binlog日志刷盘流程如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715172958729.png" alt="image-20220715172958729" style="zoom: 50%;" /><blockquote><ul><li>上图的write，是指把日志写入到文件系统的page cache，并没有把数据持久化到磁盘，所以速度比较快</li><li>上图的fsync，才是将数据持久化到磁盘的操作</li></ul></blockquote><p>write和fsync的时机，可以由参数<code>sync_binlog</code>控制，默认是<code>0</code>。为0的时候，表示每次提交事务都只 write，由系统自行判断什么时候执行fsync。虽然性能得到提升，但是机器宕机，page cache里面的 binglog 会丢失。如下图：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715193749462.png" alt="image-20220715193749462" style="zoom:50%;" /><p>为了安全起见，可以设置为<code>1</code>，表示每次提交事务都会执行fsync，就如同<strong>redo log 刷盘流程</strong>一样。 最后还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715194624080.png" alt="image-20220715194624080" style="zoom:50%;" /><p>在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕机，会丢失最近N个事务的binlog日志。</p><h3 id="6-2-binlog与redolog对比">6.2 binlog与redolog对比</h3><ul><li>redo log 它是<code>物理日志</code>，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎层产生的。</li><li>而 binlog 是<code>逻辑日志</code>，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于 MySQL Server 层。</li><li>虽然它们都属于持久化的保证，但是侧重点不同。<ul><li>redo log让InnoDB存储引擎拥有了崩溃恢复能力。</li><li>binlog保证了MySQL集群架构的数据一致性。</li></ul></li></ul><h3 id="6-3-两阶段提交">6.3 两阶段提交</h3><p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的<code>写入时机</code>不一样。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715194959405.png" alt="image-20220715194959405" style="zoom:67%;" /><p><strong>redo log与binlog两份日志之间的逻辑不一致，会出现什么问题？</strong></p><p>以update语句为例，假设<code>id=2</code>的记录，字段<code>c</code>值是<code>0</code>，把字段c值更新为<code>1</code>，SQL语句为update T set c = 1 where id = 2。</p><p>假设执行过程中写完redo log日志后，binlog日志写期间发生了异常，会出现什么情况呢？</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715195016492.png" alt="image-20220715195016492" style="zoom:67%;" /><p>由于binlog没写完就异常，这时候binlog里面没有对应的修改记录。因此，之后用binlog日志恢复数据时，就会少这一次更新，恢复出来的这一行c值为0，而原库因为redo log日志恢复，这一行c的值是1，最终数据不一致。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715195521986.png" alt="image-20220715195521986" style="zoom:67%;" /><p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用<strong>两阶段提交</strong>方案。原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是<strong>两阶段提交</strong>。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715195635196.png" alt="image-20220715195635196" style="zoom:67%;" /><p>使用两阶段提交后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redo log还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715200248193.png" alt="image-20220715200248193" style="zoom:67%;" /><p>另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715200321717.png" alt="image-20220715200321717" style="zoom:67%;" /><p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p><hr><h2 id="7-中继日志-relay-log">7. 中继日志(relay log)</h2><h3 id="7-1-介绍">7.1 介绍</h3><p><strong>中继日志只在主从服务器架构的从服务器上存在</strong>。从服务器为了与主服务器保持一致，要从主服务器读取二进制日志的内容，并且把读取到的信息写入<code>本地的日志文件</code>中，这个从服务器本地的日志文件就叫<code>中继日志</code>。然后，从服务器读取中继日志，并根据中继日志的内容对从服务器的数据进行更新，完成主 从服务器的 数据同步 。</p><p>搭建好主从服务器之后，中继日志默认会保存在从服务器的数据目录下。</p><p>文件名的格式是：<code>从服务器名-relay-bin.序号</code>。中继日志还有一个索引文件：<code>从服务器名-relaybin.index</code>，用来定位当前正在使用的中继日志。</p><h3 id="7-2-查看中继日志">7.2 查看中继日志</h3><p>中继日志与二进制日志的格式相同，可以用<code>mysqlbinlog</code>工具进行查看。下面是中继日志的一个片段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="type">TIMESTAMP</span><span class="operator">=</span><span class="number">1618558728</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">950</span></span><br><span class="line">#<span class="number">210416</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">48</span> server id <span class="number">1</span> end_log_pos <span class="number">832</span> CRC32 <span class="number">0xcc16d651</span> Table_map:</span><br><span class="line">`atguigu`.`test`mapped <span class="keyword">to</span> number <span class="number">91</span></span><br><span class="line"># <span class="keyword">at</span> <span class="number">1000</span></span><br><span class="line">#<span class="number">210416</span> <span class="number">15</span>:<span class="number">38</span>:<span class="number">48</span> server id <span class="number">1</span> end_log_pos <span class="number">872</span> CRC32 <span class="number">0x07e4047c</span> Delete_rows: <span class="keyword">table</span> id</span><br><span class="line"><span class="number">91</span> flags: STMT_END_F <span class="comment">-- server id 1 是主服务器，意思是主服务器删了一行数据</span></span><br><span class="line">BINLOG <span class="string">&#x27;</span></span><br><span class="line"><span class="string">CD95YBMBAAAAMgAAAEADAAAAAFsAAAAAAAEABGRlbW8ABHRlc3QAAQMAAQEBAFHWFsw=</span></span><br><span class="line"><span class="string">CD95YCABAAAAKAAAAGgDAAAAAFsAAAAAAAEAAgAB/wABAAAAfATkBw==</span></span><br><span class="line"><span class="string">&#x27;</span><span class="comment">/*!*/</span>;</span><br><span class="line"># <span class="keyword">at</span> <span class="number">1040</span></span><br></pre></td></tr></table></figure><p>这一段的意思是，主服务器（“server id 1”）对表 atguigu.test 进行了 2 步操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定位到表 atguigu.test 编号是 <span class="number">91</span> 的记录，日志位置是 <span class="number">832</span>；</span><br><span class="line">删除编号是 <span class="number">91</span> 的记录，日志位置是 <span class="number">872</span></span><br></pre></td></tr></table></figure><h3 id="7-3-恢复的典型错误">7.3 恢复的典型错误</h3><p>如果从服务器宕机，有的时候为了系统恢复，要重装操作系统，这样就可能会导致你的<code>服务器名称</code>与之前<code>不同</code>。而中继日志里是<code>包含从服务器名</code>的。在这种情况下，就可能导致你恢复从服务器的时候，无法 从宕机前的中继日志里读取数据，以为是日志文件损坏了，其实是名称不对了。</p><p>解决的方法也很简单，把从服务器的名称改回之前的名称。</p>]]></content>
    
    
    <summary type="html">慢查询日志、bin log、错误日志、通用查询日志</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://wuwawawa.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL多版本并发控制</title>
    <link href="https://wuwawawa.github.io/posts/1f4b46b6.html"/>
    <id>https://wuwawawa.github.io/posts/1f4b46b6.html</id>
    <published>2023-04-18T06:43:04.000Z</published>
    <updated>2023-04-18T06:20:49.219Z</updated>
    
    <content type="html"><![CDATA[<p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过数据行的多个版本管理来实现数据库的<code>并发控制</code>。这项技术使得在InnoDB的事务隔离级别下执行<code>一致性读</code>操作有了保证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样 在做查询的时候就不用等待另一个事务释放锁。</p><p>MVCC没有正式的标准，在不同的DBMS中MVCC的实现方式可能是不同的，也不是普遍使用的（大家可以参考相关的DBMS文档）。这里讲解InnoDB中MVCC的实现机制（MySQL其他的存储引擎并不支持它）</p><hr><h2 id="1-快照读与当前读">1. 快照读与当前读</h2><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理<code>读-写冲突</code>，做到即使有读写冲突时，也能做到<code>不加锁</code>，<code>非阻塞并发读</code>，而这个读指的就是<code>快照读</code>, 而非<code>当前读</code>。当前 读实际上是一种加锁的操作，是悲观锁的实现。而MVCC本质是采用乐观锁思想的一种方式。</p><div class="tabs" id="3c12d972-9050-44fe-9000-e79d518eb69e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3c12d972-9050-44fe-9000-e79d518eb69e-1"><i class="fas fa-cat"></i>快照读</button></li><li class="tab"><button type="button" data-href="#3c12d972-9050-44fe-9000-e79d518eb69e-2"><i class="fas fa-horse"></i>当前读</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3c12d972-9050-44fe-9000-e79d518eb69e-1"><p>快照读又叫一致性读，读取的是快照数据。<span class='p green'>不加锁的简单的 SELECT 都属于快照读</span>，即不加锁的非阻塞读；比如这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> player <span class="keyword">WHERE</span> ...</span><br></pre></td></tr></table></figure><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下， 避免了加锁操作，降低了开销。</p><p>既然是基于多版本，那么快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。</p><p>快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3c12d972-9050-44fe-9000-e79d518eb69e-2"><p>当前读读取的是记录的最新版本（最新数据，而不是历史版本的数据），读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。加锁的 SELECT，或者对数据进行增删改都会进行当前读。比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LOCK <span class="keyword">IN</span> SHARE MODE; # 共享锁</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; # 排他锁</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">values</span> ... # 排他锁</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ... # 排他锁</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> ... # 排他锁</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="2-再谈隔离级别">2. 再谈隔离级别</h2><p>我们知道事务有 4 个隔离级别，可能存在三种并发问题：</p><p>在MySQL中，默认的隔离级别是可重复读，可以解决脏读和不可重复读的问题，如果仅从定义的角度来看，它并不能解决幻读问题。如果我们想要解决幻读问题，就需要采用串行化的方式，也就是将隔离级别提升到最高，但这样一来就会大幅降低数据库的事务并发能力。</p><p>MVCC可以不采用锁机制，而是通过乐观锁的方式来解决不可重复读和幻读问题！它可以在大多数情况下替代行级锁，降低系统的开销。</p><h2 id="3-隐藏字段、Undo-Log版本链">3. 隐藏字段、Undo Log版本链</h2><p>回顾一下undo日志的版本链，对于使用 InnoDB 存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列。</p><p>*<code>trx_id</code>：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的<code>事务id</code>赋值给<code>trx_id</code>隐藏列。<br>*<code>roll_pointer</code>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然 后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</p><p>举例：student表数据如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> class<span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span>   <span class="operator">|</span> 张三  <span class="operator">|</span> 一班 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.07</span> sec)</span><br></pre></td></tr></table></figure><p>假设插入该记录的<code>事务id</code>为<code>8</code>，那么此刻该条记录的示意图如下所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714140801595.png" alt="image-20220714140801595"></p><blockquote><p>insert undo只在事务回滚时起作用，当事务提交后，该类型的undo日志就没用了，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放）。</p></blockquote><p>假设之后两个事务id分别为<code>10</code>、<code>20</code>的事务对这条记录进行<code>UPDATE</code>操作，操作流程如下：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714140846658.png" alt="image-20220714140846658"></p><p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个<code>roll_pointer</code>属性 （<code>INSERT</code>操作对应的undo日志没有该属性，因为该记录并没有更早的版本），可以将这些<code>undo日志</code>都连起来，串成一个链表：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714141012874.png" alt="image-20220714141012874"></p><p>对该记录每次更新后，都会将旧值放到一条<code>undo日志</code>中，就算是该记录的一个旧版本，随着更新次数 的增多，所有的版本都会被<code>roll_pointer</code>属性连接成一个链表，我们把这个链表称之为<code>版本链</code>，版本链的头节点就是当前记录最新的值。</p><p>每个版本中还包含生成该版本时对应的<code>事务id</code>。</p><hr><h2 id="4-MVCC实现原理之ReadView">4. MVCC实现原理之ReadView</h2><p>MVCC 的实现依赖于：<code>隐藏字段</code>、<code>Undo Log</code>、<code>Read View</code>。</p><h3 id="4-1-什么是ReadView">4.1 什么是ReadView</h3><p>在MVCC机制中，多个事务对同一个行记录进行更新会产生多个历史快照，这些历史快照保存在 Undo Log里。如果一个事务想要查询这个行记录，需要读取哪个版本的行记录呢？这时就需要用到 Readview了，它帮我们解决了行的可见性问题。</p><p>Readview就是事务在使用MVCC机制进行快照读操作时产生的读视图。当事务启动时，会生成数据库系统当前的一个快照，InnoDB 为每个事务构造了一个数组，用来记录并维护系统当前<code>活跃事务</code>的D（“活跃”指的就是，启动了但还没提交）</p><h3 id="4-2-设计思路">4.2 设计思路</h3><p>使用<code>READ UNCOMMITTED</code>隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</p><p>使用<code>SERIALIZABLE</code>隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p>使用<code>READ COMMITTED</code>和<code>REPEATABLE READ</code>隔离级别的事务，都必须保证读到<code>已经提交了的</code>事务修改过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</p><p>这个ReadView中主要包含4个比较重要的内容，分别如下：</p><p>1.<code>creator_trx_id</code>，创建这个Read View的事务ID。</p><blockquote><p>说明：只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为 事务分配事务id，否则在一个只读事务中的事务id值都默认为0。</p></blockquote><p>2.<code>trx_ids</code>，表示在生成ReadView时当前系统中活跃的读写事务的<code>事务id列表</code>。</p><p>3.<code>up_limit_id</code>，活跃的事务中最小的事务 ID。</p><p>4.<code>low_limit_id</code>，表示生成ReadView时系统中应该分配给下一个事务的 id 值。low_limit_id 是系 统最大的事务id值，这里要注意是系统中的事务id，需要区别于正在活跃的事务ID。</p><blockquote><p>注意：low_limit_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1， 2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时， trx_ids就包括1和2，up_limit_id的值就是1，low_limit_id的值就是4。</p></blockquote><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714142254768.png" alt="image-20220714142254768"  /><hr><h3 id="4-3-ReadView的规则">4.3 ReadView的规则</h3><p>有了这个ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见。</p><ul><li>如果被访问版本的trx_id属性值与ReadView中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx_id属性值小于ReadView中的 up_limit_id 值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的trx_id属性值大于或等于ReadView中的 low_limit_id 值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。</li><li>如果被访问版本的trx_id属性值在ReadView的 up_limit_id 和 low_limit_id 之间，那就需要判断一下trx_id属性值是不是在 trx_ids 列表中。<ul><li>如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问。</li><li>如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</li></ul></li></ul><hr><h3 id="4-4-MVCC整体操作流程">4.4 MVCC整体操作流程</h3><p>了解了这些概念之后，我们来看下当查询一条记录的时候，系统如何通过MVCC找到它：</p><ol><li>首先获取事务自己的版本号，也就是事务 ID；</li><li>获取 ReadView；</li><li>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</li><li>如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；</li><li>最后返回符合规则的数据。</li></ol><p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</p><blockquote><p>InnoDB 中，MVCC是通过 Undo Log + Read View 进行数据读取，Undo Log 保存了历史快照，而 Read View 规则帮我们判断当前版本的数据是否可见。</p></blockquote><p>在隔离级别为读已提交（Read Committed）时，一个事务中的每一次 SELECT 查询都会重新获取一次 Read View。</p><p>如表所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715130843147.png" alt="image-20220715130843147" style="zoom:67%;" /><blockquote><p>注意，此时同样的查询语句都会重新获取一次 Read View，这时如果 Read View 不同，就可能产生不可重复读或者幻读的情况。</p></blockquote><p>当隔离级别为可重复读的时候，就避免了不可重复读，这是因为一个事务只在第一次 SELECT 的时候会获取一次 Read View，而后面所有的 SELECT 都会复用这个 Read View，如下表所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715130916437.png" alt="image-20220715130916437" style="zoom:67%;" /><hr><h2 id="5-举例说明">5. 举例说明</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715131200077.png" alt="image-20220715131200077"  /><h3 id="5-1-READ-COMMITTED级别">5.1 READ COMMITTED级别</h3><p><strong>READ COMMITTED ：每次读取数据前都生成一个ReadView。</strong></p><p>现在有两个<code>事务id</code>分别为<code>10</code>、<code>20</code>的事务在执行:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>说明：事务执行过程中，只有在第一次真正修改记录时（比如使用INSERT、DELETE、UPDATE语句），才会被分配一个单独的事务id，这个事务id是递增的。所以我们才在事务2中更新一些别的表的记录，目的是让它分配事务id。</p></blockquote><p>此刻，表student 中 id 为 1 的记录得到的版本链表如下所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715133640655.png" alt="image-20220715133640655"></p><p>假设现在有一个使用<code>READ COMMITTED</code>隔离级别的事务开始执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用READ COMMITTED隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715134540737.png" alt="image-20220715134540737"  /><p>之后，我们把<code>事务id</code>为<code>10</code>的事务提交一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>然后再到<code>事务id</code>为<code>20</code>的事务中更新一下表<code>student</code>中<code>id</code>为<code>1</code>的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;钱七&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;宋八&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此刻，表student中<code>id</code>为<code>1</code>的记录的版本链就长这样：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715134839081.png" alt="image-20220715134839081"></p><p>然后再到刚才使用<code>READ COMMITTED</code>隔离级别的事务中继续查找这个 id 为 1 的记录，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用READ COMMITTED隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>均未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"></span><br><span class="line"># SELECT2：Transaction <span class="number">10</span>提交，Transaction <span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;王五&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715135017000.png" alt="image-20220715135017000"  /><blockquote><p>强调：使用READ COMMITTED隔离级别的事务在每次查询开始时都会生成一个独立的ReadView。</p></blockquote><hr><h3 id="5-2-REPEATABLE-READ级别">5.2 REPEATABLE READ级别</h3><p>使用<code>REPEATABLE READ</code>隔离级别的事务来说，只会在第一次执行查询语句时生成一个<code>ReadView</code>，之后的查询就不会重复生成了。</p><p>比如，系统里有两个<code>事务id</code>分别为<code>10</code>、<code>20</code>的事务在执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此刻，表student 中 id 为 1 的记录得到的版本链表如下所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715140006061.png" alt="image-20220715140006061"></p><p>假设现在有一个使用<code>REPEATABLE READ</code>隔离级别的事务开始执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用REPEATABLE READ隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715140155744.png" alt="image-20220715140155744"  /><p>之后，我们把<code>事务id</code>为<code>10</code>的事务提交一下，就像这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">10</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;李四&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;王五&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>然后再到<code>事务id</code>为<code>20</code>的事务中更新一下表<code>student</code>中<code>id</code>为<code>1</code>的记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Transaction <span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># 更新了一些别的表的记录</span><br><span class="line">...</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;钱七&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> name<span class="operator">=</span>&quot;宋八&quot; <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>此刻，表student 中<code>id</code>为<code>1</code>的记录的版本链长这样：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715140354217.png" alt="image-20220715140354217"></p><p>然后再到刚才使用<code>REPEATABLE READ</code>隔离级别的事务中继续查找这个<code>id</code>为<code>1</code>的记录，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用REPEATABLE READ隔离级别的事务</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"># SELECT1：Transaction <span class="number">10</span>、<span class="number">20</span>均未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值为<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"># SELECT2：Transaction <span class="number">10</span>提交，Transaction <span class="number">20</span>未提交</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; # 得到的列name的值仍为<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715140555172.png" alt="image-20220715140555172"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715140620328.png" alt="image-20220715140620328"  /><p>这次<code>SELECT</code>查询得到的结果是重复的，记录的列<code>c</code>值都是<code>张三</code>，这就是<code>可重复读</code>的含义。如果我们之后再把<code>事务id</code>为<code>20</code>的记录提交了，然后再到刚才使用<code>REPEATABLE READ</code>隔离级别的事务中继续查找这个<code>id</code>为<code>1</code>的记录，得到的结果还是<code>张三</code>，具体执行过程大家可以自己分析一下。</p><hr><h3 id="5-3-如何解决幻读">5.3 如何解决幻读</h3><p>接下来说明InnoDB 是如何解决幻读的。</p><p>假设现在表 student 中只有一条数据，数据内容中，主键 id=1，隐藏的 trx_id=10，它的 undo log 如下图所示。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715141002035.png" alt="image-20220715141002035" style="zoom:80%;" /><p>假设现在有事务 A 和事务 B 并发执行，<code>事务 A</code>的事务 id 为<code>20</code>，<code>事务 B</code>的事务 id 为<code>30</code>。</p><p>步骤1：事务 A 开始第一次查询数据，查询的 SQL 语句如下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>在开始查询之前，MySQL 会为事务 A 产生一个 ReadView，此时 ReadView 的内容如下：<code>trx_ids= [20,30] ， up_limit_id=20 ， low_limit_id=31 ， creator_trx_id=20</code>。</p><p>由于此时表 student 中只有一条数据，且符合 where id&gt;=1 条件，因此会查询出来。然后根据 ReadView 机制，发现该行数据的trx_id=10，小于事务 A 的 ReadView 里 up_limit_id，这表示这条数据是事务 A 开启之前，其他事务就已经提交了的数据，因此事务 A 可以读取到。</p><p>结论：事务 A 的第一次查询，能读取到一条数据，id=1。</p><p>步骤2：接着事务 B(trx_id=30)，往表 student 中新插入两条数据，并提交事务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id,name) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此时表student 中就有三条数据了，对应的 undo 如下图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715141208667.png" alt="image-20220715141208667"></p><p>步骤3：接着事务 A 开启第二次查询，根据可重复读隔离级别的规则，此时事务 A 并不会再重新生成 ReadView。此时表 student 中的 3 条数据都满足 where id&gt;=1 的条件，因此会先查出来。然后根据 ReadView 机制，判断每条数据是不是都可以被事务 A 看到。</p><p>1）首先 id=1 的这条数据，前面已经说过了，可以被事务 A 看到。</p><p>2）然后是 id=2 的数据，它的 trx_id=30，此时事务 A 发现，这个值处于 up_limit_id 和 low_limit_id 之 间，因此还需要再判断 30 是否处于 trx_ids 数组内。由于事务 A 的 trx_ids=[20,30]，因此在数组内，这表 示 id=2 的这条数据是与事务 A 在同一时刻启动的其他事务提交的，所以这条数据不能让事务 A 看到。</p><p>3）同理，id=3 的这条数据，trx_id 也为 30，因此也不能被事务 A 看见。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220715141243993.png" alt="image-20220715141243993"></p><p>结论：最终事务 A 的第二次查询，只能查询出 id=1 的这条数据。这和事务 A 的第一次查询的结果是一样 的，因此没有出现幻读现象，所以说在 MySQL 的可重复读隔离级别下，不存在幻读问题。</p><h2 id="6-总结">6. 总结</h2><p>这里介绍了 MVCC 在<code>READ COMMITTD</code>、<code>REPEATABLE READ</code>这两种隔离级别的事务在执行快照读操作时 访问记录的版本链的过程。这样使不同事务的<code>读-写</code>、<code>写-读</code>操作并发执行，从而提升系统性能。</p><p>核心点在于 ReadView 的原理，<code>READ COMMITTD</code>、<code>REPEATABLE READ</code>这两个隔离级别的一个很大不同 就是生成ReadView的时机不同：</p><p>*<code>READ COMMITTD</code>在每一次进行普通SELECT操作前都会生成一个ReadView<br>*<code>REPEATABLE READ</code>只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复 使用这个ReadView就好了。</p><blockquote><p>说明：我们之前说执行DELETE语句或者更新主键的UPDATE语句并不会立即把对应的记录完全从页面中删除， 而是执行一个所谓的deletemark操作，相当于只是对记录打上了一个删除标志位，这主要就是为MVCC服务的。</p></blockquote><p>通过MVCC我们可以解决：</p><ol><li><p>读写之间阻寨的问题。通过MVCC可以让读写互相不阳塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力。</p></li><li><p>降低了死锁的概率。这是因为MVCC采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁定必要的行。</p></li><li><p>解决快照读的问题。当我们查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果。</p></li></ol>]]></content>
    
    
    <summary type="html">什么是MVCC、MVCC实现原理之ReadView</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://wuwawawa.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL锁</title>
    <link href="https://wuwawawa.github.io/posts/d940f18d.html"/>
    <id>https://wuwawawa.github.io/posts/d940f18d.html</id>
    <published>2023-04-17T09:39:07.000Z</published>
    <updated>2023-04-18T06:31:27.167Z</updated>
    
    <content type="html"><![CDATA[<p><code>锁</code>是计算机协调多个进程或线程<code>并发访问某一资源</code>的机制。在程序开发中会存在多线程同步的问题，当多个线程并发访问某个数据的时候，尤其是针对一些敏感的数据（比如订单、金额等），我们就需要保证这个数据在任何时刻<code>最多只有一个线程</code>在访问，保证数据的完整性和一致性。在开发过程中加锁是为了保证数据的一致性，这个思想在数据库领域中同样很重要。</p><p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的 资源。为保证数据的一致性，需要对<code>并发操作进行控制</code>，因此产生了<code>锁</code>。同时<code>锁机制</code>也为实现MySQL 的各个隔离级别提供了保证。<code>锁冲突</code>也是影响数据库<code>并发访问性能</code>的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。</p><hr><h2 id="1-MySQL并发事务访问相同记录">1. MySQL并发事务访问相同记录</h2><p>并发事务访问相同记录的情况大致可以划分为3种：</p><h3 id="1-1-读-读情况">1.1 读-读情况</h3><p><code>读-读</code>情况，即并发事务相继<code>读取相同的记录</code>。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><h3 id="1-2-写-写情况">1.2 写-写情况</h3><p><code>写-写</code>情况，即并发事务相继对相同的记录做出改动。</p><p>在这种情况下会发生<code>脏写</code>的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们<code>排队执行</code>，这个排队的过程其实是通过<code>锁</code>来实现的。这个所谓的锁其实是一个内存中的结构 ，在事务执行前本来是没有锁的，也就是说一开始是没有<code>锁结构</code>和<code>记录</code>进行关联的，如图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711181120639.png" alt="image-20220711181120639"></p><p>当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的<code>锁结构</code>，当没有的时候 就会在内存中生成一个<code>锁结构</code>与之关联。比如，事务<code>T1</code>要对这条记录做改动，就需要生成一个<code>锁结构</code>与之关联：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711192633239.png" alt="image-20220711192633239" style="zoom:67%;" /><p>在<code>锁结构</code>里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来：</p><p>*<code>trx信息</code>：代表这个锁结构是哪个事务生成的。<br>*<code>is_waiting</code>：代表当前事务是否在等待。</p><p>在事务<code>T1</code>改动了这条记录后，就生成了一个<code>锁结构</code>与该记录关联，因为之前没有别的事务为这条记录加锁，所以<code>is_waiting</code>属性就是<code>false</code>，我们把这个场景就称值为<code>获取锁成功</code>，或者<code>加锁成功</code>，然后就可以继续执行操作了。</p><p>在事务<code>T1</code>提交之前，另一个事务<code>T2</code>也想对该记录做改动，那么先看看有没有<code>锁结构</code>与这条记录关联，发现有一个<code>锁结构</code>与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的<code>is_waiting</code>属性值为<code>true</code>，表示当前事务需要等待，我们把这个场景就称之为<code>获取锁失败</code>，或者<code>加锁失败</code>，图示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711193732567.png" alt="image-20220711193732567" style="zoom:50%;" /><p>在事务T1提交之后，就会把该事务生成的<code>锁结构释放</code>掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的<code>is_waiting</code>属性设置为<code>false</code>，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。效果就是这样。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711194904328.png" alt="image-20220711194904328" style="zoom:50%;" /><p>小结几种说法：</p><ul><li><p>不加锁</p><p>意思就是不需要在内存中生成对应的<code>锁结构</code>，可以直接执行操作。</p></li><li><p>获取锁成功，或者加锁成功</p><p>意思就是在内存中生成了对应的<code>锁结构</code>，而且锁结构的<code>is_waiting</code>属性为<code>false</code>，也就是事务可以继续执行操作。</p></li><li><p>获取锁失败，或者加锁失败，或者没有获取到锁</p><p>意思就是在内存中生成了对应的<code>锁结构</code>，不过锁结构的<code>is_waiting</code>属性为<code>true</code>，也就是事务 需要等待，不可以继续执行操作。</p></li></ul><h3 id="1-3-读-写或写-读情况">1.3 读-写或写-读情况</h3><p><code>读-写</code>或<code>写-读</code>，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生<code>脏读 、不可重复读 、幻读</code>的问题。</p><p>各个数据库厂商对<code>SQL标准</code>的支持都可能不一样。比如MySQL在<code>REPEATABLE READ</code>隔离级别上就已经解决了<code>幻读</code>问题。</p><h3 id="1-4-并发问题的解决方案">1.4 并发问题的解决方案</h3><p>怎么解决<code>脏读 、不可重复读 、幻读</code>这些问题呢？其实有两种可选的解决方案：</p><ul><li><p>方案一：读操作利用多版本并发控制（<code>MVCC</code>，下章讲解），写操作进行<code>加锁</code>。</p><p>所谓的<code>MVCC</code>，就是生成一个<code>ReadView</code>，通过Readview找到符合条件的记录版本（历史版本由<code>undo日志</code>构建）。查询语句只能<code>读</code>到在生成ReadView之前<code>己提交事务所做的更改</code>，在生成ReadView之前未提交的事务或者之后才开启的事务所做的更改是看不到的。而<code>写操作</code>肯定针对的是<code>最新版本的记录</code>，读记录的历史版本和改动记录的最新版本本身并不冲突，也就是采用MVCC时，<code>读-写</code>操作并不冲突。</p></li></ul><blockquote><p>普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。</p><ul><li>在<code>READ COMMITTED</code>隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一 个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code>，也就是避免了脏读现象；</li><li>在<code>REPEATABLE READ</code>隔离级别下，一个事务在执行过程中只有<code>第一次执行SELECT操作</code>才会生成一个ReadView，之后的SELECT操作都<code>复用</code>这个ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><ul><li><p>方案二：读、写操作都采用<code>加锁</code>的方式。</p><p>如果我们的一些业务场景不允许读取记录的旧版本，而是每次都必须去<code>读取记录的最新版本</code>。比如，在银行存款的事务中，你需要先把账户的余额读出来，然后将其加上本次存款的数额，最后再写到数据库中。在将账户余额读取出来后，就不想让别的事务再访问该余额，直到本次存款事务执行完成，其他事务才可以访问账户的余额。这样在读取记录的时候就需要对其进行<code>加锁</code>操作，这样也就意味着<code>读操作</code>和<code>写操作</code>也像写-写操作那样排队执行。</p></li></ul><p><code>脏读</code>的产生是因为当前事务读取了另一个未提交事务写的一条记录，如果另一个事务在写记录的时候就给这条记录加锁，那么当前事务就无法继续读取该记录了，所以也就不会有脏读问题的产生了。</p><p><code>不可重复读</code>的产生是因为当前事务先读取一条记录，另外一个事务对该记录做了改动之后并提交之后，当前事务再次读取时会获得不同的值，如果在当前事务读取记录时就给该记录加锁，那么另一个事务就无法修改该记录， 自然也不会发生不可重复读了。</p><p><code>幻读</code>问题的产生是因为当前事务读取了一个范围的记录，然后另外的事务向该范围内插入了新记录，当前事务再次读取该范围的记录时发现了新插入的新记录。采用加锁的方式解决幻读问题就有一些麻烦，因为当前事务在第一次读取记录时幻影记录并不存在，所以读取的时候加锁就有点尴尬（因为你并不知道给谁加锁）</p><ul><li><p>小结对比发现：</p><ul><li>采用<code>MVCC</code>方式的话， 读-写操作彼此并不冲突， 性能更高 。</li><li>采用<code>加锁</code>方式的话， 读-写操作彼此需要<code>排队执行</code>，影响性能。</li></ul><p>一般情况下我们当然愿意采用<code>MVCC</code>来解决<code>读-写</code>操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用<code>加锁</code>的方式执行。下面就讲解下MySQL中不同类别的锁。</p></li></ul><hr><h2 id="2-锁的不同角度分类">2. 锁的不同角度分类</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711203519162.png" alt="image-20220711203519162" style="zoom: 67%;" /><hr><h2 id="3-读锁-写锁">3. 读锁/写锁</h2><blockquote><mark class="hl-label green">从数据操作的类型划分：读锁、写锁</mark> </blockquote><p>对于数据库中并发事务的<code>读-读</code>情况并不会引起什么问题。对于<code>写-写</code>、<code>读-写</code>或<code>写-读</code>这些情况可能会引起一些问题，需要使用<code>MVCC</code>或者<code>加锁</code>的方式来解决它们。在使用<code>加锁</code>的方式解决问题时，由于既要允许<code>读-读</code>情况不受影响，又要使<code>写-写</code>、<code>读-写</code>或<code>写-读</code>情况中的操作相互阻塞，所以MySQL实现一个由两种类型的锁组成的锁系统来解决。这两种类型的锁通常被称为<span class='p red'>共享锁 Shared Lock</span>和<span class='p green'>排他锁 Exclusive Lock</span>也叫<span class='p red'>读锁 readlock</span>和<span class='p green'>写锁 write lock</span></p><p>*<code>读锁</code>：也称为<code>共享锁</code>、英文用 S 表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。<br>*<code>写锁</code>：也称为<code>排他锁</code>、英文用 X 表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样 就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</p><span class='p blue'>需要注意的是对于InnoDB引擎来说，读锁和写锁可以加在表上，也可以加在行上。</span><br/><p>举例行级读写锁 ：如果一个事务T1已经获得了某个行r的读锁，那么此时另外的一个事务 T2 是可以去获得这个行r的读锁的，因为读取操作并没有改变行r的数据；但是，如果某个事务 T3 想获得行r的写锁，则它必须等待事务 T1、T2释放掉行r上的读锁才行。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">写锁</th><th style="text-align:center">读锁</th></tr></thead><tbody><tr><td style="text-align:center">写</td><td style="text-align:center">不兼容</td><td style="text-align:center">不兼容</td></tr><tr><td style="text-align:center">读锁</td><td style="text-align:center">不兼容</td><td style="text-align:center">兼容</td></tr></tbody></table><p>总结：这里的兼容是指对同一张表或记录的锁的兼容性情况。</p><hr><mark class="hl-label pink">锁定读</mark> <p>在采用<code>加锁</code>方式解决<code>脏读</code>、<code>不可重复读</code>、<code>幻读</code>这些问题时，读取一条记录时需要获取该记录的<code>S锁</code>，其实是不严谨的，有时候需要在读取记录时就获取记录的<code>X锁</code>，来禁止别的事务读写该记录，为此MySQL提出了两种比较特殊的<code>SELECT</code>语句格式：</p><ul><li>对读取的记录加<code>S锁</code>：</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line">#或</span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> SHARE; #(<span class="number">8.0</span>新增语法)</span><br></pre></td></tr></table></figure><p>在普通的<code>SELECT</code>语句后边加<code>LOCK IN SHARE MODE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加<code>S锁</code>，这样允许别的事务继续获取这些记录的<code>S锁</code>（比方说别的事务也使用 SELECT … LOCK IN SHARE MODE 语句来读取这些记录），但是不能获取这些记录的<code>X锁</code>（比如使用<code>SELECT .... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录）。如果别的事务想要获取这些记录的<code>X锁</code>，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>S锁</code>释放掉。</p><ul><li>对读取的记录加<code>X锁</code>：</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>在普通的<code>SELECT</code>语句后边加<code>FOR UPDATE</code>，如果当前事务执行了该语句，那么它会为读取到的记录加<code>X锁</code>， 这样既不允许别的事务获取这些记录的<code>S锁</code>（比方说别的事务使用<code>SELECT .... LOCK IN SHARE MODE</code>语句来读取这些记录），也不允许获取这些记录的<code>X锁</code>（比如使用<code>SELECT ... FOR UPDATE</code>语句来读取这些记录，或者直接修改这些记录）。如果别的事务想要获取这些记录的<code>S锁</code>或者<code>X锁</code>，那么它们会阻塞，直到当前事务提交之后将这些记录上的<code>X锁</code>释放掉。</p><span class='p red'>MySQL8.0新特性</span><p>在5.7及之前的版本，<code>SELECT ...FOR UPDATE</code>，如果获取不到锁，会一直等待，直到<code>innodb_ lock_wait_timeout</code>超时。在8.0版本中，<code>SELECT ... FOR UPDATE</code>,<code>SELECT ... FOR SHARE</code>添加<code>NOWAIT</code>、<code>SKIP LOCKED</code>语法，跳过锁等待，或者跳过锁定。</p><ul><li>通过添加NOWAIT、SKIP LOCKED语法，能够立即返回。如果查询的行已经加锁：<ul><li>那么NOWAIT会立即报错返回</li><li>而SKIP LOCKED也会立即返回，只是返回的结果中不包含被锁定的行。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># session1:</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">mysgl<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> c1 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>  c1  <span class="operator">|</span>  c2  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span>   <span class="operator">|</span> <span class="number">60530</span><span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span>   <span class="operator">|</span> <span class="number">24678</span><span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># session2:</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> c1 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span> nowait；</span><br><span class="line">ERROR <span class="number">3572</span> (HY000): Statement aborted because lock(s) could <span class="keyword">not</span> be acquired immediately <span class="keyword">and</span> NOWAIT <span class="keyword">is</span> set.</span><br><span class="line">mysgl<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> c1 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">skip</span> locked;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><hr><blockquote><mark class="hl-label pink">写操作</mark> </blockquote><p>平常所用到的写操作无非是<code>DELETE</code>、<code>UPDATE</code>、<code>INSERT</code>这三种：</p><p>-<code>DELETE</code></p><p>对一条记录做DELETE操作的过程其实是先在<code>B+树</code>中定位到这条记录的位置，然后获取这条记录的<code>X锁</code>，再执行<code>delete mark</code>操作。我们也可以把这个定位待删除记录在B+树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</p><p>-<code>UPDATE</code>： 在对一条记录做UPDATE操作时分为三种情况</p><ul><li>情况1：未修改该记录的键值，并且被更新的列占用的存储空间在修改前后未发生变化。则先在<code>B+树</code>中定位到这条记录的位置，然后再获取一下记录的<code>X锁</code>，最后在原记录的位置进行修改操作。我们也可以把这个定位待修改记录在B+ 树中位置的过程看成是一个获取<code>X锁</code>的<code>锁定读</code>。</li><li>情况2：未修改该记录的键值，并且至少有一个被更新的列占用的存储空间在修改前后发生变化。则先在<code>B+树</code>中定位到这条记录的位置，然后获取一下记录的<code>X锁</code>，将该记录彻底删除掉（就是把记录彻底移入垃圾链表），最后再插入一条新记录。这个定位待修改记录在B+ 树中位置的过程看成是一个获取〉 锁的锁定读，新插入的记录由<code>INSERT</code>操作提供的<code>隐式锁</code>进行保护。</li><li>情况3：修改了该记录的健值，则相当于在原记录上做<code>DELETE</code>操作之后再来一次<code>INSERT</code>操作，加锁操作就需要按照<code>DELETE</code>和<code>INSERT</code>的规则进行了。</li></ul><p>-<code>INSERT</code></p><p>一般情况下，新插入一条记录的操作并不加锁，通过一种称之为隐式锁的结构来保护这条新插入的记录在本事务提交前不被别的事务访问。</p><hr><h2 id="4-表级锁-页级锁-行锁">4. 表级锁/页级锁/行锁</h2><blockquote><mark class="hl-label green">从数据操作的粒度划分：表级锁、页级锁、行锁</mark> </blockquote><p>为了尽可能提高数据库的并发度，每次锁定的数据范围越小越好，理论上每次只锁定当前操作的数据的方案会得到最大的并发度，但是管理锁是很<code>耗资源</code>的事情（涉及获取、检查、释放锁等动作）。因此数据库系统需要在<code>高并发响应</code>和<code>系统性能</code>两方面进行平衡，这样就产生了：<code>锁粒度(Lock granularity)</code>的概念。</p><p>对一条记录加锁影响的也只是这条记录而已，我们就说这个锁的粒度比较细；其实一个事务也可以在<code>表级别</code>进行加锁，自然就被称之为<code>表级锁</code>或者<code>表锁</code>，对一个表加锁影响整个表中的记录，我们就说这个锁的粒度比较粗。锁的粒度主要分为表级锁、页级锁和行锁。</p><hr><h3 id="4-1-表锁（Table-Lock）">4.1 表锁（Table Lock）</h3><p>该锁会锁定整张表，它是 MySQL 中最基本的锁策略，<code>并不依赖于存储引擎</code>（不管你是 MySQL 的什么存储引擎， 对于表锁的策略都是一样的），并且表锁是<code>开销最小</code>的策略（因为粒度比较大）。由于表级锁一次会将整个表锁定，所以可以很好的<code>避免死锁</code>问题。当然，锁的粒度大所带来最大的负面影响就是出现锁资源争用的概率也会最高，导致<code>并发率大打折扣</code>。</p><hr><h4 id="4-1-1-表级别的S锁、X锁">4.1.1 表级别的S锁、X锁</h4><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的<code>S锁</code>或者<code>X锁</code>的。在对某个表执行一些诸如<code>ALTER TABLE 、 DROP TABLE</code>这类的 DDL 语句时，其 他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行<code>DDL</code>语句也会 发生阻塞。这个过程其实是通过在 server层使用一种称之为<code>元数据锁</code>（英文名： Metadata Locks ， 简称 MDL ）结构来实现的。</p><p>一般情况下，不会使用InnoDB存储引擎提供的表级别的<code>S锁</code>和<code>X锁</code>。只会在一些特殊情况下，比方说<code>崩溃恢复</code>过程中用到。比如，在系统变量<code>autocommit=0，innodb_table_locks = 1</code>时， 手动 获取 InnoDB存储引擎提供的表t 的<code>S锁</code>或者<code>X锁</code>可以这么写：</p><p>*<code>LOCK TABLES t READ</code>：InnoDB存储引擎会对表 t 加表级别的<code>S锁</code>。</p><p>*<code>LOCK TABLES t WRITE</code>：InnoDB存储引擎会对表 t 加表级别的<code>X锁</code>。</p><p>不过尽量避免在使用InnoDB存储引擎的表上使用<code>LOCK TABLES</code>这样的手动锁表语句，它们并不会提供什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的<code>行锁</code>，关于 InnoDB表级别的<code>S锁</code>和<code>X锁</code>大家了解一下就可以了。</p><mark class="hl-label blue">举例：下面我们讲解MyISAM引擎下的表锁</mark>  <div class="tabs" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-1"><i class="fas fa-atom"></i>创建表并添加数据</button></li><li class="tab"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-2"><i class="far fa-sun"></i>查看表上加过的锁</button></li><li class="tab"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-3"><i class="fas fa-wind"></i>手动增加表锁命令</button></li><li class="tab"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-4"><i class="fas fa-fire-alt"></i>释放表锁</button></li><li class="tab"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-5"><i class="fas fa-heartbeat"></i>加读锁</button></li><li class="tab"><button type="button" data-href="#0f4dc028-1f6c-4356-9c0f-108a3a87687e-6"><i class="fas fa-cookie-bite"></i>加写锁</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mylock(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)ENGINE MYISAM;</span><br><span class="line"></span><br><span class="line"># 插入一条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mylock(NAME) <span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 查询表中所有数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mylock;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> Name <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> a    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES; # 主要关注In_use字段的值</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES <span class="keyword">where</span> In_use <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220342251.png" alt="image-20220711220342251" style="zoom: 50%;" /><p>或者</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220418859.png" alt="image-20220711220418859"  /><p>上面的结果表明，当前数据库中没有被锁定的表</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-3"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES t READ; # 存储引擎会对表t加表级别的共享锁。共享锁也叫读锁或S锁（Share的缩写）</span><br><span class="line">LOCK TABLES t WRITE; # 存储引擎会对表t加表级别的排他锁。排他锁也叫独占锁、写锁或X锁（exclusive的缩写）</span><br></pre></td></tr></table></figure><p>比如：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220442269.png" alt="image-20220711220442269"  /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-4"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNLOCK TABLES; # 使用此命令解锁当前加锁的表</span><br></pre></td></tr></table></figure><p>比如：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220502141.png" alt="image-20220711220502141"  /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-5"><p>我们为mylock表加read锁（读阻塞写），观察阻塞的情况，流程如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220553225.png" alt="image-20220711220553225" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220616537.png" alt="image-20220711220616537" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f4dc028-1f6c-4356-9c0f-108a3a87687e-6"><p>为mylock表加write锁，观察阻塞的情况，流程如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220711630.png" alt="image-20220711220711630" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220711220730112.png" alt="image-20220711220730112" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <mark class="hl-label blue">总结</mark> <p>MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。InnoDB存储引擎是不会为这个表添加表级别的读锁和写锁的。</p><p>MySQL的表级锁有两种模式：（以MyISAM表进行操作的演示）</p><ul><li><p>表共享读锁（Table Read Lock）</p></li><li><p>表独占写锁（Table Write Lock）</p><table><thead><tr><th style="text-align:center">锁类型</th><th style="text-align:center">自己可读</th><th style="text-align:center">自己可写</th><th style="text-align:center">自己可操作其他表</th><th style="text-align:center">他人可读</th><th style="text-align:center">他人可写</th></tr></thead><tbody><tr><td style="text-align:center">读锁</td><td style="text-align:center">是</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">否，等</td></tr><tr><td style="text-align:center">写锁</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">否</td><td style="text-align:center">否，等</td><td style="text-align:center">否，等</td></tr></tbody></table></li></ul><hr><h4 id="4-1-2-意向锁-intention-lock">4.1.2 意向锁(intention lock)</h4><p>InnoDB 支持<code>多粒度锁（multiple granularity locking）</code>，它允许<code>行级锁</code>与<code>表级锁</code>共存，而<code>意向锁</code>就是其中的一种<code>表锁</code>。</p><ol><li>意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁和行锁）的锁并存。</li><li>意向锁是一种<code>不与行级锁冲突表级锁</code>，这一点非常重要。</li><li>表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</li></ol><p>意向锁分为两种：</p><ul><li>意向共享锁（intention shared lock, IS）：事务有意向对表中的某些行加共享锁（S锁）</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><ul><li>意向排他锁（intention exclusive lock, IX）：事务有意向对表中的某些行加排他锁（X锁）</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>即：意向锁是由存储引擎<code>自己维护的</code>，用户无法手动操作意向锁，在为数据行加共享 / 排他锁之前， InooDB 会先获取该数据行<code>所在数据表的对应意向锁</code>。</p><mark class="hl-label green">意向锁要解决的问题</mark> <p>现在有两个事务，分别是T1和T2，其中T2试图在该表级别上应用共享或排它锁，如果没有意向锁存在，那么T2就需要去检查各个页或行是否存在锁；如果存在意向锁，那么此时就会受到由T1控制的<code>表级别意向锁的阻塞</code>。T2在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。简单来说就是给更大一级别的空间示意里面是否已经上过锁。</p><p>在数据表的场景中，<span class='p red'>如果我们给某一行数据加上了排它锁，数据库会自动给更大一级的空间，比如数据页或数据表加上意向锁，告诉其他人这个数据页或数据表己经有人上过排它锁了</span>，这样当其他人想要获取数据表排它锁的时候，只需要了解是否有人已经获取了这个数据表的意向排他锁即可。</p><ul><li><p>如果事务想要获得数据表中某些记录的共享锁，就需要在数据表上添加意向共享锁。</p></li><li><p>如果事务想要获得数据表中某些记录的排他锁，就需要在数据表上添加意向排他锁。</p></li></ul><p>这时，意向锁会告诉其他事务已经有人锁定了表中的某些记录。</p><blockquote><p>举例</p></blockquote><div class="tabs" id="bd12d2a2-cd7b-45bd-9379-5b0ad79a5758"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-4"><i class="fas fa-tree"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-1"><p>创建表teacher,插入6条数据，事务的隔离级别默认为<code>Repeatable-Read</code>，如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>`teacher`(</span><br><span class="line">`id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name`<span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>`teacher`<span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;zhaoliu&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;songhongkang&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;leifengyang&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@transaction</span>_isolation <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-2"><p>假设事务A获取了某一行的排他锁，并未提交，语句如下所示:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>事务B想要获取teacher表的表读锁，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line">LOCK TABLES teacher READ;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-3"><p>因为共享锁与排他锁互斥，所以事务B 在试图对 teacher 表加共享锁的时候，必须保证两个条件。</p><p>(1) 当前没有其他事务持有 teacher 表的排他锁</p><p>(2) 当前没有其他事务持有 teacher 表中任意一行的排他锁。</p><p>为了检测是否满足第二个条件，事务B必须在确保 teacher 表不存在任何排他锁的前提下，去检测表中的每一行是否存在排他锁。很明显这是一个效率很差的做法，但是有了意向锁之后，情况就不一样了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bd12d2a2-cd7b-45bd-9379-5b0ad79a5758-4"><p>意向锁是怎么解决这个问题的呢？首先，我们需要知道意向锁之间的兼容互斥性，如下所示。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220712124209006.png" alt="image-20220712124209006"  /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>此时teacher表存在两把锁：teacher表上的意向排他锁与id未6的数据行上的排他锁。事务B想要获取teacher表的共享锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line">LOCK TABLES teacher READ;</span><br></pre></td></tr></table></figure><p>此时事务B检测事务A持有teacher表的意向排他锁，就可以得知事务A必须持有该表中某些数据行的排他锁，那么事务B对teacher表的加锁请求就会被排斥（阻塞），而无需去检测表中的每一行数据是否存在排他锁。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">意向锁的并发性</mark> <p>意向锁不会与行级的共享 / 排他锁互斥！正因为如此，意向锁并不会影响到多个事务对不同数据行加排他锁时的并发性。（不然我们直接用普通的表锁就行了）</p><p>我们扩展一下上面 teacher表的例子来概括一下意向锁的作用（一条数据从被锁定到被释放的过程中，可 能存在多种不同锁，但是这里我们只着重表现意向锁）。</p><p>事务A先获得了某一行的排他锁，并未提交：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>事务A获取了teacher表上的意向排他锁。事务A获取了id为6的数据行上的排他锁。之后事务B想要获取teacher表上的共享锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line">LOCK TABLES teacher READ;</span><br></pre></td></tr></table></figure><p>事务B检测到事务A持有teacher表的意向排他锁。事务B对teacher表的加锁请求被阻塞（排斥）。最后事务C也想获取teacher表中某一行的排他锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>事务C申请teacher表的意向排他锁。事务C检测到事务A持有teacher表的意向排他锁。因为意向锁之间并不互斥，所以事务C获取到了teacher表的意向排他锁。因为id为5的数据行上不存在任何排他锁，最终事务C成功获取到了该数据行上的排他锁。</p><p>从上面的案例可以得到如下结论：</p><ol><li>InnoDB 支持<code>多粒度锁</code>，特定场景下，行级锁可以与表级锁共存。</li><li>意向锁之间互不排斥，但除了 IS 与 S 兼容外，<code>意向锁会与 共享锁 / 排他锁 互斥</code>。</li><li>IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。</li><li>意向锁在保证并发性的前提下，实现了<code>行锁和表锁共存</code>且<code>满足事务隔离性</code>的要求。</li></ol><hr><h4 id="4-1-3-自增锁-AUTO-INC锁">4.1.3 自增锁(AUTO-INC锁)</h4><p>在使用MySQL过程中，我们可以为表的某个列添加<code>AUTO_INCREMENT</code>属性。举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>`teacher`(</span><br><span class="line">`id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name`<span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值，SQL语句修改 如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>`teacher`(name) <span class="keyword">VALUES</span> (<span class="string">&#x27;zhangsan&#x27;</span>), (<span class="string">&#x27;lisi&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上边的插入语句并没有为id列显式赋值，所以系统会自动为它赋上递增的值，结果如下所示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> zhangsan <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> lisi     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>现在我们看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是 “<code>Simple inserts</code>”，“<code>Bulk inserts</code>”和“<code>Mixed-mode inserts</code>”。</p><div class="tabs" id="4434cedb-9dd6-40ab-a889-79476e2dbea7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#4434cedb-9dd6-40ab-a889-79476e2dbea7-1"><i class="fas fa-atom"></i>1.Simple inserts(简单插入)</button></li><li class="tab"><button type="button" data-href="#4434cedb-9dd6-40ab-a889-79476e2dbea7-2"><i class="far fa-sun"></i>2.Bulk inserts(批量插入)</button></li><li class="tab"><button type="button" data-href="#4434cedb-9dd6-40ab-a889-79476e2dbea7-3"><i class="fas fa-wind"></i>3.Mixed-mode inserts(混合模式插入)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="4434cedb-9dd6-40ab-a889-79476e2dbea7-1"><p>可以<code>预先确定要插入的行数</code>（当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT...VALUES()</code>和<code>REPLACE</code>语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行 数。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4434cedb-9dd6-40ab-a889-79476e2dbea7-2"><p><code>事先不知道要插入的行数</code>（和所需自动递增值的数量）的语句。比如<code>INSERT ... SELECT</code>，<code>REPLACE ... SELECT</code>和<code>LOAD DATA</code>语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4434cedb-9dd6-40ab-a889-79476e2dbea7-3"><p>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如<code>INSERT INTO teacher (id,name) VALUES (1,'a'), (NULL,'b'), (5,'c'), (NULL,'d');</code>只是指定了部分id的值。另一种类型的“混合模式插入”是<code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>对于上面数据插入的案例，MysQL中采用了<code>自增锁</code>的方式来实现，<span class='p red'>AUTO-INC锁是当向使用含有AUTO_INCREMENT 列的表中插入数据时需要获取的一种特殊的表级锁</span>，在执行插入语句时就在表级别加一个AUTO-INC锁，然后为每条待插入记录的AUTO_INCREMENT修饰的列分配递增的值，在该语句执行结束后，再把AUTO-INC锁释放掉。<span class='p red'>一个事务在持有AUTO-INC锁的过程中，其他事务的插入语句都要被阻塞</span>，可以保证一个语句中分配的递增值是连续的。也正因为此，其并发性显然并不高，当我们向一个有AUTO_INCREMENT关键字的主键插入值的时候，每条语句都要对这个表锁进行竞争，这样的并发潜力其实是很低下的，所以innodb通过<code>innodb_autoinc-lock-mode</code>的不同取值来提供不同的锁定机制，来显著提高SQL语句的可伸缩性和性能。</p><p>innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：</p><div class="tabs" id="651b2759-d9b3-4f0d-a0dd-ea3da71236e5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#651b2759-d9b3-4f0d-a0dd-ea3da71236e5-1"><i class="fas fa-award"></i>0(“传统”锁定模式)</button></li><li class="tab"><button type="button" data-href="#651b2759-d9b3-4f0d-a0dd-ea3da71236e5-2"><i class="fas fa-baseball-ball"></i>1(“连续”锁定模式)</button></li><li class="tab"><button type="button" data-href="#651b2759-d9b3-4f0d-a0dd-ea3da71236e5-3"><i class="fas fa-bone"></i>2(“交错”锁定模式)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="651b2759-d9b3-4f0d-a0dd-ea3da71236e5-1"><p>在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有 AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个 表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证 master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的 时候，对于AUTO-INC锁的争夺会<code>限制并发</code>能力。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="651b2759-d9b3-4f0d-a0dd-ea3da71236e5-2"><p>在 MySQL 8.0 之前，连续锁定模式是<code>默认</code>的。</p><p>在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT … SELECT，REPLACE … SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。</p><p>对于“Simple inserts”（要插入的行数事先已知），则通过在<code>mutex（轻量锁）</code>的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="651b2759-d9b3-4f0d-a0dd-ea3da71236e5-3"><p>从 MySQL 8.0 开始，交错锁模式是<code>默认</code>设置。</p><p>在此锁定模式下，自动递增值<code>保证</code>在所有并发执行的所有类型的insert语句中是<code>唯一</code>且<code>单调递增</code>的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），为任何给定语句插入的行生成的值可能不是连续的。</p><p>如果执行的语句是“simple inserts&quot;，其中要插入的行数已提前知道，除了&quot;Mixed-mode inserts&quot;之外，为单个语句生成的数字不会有间隙。然后，当执行&quot;bulk inserts&quot;时，在由任何给定语句分配的自动递增值中可能存在间隙。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h4 id="4-1-4-元数据锁-MDL锁">4.1.4 元数据锁(MDL锁)</h4><p>MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个<code>表结构做变更</code>，增加了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</p><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删查改。读写锁之间、写锁之间都是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。<code>不需要显式使用</code>，在访问一个表的时候会被自动加上。</p><p>举例：元数据锁的使用场景模拟</p><p>会话A：从表中查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">BEGIN</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="type">int</span> <span class="keyword">set</span> (<span class="number">7.46</span> sec)</span><br></pre></td></tr></table></figure><p>会话B：修改表结构，增加新列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">BEGIN</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>会话C：查看当前MySQL的进程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> processlist;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713142808924.png" alt="image-20220713142808924"></p><p>通过会话C可以看出会话B被阻塞，这是由于会话A拿到了teacher表的元数据读锁，会话B想申请teacher表的元数据写锁，由于读写锁互斥，会话B需要等待会话A释放元数据锁才能执行。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713143156759.png" alt="image-20220713143156759" /><hr><h3 id="4-2-行锁（Row-Lock）">4.2 行锁（Row Lock）</h3><p>行锁（Row Lock）也称为记录锁，顾名思义，就是锁住某一行（某条记录 row）。需要注意的是，MySQL服务器层并没有实现行锁机制，<span class='p green'>行级锁只在存储引擎层实现</span>。</p><p>优点：锁定力度小，发生<code>锁冲突概率低</code>，可以实现的<code>并发度高</code>。</p><p>缺点：对于<code>锁的开销比较大</code>，加锁会比较慢，容易出现<code>死锁</code>情况。</p><p>InnoDB与MyISAM的最大不同有两点：一是支持事务（TRANSACTION）；二是采用了行级锁。</p><p>首先我们创建表如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    class <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) Engine<span class="operator">=</span>InnoDB CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>向这个表里插入几条记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;一班&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;一班&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;二班&#x27;</span>),</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;二班&#x27;</span>),</span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;钱七&#x27;</span>, <span class="string">&#x27;三班&#x27;</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713161549241.png" alt="image-20220713161549241"  /><p>student表中的聚簇索引的简图如下所示。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713163353648.png" alt="image-20220713163353648"></p><p>这里把B+树的索引结构做了超级简化，只把索引中的记录给拿了出来，下面看看都有哪些常用的行锁类型。</p><hr><h4 id="4-2-1-记录锁">4.2.1 记录锁</h4><p>记录锁也就是仅仅把一条记录锁，官方的类型名称为：<code>LOCK_REC_NOT_GAP</code>。比如我们把id值为8的那条记录加一个记录锁的示意图如果所示。仅仅是锁住了id值为8的记录，对周围的数据没有影响。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713164811567.png" alt="image-20220713164811567" style="zoom:50%;" /><p>举例如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713164948405.png" alt="image-20220713164948405" style="zoom: 50%;" /><p>记录锁是有S锁和X锁之分的，称之为<code>S型记录锁</code>和<code>X型记录锁</code>。</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><hr><h4 id="4-2-2-间隙锁">4.2.2 间隙锁</h4><p><code>MySQL</code>在<code>REPEATABLE READ</code>隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用<code>MVCC</code>方 案解决，也可以采用<code>加锁</code>方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些<code>幻影记录</code>加上<code>记录锁</code>。InnoDB提出了一种称之为<code>Gap Locks</code>的锁，官方的类型名称为：<code>LOCK_GAP</code>，我们可以简称为<code>gap锁</code>。比如，把id值为8的那条记录加一个gap锁的示意图如下。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713171650888.png" alt="image-20220713171650888" style="zoom:50%;" /><p>图中id值为8的记录加了gap锁，意味着<code>不允许别的事务在id值为8的记录前边的间隙插入新记录</code>，其实就是id列的值(3, 8)这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新记录，<span class='p green'>它定位到该条新记录的下一条记录的id值为8，而这条记录上又有一个gap锁，所以就会阻塞插入操作</span> ，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。<span class='p red'>gap锁的提出仅仅是为了防止插入幻影记录而提出的。</span>虽然共享gap锁和独占gap锁这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p><p>举例：</p><table><thead><tr><th style="text-align:left">Session1</th><th>Session2</th></tr></thead><tbody><tr><td style="text-align:left">select * from student where id=5 lock in share mode;</td><td></td></tr><tr><td style="text-align:left"></td><td>select * from student where id=5 for update;</td></tr></tbody></table><p>这里session2并不会被堵住。因为表里并没有id=5这条记录，因此session1加的是间隙锁(3,8)。而session2也是在这个间隙加的间隙锁。它们有共同的目标，即：保护这个间隙锁，不允许插入值。但，它们之间是不冲突的。<span class='p red'>(PS:若Session1和Session2都想在这个间隙插入数据，那就会发生死锁，都在等待对方的间隙锁释放)</span></p><p>注意，给一条记录加了<code>gap锁</code>只是<code>不允许</code>其他事务往这条记录前边的间隙<code>插入新记录</code>，那对于最后一条记录之后的间隙，也就是student 表中id值为<code>20</code>的记录之后的间隙该咋办呢？也就是说给哪条记录加<code>gap锁</code>才能阻止其他事务插入<code>id</code>值在<code>(20，+∞）</code>这个区间的新记录呢？这时候我们在讲数据页时介绍的两条伪记录派上用场了：</p><p>*<code>Infimum</code>记录，表示该页面中最小的记录。<br>*<code>Supremun</code>记录，表示该页面中最大的记录。</p><p>为了实现阻止其他事务插入id值再(20,正无穷)这个区间的新纪录，我们可以给索引中的最后一条记录，也就是id值为20的那条记录所在页面的Supremun记录加 上一个gap锁，如图所示。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713174108634.png" alt="image-20220713174108634" style="zoom:50%;" /><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">20</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>检测：</p><div class="fj-gallery"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230414220905714.png" alt="image-20230414220905714"></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230414220939203.png" alt="image-20230414220939203"></p>          </div><p>这样就可以阻止其他事务插入id值在(20，+∞)这个区间的新记录。</p><p>间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。下面的例子会产生<code>死锁</code></p><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>begin;<br/>select * from student where id = 5 for update;</td><td>begin;<br/>select * from student where id 5 for update;</td></tr><tr><td></td><td>INSERT INTO student VALUES (5, ‘宋红康’，'‘二班’);阻塞</td></tr><tr><td>INSERT INTO student VALUES (5,‘宋红康’，‘二班’）; <br/> (ERROR 1213 (40001): Deadlock found when trying to get lock;try restarting transaction)</td><td></td></tr></tbody></table><p>(1) session 1执行 select… for update 语句，由于id=5这一行并不存在，因此会加上间隙锁(3, 8)；</p><p>(2) session 2 执行 select… for update 语句，同样会加上间隙锁（3，8)，间隙锁之间不会冲突，因此这个语句可以执行成功</p><p>(3) session 2 试图插入一行(5,‘宋红康’，‘二班’），被 session 1 的间隙锁挡住了，只好进入等待；</p><p>(4) session 1 试图插入一行(5,‘宋红康’，‘二班’），被 session 2 的间隙锁挡住了。至此，两个 session 进入互相等待状态，形成死锁。当然，InnoDB 的死锁检测马上就发现了这对死锁关系，让 session 1 的 insert 语句报错返回。</p><hr><h4 id="4-2-3-临键锁">4.2.3 临键锁</h4><p>有时候我们既想<code>锁住某条记录</code>，又想阻止其他事务在该记录前边的间隙插入新记录 ，所以InnoDB就提出了一种称之为 Next-Key Locks 的锁，官方的类型名称为： LOCK_ORDINARY ，我们也可以简称为 next-key锁 。Next-Key Locks是在存储引擎 innodb 、事务级别在 可重复读 的情况下使用的数据库锁， <span class='p green'>innodb默认的锁就是Next-Key locks。</span>比如，我们把id值为8的那条记录加一个next-key锁的示意图如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713192549340.png" alt="image-20220713192549340" style="zoom:50%;" /><p><code>next-key锁</code>的本质就是一个<code>记录锁</code>和一个<code>gap锁</code>的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的<code>间隙</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">8</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="4-2-4-插入意向锁">4.2.4 插入意向锁</h4><p>我们说一个事务在<code>插入</code>一条记录时需要判断一下插入位置是不是被别的事务加了<code>gap锁</code>(<code>next-key锁</code>也包含<code>gap锁</code>），如果有的话，插入操作需要等待，直到拥有 gap锁的那个事务提交。但是<span class='p red'>InnoDB规定事务在等待的时候也需要在内存中生成一个锁结构</span>，表明有事务想在某个<code>间隙</code>中<code>插入</code>新记录，但是现在在等待。InnoDB就把这种类型的锁命名为<code>Insert Intention Locks</code>，官方的类型名称为：<code>LOCK_INSERT_INTENTION</code>，我们称为<code>插入意向锁</code>。插入意向锁是一种<code>Gap锁</code>，不是意向锁，在insert操作时产生。</p><p>插入意向锁是在插入一条记录行前，由<code>INSERT 操作产生的一种间隙锁</code>。该锁用以表示插入意向，当多个事务在同一区间（gap)插入位置不同的多条数据时，事务之间不需要互相等待。假设存在两条值分别为4和7的记录，两个不同的事务分别试图插入值为5和6的两条记录，每个事务在获取插入行上独占的（排他）锁前，都会获取（4，7）之间的间隙锁，但是因为数据行之间并<code>不冲突</code>，所以两个事务之间并不会产生冲突（阻塞等待）， 总结来说，插入意向锁的特性可以分成两部分：</p><p>(1）插入意向锁是一种<code>特殊的间隙锁</code>—间隙锁可以锁定开区间内的部分记录。</p><p>(2) 插入意向锁之间<code>互不排斥</code>，所以即使多个事务在同一区间插入多条记录，只要记录本身（主键、唯一索引）不冲突，那么事务之问就不会出现冲突等待。</p><p>注意，虽然插入意向锁中含有意向锁三个字，但是它并不属于意向锁而属于间隙锁，因为意向锁是表锁而插入意向锁是<code>行锁</code>。</p><div class="fj-gallery"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713203532124.png" alt="image-20220713203532124"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713203619704.png" alt="image-20220713203619704" />          </div><hr><h3 id="4-3-页锁（Page-Lock）">4.3 页锁（Page Lock）</h3><p>页锁就是在<code>页的粒度</code>上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我 们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。<span class='p green'>页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</span></p><p>每个层级的锁数量是有限制的，因为锁会占用内存空间，<code>锁空间的大小是有限的</code>。当某个层级的锁数量 超过了这个层级的阈值时，就会进行<code>锁升级</code>。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如 InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。</p><hr><h2 id="5-乐观锁-悲观锁">5. 乐观锁/悲观锁</h2><mark class="hl-label green">从对待锁的态度划分:乐观锁、悲观锁</mark> <p>从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待<code>数据并发的思维方式</code>。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的<code>设计思想</code>。</p><h3 id="5-1-悲观锁-Pessimistic-Locking">5.1 悲观锁(Pessimistic Locking)</h3><p>悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。</p><p>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会<code>阻塞</code>直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞， 用完后再把资源转让给其它线程）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中<code>synchronized</code>和<code>ReentrantLock</code>等独占锁就是悲观锁思想的实现。</p><p><strong>秒杀案例1：</strong></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713204544767.png" alt="image-20220713204544767"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713205010502.png" alt="image-20220713205010502"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713205135694.png" alt="image-20220713205135694"  /><hr><h3 id="5-2-乐观锁-Optimistic-Locking">5.2 乐观锁(Optimistic Locking)</h3><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是<span class='p green'>不采用数据库自身的锁机制</span>，而是通过程序来实现。在程序上，我们可以采用<code>版本号机制</code>或者<code>CAS机制</code>实现。<span class='p green'>乐观锁适用于多读的应用类型， 这样可以提高吞吐量</span>。在Java中<code>java.util.concurrent.atomic</code>包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。</p><mark class="hl-label pink">1.乐观锁的版本号机制</mark> <p>在表中设计一个<code>版本字段 version</code>，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行<code>UPDATE ... SET version=version+1 WHERE version=version</code>。此时 如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p>这种方式类似我们熟悉的SVN、CVS版本管理系统，当我们修改了代码进行提交时，首先会检查当前版本号与服务器上的版本号是否一致，如果一致就可以直接提交，如果不一致就需要更新服务器上的最新代码，然后再进行提交。</p><mark class="hl-label pink">2.乐观锁的时间戳机制</mark> <p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行 比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或者时间戳），从而证明当前拿到的数据是否最新。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713210951100.png" alt="image-20220713210951100"  /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713211139670.png" alt="image-20220713211139670"  /><hr><h3 id="5-3-两种锁的适用场景">5.3 两种锁的适用场景</h3><p>从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：</p><p>1.<code>乐观锁</code>适合<code>读操作多</code>的场景，相对来说写的操作比较少。它的优点在于<code>程序实现</code>，<code>不存在死锁</code>问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。<br>2.<code>悲观锁</code>适合<code>写操作多</code>的场景，因为写的操作具有<code>排它性</code>。采用悲观锁的方式，可以在数据库层 面阻止其他事务对该数据的操作权限，防止<code>读 - 写</code>和<code>写 - 写</code>的冲突。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713211417909.png" alt="image-20220713211417909" /><hr><h2 id="6-显式锁-隐式锁">6. 显式锁/隐式锁</h2><mark class="hl-label green">按加锁的方式划分：显式锁、隐式锁</mark> <h3 id="6-1-隐式锁">6.1 隐式锁</h3><p>一个事务在执行<code>INSERT</code>操作时，如果即将插入的<code>间隙</code>已经被其他事务加了<code>gap锁</code>，那么本次<code>INSERT</code>操作会阻塞，并且当前事务会在该间隙上加一个<code>插入意向锁</code>，否则一般情况下<code>INSERT</code>操作是不加锁的。那如果一个事务首先插入了一条记录（此时并没有在内存生产与该记录关联的锁结构），然后另一个事务：</p><ul><li><p>立即使用<code>SELECT ... LOCK IN SHARE MODE</code>语句读取这条记录，也就是要获取这条记录的S锁，或者使用<code>SELECT ... FOR UPDATE</code>语句读取这条记录，也就是要获取这条记录的<code>X锁</code>，怎么办？</p><p>如果允许这种情况的发生，那么可能产生脏读问题。</p></li><li><p>立即修改这条记录，也就是要获取这条记录的x锁，怎么办？</p><p>如果允许这种情况的发生，那么可能产生脏写问题。</p></li></ul><p>这时候我们前边提过的<code>事务id</code>又要起作用了。我们把聚簇索引和二级索引中的记录分开看一下：</p><ul><li><strong>情景一</strong>：对于聚簇索引记录来说，有一个<code>trx_id</code>隐藏列，该隐藏列记录着最后改动该记录的<code>事务 id</code>。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 trx_id 隐藏列代表的的就是 当前事务的 事务id ，如果其他事务此时想对该记录添加 S锁 或者 X锁 时，首先会看一下该记录的 trx_id 隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个 X 锁 （也就是为当前事务创建一个锁结构， is_waiting 属性是 false ），然后自己进入等待状态 （也就是为自己也创建一个锁结构， is_waiting 属性是 true ）。</li><li><strong>情景二</strong>：对于二级索引记录来说，本身并没有 trx_id 隐藏列，但是在二级索引页面的 Page Header 部分有一个<code>PAGE_MAX_TRX_ID</code>属性，该属性代表对该页面做改动的最大的<code>事务id</code>，如 果 PAGE_MAX_TRX_ID 属性值小于当前最小的活跃 事务id ，那么说明对该页面做修改的事务都已 经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记 录，然后再重复 情景一 的做法。</li></ul><p>即：一个事务对新插入的记录可以不显式的加锁（生成一个锁结构），但是由于<code>事务id</code>的存在，相当于加了一个<code>隐式锁</code>。别的事务在对这条记录加<code>S锁</code>或者<code>X锁</code>时，由于<code>隐式锁</code>的存在，会先帮助当前事务生成一个锁结构， 然后自己再生成一个锁结构后进入等待状态。隐式锁是一种<code>延迟加锁</code>的机制，从而来减少加锁的数量。</p><p>隐式锁在实际内存对象中并不含有这个锁信息。只有当产生锁等待时，隐式锁转化为显式锁。</p><p>InnoDB 的 insert操作，对插入的记录不加锁，但是此时如果另一个线程进行当前读，类似以下的用例，session 2 会锁等待 session 1， 那么这是如何实现的呢？</p><p><strong>session 1:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">34</span>,&quot;周八&quot;,&quot;二班&quot;);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>session 2:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student lock <span class="keyword">in</span> share mode; #执行完，当前事务被阻塞</span><br></pre></td></tr></table></figure><p>执行下述语句，输出结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.data_lock_waits\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">              ENGINE: INNODB</span><br><span class="line">   REQUESTING_ENGINE_LOCK_ID: <span class="number">140562531358232</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">9</span>:<span class="number">140562535668584</span></span><br><span class="line">REQUESTING_ENGINE_TRANSACTION_ID: <span class="number">422037508068888</span></span><br><span class="line">      REQUESTING_THREAD_ID: <span class="number">64</span></span><br><span class="line">       REQUESTING_EVENT_ID: <span class="number">6</span></span><br><span class="line">REQUESTING_OBJECT_INSTANCE_BEGIN: <span class="number">140562535668584</span></span><br><span class="line">     BLOCKING_ENGINE_LOCK_ID: <span class="number">140562531351768</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">9</span>:<span class="number">140562535619104</span></span><br><span class="line">  BLOCKING_ENGINE_TRANSACTION_ID: <span class="number">15902</span></span><br><span class="line">        BLOCKING_THREAD_ID: <span class="number">64</span></span><br><span class="line">         BLOCKING_EVENT_ID: <span class="number">6</span></span><br><span class="line">  BLOCKING_OBJECT_INSTANCE_BEGIN: <span class="number">140562535619104</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>隐式锁的逻辑过程如下：</p><p>A. InnoDB的每条记录中都一个隐含的trx_id字段，这个字段存在于聚簇索引的B+Tree中。</p><p>B. 在操作一条记录前，首先根据记录中的trx_id检查该事务是否是活动的事务(未提交或回滚)。如果是活动的事务，首先将<code>隐式锁</code>转换为<code>显式锁</code>(就是为该事务添加一个锁)。</p><p>C. 检查是否有锁冲突，如果有冲突，创建锁，并设置为waiting状态。如果没有冲突不加锁，跳到E。</p><p>D. 等待加锁成功，被唤醒，或者超时。</p><p>E. 写数据，并将自己的trx_id写入trx_id字段。</p><hr><h3 id="6-2-显式锁">6.2 显式锁</h3><p>通过特定的语句进行加锁，我们一般称之为显示加锁，例如：</p><p>显示加共享锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> .... lock <span class="keyword">in</span> share mode</span><br></pre></td></tr></table></figure><p>显示加排它锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> .... <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-其它锁之：全局锁">7. 其它锁之：全局锁</h2><p>全局锁就是对<code>整个数据库实例</code>加锁。当你需要让整个库处于<code>只读状态</code>的时候，可以使用这个命令，之后 其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结 构等）和更新类事务的提交语句。全局锁的典型使用<code>场景</code>是：做<code>全库逻辑备份</code>。</p><p>全局锁的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flush tables <span class="keyword">with</span> read lock</span><br></pre></td></tr></table></figure><hr><h2 id="8-其它锁之：死锁">8. 其它锁之：死锁</h2><h3 id="8-1-概念">8.1 概念</h3><p>两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。</p><p><strong>举例1：</strong></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713220714098.png" alt="image-20220713220714098"></p><p><strong>举例2：</strong></p><p>用户A给用户B转账100，再次同时，用户B也给用户A转账100。这个过程，可能导致死锁。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713220936236.png" alt="image-20220713220936236" style="float:left;" /><h3 id="8-2-产生死锁的必要条件">8.2 产生死锁的必要条件</h3><ol><li>两个或者两个以上事务</li><li>每个事务都已经持有锁并且申请新的锁</li><li>锁资源同时只能被同一个事务持有或者不兼容</li><li>事务之间因为持有锁和申请锁导致彼此循环等待</li></ol><blockquote><p>死锁的关键在于：两个（或以上）的Session加锁的顺序不一致。</p></blockquote><h3 id="8-3-如何处理死锁">8.3 如何处理死锁</h3><p>**方式1：**等待，直到超时（innodb_lock_wait_timeout=50s)</p><p>即当两个事务互相等待时，当—个事务等待时间超过设置的國值时，就将其回滚，另外事务继续进行。这种方法简单有效，在innodb中，参数<code>innodb_lock_wait_timeout</code>用来设置超时时间。</p><p>缺点：对于在线服务来说，这个等待时间往往是无法接受的。</p><p>那将此值修改短一些，比如1s，0.1s是否合适？不合适，容易误伤到普通的锁等待。</p><p>**方式2：**使用死锁检测处理死锁程序</p><p>方式1检测死锁太过被动，innodb还提供了<code>wait-for graph算法</code>来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。</p><p>这是一种较为<code>主动的死锁检测机制</code>，要求数据库保存<code>锁的信息链表</code>和<code>事务等待链表</code>两部分信息。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713221758941.png" alt="image-20220713221758941" style="zoom:67%;" /><p>基于这两个信息，可以绘制wait-for graph（等待图）</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220713221830455.png" alt="image-20220713221830455" style="zoom:67%;" /><blockquote><p>死锁检测的原理是构建一个以事务为顶点，锁为边的有向图，判断有向图是否存在环，存在既有死锁。</p></blockquote><p>一旦检测到回路、有死锁，这时候InnoDB存储引擎会选择<code>回滚undo量最小的事务</code>，让其他事务继续执行（<code>innodb_deadlock_detect=on</code>表示开启这个逻辑）。</p><p>缺点：每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是O(n)。如果100个并发线程同时更新同一行，意味着要检测100*100=1万次，1万个线程就会有1千万次检测。</p><p><strong>如何解决？</strong></p><ul><li>方式1：关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。</li><li>方式2：控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作。</li></ul><p><strong>进一步的思路：</strong></p><p>可以考虑通过将一行改成逻辑上的多行来减少<code>锁冲突</code>。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。</p><hr><h3 id="8-4-如何避免死锁">8.4 如何避免死锁</h3><ul><li><p>合理设计索引，使业务 SQL 尽可能通过索引定位更少的行，减少锁竞争。</p></li><li><p>调整业务逻辑 SQL执行顺序，避免 update/delete 长时间持有锁的SQL 在事务前面。</p></li><li><p>避免大事务，尽量将大事务拆成多个小事务来处理，小事务缩短锁定资源的时间，发生锁冲突的几率也更小。</p></li><li><p>在并发比较高的系统中，不要显式加锁，特别是是在事务里显式加锁。如 select… for update 语句，如果是在事务里运行了 start transaction 或设置了autocommit 等于0，那么就会锁定所查找到的记录。</p></li><li><p>降低隔离级别。如果业务允许，将隔离级别调低也是较好的选择，比如将隔离级别从RR调整为RC，可以避免掉很多因为gap锁造成的死锁。</p></li></ul><hr><h2 id="9-锁的内部结构">9. 锁的内部结构</h2><p>我们前边说对一条记录加锁的本质就是在内存中创建一个<code>锁结构</code>与之关联，那么是不是一个事务对多条记录加锁，就要创建多个<code>锁结构</code>呢？比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 事务T1</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><p>理论上创建多个<code>锁结构</code>没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了！所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放在一个<code>锁结构</code>中。</p><ul><li>在同一个事务中进行加锁操作</li><li>被加锁的记录在同一个页面中</li><li>加锁的类型是一样的</li><li>等待状态是一样的</li></ul><p><code>InnoDB</code>存储引擎中的<code>锁结构</code>如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714132306208.png" alt="image-20220714132306208" style="zoom:67%;" /><p>结构解析：</p><p><code>1. 锁所在的事务信息</code>：</p><p>不论是<code>表锁</code>还是<code>行锁</code>，都是在事务执行过程中生成的，哪个事务生成了这个锁结构 ，这里就记录这个 事务的信息。</p><p>此<code>锁所在的事务信息</code>在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。</p><p><code>2. 索引信息</code>：</p><p>对于<code>行锁</code>来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。</p><p><code>3. 表锁／行锁信息</code>：</p><p><code>表锁结构</code>和<code>行锁结构</code>在这个位置的内容是不同的：</p><ul><li><p>表锁：</p><p>记载着是对哪个表加的锁，还有其他的一些信息。</p></li><li><p>行锁：</p><p>记载了三个重要的信息：</p><p>*<code>Space ID</code>：记录所在表空间。<br>*<code>Page Number</code>：记录所在页号。<br>*<code>n_bits</code>：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同 的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个<code>n_bis</code>属性代表使用了多少比特位。</p><blockquote><p>n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后 也不至于重新分配锁结构</p></blockquote></li></ul><p><code>4. type_mode</code>：</p><p>这是一个32位的数，被分成了<code>lock_mode</code>、<code>lock_type</code>和<code>rec_lock_type</code>三个部分，如图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714133319666.png" alt="image-20220714133319666"></p><ul><li>锁的模式（<code>lock_mode</code>），占用低4位，可选的值如下：<br>*<code>LOCK_IS</code>（十进制的 0 ）：表示共享意向锁，也就是<code>IS锁</code>。<br>*<code>LOCK_IX</code>（十进制的 1 ）：表示独占意向锁，也就是<code>IX锁</code>。<br>*<code>LOCK_S</code>（十进制的 2 ）：表示共享锁，也就是<code>S锁</code>。<br>*<code>LOCK_X</code>（十进制的 3 ）：表示独占锁，也就是<code>X锁</code>。<br>*<code>LOCK_AUTO_INC</code>（十进制的 4 ）：表示<code>AUTO-INC锁</code>。</li></ul><p>在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和 LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。</p><ul><li>锁的类型（<code>lock_type</code>），占用第5～8位，不过现阶段只有第5位和第6位被使用：<br>*<code>LOCK_TABLE</code>（十进制的 16 ），也就是当第5个比特位置为1时，表示表级锁。<br>*<code>LOCK_REC</code>（十进制的 32 ），也就是当第6个比特位置为1时，表示行级锁。</li><li>行锁的具体类型（<code>rec_lock_type</code>），使用其余的位来表示。只有在<code>lock_type</code>的值为<code>LOCK_REC</code>时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：<br>*<code>LOCK_ORDINARY</code>（十进制的 0 ）：表示<code>next-key锁</code>。<br>*<code>LOCK_GAP</code>（十进制的 512 ）：也就是当第10个比特位置为1时，表示<code>gap锁</code>。<br>*<code>LOCK_REC_NOT_GAP</code>（十进制的 1024 ）：也就是当第11个比特位置为1时，表示正经<code>记录锁</code>。<br>*<code>LOCK_INSERT_INTENTION</code>（十进制的 2048 ）：也就是当第12个比特位置为1时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。<br>*<code>is_waiting</code>属性呢？基于内存空间的节省，所以把<code>is_waiting</code>属性放到了<code>type_mode</code>这个32 位的数字中：<br>*<code>LOCK_WAIT</code>（十进制的 256 ） ：当第9个比特位置为 1 时，表示<code>is_waiting</code>为<code>true</code>，也 就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 0 时，表示<code>is_waiting</code>为<code>false</code>，也就是当前事务获取锁成功。</li></ul><p><code>5. 其他信息</code>：</p><p>为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。</p><p><code>6. 一堆比特位</code>：</p><p>如果是<code>行锁结构</code>的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的<code>n_bits</code>属性 表示的。InnoDB数据页中的每条记录在<code>记录头信息</code>中都包含一个<code>heap_no</code>属性，伪记录<code>Infimum</code>的<code>heap_no</code>值为 0 ，<code>Supremum</code>的<code>heap_no</code>值为 1 ，之后每插入一条记录，<code>heap_no</code>值就增1。 锁结 构 最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个<code>heap_no</code>，即一个比特位映射 到页内的一条记录。</p><hr><h2 id="10-锁监控">10. 锁监控</h2><p>关于MySQL锁的监控，我们一般可以通过检查 InnoDB_row_lock 等状态变量来分析系统上的行锁的争夺情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                 <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_current_waits <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time          <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_avg      <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_max      <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_waits         <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>对各个状态量的说明如下：</p><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量；<br>*<code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度；（等待总时长）<br>*<code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间；（等待平均时长）</li><li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；<br>*<code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数；（等待总次数）</li></ul><p>对于这5个状态变量，比较重要的3个见上面（灰色）。</p><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p><p><strong>其他监控方法：</strong></p><p>MySQL把事务和锁的信息记录在了<code>information_schema</code>库中，涉及到的三张表分别是<code>INNODB_TRX</code>、<code>INNODB_LOCKS</code>和<code>INNODB_LOCK_WAITS</code>。</p><p><code>MySQL5.7及之前</code>，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事 务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。</p><p>MySQL8.0删除了information_schema.INNODB_LOCKS，添加了<code>performance_schema.data_locks</code>，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同， performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。</p><p>同时，information_schema.INNODB_LOCK_WAITS也被<code>performance_schema.data_lock_waits</code>所代 替。</p><p>我们模拟一个锁等待的场景，以下是从这三张表收集的信息</p><p>锁等待场景，我们依然使用记录锁中的案例，当事务2进行等待时，查询情况如下：</p><p>（1）查询正在被锁阻塞的sql语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> information_schema.INNODB_TRX\G;</span><br></pre></td></tr></table></figure><p>重要属性代表含义已在上述中标注。</p><p>（2）查询锁等待情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> data_lock_waits\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">ENGINE: INNODB</span><br><span class="line">REQUESTING_ENGINE_LOCK_ID: <span class="number">139750145405624</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">7</span>:<span class="number">139747028690608</span></span><br><span class="line">REQUESTING_ENGINE_TRANSACTION_ID: <span class="number">13845</span> #被阻塞的事务ID</span><br><span class="line">REQUESTING_THREAD_ID: <span class="number">72</span></span><br><span class="line">REQUESTING_EVENT_ID: <span class="number">26</span></span><br><span class="line">REQUESTING_OBJECT_INSTANCE_BEGIN: <span class="number">139747028690608</span></span><br><span class="line">BLOCKING_ENGINE_LOCK_ID: <span class="number">139750145406432</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">7</span>:<span class="number">139747028813248</span></span><br><span class="line">BLOCKING_ENGINE_TRANSACTION_ID: <span class="number">13844</span> #正在执行的事务ID，阻塞了<span class="number">13845</span></span><br><span class="line">BLOCKING_THREAD_ID: <span class="number">71</span></span><br><span class="line">BLOCKING_EVENT_ID: <span class="number">24</span></span><br><span class="line">BLOCKING_OBJECT_INSTANCE_BEGIN: <span class="number">139747028813248</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>（3）查询锁的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> performance_schema.data_locks\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">ENGINE: INNODB</span><br><span class="line">ENGINE_LOCK_ID: <span class="number">139750145405624</span>:<span class="number">1068</span>:<span class="number">139747028693520</span></span><br><span class="line">ENGINE_TRANSACTION_ID: <span class="number">13847</span></span><br><span class="line">THREAD_ID: <span class="number">72</span></span><br><span class="line">EVENT_ID: <span class="number">31</span></span><br><span class="line">OBJECT_SCHEMA: atguigu</span><br><span class="line">OBJECT_NAME: <span class="keyword">user</span></span><br><span class="line">PARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">SUBPARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">INDEX_NAME: <span class="keyword">NULL</span></span><br><span class="line">OBJECT_INSTANCE_BEGIN: <span class="number">139747028693520</span></span><br><span class="line">LOCK_TYPE: <span class="keyword">TABLE</span></span><br><span class="line">LOCK_MODE: IX</span><br><span class="line">LOCK_STATUS: GRANTED</span><br><span class="line">LOCK_DATA: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">2.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">ENGINE: INNODB</span><br><span class="line">ENGINE_LOCK_ID: <span class="number">139750145405624</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">7</span>:<span class="number">139747028690608</span></span><br><span class="line">ENGINE_TRANSACTION_ID: <span class="number">13847</span></span><br><span class="line">THREAD_ID: <span class="number">72</span></span><br><span class="line">EVENT_ID: <span class="number">31</span></span><br><span class="line">OBJECT_SCHEMA: atguigu</span><br><span class="line">OBJECT_NAME: <span class="keyword">user</span></span><br><span class="line">PARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">SUBPARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">INDEX_NAME: <span class="keyword">PRIMARY</span></span><br><span class="line">OBJECT_INSTANCE_BEGIN: <span class="number">139747028690608</span></span><br><span class="line">LOCK_TYPE: RECORD</span><br><span class="line">LOCK_MODE: X,REC_NOT_GAP</span><br><span class="line">LOCK_STATUS: WAITING</span><br><span class="line">LOCK_DATA: <span class="number">1</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">3.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">ENGINE: INNODB</span><br><span class="line">ENGINE_LOCK_ID: <span class="number">139750145406432</span>:<span class="number">1068</span>:<span class="number">139747028816304</span></span><br><span class="line">ENGINE_TRANSACTION_ID: <span class="number">13846</span></span><br><span class="line">THREAD_ID: <span class="number">71</span></span><br><span class="line">EVENT_ID: <span class="number">28</span></span><br><span class="line">OBJECT_SCHEMA: atguigu</span><br><span class="line">OBJECT_NAME: <span class="keyword">user</span></span><br><span class="line">PARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">SUBPARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">INDEX_NAME: <span class="keyword">NULL</span></span><br><span class="line">OBJECT_INSTANCE_BEGIN: <span class="number">139747028816304</span></span><br><span class="line">LOCK_TYPE: <span class="keyword">TABLE</span></span><br><span class="line">LOCK_MODE: IX</span><br><span class="line">LOCK_STATUS: GRANTED</span><br><span class="line">LOCK_DATA: <span class="keyword">NULL</span></span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">4.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">ENGINE: INNODB</span><br><span class="line">ENGINE_LOCK_ID: <span class="number">139750145406432</span>:<span class="number">7</span>:<span class="number">4</span>:<span class="number">7</span>:<span class="number">139747028813248</span></span><br><span class="line">ENGINE_TRANSACTION_ID: <span class="number">13846</span></span><br><span class="line">THREAD_ID: <span class="number">71</span></span><br><span class="line">EVENT_ID: <span class="number">28</span></span><br><span class="line">OBJECT_SCHEMA: atguigu</span><br><span class="line">OBJECT_NAME: <span class="keyword">user</span></span><br><span class="line">PARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">SUBPARTITION_NAME: <span class="keyword">NULL</span></span><br><span class="line">INDEX_NAME: <span class="keyword">PRIMARY</span></span><br><span class="line">OBJECT_INSTANCE_BEGIN: <span class="number">139747028813248</span></span><br><span class="line">LOCK_TYPE: RECORD</span><br><span class="line">LOCK_MODE: X,REC_NOT_GAP</span><br><span class="line">LOCK_STATUS: GRANTED</span><br><span class="line">LOCK_DATA: <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line"><span class="keyword">No</span> query specified</span><br></pre></td></tr></table></figure><p>从锁的情况可以看出来，两个事务分别获取了IX锁，我们从意向锁章节可以知道，IX锁互相时兼容的。所 以这里不会等待，但是事务1同样持有X锁，此时事务2也要去同一行记录获取X锁，他们之间不兼容，导 致等待的情况发生。</p><hr><h2 id="附录-间隙锁加锁规则">附录:间隙锁加锁规则</h2><p>间隙锁加锁规则（共11个案例）</p><p>间隙锁是在可重复读隔离级别下才会生效的： next-key lock实际上是由间隙锁加行锁实现的，如果切换到读提交隔离级别 (read-committed) 的话，就好理解了，过程中去掉间隙锁的部分，也就是只剩下行锁的部分。而在读提交隔离级别下间隙锁就没有了，为了解决可能出现的数据和日志不一致问题，需要把 binlog格式设置为 row 。也就是说，许多公司的配置为：读提交隔离级别加 binlog_format=row。业务不需要可重复读的保证，这样考虑到读提交下操作数据的锁范围更小（没有间隙锁），这个选择是合理的。</p><p>next-key lock的加锁规则</p><p>总结的加锁规则里面，包含了两个原则、两个优化和一个bug 。</p><ol><li>原则1：加锁的基本单位是 next-key lock 。 next-key lock是前开后闭区间。</li><li>原则2：查找过程中访问到的对象才会加锁。任何辅助索引上的锁，或者非索引列上的锁，最终都要回溯到主键上，在主键上也要加一把锁。</li><li>优化1：索引上的等值查询，给唯一索引加锁的时候， next-key lock退化为记录锁。也就是说如果 InnoDB扫描的是一个主键、或是一个唯一索引的话，那InnoDB只会采用记录锁方式来加锁</li><li>优化2：索引上(不一定是唯一索引)的等值查询，向右遍历时且最后一个值不满足等值条件的时候， next-key lock退化为间隙锁。</li><li>一个 bug ：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ol><p>我们以表test作为例子，建表语句和初始化语句如下：其中id为主键索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>`test`(</span><br><span class="line">`id`<span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`col1`<span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`col2`<span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">KEY`c`(`col1`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span></span><br><span class="line">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>),</span><br><span class="line">(<span class="number">15</span>,<span class="number">15</span>,<span class="number">15</span>),</span><br><span class="line">(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>),</span><br><span class="line">(<span class="number">25</span>,<span class="number">25</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><div class="tabs" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-3"><i class="fas fa-dove"></i>3</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-4"><i class="fas fa-dragon"></i>4</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-5"><i class="fas fa-seedling"></i>5</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-6"><i class="fas fa-leaf"></i>6</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-7"><i class="fab fa-apple"></i>7</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-8"><i class="fas fa-tree"></i>8</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-9"><i class="fas fa-heartbeat"></i>9</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-10"><i class="fas fa-cookie-bite"></i>10</button></li><li class="tab"><button type="button" data-href="#2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-11"><i class="fas fa-child"></i>11</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-1"><p><mark class="hl-label blue">案例一：唯一索引等值查询间隙锁</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134603698.png" alt="image-20220714134603698" style="zoom:67%;" /><p>由于表 test 中没有 id=7 的记录</p><p>根据原则 1 ，加锁单位是 next-key lock ， sessionA加锁范围就是 (5,10] ； 同时根据优化2 ，这是一个等值查询 (id=7) ，而 id=10不满足查询条件， next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-2"><p><mark class="hl-label blue">案例二：非唯一索引等值查询锁</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134623052-16577775838551.png" alt="image-20220714134623052" style="zoom:67%;" /><p>这里 session A 要给索引col1上col1=5的这一行加上读锁。</p><ol><li>根据原则 1 ，加锁单位是 next-key lock ，左开右闭，5是闭上的，因此会给 (0,5] 加上 next-key lock 。</li><li>要注意 c 是普通索引，因此仅访问 c=5 这一条记录是不能马上停下来的（可能有col1=5的其他记录），需要向右遍历，查到c=10才放弃。根据原则 2 ，访问到的都要加锁，因此要给 (5,10] 加 next-key lock 。</li><li>但是同时这个符合优化 2 ：等值判断，向右遍历，最后一个值不满足 col1=5 这个等值条件，因此退化成间隙锁 (5,10) 。</li><li>根据原则 2 ,只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。</li></ol><p>但 session C 要插入一个 (7,7,7) 的记录，就会被 session A 的间隙锁 (5,10) 锁住 这个例子说明，锁是加在索引上的。</p><p>执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。</p><p>如果你要用 lock in share mode来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，因为覆盖索引不会访问主键索引，不会给主键索引上加锁</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-3"><p><mark class="hl-label blue">案例三：主键索引范围查询锁</mark></p><p>上面两个例子是等值查询的，这个例子是关于范围查询的，也就是说下面的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">=</span><span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">&gt;=</span><span class="number">10</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">11</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134742049.png" alt="image-20220714134742049" style="zoom:67%;" /><ol><li>开始执行的时候，要找到第一个 id=10 的行，因此本该是 next-key lock(5,10] 。 根据优化 1 ，主键 id 上的等值条件，退化成行锁，只加了 id=10 这一行的行锁。</li><li>它是范围查询， 范围查找就往后继续找，找到 id=15 这一行停下来，不满足条件，因此需要加 next-key lock(10,15] 。</li></ol><p>session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15] 。首次 session A 定位查找 id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-4"><p><mark class="hl-label blue">案例四：非唯一索引范围查询锁</mark></p><p>与案例三不同的是，案例四中查询语句的 where 部分用的是字段 c ，它是普通索引</p><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134822160.png" alt="image-20220714134822160" style="zoom:67%;" /><p>在第一次用 col1=10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 col1 是非唯 一索引，没有优化规则，也就是说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和 (10,15] 这两个 next-keylock 。</p><p>这里需要扫描到 col1=15 才停止扫描，是合理的，因为 InnoDB 要扫到 col1=15 ，才知道不需要继续往后找了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-5"><p><mark class="hl-label blue">案例五：唯一索引范围查询锁bug</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134846740.png" alt="image-20220714134846740" style="zoom:67%;" /><p>session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock ，并且因 为 id 是唯一键，所以循环判断到 id=15 这一行就应该停止了。</p><p>但是实现上， InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20 。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。照理说，这里锁住 id=20 这一行的行为，其实是没有必要的。因为扫描到 id=15 ，就可以确定不用往后再找了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-6"><p><mark class="hl-label blue">案例六：非唯一索引上存在等值的例子</mark></p><p>这里，我给表 t 插入一条新记录：insert into t values(30,10,30);也就是说，现在表里面有两个c=10的行</p><p>但是它们的主键值 id 是不同的（分别是 10 和 30 ），因此这两个c=10 的记录之间，也是有间隙的。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134923414.png" alt="image-20220714134923414" style="zoom:67%;" /><p>这次我们用 delete 语句来验证。注意， delete 语句加锁的逻辑，其实跟 select … for update 是类似的， 也就是我在文章开始总结的两个 “ 原则 ” 、两个 “ 优化 ” 和一个 “bug” 。</p><p>这时， session A 在遍历的时候，先访问第一个 col1=10 的记录。同样地，根据原则 1 ，这里加的是 (col1=5,id=5) 到 (col1=10,id=10) 这个 next-key lock 。</p><p>由于c是普通索引，所以继续向右查找，直到碰到 (col1=15,id=15) 这一行循环才结束。根据优化 2 ，这是 一个等值查询，向右查找到了不满足条件的行，所以会退化成 (col1=10,id=10) 到 (col1=15,id=15) 的间隙锁。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714134945012.png" alt="image-20220714134945012" style="zoom:67%;" /><p>这个 delete 语句在索引 c 上的加锁范围，就是上面图中蓝色区域覆盖的部分。这个蓝色区域左右两边都 是虚线，表示开区间，即 (col1=5,id=5) 和 (col1=15,id=15) 这两行上都没有锁</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-7"><p><mark class="hl-label blue">案例七：limit语句加锁</mark></p><p>例子 6 也有一个对照案例，场景如下所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135007118.png" alt="image-20220714135007118" style="zoom:67%;" /><p>session A 的 delete 语句加了 limit 2 。你知道表 t 里 c=10 的记录其实只有两条，因此加不加 limit 2 ，删除的效果都是一样的。但是加锁效果却不一样</p><p>这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，因此在遍历到 (col1=10, id=30) 这一行之后， 满足条件的语句已经有两条，循环就结束了。因此，索引 col1 上的加锁范围就变成了从（ col1=5,id=5) 到（ col1=10,id=30) 这个前开后闭区间，如下图所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135025045-16577778257713.png" alt="image-20220714135025045" style="zoom:67%;" /><p>这个例子对我们实践的指导意义就是， 在删除数据的时候尽量加 limit 。</p><p>这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-8"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135047760.png" alt="image-20220714135047760" style="zoom:67%;" /><ol><li>session A 启动事务后执行查询语句加 lock in share mode ，在索引 col1 上加了 next-keylock(5,10] 和 间隙锁 (10,15) （索引向右遍历退化为间隙锁）；</li><li>session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待； 实际上分成了两步， 先是加 (5,10) 的间隙锁，加锁成功；然后加 col1=10 的行锁，因为sessionA上已经给这行加上了读 锁，此时申请死锁时会被阻塞</li><li>然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁， InnoDB 让 session B 回滚</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-9"><p><mark class="hl-label blue">案例九：orderby索引排序的间隙锁1</mark></p><p>如下面一条语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id<span class="operator">&gt;</span><span class="number">9</span> <span class="keyword">and</span> id<span class="operator">&lt;</span><span class="number">12</span> <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>下图为这个表的索引id的示意图。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135130668.png" alt="image-20220714135130668"></p><ol><li>首先这个查询语句的语义是 order by id desc ，要拿到满足条件的所有行，优化器必须先找到 “ 第 一个 id&lt;12 的值 ” 。</li><li>这个过程是通过索引树的搜索过程得到的，在引擎内部，其实是要找到 id=12 的这个值，只是最终 没找到，但找到了 (10,15) 这个间隙。（ id=15 不满足条件，所以 next-key lock 退化为了间隙锁 (10, 15) 。）</li><li>然后向左遍历，在遍历过程中，就不是等值查询了，会扫描到 id=5 这一行，又因为区间是左开右 闭的，所以会加一个next-key lock (0,5] 。 也就是说，在执行过程中，通过树搜索的方式定位记录 的时候，用的是 “ 等值查询 ” 的方法。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-10"><p><mark class="hl-label blue">案例十：orderby索引排序的间隙锁2</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135206504.png" alt="image-20220714135206504" style="zoom: 67%;" /><ol><li><p>由于是 order by col1 desc ，第一个要定位的是索引 col1 上 “ 最右边的 ”col1=20 的行。这是一个非唯一索引的等值查询：</p><p>左开右闭区间，首先加上 next-key lock (15,20] 。 向右遍历，col1=25不满足条件，退化为间隙锁 所以会 加上间隙锁(20,25) 和 next-key lock (15,20] 。</p></li><li><p>在索引 col1 上向左遍历，要扫描到 col1=10 才停下来。同时又因为左开右闭区间，所以 next-key lock 会加到 (5,10] ，这正是阻塞session B 的 insert 语句的原因。</p></li><li><p>在扫描过程中， col1=20 、 col1=15 、 col1=10 这三行都存在值，由于是 select * ，所以会在主键 id 上加三个行锁。 因此， session A 的 select 语句锁的范围就是：</p><ol><li>索引 col1 上 (5, 25) ；</li><li>主键索引上 id=15 、 20 两个行锁。</li></ol></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2dd36c9e-3786-4eba-9e69-1329ee7eaa1b-11"><p><mark class="hl-label blue">案例十一：update修改数据的例子-先插入后删除</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135300189.png" alt="image-20220714135300189" style="zoom:67%;" /><p>注意：根据 col1&gt;5 查到的第一个记录是 col1=10 ，因此不会加 (0,5] 这个 next-key lock 。</p><p>session A 的加锁范围是索引 col1 上的 (5,10] 、 (10,15] 、 (15,20] 、 (20,25] 和(25,supremum] 。</p><p>之后 session B 的第一个 update 语句，要把 col1=5 改成 col1=1 ，你可以理解为两步：</p><ol><li>插入 (col1=1, id=5) 这个记录；</li><li>删除 (col1=5, id=5) 这个记录。</li></ol><p>通过这个操作， session A 的加锁范围变成了图 7 所示的样子:</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220714135333089.png" alt="image-20220714135333089" style="zoom:67%;" /><p>好，接下来 session B 要执行 update t set col1 = 5 where col1 = 1 这个语句了，一样地可以拆成两步：</p><ol><li>插入 (col1=5, id=5) 这个记录；</li><li>删除 (col1=1, id=5) 这个记录。 第一步试图在已经加了间隙锁的 (1,10) 中插入数据，所以就被堵住了。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;锁&lt;/code&gt;是计算机协调多个进程或线程&lt;code&gt;并发访问某一资源&lt;/code&gt;的机制。在程序开发中会存在多线程同步的问题，当多个线程并发访问某个数据的时候，尤其是针对一些敏感的数据（比如订单、金额等），我们就需要保证这个数据在任何时刻&lt;code&gt;最多只有一</summary>
      
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://wuwawawa.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
