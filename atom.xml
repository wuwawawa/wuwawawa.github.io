<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuckyBoy🥝</title>
  
  
  <link href="https://wuwawawa.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuwawawa.github.io/"/>
  <updated>2024-04-05T09:15:14.526Z</updated>
  <id>https://wuwawawa.github.io/</id>
  
  <author>
    <name>LuckyBoy🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sentinel解析</title>
    <link href="https://wuwawawa.github.io/posts/aeb76929.html"/>
    <id>https://wuwawawa.github.io/posts/aeb76929.html</id>
    <published>2024-04-05T01:37:43.000Z</published>
    <updated>2024-04-05T09:15:14.526Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/sentinel-group/sentinel-awesome?tab=readme-ov-file">https://github.com/sentinel-group/sentinel-awesome?tab=readme-ov-file</a></p><p><a href="https://sentinelguard.io/zh-cn/docs/basic-implementation.html">Sentinel 工作主流程</a></p><p>责任链模式 SPI机制 AOP  CopyOnWrite写入时复制  断路器状态转换  closed  open half-open</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Sentinel实现限流、隔离、降级、熔断等功能，本质要做的就是两件事情：</p><ul><li>统计数据：统计某个资源的访问数据（QPS、RT等信息）</li><li>规则判断：判断限流规则、隔离规则、降级规则、熔断规则是否满足</li></ul><p>这里的<strong>资源</strong>就是希望被Sentinel保护的业务，例如项目中定义的controller方法就是默认被Sentinel保护的资源。</p><hr><blockquote><p>Sentinel的线程隔离与Hystix的线程隔离有什么差别？</p></blockquote><p>Hystix默认是基于线程池实现的线程隔离，每一个被隔离的业务都要创建一个独立的线程池，线程过多会带来额外的 CPU开销，性能一般，但是隔离性更强。</p><p>Sentinel是基于信号量（计数器）实现的线程隔离，不用创建线程池，性能较好，但是隔离性一般。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240405102207474.png" alt="image-20240405102207474" style="zoom:50%;" /></p><hr><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><h3 id="计数器算法"><a href="#计数器算法" class="headerlink" title="计数器算法"></a>计数器算法</h3><mark class="hl-label blue">固定窗口计数器算法</mark> <ul><li><p>将时间划分为多个窗口，窗口时间跨度称为Interval，本例中为1000ms；</p></li><li><p>每个窗口维护一个计数器，每有一次请求就将计数器加一，限流就是设置计数器阈值，本例为3 </p></li><li>如果计数器超过了限流阈值，则超出阈值的请求都被丢奔。</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240405103520533.png" alt="image-20240405103520533"></p><hr><mark class="hl-label green">滑动窗口计数器算法</mark> <p>滑动窗口计数器算法会将一个窗口划分为n个更小的区间，例如：</p><ul><li>窗口时间跨度Interval为1秒；区间数量n=2，则每个小区间时间跨度为500ms</li><li>限流阈值依然为3，时间窗口（1秒）内请求超过阈值时，超出的请求被限流</li><li>窗口会根据当前请求所在时间（currentTime）移动，窗口范围是从（currentTime-Interval）之后的第一个时区开始，到currentTime所在时区结束。</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240405104356930.png" alt="image-20240405104356930"></p><p> 由于小区间跨度太大 还是可能会出现超出限流阈值的问题 图中1250 - 2100ms  850ms放行了4个请求</p><hr><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><ul><li>以固定的速率生成令牌，存入令牌桶中，如果令牌桶满了以后，多余令牌丢弃</li><li>请求进入后，必须先尝试从桶中获取令牌，获取到令牌后才可以被处理</li><li>如果令牌桶中没有令牌，则请求等待或丢弃</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240405104932170.png" alt="image-20240405104932170" style="zoom: 67%;" /></p><p>可能存在的问题：</p><p>​    第1s中生产了5个令牌但没人消费，第二秒钟来了10个请求 消耗5个 再生成5个 总共放行了10个请求</p><p>​    允许流量一定程度的突发</p><p>代码实现思想:</p><p>​    记录上一次请求来的时间以及取了几个令牌了</p><p>​    可以计算出上一次到现在能生成多少令牌</p><hr><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><ul><li>将每个请求视作”水滴”放入”漏桶”进行存储；</li><li><p>“漏桶”以固定速率向外”漏”出请求来执行，如果”漏桶”空了则停止”漏水”</p></li><li><p>如果”漏桶”满了则多余的”水滴”会被直接丢弃。</p></li></ul><p>代码实现思想：</p><p>Sentinel在实现漏桶时，采用了排队等待模式：</p><p>让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。并发的多个请求必须等待，预期的等待时长=最近一次请求的预期等待时间+允许的间隔。如果请求预期的等待时间超出最大时长，则会被拒绝。</p><p>例如：QPS=5，意味着每200ms处理一个队列中的请求；timeout=2000，意味着预期等待超过2000ms的请求会被拒绝并抛出异常</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240405105925451.png" alt="image-20240405105925451"></p><hr><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><div class="table-container"><table><thead><tr><th>对比项</th><th style="text-align:center">滑动时间窗口</th><th style="text-align:center">令牌桶</th><th style="text-align:center">漏桶</th></tr></thead><tbody><tr><td>能否保证流量曲线平滑</td><td style="text-align:center">不能，但窗口内区间越小，流量控制越平滑</td><td style="text-align:center">基本能，在请求量持续高于令牌生成速度时，流量平滑<br/>但请求量在令牌生成速率上下波动时，无法保证曲线平滑</td><td style="text-align:center">能，所有请求进入桶内，以恒定速率放行，绝对平滑</td></tr><tr><td>能否应对突增流量</td><td style="text-align:center">不能，徒增流量，只要高出限流阈值都会被拒绝</td><td style="text-align:center">能，桶内积累的令牌可以应对突增流量</td><td style="text-align:center">能，请求可以暂存在桶内</td></tr><tr><td>流量控制精确度</td><td style="text-align:center">低，窗口区间越小，精度越高</td><td style="text-align:center">高</td><td style="text-align:center">高</td></tr></tbody></table></div><p>Sentinel内部</p><p>默认限流模式是基于滑动时间窗口算法</p><p>排队等待的限流模式则基于漏桶算法</p><p>热点参数限流则是基于令牌桶算法</p><hr><h2 id="关键组件"><a href="#关键组件" class="headerlink" title="关键组件"></a>关键组件</h2><h3 id="ProcessorSlotChain"><a href="#ProcessorSlotChain" class="headerlink" title="ProcessorSlotChain"></a>ProcessorSlotChain</h3><p>Sentinel 的核心骨架，将不同的 Slot 按照顺序串在一起（责任链模式），从而将不同的功能（限流、降级、系统保护）组合在一起。<code>slot chain</code> 其实可以分为两部分：统计数据构建部分（statistic）和判断部分（rule checking）。核心结构：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/sentinel-slot-chain-architecture.png" alt="sentinel-slot-chain"></p><blockquote><p>统计数据构建部分（statistic）</p></blockquote><ul><li>NodeSelectorSlot：负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树</li><li>ClusterBuilderSlot：负责构建某个资源的ClusterNode，ClusterNode可以保存资源的运行信息（响应时间、QPS、block 数目、线程数、异常数等）以及来源信息（origin名称）</li><li>StatisticSlot：负责统计实时调用数据，包括运行信息、来源信息等 </li></ul><blockquote><p>规则判断部分（rule checking）</p></blockquote><ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul><hr><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p>Context 代表调用链路上下文，贯穿一次调用链路中的所有 <code>Entry</code>。</p><p>Context 维持着入口节点（<code>entranceNode</code>）、本次调用链路的 curNode、调用来源（<code>origin</code>）等信息。后续的Slot都可以通过Context拿到DefaultNode或者ClusterNode，从而获取统计数据，完成规则判断。</p><p>Context 维持的方式：通过 ThreadLocal 传递，只有在入口 <code>enter</code> 的时候生效。</p><p>由于 Context 是通过 ThreadLocal 传递的，因此对于异步调用链路，线程切换的时候会丢掉 Context，因此需要手动通过 <code>ContextUtil.runOnContext(context, f)</code> 来变换 context。</p><hr><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><p>每一次资源调用都会创建一个 <code>Entry</code>。</p><p><code>Entry</code> 包含了资源名、curNode（当前统计节点）、originNode（来源统计节点）等信息。</p><p><code>CtEntry</code> 为普通的 <code>Entry</code>，在调用 <code>SphU.entry(xxx)</code> 的时候创建。特性：Linked entry within current context（内部维护着 <code>parent</code> 和 <code>child</code>）</p><p><strong>需要注意的一点</strong>：CtEntry 构造函数中会做<strong>调用链的变换</strong>，即将当前 Entry 接到传入 Context 的调用链路上（<code>setUpEntryFor</code>）。</p><p>资源调用结束时需要 <code>entry.exit()</code>。exit 操作会过一遍 slot chain exit，恢复调用栈，exit context 然后清空 entry 中的 context 防止重复调用。</p><p>@SentinelResource注解就是一个标记，而Sentinel基于AOP思想，对被标记的方法做环绕增强，完成资源（<code>Entry</code>）的创建。</p><hr><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Sentinel中的簇点链路是由一个个的Node组成的，Node是一个接口，包括下面的实现：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925103029924.png" alt="image-20210925103029924"></p><p>所有的节点都可以记录对资源的访问统计数据，所以都是StatisticNode的子类。</p><p>按照作用分为两类Node：</p><ul><li>DefaultNode：代表链路树中的每一个资源，一个资源出现在不同链路中时，会创建不同的DefaultNode节点。而树的入口节点叫EntranceNode，是一种特殊的DefaultNode</li><li>ClusterNode：代表资源，一个资源不管出现在多少链路中，只会有一个ClusterNode。记录的是当前资源被访问的所有统计数据之和。</li></ul><p>DefaultNode记录的是资源在当前链路中的访问数据，用来实现基于链路模式的限流规则。ClusterNode记录的是资源在所有链路中的访问数据，实现默认模式、关联模式的限流规则。</p><p>例如：我们在一个SpringMVC项目中，有两个业务：</p><ul><li>业务1：controller中的资源<code>/order/query</code>访问了service中的资源<code>/goods</code></li><li>业务2：controller中的资源<code>/order/save</code>访问了service中的资源<code>/goods</code></li></ul><p>创建的链路图如下：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925104726158.png" alt="image-20210925104726158"></p><hr><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>首先，回到一切的入口，<code>AbstractSentinelInterceptor</code>类的<code>preHandle</code>方法：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925142313050.png" alt="image-20210925142313050"></p><p>还有，<code>SentinelResourceAspect</code>的环绕增强方法：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925142438552.png" alt="image-20210925142438552"></p><p>可以看到，任何一个资源必定要执行<code>SphU.entry()</code>这个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Entry <span class="title function_">entry</span><span class="params">(String name, <span class="type">int</span> resourceType, EntryType trafficType, Object[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="keyword">return</span> Env.sph.entryWithType(name, resourceType, trafficType, <span class="number">1</span>, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续进入<code>Env.sph.entryWithType(name, resourceType, trafficType, 1, args);</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Entry <span class="title function_">entryWithType</span><span class="params">(String name, <span class="type">int</span> resourceType, EntryType entryType, <span class="type">int</span> count, <span class="type">boolean</span> prioritized,</span></span><br><span class="line"><span class="params">                           Object[] args)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="comment">// 将 资源名称等基本信息 封装为一个 StringResourceWrapper对象</span></span><br><span class="line">    <span class="type">StringResourceWrapper</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringResourceWrapper</span>(name, entryType, resourceType);</span><br><span class="line">    <span class="comment">// 继续</span></span><br><span class="line">    <span class="keyword">return</span> entryWithPriority(resource, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>entryWithPriority</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry <span class="title function_">entryWithPriority</span><span class="params">(ResourceWrapper resourceWrapper, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">    <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="comment">// 获取 Context</span></span><br><span class="line">    <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> ContextUtil.getContext();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Using default context.</span></span><br><span class="line">        context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">、<span class="comment">// 获取 Slot执行链，同一个资源，会创建一个执行链，放入缓存</span></span><br><span class="line">    ProcessorSlot&lt;Object&gt; chain = lookProcessChain(resourceWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Entry，并将 resource、chain、context 记录在 Entry中</span></span><br><span class="line">    <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtEntry</span>(resourceWrapper, chain, context);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行 slotChain</span></span><br><span class="line">        chain.entry(context, resourceWrapper, <span class="literal">null</span>, count, prioritized, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BlockException e1) &#123;</span><br><span class="line">        e.exit(count, args);</span><br><span class="line">        <span class="keyword">throw</span> e1;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e1) &#123;</span><br><span class="line">        <span class="comment">// This should not happen, unless there are errors existing in Sentinel internal.</span></span><br><span class="line">        RecordLog.info(<span class="string">&quot;Sentinel unexpected exception&quot;</span>, e1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，会获取<code>ProcessorSlotChain</code>对象，然后基于chain.entry()开始执行slotChain中的每一个Slot.  而这里创建的是其实现类：DefaultProcessorSlotChain.</p><p>获取ProcessorSlotChain以后会保存到一个Map中，key是ResourceWrapper，值是ProcessorSlotChain.</p><p>所以，<strong>一个资源只会有一个ProcessorSlotChain</strong>.</p><hr><h3 id="DefaultProcessorSlotChain"><a href="#DefaultProcessorSlotChain" class="headerlink" title="DefaultProcessorSlotChain"></a>DefaultProcessorSlotChain</h3><p>我们进入DefaultProcessorSlotChain的entry方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object t, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// first，就是责任链中的第一个 slot</span></span><br><span class="line">    first.transformEntry(context, resourceWrapper, t, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的first，类型是AbstractLinkedProcessorSlot：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925144355865.png" alt="image-20210925144355865"></p><p>看下继承关系：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925144010507.png" alt="image-20210925144010507"></p><p>因此，first一定是这些实现类中的一个，按照最早讲的责任链顺序，first应该就是 <code>NodeSelectorSlot</code>。</p><p>不过，既然是基于责任链模式，所以这里只要记住下一个slot就可以了，也就是next：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925144233302.png" alt="image-20210925144233302"></p><p>next确实是NodeSelectSlot类型。</p><p>而NodeSelectSlot的next一定是ClusterBuilderSlot，依次类推：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925101327080.png" alt="image-20210925101327080"></p><p>责任链就建立起来了。</p><hr><h3 id="NodeSelectorSlot"><a href="#NodeSelectorSlot" class="headerlink" title="NodeSelectorSlot"></a>NodeSelectorSlot</h3><p>NodeSelectorSlot负责构建簇点链路中的节点（DefaultNode），将这些节点形成链路树。</p><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, Object obj, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="comment">// 尝试获取 当前资源的 DefaultNode</span></span><br><span class="line">    <span class="type">DefaultNode</span> <span class="variable">node</span> <span class="operator">=</span> map.get(context.getName());</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            node = map.get(context.getName());</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果为空，为当前资源创建一个新的 DefaultNode</span></span><br><span class="line">                node = <span class="keyword">new</span> <span class="title class_">DefaultNode</span>(resourceWrapper, <span class="literal">null</span>);</span><br><span class="line">                HashMap&lt;String, DefaultNode&gt; cacheMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, DefaultNode&gt;(map.size());</span><br><span class="line">                cacheMap.putAll(map);</span><br><span class="line">                <span class="comment">// 放入缓存中，注意这里的 key是contextName，</span></span><br><span class="line">                <span class="comment">// 这样不同链路进入相同资源，就会创建多个 DefaultNode</span></span><br><span class="line">                cacheMap.put(context.getName(), node);</span><br><span class="line">                map = cacheMap;</span><br><span class="line">                <span class="comment">// 当前节点加入上一节点的 child中，这样就构成了调用链路树</span></span><br><span class="line">                ((DefaultNode) context.getLastNode()).addChild(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// context中的curNode（当前节点）设置为新的 node</span></span><br><span class="line">    context.setCurNode(node);</span><br><span class="line">    <span class="comment">// 执行下一个 slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Slot完成了这么几件事情：</p><ul><li>为当前资源创建 DefaultNode</li><li>将DefaultNode放入缓存中，key是contextName，这样不同链路入口的请求，将会创建多个DefaultNode，相同链路则只有一个DefaultNode</li><li>将当前资源的DefaultNode设置为上一个资源的childNode</li><li>将当前资源的DefaultNode设置为Context中的curNode（当前节点）</li></ul><p>下一个slot，就是ClusterBuilderSlot</p><hr><h3 id="ClusterBuilderSlot"><a href="#ClusterBuilderSlot" class="headerlink" title="ClusterBuilderSlot"></a>ClusterBuilderSlot</h3><p>ClusterBuilderSlot负责构建某个资源的ClusterNode，核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node,</span></span><br><span class="line"><span class="params">                  <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 判空，注意ClusterNode是共享的成员变量，也就是说一个资源只有一个ClusterNode，与链路无关</span></span><br><span class="line">    <span class="keyword">if</span> (clusterNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clusterNode == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 创建 cluster node.</span></span><br><span class="line">                clusterNode = <span class="keyword">new</span> <span class="title class_">ClusterNode</span>(resourceWrapper.getName(), resourceWrapper.getResourceType());</span><br><span class="line">                HashMap&lt;ResourceWrapper, ClusterNode&gt; newMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max(clusterNodeMap.size(), <span class="number">16</span>));</span><br><span class="line">                newMap.putAll(clusterNodeMap);</span><br><span class="line">                <span class="comment">// 放入缓存，可以是nodeId，也就是resource名称</span></span><br><span class="line">                newMap.put(node.getId(), clusterNode);</span><br><span class="line">                clusterNodeMap = newMap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将资源的 DefaultNode与 ClusterNode关联</span></span><br><span class="line">    node.setClusterNode(clusterNode);</span><br><span class="line"><span class="comment">// 记录请求来源 origin 将 origin放入 entry</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(context.getOrigin())) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">originNode</span> <span class="operator">=</span> node.getClusterNode().getOrCreateOriginNode(context.getOrigin());</span><br><span class="line">        context.getCurEntry().setOriginNode(originNode);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 继续下一个slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="StatisticSlot"><a href="#StatisticSlot" class="headerlink" title="StatisticSlot"></a>StatisticSlot</h3><p>StatisticSlot负责统计实时调用数据，包括运行信息（访问次数、线程数）、来源信息等。</p><p>StatisticSlot是实现限流的关键，其中基于<strong>滑动时间窗口算法</strong>维护了计数器，统计进入某个资源的请求次数。</p><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, </span></span><br><span class="line"><span class="params">                  <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 放行到下一个 slot，做限流、降级等判断</span></span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求通过了, 线程计数器 +1 ，用作线程隔离</span></span><br><span class="line">        node.increaseThreadNum();</span><br><span class="line">        <span class="comment">// 请求计数器 +1 用作限流</span></span><br><span class="line">        node.addPassRequest(count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context.getCurEntry().getOriginNode() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果有 origin，来源计数器也都要 +1</span></span><br><span class="line">            context.getCurEntry().getOriginNode().increaseThreadNum();</span><br><span class="line">            context.getCurEntry().getOriginNode().addPassRequest(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resourceWrapper.getEntryType() == EntryType.IN) &#123;</span><br><span class="line">            <span class="comment">// 如果是入口资源，还要给全局计数器 +1.</span></span><br><span class="line">            Constants.ENTRY_NODE.increaseThreadNum();</span><br><span class="line">            Constants.ENTRY_NODE.addPassRequest(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求通过后的回调.</span></span><br><span class="line">        <span class="keyword">for</span> (ProcessorSlotEntryCallback&lt;DefaultNode&gt; handler : StatisticSlotCallbackRegistry.getEntryCallbacks()) &#123;</span><br><span class="line">            handler.onPass(context, resourceWrapper, node, count, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">        <span class="comment">// 各种异常处理就省略了。。。</span></span><br><span class="line">        context.getCurEntry().setError(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，需要注意的是，所有的计数+1动作都包括两部分，以<code>node.addPassRequest(count);</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPassRequest</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="comment">// DefaultNode的计数器，代表当前链路的 计数器</span></span><br><span class="line">    <span class="built_in">super</span>.addPassRequest(count);</span><br><span class="line">    <span class="comment">// ClusterNode计数器，代表当前资源的 总计数器</span></span><br><span class="line">    <span class="built_in">this</span>.clusterNode.addPassRequest(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体计数方式，我们后续再看。</p><p>接下来，进入规则校验的相关slot了，依次是：</p><ul><li>AuthoritySlot：负责授权规则（来源控制）</li><li>SystemSlot：负责系统保护规则</li><li>ParamFlowSlot：负责热点参数限流规则</li><li>FlowSlot：负责限流规则</li><li>DegradeSlot：负责降级规则</li></ul><hr><h3 id="AuthoritySlot"><a href="#AuthoritySlot" class="headerlink" title="AuthoritySlot"></a>AuthoritySlot</h3><p>负责请求来源origin的授权规则判断，如图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925152626648.png" alt="image-20210925152626648"></p><p>核心API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 校验黑白名单</span></span><br><span class="line">    checkBlackWhiteAuthority(resourceWrapper, context);</span><br><span class="line">    <span class="comment">// 进入下一个 slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>黑白名单校验的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">checkBlackWhiteAuthority</span><span class="params">(ResourceWrapper resource, Context context)</span> <span class="keyword">throws</span> AuthorityException &#123;</span><br><span class="line">    <span class="comment">// 获取授权规则</span></span><br><span class="line">    Map&lt;String, Set&lt;AuthorityRule&gt;&gt; authorityRules = AuthorityRuleManager.getAuthorityRules();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (authorityRules == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;AuthorityRule&gt; rules = authorityRules.get(resource.getName());</span><br><span class="line">    <span class="keyword">if</span> (rules == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 遍历规则并判断</span></span><br><span class="line">    <span class="keyword">for</span> (AuthorityRule rule : rules) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!AuthorityRuleChecker.passCheck(rule, context)) &#123;</span><br><span class="line">            <span class="comment">// 规则不通过，直接抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthorityException</span>(context.getOrigin(), rule);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下<code>AuthorityRuleChecker.passCheck(rule, context)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">passCheck</span><span class="params">(AuthorityRule rule, Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 得到请求来源 origin</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requester</span> <span class="operator">=</span> context.getOrigin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 来源为空，或者规则为空，都直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isEmpty(requester) || StringUtil.isEmpty(rule.getLimitApp())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rule.getLimitApp()得到的就是 白名单 或 黑名单 的字符串，这里先用 indexOf方法判断</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> rule.getLimitApp().indexOf(requester);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">contain</span> <span class="operator">=</span> pos &gt; -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contain) &#123;</span><br><span class="line">        <span class="comment">// 如果包含 origin，还要进一步做精确判断，把名单列表以&quot;,&quot;分割，逐个判断</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exactlyMatch</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        String[] appArray = rule.getLimitApp().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String app : appArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requester.equals(app)) &#123;</span><br><span class="line">                exactlyMatch = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        contain = exactlyMatch;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 如果是黑名单，并且包含origin，则返回false</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">strategy</span> <span class="operator">=</span> rule.getStrategy();</span><br><span class="line">    <span class="keyword">if</span> (strategy == RuleConstant.AUTHORITY_BLACK &amp;&amp; contain) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 如果是白名单，并且不包含origin，则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (strategy == RuleConstant.AUTHORITY_WHITE &amp;&amp; !contain) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 其它情况返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>SystemSlot是对系统保护的规则校验：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925153228036.png" alt="image-20210925153228036"></p><p>核心API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, </span></span><br><span class="line"><span class="params">                  <span class="type">int</span> count,<span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 系统规则校验</span></span><br><span class="line">    SystemRuleManager.checkSystem(resourceWrapper);</span><br><span class="line">    <span class="comment">// 进入下一个 slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看下<code>SystemRuleManager.checkSystem(resourceWrapper);</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkSystem</span><span class="params">(ResourceWrapper resourceWrapper)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="keyword">if</span> (resourceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Ensure the checking switch is on.</span></span><br><span class="line">    <span class="keyword">if</span> (!checkSystemStatus.get()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只针对入口资源做校验，其它直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (resourceWrapper.getEntryType() != EntryType.IN) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局 QPS校验</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">currentQps</span> <span class="operator">=</span> Constants.ENTRY_NODE == <span class="literal">null</span> ? <span class="number">0.0</span> : Constants.ENTRY_NODE.successQps();</span><br><span class="line">    <span class="keyword">if</span> (currentQps &gt; qps) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemBlockException</span>(resourceWrapper.getName(), <span class="string">&quot;qps&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局 线程数 校验</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">currentThread</span> <span class="operator">=</span> Constants.ENTRY_NODE == <span class="literal">null</span> ? <span class="number">0</span> : Constants.ENTRY_NODE.curThreadNum();</span><br><span class="line">    <span class="keyword">if</span> (currentThread &gt; maxThread) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemBlockException</span>(resourceWrapper.getName(), <span class="string">&quot;thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 全局平均 RT校验</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">rt</span> <span class="operator">=</span> Constants.ENTRY_NODE == <span class="literal">null</span> ? <span class="number">0</span> : Constants.ENTRY_NODE.avgRt();</span><br><span class="line">    <span class="keyword">if</span> (rt &gt; maxRt) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemBlockException</span>(resourceWrapper.getName(), <span class="string">&quot;rt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局 系统负载 校验</span></span><br><span class="line">    <span class="keyword">if</span> (highestSystemLoadIsSet &amp;&amp; getCurrentSystemAvgLoad() &gt; highestSystemLoad) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!checkBbr(currentThread)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemBlockException</span>(resourceWrapper.getName(), <span class="string">&quot;load&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局 CPU使用率 校验</span></span><br><span class="line">    <span class="keyword">if</span> (highestCpuUsageIsSet &amp;&amp; getCurrentCpuUsage() &gt; highestCpuUsage) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SystemBlockException</span>(resourceWrapper.getName(), <span class="string">&quot;cpu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="ParamFlowSlot"><a href="#ParamFlowSlot" class="headerlink" title="ParamFlowSlot"></a>ParamFlowSlot</h3><p>ParamFlowSlot就是热点参数限流，如图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925153719891.png" alt="image-20210925153719891"></p><p>是针对进入资源的请求，针对不同的请求参数值分别统计QPS的限流方式。</p><ul><li><p>这里的单机阈值，就是最大令牌数量：maxCount</p></li><li><p>这里的统计窗口时长，就是统计时长：duration</p></li></ul><p>含义是每隔duration时间长度内，最多生产maxCount个令牌，上图配置的含义是每1秒钟生产2个令牌。</p><p>核心API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node,</span></span><br><span class="line"><span class="params">                  <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 如果没有设置热点规则，直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (!ParamFlowRuleManager.hasRules(resourceWrapper.getName())) &#123;</span><br><span class="line">        fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 热点规则判断</span></span><br><span class="line">    checkFlow(resourceWrapper, count, args);</span><br><span class="line">    <span class="comment">// 进入下一个 slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">令牌桶</mark> <p>热点规则判断采用了令牌桶算法来实现参数限流，为每一个不同参数值设置令牌桶，Sentinel的令牌桶有两部分组成：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925163744108.png" alt="image-20210925163744108"></p><p>这两个Map的key都是请求的参数值，value却不同，其中：</p><ul><li>tokenCounters：用来记录剩余令牌数量</li><li>timeCounters：用来记录上一个请求的时间</li></ul><p>当一个携带参数的请求到来后，基本判断流程是这样的：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/sentinel.jpg" alt="sentinel"></p><hr><h3 id="FlowSlot"><a href="#FlowSlot" class="headerlink" title="FlowSlot"></a>FlowSlot</h3><p>FlowSlot是负责限流规则的判断，如图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925172542274.png" alt="image-20210925172542274"></p><p>包括：</p><ul><li>三种流控模式：直接模式、关联模式、链路模式</li><li>三种流控效果：快速失败、warm up、排队等待</li></ul><p>三种流控模式，从底层<strong>数据统计</strong>角度，分为两类：</p><ul><li>对进入资源的所有请求（ClusterNode）做限流统计：直接模式、关联模式</li><li>对进入资源的部分链路（DefaultNode）做限流统计：链路模式</li></ul><p>三种流控效果，从<strong>限流算法</strong>来看，分为两类：</p><ul><li>滑动时间窗口算法：快速失败、warm up</li><li>漏桶算法：排队等待效果</li></ul><hr><h4 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h4><p>核心API如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, <span class="type">int</span> count,</span></span><br><span class="line"><span class="params">                  <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 限流规则检测</span></span><br><span class="line">    checkFlow(resourceWrapper, context, node, count, prioritized);</span><br><span class="line"><span class="comment">// 放行</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checkFlow方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(ResourceWrapper resource, Context context, DefaultNode node, <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span></span><br><span class="line">    <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="comment">// checker是 FlowRuleChecker 类的一个对象</span></span><br><span class="line">    checker.checkFlow(ruleProvider, resource, context, node, count, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟入FlowRuleChecker：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkFlow</span><span class="params">(Function&lt;String, Collection&lt;FlowRule&gt;&gt; ruleProvider, </span></span><br><span class="line"><span class="params">                      ResourceWrapper resource,Context context, DefaultNode node,</span></span><br><span class="line"><span class="params">                      <span class="type">int</span> count, <span class="type">boolean</span> prioritized)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">        <span class="keyword">if</span> (ruleProvider == <span class="literal">null</span> || resource == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取当前资源的所有限流规则</span></span><br><span class="line">        Collection&lt;FlowRule&gt; rules = ruleProvider.apply(resource.getName());</span><br><span class="line">        <span class="keyword">if</span> (rules != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FlowRule rule : rules) &#123;</span><br><span class="line">                <span class="comment">// 遍历，逐个规则做校验</span></span><br><span class="line">                <span class="keyword">if</span> (!canPassCheck(rule, context, node, count, prioritized)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowException</span>(rule.getLimitApp(), rule);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的FlowRule就是限流规则接口，其中的几个成员变量，刚好对应表单参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractRule</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值类型 (0: 线程, 1: QPS).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">grade</span> <span class="operator">=</span> RuleConstant.FLOW_GRADE_QPS;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> count;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三种限流模式.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_DIRECT&#125; 直连模式;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_RELATE&#125; 关联模式;</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RuleConstant#STRATEGY_CHAIN&#125; 链路模式.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">strategy</span> <span class="operator">=</span> RuleConstant.STRATEGY_DIRECT;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关联模式关联的资源名称.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String refResource;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3种流控效果.</span></span><br><span class="line"><span class="comment">     * 0. 快速失败, 1. warm up, 2. 排队等待, 3. warm up + 排队等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">controlBehavior</span> <span class="operator">=</span> RuleConstant.CONTROL_BEHAVIOR_DEFAULT;</span><br><span class="line"><span class="comment">// 预热时长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">warmUpPeriodSec</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列最大等待时间.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxQueueingTimeMs</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line">    <span class="comment">// 。。。 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验的逻辑定义在<code>FlowRuleChecker</code>的<code>canPassCheck</code>方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPassCheck</span><span class="params">(<span class="comment">/*@NonNull*/</span> FlowRule rule, Context context, DefaultNode node, <span class="type">int</span> acquireCount,</span></span><br><span class="line"><span class="params">                            <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取限流资源名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">limitApp</span> <span class="operator">=</span> rule.getLimitApp();</span><br><span class="line">    <span class="keyword">if</span> (limitApp == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 校验规则</span></span><br><span class="line">    <span class="keyword">return</span> passLocalCheck(rule, context, node, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入<code>passLocalCheck()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">passLocalCheck</span><span class="params">(FlowRule rule, Context context, DefaultNode node,</span></span><br><span class="line"><span class="params">                                      <span class="type">int</span> acquireCount,  <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="comment">// 基于限流模式判断要统计的节点， </span></span><br><span class="line">    <span class="comment">// 如果是直连模式，关联模式，对ClusterNode统计，如果是链路模式，则对DefaultNode统计</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">selectedNode</span> <span class="operator">=</span> selectNodeByRequesterAndStrategy(rule, context, node);</span><br><span class="line">    <span class="keyword">if</span> (selectedNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 判断规则</span></span><br><span class="line">    <span class="keyword">return</span> rule.getRater().canPass(selectedNode, acquireCount, prioritized);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对规则的判断先要通过<code>FlowRule#getRater()</code>获取流量控制器<code>TrafficShapingController</code>，然后再做限流。</p><p>而<code>TrafficShapingController</code>有3种实现：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925175221211.png" alt="image-20210925175221211"></p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>最终的限流判断都在TrafficShapingController的canPass方法中。</p><hr><h4 id="滑动时间窗口"><a href="#滑动时间窗口" class="headerlink" title="滑动时间窗口"></a>滑动时间窗口</h4><p>滑动时间窗口的功能分两部分来看：</p><ul><li>一是时间区间窗口的QPS计数功能，这个是在StatisticSlot中调用的</li><li>二是对滑动窗口内的时间区间窗口QPS累加，这个是在FlowRule中调用的</li></ul><mark class="hl-label blue">时间窗口请求量统计</mark> <p>回顾StatisticSlot，有这样一段代码：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925180522926.png" alt="image-20210925180522926"></p><p>就是在统计通过该节点的QPS，我们跟入看看，这里进入了DefaultNode内部：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925180619492.png" alt="image-20210925180619492"></p><p>发现同时对<code>DefaultNode</code>和<code>ClusterNode</code>在做QPS统计，我们知道<code>DefaultNode</code>和<code>ClusterNode</code>都是<code>StatisticNode</code>的子类，这里调用<code>addPassRequest()</code>方法，最终都会进入<code>StatisticNode</code>中。</p><p>随便跟入一个：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925180810181.png" alt="image-20210925180810181"></p><p>这里有秒、分两种纬度的统计，对应两个计数器。找到对应的成员变量，可以看到：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925180954856.png" alt="image-20210925180954856"></p><p>两个计数器都是ArrayMetric类型，并且传入了两个参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// intervalInMs：是滑动窗口的时间间隔，默认为 1 秒</span></span><br><span class="line"><span class="comment">// sampleCount: 时间窗口的分隔数量，默认为 2，就是把 1秒分为 2个小时间窗</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayMetric</span><span class="params">(<span class="type">int</span> sampleCount, <span class="type">int</span> intervalInMs)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.data = <span class="keyword">new</span> <span class="title class_">OccupiableBucketLeapArray</span>(sampleCount, intervalInMs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925181359203.png" alt="image-20210925181359203"></p><p>接下来，我们进入<code>ArrayMetric</code>类的<code>addPass</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPass</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前时间所在的时间窗</span></span><br><span class="line">    WindowWrap&lt;MetricBucket&gt; wrap = data.currentWindow();</span><br><span class="line">    <span class="comment">// 计数器 +1</span></span><br><span class="line">    wrap.value().addPass(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，计数器如何知道当前所在的窗口是哪个呢？</p><p>这里的data是一个LeapArray：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925181714605.png" alt="image-20210925181714605"></p><p>LeapArray的四个属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LeapArray</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 小窗口的时间长度，默认是500ms ，值 = intervalInMs / sampleCount</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> windowLengthInMs;</span><br><span class="line">    <span class="comment">// 滑动窗口内的 小窗口 数量，默认为 2</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> sampleCount;</span><br><span class="line">    <span class="comment">// 滑动窗口的时间间隔，默认为 1000ms</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> intervalInMs;</span><br><span class="line">    <span class="comment">// 滑动窗口的时间间隔，单位为秒，默认为 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> intervalInSecond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LeapArray是一个环形数组，因为时间是无限的，数组长度不可能无限，因此数组中每一个格子放入一个时间窗（window），当数组放满后，角标归0，覆盖最初的window。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925182127206.png" alt="image-20210925182127206"></p><p>因为滑动窗口最多分成sampleCount数量的小窗口，因此数组长度只要大于sampleCount，那么最近的一个滑动窗口内的2个小窗口就永远不会被覆盖，就不用担心旧数据被覆盖的问题了。</p><p>我们跟入<code>data.currentWindow();</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> WindowWrap&lt;T&gt; <span class="title function_">currentWindow</span><span class="params">(<span class="type">long</span> timeMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 计算当前时间对应的数组角标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> calculateTimeIdx(timeMillis);</span><br><span class="line">    <span class="comment">// 计算当前时间所在窗口的开始时间.</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">windowStart</span> <span class="operator">=</span> calculateWindowStart(timeMillis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 先根据角标获取数组中保存的 oldWindow 对象，可能是旧数据，需要判断.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * (1) oldWindow 不存在, 说明是第一次，创建新 window并存入，然后返回即可</span></span><br><span class="line"><span class="comment">         * (2) oldWindow的 starTime = 本次请求的 windowStar, 说明正是要找的窗口，直接返回.</span></span><br><span class="line"><span class="comment">         * (3) oldWindow的 starTime &lt; 本次请求的 windowStar, 说明是旧数据，需要被覆盖，创建 </span></span><br><span class="line"><span class="comment">         *     新窗口，覆盖旧窗口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        WindowWrap&lt;T&gt; old = array.get(idx);</span><br><span class="line">        <span class="keyword">if</span> (old == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建新 window</span></span><br><span class="line">            WindowWrap&lt;T&gt; window = <span class="keyword">new</span> <span class="title class_">WindowWrap</span>&lt;T&gt;(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));</span><br><span class="line">            <span class="comment">// 基于CAS写入数组，避免线程安全问题</span></span><br><span class="line">            <span class="keyword">if</span> (array.compareAndSet(idx, <span class="literal">null</span>, window)) &#123;</span><br><span class="line">                <span class="comment">// 写入成功，返回新的 window</span></span><br><span class="line">                <span class="keyword">return</span> window;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 写入失败，说明有并发更新，等待其它人更新完成即可</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart == old.windowStart()) &#123;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart &gt; old.windowStart()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (updateLock.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取并发锁，覆盖旧窗口并返回</span></span><br><span class="line">                    <span class="keyword">return</span> resetWindowTo(old, windowStart);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    updateLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取锁失败，等待其它线程处理就可以了</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowStart &lt; old.windowStart()) &#123;</span><br><span class="line">            <span class="comment">// 这种情况不应该存在，写这里只是以防万一。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowWrap</span>&lt;T&gt;(windowLengthInMs, windowStart, newEmptyBucket(timeMillis));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到当前时间所在窗口（WindowWrap）后，只要调用WindowWrap对象中的add方法，计数器+1即可。</p><p>这里只负责统计每个窗口的请求量，不负责拦截。限流拦截要看FlowSlot中的逻辑。</p><hr><mark class="hl-label red">滑动窗口QPS计算</mark> <p>FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的DefaultController中的canPass方法来分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算目前为止滑动窗口内已经存在的请求量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">curCount</span> <span class="operator">=</span> avgUsedTokens(node);</span><br><span class="line">    <span class="comment">// 判断：已使用请求量 + 需要的请求量（1） 是否大于 窗口的请求阈值</span></span><br><span class="line">    <span class="keyword">if</span> (curCount + acquireCount &gt; count) &#123;</span><br><span class="line">        <span class="comment">// 大于，说明超出阈值，返回false</span></span><br><span class="line">        <span class="keyword">if</span> (prioritized &amp;&amp; grade == RuleConstant.FLOW_GRADE_QPS) &#123;</span><br><span class="line">            <span class="type">long</span> currentTime;</span><br><span class="line">            <span class="type">long</span> waitInMs;</span><br><span class="line">            currentTime = TimeUtil.currentTimeMillis();</span><br><span class="line">            waitInMs = node.tryOccupyNext(currentTime, acquireCount, count);</span><br><span class="line">            <span class="keyword">if</span> (waitInMs &lt; OccupyTimeoutProperty.getOccupyTimeout()) &#123;</span><br><span class="line">                node.addWaitingRequest(currentTime + waitInMs, acquireCount);</span><br><span class="line">                node.addOccupiedPass(acquireCount);</span><br><span class="line">                sleep(waitInMs);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PriorityWaitException</span>(waitInMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 小于等于，说明在阈值范围内，返回true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，判断的关键就是<code>int curCount = avgUsedTokens(node);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">avgUsedTokens</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT_AVG_USED_TOKENS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grade == RuleConstant.FLOW_GRADE_THREAD ? node.curThreadNum() : (<span class="type">int</span>)(node.passQps());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们采用的是限流，走<code>node.passQps()</code>逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里又进入了 StatisticNode类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">passQps</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 请求量 ÷ 滑动窗口时间间隔 ，得到的就是QPS</span></span><br><span class="line">    <span class="keyword">return</span> rollingCounterInSecond.pass() / rollingCounterInSecond.getWindowIntervalInSec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>rollingCounterInSecond.pass()</code>是如何得到请求量的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollingCounterInSecond 本质是ArrayMetric，之前说过</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">pass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前窗口</span></span><br><span class="line">    data.currentWindow();</span><br><span class="line">    <span class="type">long</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取 当前时间的 滑动窗口范围内 的所有小窗口</span></span><br><span class="line">    List&lt;MetricBucket&gt; list = data.values();</span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span> (MetricBucket window : list) &#123;</span><br><span class="line">        <span class="comment">// 累加求和</span></span><br><span class="line">        pass += window.pass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> pass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看<code>data.values()</code>如何获取 滑动窗口范围内 的所有小窗口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处进入LeapArray类中：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">values</span><span class="params">(<span class="type">long</span> timeMillis)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建空集合，大小等于 LeapArray长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> array.length();</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;(size);</span><br><span class="line"><span class="comment">// 遍历 LeapArray</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取每一个小窗口</span></span><br><span class="line">        WindowWrap&lt;T&gt; windowWrap = array.get(i);</span><br><span class="line">        <span class="comment">// 判断这个小窗口是否在 滑动窗口时间范围内（1秒内）</span></span><br><span class="line">        <span class="keyword">if</span> (windowWrap == <span class="literal">null</span> || isWindowDeprecated(timeMillis, windowWrap)) &#123;</span><br><span class="line">            <span class="comment">// 不在范围内，则跳过</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在范围内，则添加到集合中</span></span><br><span class="line">        result.add(windowWrap.value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回集合</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，<code>isWindowDeprecated(timeMillis, windowWrap)</code>又是如何判断窗口是否符合要求呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWindowDeprecated</span><span class="params">(<span class="type">long</span> time, WindowWrap&lt;T&gt; windowWrap)</span> &#123;</span><br><span class="line">    <span class="comment">// 当前时间 - 窗口开始时间  是否大于 滑动窗口的最大间隔（1秒）</span></span><br><span class="line">    <span class="comment">// 也就是说，我们要统计的时 距离当前时间1秒内的 小窗口的 count之和</span></span><br><span class="line">    <span class="keyword">return</span> time - windowWrap.windowStart() &gt; intervalInMs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="漏桶"><a href="#漏桶" class="headerlink" title="漏桶"></a>漏桶</h4><p>上一节我们讲过，FlowSlot的限流判断最终都由<code>TrafficShapingController</code>接口中的<code>canPass</code>方法来实现。该接口有三个实现类：</p><ul><li>DefaultController：快速失败，默认的方式，基于滑动时间窗口算法</li><li>WarmUpController：预热模式，基于滑动时间窗口算法，只不过阈值是动态的</li><li>RateLimiterController：排队等待模式，基于漏桶算法</li></ul><p>因此，我们跟入默认的RateLimiterController中的canPass方法来分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPass</span><span class="params">(Node node, <span class="type">int</span> acquireCount, <span class="type">boolean</span> prioritized)</span> &#123;</span><br><span class="line">    <span class="comment">// Pass when acquire count is less or equal than 0.</span></span><br><span class="line">    <span class="keyword">if</span> (acquireCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阈值小于等于 0 ，阻止请求</span></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> TimeUtil.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 计算两次请求之间允许的最小时间间隔</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> Math.round(<span class="number">1.0</span> * (acquireCount) / count * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算本次请求 允许执行的时间点 = 最近一次请求的可执行时间 + 两次请求的最小间隔</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">expectedTime</span> <span class="operator">=</span> costTime + latestPassedTime.get();</span><br><span class="line"><span class="comment">// 如果允许执行的时间点小于当前时间，说明可以立即执行</span></span><br><span class="line">    <span class="keyword">if</span> (expectedTime &lt;= currentTime) &#123;</span><br><span class="line">        <span class="comment">// 更新上一次的请求的执行时间</span></span><br><span class="line">        latestPassedTime.set(currentTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不能立即执行，需要计算 预期等待时长</span></span><br><span class="line">        <span class="comment">// 预期等待时长 = 两次请求的最小间隔 +最近一次请求的可执行时间 - 当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> costTime + latestPassedTime.get() - TimeUtil.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 如果预期等待时间超出阈值，则拒绝请求</span></span><br><span class="line">        <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 预期等待时间小于阈值，更新最近一次请求的可执行时间，加上costTime</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">oldTime</span> <span class="operator">=</span> latestPassedTime.addAndGet(costTime);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 保险起见，再判断一次预期等待时间，是否超过阈值</span></span><br><span class="line">                waitTime = oldTime - TimeUtil.currentTimeMillis();</span><br><span class="line">                <span class="keyword">if</span> (waitTime &gt; maxQueueingTimeMs) &#123;</span><br><span class="line">                    <span class="comment">// 如果超过，则把刚才 加 的时间再 减回来</span></span><br><span class="line">                    latestPassedTime.addAndGet(-costTime);</span><br><span class="line">                    <span class="comment">// 拒绝</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// in race condition waitTime may &lt;= 0</span></span><br><span class="line">                <span class="keyword">if</span> (waitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 预期等待时间在阈值范围内，休眠要等待的时间，醒来后继续执行</span></span><br><span class="line">                    Thread.sleep(waitTime);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与我们之前分析的漏桶算法基本一致：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925210716675.png" alt="image-20210925210716675"></p><hr><h3 id="DegradeSlot"><a href="#DegradeSlot" class="headerlink" title="DegradeSlot"></a>DegradeSlot</h3><p>最后一关，就是降级规则判断了。</p><p>Sentinel的降级是基于状态机来实现的：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925211020881.png" alt="image-20210925211020881"></p><p>对应的实现在DegradeSlot类中，核心API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entry</span><span class="params">(Context context, ResourceWrapper resourceWrapper, DefaultNode node, </span></span><br><span class="line"><span class="params">                  <span class="type">int</span> count, <span class="type">boolean</span> prioritized, Object... args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 熔断降级规则判断</span></span><br><span class="line">    performChecking(context, resourceWrapper);</span><br><span class="line"><span class="comment">// 继续下一个slot</span></span><br><span class="line">    fireEntry(context, resourceWrapper, node, count, prioritized, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续进入<code>performChecking</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performChecking</span><span class="params">(Context context, ResourceWrapper r)</span> <span class="keyword">throws</span> BlockException &#123;</span><br><span class="line">    <span class="comment">// 获取当前资源上的所有的断路器 CircuitBreaker</span></span><br><span class="line">    List&lt;CircuitBreaker&gt; circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());</span><br><span class="line">    <span class="keyword">if</span> (circuitBreakers == <span class="literal">null</span> || circuitBreakers.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (CircuitBreaker cb : circuitBreakers) &#123;</span><br><span class="line">        <span class="comment">// 遍历断路器，逐个判断</span></span><br><span class="line">        <span class="keyword">if</span> (!cb.tryPass(context)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DegradeException</span>(cb.getRule().getLimitApp(), cb.getRule());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CircuitBreaker"><a href="#CircuitBreaker" class="headerlink" title="CircuitBreaker"></a>CircuitBreaker</h4><p>我们进入CircuitBreaker的tryPass方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryPass</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断状态机状态</span></span><br><span class="line">    <span class="keyword">if</span> (currentState.get() == State.CLOSED) &#123;</span><br><span class="line">        <span class="comment">// 如果是closed状态，直接放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentState.get() == State.OPEN) &#123;</span><br><span class="line">        <span class="comment">// 如果是OPEN状态，断路器打开</span></span><br><span class="line">        <span class="comment">// 继续判断OPEN时间窗是否结束，如果是则把状态从OPEN切换到 HALF_OPEN，返回true</span></span><br><span class="line">        <span class="keyword">return</span> retryTimeoutArrived() &amp;&amp; fromOpenToHalfOpen(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// OPEN状态，并且时间窗未到，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关时间窗的判断在<code>retryTimeoutArrived()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">retryTimeoutArrived</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 当前时间 大于 下一次 HalfOpen的重试时间</span></span><br><span class="line">    <span class="keyword">return</span> TimeUtil.currentTimeMillis() &gt;= nextRetryTimestamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OPEN到HALF_OPEN切换在<code>fromOpenToHalfOpen(context)</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">fromOpenToHalfOpen</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 基于CAS修改状态，从 OPEN到 HALF_OPEN</span></span><br><span class="line">    <span class="keyword">if</span> (currentState.compareAndSet(State.OPEN, State.HALF_OPEN)) &#123;</span><br><span class="line">        <span class="comment">// 状态变更的事件通知</span></span><br><span class="line">        notifyObservers(State.OPEN, State.HALF_OPEN, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 得到当前资源</span></span><br><span class="line">        <span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> context.getCurEntry();</span><br><span class="line">        <span class="comment">// 给资源设置监听器，在资源Entry销毁时（资源业务执行完毕时）触发</span></span><br><span class="line">        entry.whenTerminate(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;Context, Entry&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Context context, Entry entry)</span> &#123;</span><br><span class="line">                <span class="comment">// 判断 资源业务是否异常</span></span><br><span class="line">                <span class="keyword">if</span> (entry.getBlockError() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果异常，则再次进入OPEN状态</span></span><br><span class="line">                    currentState.compareAndSet(State.HALF_OPEN, State.OPEN);</span><br><span class="line">                    notifyObservers(State.HALF_OPEN, State.OPEN, <span class="number">1.0d</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里出现了从OPEN到HALF_OPEN、从HALF_OPEN到OPEN的变化，但是还有几个没有：</p><ul><li>从CLOSED到OPEN</li><li>从HALF_OPEN到CLOSED</li></ul><h4 id="触发断路器"><a href="#触发断路器" class="headerlink" title="触发断路器"></a>触发断路器</h4><p>请求经过所有插槽 后，一定会执行exit方法，而在DegradeSlot的exit方法中：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925213440686.png" alt="image-20210925213440686"></p><p>会调用CircuitBreaker的onRequestComplete方法。而CircuitBreaker有两个实现：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210925213939035.png" alt="image-20210925213939035"></p><p>我们这里以异常比例熔断为例来看，进入<code>ExceptionCircuitBreaker</code>的<code>onRequestComplete</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestComplete</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取资源 Entry</span></span><br><span class="line">    <span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> context.getCurEntry();</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试获取 资源中的 异常</span></span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">error</span> <span class="operator">=</span> entry.getError();</span><br><span class="line">    <span class="comment">// 获取计数器，同样采用了滑动窗口来计数</span></span><br><span class="line">    <span class="type">SimpleErrorCounter</span> <span class="variable">counter</span> <span class="operator">=</span> stat.currentWindow().value();</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果出现异常，则 error计数器 +1</span></span><br><span class="line">        counter.getErrorCount().add(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不管是否出现异常，total计数器 +1</span></span><br><span class="line">    counter.getTotalCount().add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 判断异常比例是否超出阈值</span></span><br><span class="line">    handleStateChangeWhenThresholdExceeded(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看阈值判断的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleStateChangeWhenThresholdExceeded</span><span class="params">(Throwable error)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果当前已经是OPEN状态，不做处理</span></span><br><span class="line">    <span class="keyword">if</span> (currentState.get() == State.OPEN) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 如果已经是 HALF_OPEN 状态，判断是否需求切换状态</span></span><br><span class="line">    <span class="keyword">if</span> (currentState.get() == State.HALF_OPEN) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 没有异常，则从 HALF_OPEN 到 CLOSED</span></span><br><span class="line">            fromHalfOpenToClose();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 有一次，再次进入OPEN</span></span><br><span class="line">            fromHalfOpenToOpen(<span class="number">1.0d</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 说明当前是CLOSE状态，需要判断是否触发阈值</span></span><br><span class="line">    List&lt;SimpleErrorCounter&gt; counters = stat.values();</span><br><span class="line">    <span class="type">long</span> <span class="variable">errCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">totalCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 累加计算 异常请求数量、总请求数量</span></span><br><span class="line">    <span class="keyword">for</span> (SimpleErrorCounter counter : counters) &#123;</span><br><span class="line">        errCount += counter.errorCount.sum();</span><br><span class="line">        totalCount += counter.totalCount.sum();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果总请求数量未达到阈值，什么都不做</span></span><br><span class="line">    <span class="keyword">if</span> (totalCount &lt; minRequestAmount) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">curCount</span> <span class="operator">=</span> errCount;</span><br><span class="line">    <span class="keyword">if</span> (strategy == DEGRADE_GRADE_EXCEPTION_RATIO) &#123;</span><br><span class="line">        <span class="comment">// 计算请求的异常比例</span></span><br><span class="line">        curCount = errCount * <span class="number">1.0d</span> / totalCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果比例超过阈值，切换到 OPEN</span></span><br><span class="line">    <span class="keyword">if</span> (curCount &gt; threshold) &#123;</span><br><span class="line">        transformToOpen(curCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h2><p>Sentinel 提供多样化的 SPI 接口用于提供扩展的能力。开发者可以在用同一个 <code>sentinel-core</code> 的基础上自行扩展接口实现，从而可以方便地根据业务需求给 Sentinel 添加自定义的逻辑。目前 Sentinel 提供如下的扩展点：</p><ul><li>初始化过程扩展：提供 <code>InitFunc</code> SPI接口，可以添加自定义的一些初始化逻辑，如动态规则源注册等。</li><li>Slot/Slot Chain 扩展：用于给 Sentinel 功能链添加自定义的功能并自由编排。</li><li>指标统计扩展（StatisticSlot Callback）：用于扩展 StatisticSlot 指标统计相关的逻辑。</li><li>Transport 扩展：提供 CommandHandler、CommandCenter 等接口，用于对心跳发送、监控 API Server 进行扩展。</li><li>集群流控扩展：可以方便地定制 token client/server 自定义实现，可参考<a href="https://github.com/alibaba/Sentinel/wiki/集群流控#扩展接口设计">对应文档</a></li><li>日志扩展：用于自定义 record log Logger，可用于对接 slf4j 等标准日志实现。</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/164955218-3469f26d-3838-41fc-9e89-c6fa0997b8c8.png" alt="image"></p>]]></content>
    
    
    <summary type="html">工作原理分析、核心源码解析</summary>
    
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>线程池解析</title>
    <link href="https://wuwawawa.github.io/posts/927b9f8f.html"/>
    <id>https://wuwawawa.github.io/posts/927b9f8f.html</id>
    <published>2024-03-26T07:50:31.000Z</published>
    <updated>2024-03-27T07:24:22.086Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">Java线程池实现原理及其在美团业务中的实践</a></p><p><a href="https://my.oschina.net/andylucc/blog/648127">更好的使用 JAVA 线程池</a></p><h2 id="工作模型以及状态流转"><a href="#工作模型以及状态流转" class="headerlink" title="工作模型以及状态流转"></a>工作模型以及状态流转</h2><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240326191032918.png" alt="image-20240326191032918" style="zoom:50%;" /></p><mark class="hl-label blue">ctl</mark> <figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">前三位表示线程池状态，后二十九位表示工作线程数</span><br><span class="line">RUNNING      11100000000000000000000000000000      -536870912</span><br><span class="line">SHUTDOWN     00000000000000000000000000000000               0</span><br><span class="line">STOP         00100000000000000000000000000000       536870912</span><br><span class="line">TIDYING      01000000000000000000000000000000      1073741824</span><br><span class="line">TERMINATED   01100000000000000000000000000000      1610612736</span><br><span class="line">从小到大 RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">运行状态</th><th style="text-align:center">状态描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>RUNNING</code></td><td style="text-align:center">能接受新提交的任务，并且也能处理阻塞队列中的任务</td></tr><tr><td style="text-align:left"><code>SHUTDOWN</code></td><td style="text-align:center">关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务</td></tr><tr><td style="text-align:left"><code>STOP</code></td><td style="text-align:center">不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程</td></tr><tr><td style="text-align:left"><code>TIDYING</code></td><td style="text-align:center">所有的任务都已终止了，workerCount（有效线程数）为0</td></tr><tr><td style="text-align:left"><code>TERMINATED</code></td><td style="text-align:center">在terminated()方法执行完后进入该状态</td></tr></tbody></table></div><mark class="hl-label green">全局锁mainLock</mark> <p>源码中，发现很多地方都会用到mainLock，它是线程池中的一把全局锁，主要是用来控制works 集合的并发安全，因为如果没有这把全局锁，就有可能多个线程公用同一个线程池对象，如果一个线程在提交任务，一个线程在shutdown线程池，如果不做并发控制，那就有可能线程池shutdown了，但是还有工作线程没有被中断，如果1个线程在shutdown，99个线程在提交任务，那么最终就可能导致线程池关闭了，但是线程池中的很多线程都没有停止，仍然在运行，这肯定是不行，所以需要这把全局锁来对works集合的操作进行并发安全控制。</p><h2 id="线程运行、异常处理、保活、回收"><a href="#线程运行、异常处理、保活、回收" class="headerlink" title="线程运行、异常处理、保活、回收"></a>线程运行、异常处理、保活、回收</h2><p>在线程池中的线程没有核心线程与非核心线程之分，没有变量来区分，它们直接没有明显的边界。只有核心线程数和非核心线程数这么一说，保证线程池中有这么多核心线程数。</p><mark class="hl-label blue">runWorker</mark> <p>核心线程可以被回收，只有在以下两个条件同时满足时：</p><ol><li>线程池中的线程数量超过了核心线程数，同时所有的线程都处于闲置状态，即没有正在处理任务。</li><li>线程池的keepAliveTime时间到达后，即使当前线程数量超过核心线程数，也会被回收。</li></ol><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240326212846472.png" alt="image-20240326212846472" style="zoom:67%;" /></p><blockquote><p>addWorker方法</p></blockquote><p>addWorker方法是核心方法，是用来添加线程的，core参数表示条件的是核心线程还是非核心线程。</p><p>在看这个方法之前，我们不妨先自己来分析一下，什么是添加线程？ </p><p>实际上就要开启一个线程，不管是核心线程还是非核心线程其实都只是一个普通的线程，而核心和非核心的区别在于： </p><ol><li><p>如果是要添加核心工作线程，那么就得判断目前的工作线程数是否超过corePoolSize</p><p>a. 如果没有超过，则直接开启新的工作线程执行任务</p><p>b. 如果超过了，则不会开启新的工作线程，而是把任务进行入队2</p></li><li><p>如果要添加的是非核心工作线程，那就要判断目前的工作线程数是否超过maximumPoolSize</p><p>a. 如果没有超过，则直接开启新的工作线程执行任务</p><p>b. 如果超过了，则拒绝执行任务. . . . . . </p></li></ol><p>所以在addWorker方法中，首先就要判断工作线程有没有超过限制，如果没有超过限制再去开启一个线程。</p><p>并且在addWorker方法中，还得判断线程池的状态，如果线程池的状态不是RUNNING状态了，那就没必要要去添加线程了，当然有一种特例，就是线程池的状态是SHUTDOWN，但是队列中有任务，那此时还是需要添加添加一个线程的。</p><p>那这种特例是如何产生的呢？ </p><p>我们前面提到的都是开启新的工作线程，那么工作线程怎么回收呢？不可能开启的工作线程一直活着， 因为如果任务由多变少，那也就不需要过多的线程资源，所以线程池中会有机制对开启的工作线程进行回收，如何回收的，后文会提到，我们这里先分析，有没有可能线程池中所有的线程都被回收了，答案的是有的。</p><p>首先非核心工作线程被回收是可以理解的，那核心工作线程要不要回收掉呢？其实线程池存在的意义， 就是提交生成好线程资源，需要线程的时候直接使用就可以，而不需要临时去开启线程，所以正常情况下，开启的核心工作线程是不用回收掉的，就算暂时没有任务要处理，也不用回收，就让核心工作线程在那等着就可以了。</p><p>但是 ！在线程池中有这么一个参数：<code>allowCoreThreadTimeOut</code>，表示是否允许核心工作线程超时，意思就是是否允许核心工作线程回收，默认这个参数为false，但是我们可以调用allowCoreThreadTimeOut(boolean value)来把这个参数改为true，只要改了，那么核心工作线程也就会被回收了，那这样线程池中的所有工作线程都可能被回收掉，那如果所有工作线程都被回收掉之后，阻塞队列中来了一个任务，这样就形成了特例情况。</p>]]></content>
    
    
    <summary type="html">ctl线程池五种状态 线程如何保活、回收 核心线程执行任务时抛了异常如果继续</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="JUC" scheme="https://wuwawawa.github.io/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>NETWORK&amp;OS</title>
    <link href="https://wuwawawa.github.io/posts/8969a1d0.html"/>
    <id>https://wuwawawa.github.io/posts/8969a1d0.html</id>
    <published>2024-03-07T08:08:19.000Z</published>
    <updated>2024-04-25T03:39:49.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络系统"><a href="#网络系统" class="headerlink" title="网络系统"></a>网络系统</h2><p>neety原理</p><p>Netty是一个基于Java NIO的网络应用程序框架，它通过使用多路复用、事件驱动和异步I/O来提高网络应用程序的网络性能。</p><p>Netty中有两种类型的线程：Boss线程和Worker线程。</p><p>Boss线程用于监听并接受新的客户端连接请求，并将其分配给Worker线程处理。</p><p>Worker线程则负责处理与客户端的数据通信，在Netty中，每个Worker线程都有其自己的EventLoop，用于处理连接到该Worker线程的所有客户端。</p><p>因此，Boss线程专门用于客户端连接管理，而Worker线程则用于客户端数据处理。</p><p>这样的设计可以提高网络应用程序的吞吐量，并且可以有效地利用多核系统的资源。</p><details class="folding-tag" cyan close><summary> IO多路复用 </summary>              <div class='content'>              <p><mark class="hl-label blue">select/poll</mark> </p><p>select 实现多路复用的方式是，将已连接的 Socket 都放到一个<strong>文件描述符集合</strong>，然后调用 select 函数将文件描述符集合<strong>拷贝</strong>到内核里，让内核来检查是否有网络事件产生，检查的方式很粗暴，就是通过<strong>遍历</strong>文件描述符集合的方式，当检查到有事件产生后，将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合<strong>拷贝</strong>回用户态里，然后用户态还需要再通过<strong>遍历</strong>的方法找到可读或可写的 Socket，然后再对其处理。</p><p><mark class="hl-label green">epoll</mark> </p><p>epoll 在内核里使用<strong>红黑树来跟踪进程所有待检测的文件描述字</strong>，把需要监控的 socket 通过 <code>epoll_ctl()</code> 函数加入内核中的红黑树里。</p><p>epoll 使用<strong>事件驱动</strong>的机制，内核里<strong>维护了一个链表来记录就绪事件</strong>，当某个 socket 有事件发生时，通过<strong>回调函数</strong>内核会将其加入到这个就绪事件列表中，当用户调用 <code>epoll_wait()</code> 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。</p>              </div>            </details><hr><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><h3 id="传统的文件传输"><a href="#传统的文件传输" class="headerlink" title="传统的文件传输"></a>传统的文件传输</h3><p>用户进程调用 read 方法，向操作系统发出 I/O 请求，请求读取数据到自己的内存缓冲区中，从用户态切换至内核态，进程进入阻塞状态；</p><p>① DMA 将磁盘中的数据拷贝到内核缓冲区中，此时不占用 CPU，CPU 可以执行其他任务。</p><p>② CPU 收到 DMA 的信号，知道数据已经准备好，于是将数据从内核拷贝到用户空间，系统调用返回，从内核态态切换至用户态。</p><p> 用户进程调用 read 方法，向操作系统发出 I/O 请求，从用户态切换至内核态。</p><p>③ CPU将用户的缓冲区里的数据再拷贝到内核的 socket 的缓冲区里。</p><p>④ DMA把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BC%A0%E7%BB%9F%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93.png" alt="img" style="zoom:50%;" /></p><hr><h3 id="mmap-write"><a href="#mmap-write" class="headerlink" title="mmap + write"></a>mmap + write</h3><p><code>read()</code> 系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，于是为了减少这一步开销，我们可以用 <code>mmap()</code> 替换 <code>read()</code> 系统调用函数。</p><p><code>mmap()</code> 系统调用函数会直接把内核缓冲区里的数据「<strong>映射</strong>」到用户空间，这样，操作系统内核与用户空间就不需要再进行任何的数据拷贝操作。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/20240310155250.png" alt="img" style="zoom:50%;" /></p><p>具体过程如下：</p><ul><li>应用进程调用了 <code>mmap()</code> 后，DMA 会把磁盘的数据拷贝到内核的缓冲区里。接着，应用进程跟操作系统内核「共享」这个缓冲区；</li><li>应用进程再调用 <code>write()</code>，操作系统直接将内核缓冲区的数据拷贝到 socket 缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；</li><li>最后，把内核的 socket 缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。</li></ul><p>我们可以得知，通过使用 <code>mmap()</code> 来代替 <code>read()</code>， 可以减少一次数据拷贝的过程。</p><p>但这还不是最理想的零拷贝，因为仍然需要通过 CPU 把内核缓冲区的数据拷贝到 socket 缓冲区里，而且仍然需要 4 次上下文切换，因为系统调用还是 2 次。</p><hr><h3 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h3><p>在 Linux 内核版本 2.1 中，提供了一个专门发送文件的系统调用函数 <code>sendfile()</code></p><p>它可以替代前面的 <code>read()</code> 和 <code>write()</code> 这两个系统调用，这样就可以减少一次系统调用，也就减少了 2 次上下文切换的开销。</p><p>该系统调用，可以直接把内核缓冲区里的数据拷贝到 socket 缓冲区里，不再拷贝到用户态，这样就只有 2 次上下文切换，和 3 次数据拷贝。如下图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/senfile-3%E6%AC%A1%E6%8B%B7%E8%B4%9D.png" alt="img" style="zoom:50%;" /></p><hr><h3 id="SG-DMA"><a href="#SG-DMA" class="headerlink" title="SG-DMA"></a>SG-DMA</h3><p>从 Linux 内核 <code>2.4</code> 版本开始起，对于支持网卡支持 SG-DMA 技术的情况下， <code>sendfile()</code> 系统调用的过程发生了点变化，具体过程如下</p><ul><li>第一步，通过 DMA 将磁盘上的数据拷贝到内核缓冲区里；</li><li>第二步，缓冲区描述符和数据长度传到 socket 缓冲区，这样网卡的 SG-DMA 控制器就可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；</li></ul><p>所以，这个过程之中，只进行了 2 次数据拷贝，如下图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/senfile-%E9%9B%B6%E6%8B%B7%E8%B4%9D.png" alt="img" style="zoom:50%;" /></p><p>零拷贝技术的文件传输方式相比传统文件传输的方式，减少了 2 次上下文切换和数据拷贝次数，<strong>只需要 2 次上下文切换和数据拷贝次数，就可以完成文件的传输，而且 2 次的数据拷贝过程，都不需要通过 CPU，2 次都是由 DMA 来搬运。</strong></p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p><a href="https://www.xiaolincoding.com/network/3_tcp/tcp_interview.html">小林TCP</a></p><hr><details class="folding-tag" cyan close><summary> 键入网址到网页显示，期间发生了什么？ </summary>              <div class='content'>              <ol><li><p>HTTP</p><p>解析URL 协议 + Web服务器 + 资源名 生成 HTTP 请求消息</p></li><li><p>DNS 域名解析 将域名解析成IP地址</p><p>各级缓存 -&gt; 本地DNS服务器 -&gt; 根域名服务器 -&gt; 顶级域名服务器 -&gt; 权威域名服务器</p></li><li><p>各级协议栈</p><p>TCP 三次握手建立连接 可靠传输</p><p>IP 填写源地址 IP 和 目标地址 IP</p><p>ARP 广播寻找目标MAC地址</p></li><li><p>设备间传输<br>网卡 -&gt; 交换机 -&gt; 路由器 -&gt; 服务器</p></li><li><p>协议反解析</p></li><li><p>服务器返回 html + css + javascript</p></li><li><p>浏览器渲染网页</p></li><li><p>TCP四次挥手断开连接</p></li></ol>              </div>            </details><hr>]]></content>
    
    
    <summary type="html">计算机网络&amp;操作系统</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="面试题" scheme="https://wuwawawa.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Mysql&amp;Redis&amp;RocketMQ面试题</title>
    <link href="https://wuwawawa.github.io/posts/a257a413.html"/>
    <id>https://wuwawawa.github.io/posts/a257a413.html</id>
    <published>2024-03-05T06:56:47.000Z</published>
    <updated>2024-04-11T12:01:20.507Z</updated>
    
    <content type="html"><![CDATA[<details class="folding-tag" cyan close><summary> SQL语句在MySQL中的执行过程 </summary>              <div class='content'>              <p>1.连接层 TCP三次握手建立连接 校验用户名密码 读取权限</p><p>2.服务层 缓存查询、Sql分析与优化（走什么索引）、生成执行计划</p><p>3.引擎层 真正的负责了MySQL中数据的存储和提取(日志)</p>              </div>            </details><hr><h2 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h2><blockquote><p>索引优化</p></blockquote><p><a href="https://piaohua.github.io/post/mysql/20230627-index/">https://piaohua.github.io/post/mysql/20230627-index/</a></p><details class="folding-tag" cyan close><summary> 索引及其优缺点 </summary>              <div class='content'>              <p><mark class="hl-label green">优点</mark> </p><p>提高数据检索的效率，降低<code>数据库的IO成本</code></p><p>唯一索引，可以保证数据库表中每一行<code>数据的唯一性</code></p><p>加速表和表之间的连接，减少查询中分组和排序的时间</p><p><mark class="hl-label red">缺点</mark> </p><p>索引需要占<code>磁盘空间</code></p><p>创建索引和维护索引要<code>耗费时间</code></p><p>索引大大提高了查询速度，同时却会<code>降低更新表的速度</code></p>              </div>            </details><hr><details class="folding-tag" blue close><summary> 索引失效场景 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%9C%BA%E6%99%AF.png" alt="1索引失效场景"></p><p><code>MySQL8.0版本</code>开始增加了索引跳跃扫描的功能，当第一列索引的唯一值较少时，即使 where 条件没有第一列索引，查询的时候也可以用到联合索引。比如我们使用的联合索引是 bcd 但是 b 中字段比较少 我们在使用联合索引的时候没有 使用 b 但是依然可以使用联合索引 <strong>MySQL 联合索引有时候遵循最左前缀匹配原则，有时候不遵循。</strong></p>              </div>            </details><hr><details class="folding-tag" yellow close><summary> 索引下推和覆盖索引 </summary>              <div class='content'>              <p><mark class="hl-label green">索引下推</mark> </p><p>索引下推（Index Condition Pushdown）可以在非聚簇索引遍历过程中，对索引中包含的字段先做判断，过滤掉不符合条件的记录，减少回表次数。</p><p><mark class="hl-label blue">覆盖索引</mark> </p><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为 覆盖索引。</p>              </div>            </details><hr><details class="folding-tag" green close><summary> 哪些情况适合创建索引？哪些情况不适合创建索引 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1%E9%80%82%E5%90%88%E4%B8%8D%E9%80%82%E5%90%88%E7%B4%A2%E5%BC%95.png" alt="1适合不适合索引"></p>              </div>            </details><hr><details class="folding-tag" yellow close><summary> mysql索引为什么用B+树？ </summary>              <div class='content'>              <p>Hash索引等值查询效率高，面对范围查询时间复杂度会退化。而且数据的存储是<code>没有顺序的</code>，在 ORDER BY 的情况下，使用 Hash 索引还需要对数据重新排序。对于联合索引的情况，Hash 值是将联合索引键合并后一起来计算的，无法对单独的一个键或者几个索引键进行查询。</p><p>二叉搜索树 不平衡 红黑树 树太高  平衡二叉树 选择耗时</p><p>B+树是平衡和搜索树的结合。 多路平衡</p><p>B+树数据按顺序排列，可以使用「二分查找法」高效定位数据。</p><p>B+树  vs B树  </p><p>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引。</p><p>B+ 树叶子节点之间用链表连接了起来，有利于范围查询，而 B 树要实现范围查询，因此只能通过树的遍历来完成范围查询</p><p>B+树也是多路平衡查找树，其与B树的区别主要在于：</p><p>B树中每个节点（包括叶节点和非叶节点）都存储真实的数据，B+树中只有叶子节点存储真实的数据，非叶节点只存储键。</p><p>B树中一条记录只会出现一次，不会重复出现，而 B+树的键则可能重复重现 ———-  一定会在叶节点出现，也可能在非叶节点重复出现。</p><p>B+树的叶节点之间通过双向链表链接。</p><p>B树中的非叶节点，记录数比子节点个数少1；而 B+树中记录数与子节点个数相同。</p><p>更少的IO次数</p><p>更适用于范围查询</p><p>更稳定的查询效率</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240321164535531.png" alt="image-20240321164535531" style="zoom:33%;" /></p>              </div>            </details><hr><details class="folding-tag" cyan close><summary> count(1)、 count(*)、 count(主键字段) </summary>              <div class='content'>              <p>count(1)、 count(*)、 count(主键字段)在执行的时候，如果表里存在二级索引，优化器就会选择二级索引进行扫描。</p><p>所以，如果要执行 count(1)、 count(*)、 count(主键字段) 时，尽量在数据表上建立二级索引，这样优化器会自动采用 key_len 最小的二级索引进行扫描，相比于扫描主键索引效率会高一些。</p><p>再来，就是不要使用 count(字段) 来统计记录个数，因为它的效率是最差的，会采用全表扫描的方式来统计。如果你非要统计表中该字段不为 NULL 的记录个数，建议给这个字段建立一个二级索引。</p>              </div>            </details><hr><details class="folding-tag" green close><summary> Mysql深分页如何解决 </summary>              <div class='content'>              <p>举一个简单的Sql例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> detail <span class="keyword">where</span> create_time <span class="operator">&gt;</span> <span class="string">&#x27;2022-06-13 00:00&#x27;</span> limit <span class="number">100000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><mark class="hl-label blue">查询过程</mark> </p><p>1.假设我们的<code>create_time</code>是一个二级索引，我们先要找到所有满足记录的条件，拿到了非聚簇索引上记录的主键id。</p><p>2.到聚簇索引进行回表，查询数据。</p><p>3.扫描我们要查询的limit数据，从0开始不断扫描。最后抛弃前100000条。</p><p>原因：</p><p>1.limit要扫描100010条数据，并且进行丢弃。</p><p>2.扫描更多数据也意味着回表数据更多。</p><p><mark class="hl-label green">优化方法</mark> </p><p>1.子查询优化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> detail <span class="keyword">where</span> id <span class="operator">&gt;=</span> (<span class="keyword">select</span> a.id <span class="keyword">from</span> detail a <span class="keyword">where</span> a.create_time <span class="operator">&gt;</span> <span class="string">&#x27;2022-06-13 00:00&#x27;</span> limit <span class="number">100000</span>,<span class="number">1</span>) limit <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>2.偏移法 要知道上次查询的id，并且id自增</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> detail <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">100000</span> <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">10</span>；</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h2 id="Mysql事务"><a href="#Mysql事务" class="headerlink" title="Mysql事务"></a>Mysql事务</h2><details class="folding-tag" cyan close><summary> 事务的ACID特性 </summary>              <div class='content'>              <p>Atomicity 原子性 事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。</p><p>Consistency 一致性 事务执行前后，数据从一个<code>合法性状态</code>变换到另外一个<code>合法性状态</code>。</p><p>Isolation 隔离性 一个事务的执行<code>不能被其他事务干扰</code>，即一个事务内部的操作及使用的数据对<code>并发</code>的其他事务是隔离的，并发执行的各个事务之间不能相互干扰。</p><p>Durability 持久性 一个事务一旦被提交，它对数据库中数据的改变就是 永久性的。</p><ul><li>持久性是通过 redo log （重做日志）来保证的；</li><li>原子性是通过 undo log（回滚日志） 来保证的；</li><li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li><li>一致性则是通过持久性+原子性+隔离性来保证；</li></ul>              </div>            </details><hr><details class="folding-tag" green close><summary> 数据并发问题和事务隔离级别 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240306124025555.png" alt="image-20240306124025555"></p><p>幻读强调的是一个事务按照某个相同条件多次读取记录时，后读取时读到了之前没有读到的记录。</p>              </div>            </details><hr><details class="folding-tag" green close><summary> InnoDB存储引擎对MVCC的实现 </summary>              <div class='content'>              <p>MVCC 是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。它是通过在每个数据行上维护多个版本的数据来实现的。当一个事务要对数据库中的数据进行修改时，MVCC 会为该事务创建一个数据快照，而不是直接修改实际的数据行。</p><p><mark class="hl-label green">MVCC整体操作流程</mark> </p><ol><li>首先获取事务自己的版本号，也就是事务 ID；</li><li>获取 ReadView；</li><li>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</li><li>如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；</li><li>最后返回符合规则的数据。</li></ol><p>使用<code>READ COMMITTED</code>隔离级别的事务在每次查询开始时都会生成一个独立的ReadView</p><p>使用<code>REPEATABLE READ</code>隔离级别的事务来说，只会在第一次执行查询语句时生成一个<code>ReadView</code>，之后的查询就不会重复生成了。</p>              </div>            </details><hr><details class="folding-tag" yellow close><summary> MVCC和Next-key Lock是如何在RR级别下防止幻读的？ </summary>              <div class='content'>              <p><mark class="hl-label blue">执行普通select，此时会以MVCC快照读的方式读取数据</mark> </p><p>在快照读的情况下，RR 隔离级别只会在事务开启后的第一次查询生成 <code>Read View</code> ，并使用至事务提交。所以在生成 <code>Read View</code> 之后其它事务所做的更新、插入记录版本对当前事务并不可见，实现了可重复读和防止快照读下的 “幻读”。</p><p><mark class="hl-label green">执行insert、update、delete等当前读</mark> </p><p>MySQL 里除了普通查询是快照读，其他都是<strong>当前读</strong>，比如 update、insert、delete、select…for update，这些语句执行前都会查询最新版本的数据，然后再做进一步的操作。</p><p>在当前读下，读取的都是最新的数据，如果其它事务有插入新的记录，并且刚好在当前事务查询范围内，就会产生幻读！<code>InnoDB</code> 使用<code>Next-key Lock</code>（记录锁+间隙锁）来防止这种情况。当执行当前读时，会锁定读取到的记录的同时，锁定它们的间隙，防止其它事务在查询范围内插入数据。只要我不让你插入，就不会发生幻读。</p><p>但某些情况下还是会发生幻读。</p><p><a href="https://xiaolincoding.com/mysql/transaction/phantom.html#%E5%B9%BB%E8%AF%BB%E8%A2%AB%E5%AE%8C%E5%85%A8%E8%A7%A3%E5%86%B3%E4%BA%86%E5%90%97">幻读被完全解决了嘛？</a>   </p><p>MySQL 可重复读隔离级别并没有彻底解决幻读，只是很大程度上避免了幻读现象的发生。避免这类特殊场景下发生幻读的现象的话，就是尽量在开启事务之后，马上执行 select … for update 这类当前读的语句，因为它会对记录加 next-key lock，从而避免其他事务插入一条新记录。</p>              </div>            </details><hr><h2 id="Mysql锁"><a href="#Mysql锁" class="headerlink" title="Mysql锁"></a>Mysql锁</h2><details class="folding-tag" cyan close><summary> 间隙锁死锁 </summary>              <div class='content'>              <p>事务的间隙锁之间是相互兼容的，不会产生冲突。</p><p>间隙锁的意义只在于阻止区间被插入，因此是可以共存的。一个事务获取的间隙锁不会阻止另一个事务获取同一个间隙范围的间隙锁。</p><p>如果两个事务分别向对方持有的间隙锁范围内插入一条记录，而插入操作为了获取到插入意向锁，都在等待对方事务的间隙锁释放，于是就造成了循环等待。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/ab%E4%BA%8B%E5%8A%A1%E6%AD%BB%E9%94%81.drawio.png" alt="img" style="zoom:67%;" /></p>              </div>            </details><hr><h2 id="Mysql日志"><a href="#Mysql日志" class="headerlink" title="Mysql日志"></a>Mysql日志</h2><details class="folding-tag" cyan close><summary> undo log和redo log有什么用？ </summary>              <div class='content'>              <p><a href="https://www.xiaolincoding.com/mysql/log/how_update.html#mysql-%E6%97%A5%E5%BF%97-undo-log%E3%80%81redo-log%E3%80%81binlog-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8">MySQL 日志：undo log、redo log、binlog 有什么用？</a></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240306154509741.png" alt="image-20240306154509741"></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 一条更新语句，日志是如何写入的？ </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/15477e4c8e68ee00bc5e496ed287f3af.png" alt=""></p>              </div>            </details><hr><details class="folding-tag" blue close><summary> 为什么需要binlog？ </summary>              <div class='content'>              <p><a href="https://www.xiaolincoding.com/mysql/log/how_update.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-binlog">为什么需要binlog</a></p>              </div>            </details><hr><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><details class="folding-tag" cyan close><summary> Redis为什么这么快？ </summary>              <div class='content'>              <p>CPU 并不是制约 Redis 性能表现的瓶颈所在，更多情况下是受到内存大小和网络I/O的限制，所以 Redis 核心网络模型使用单线程并没有什么问题。</p><p>所以为了提高网络 I/O 的并行度，Redis 6.0 对于网络 I/O 采用多线程来处理。但是对于命令的执行，Redis 仍然使用单线程来处理。</p><p>CPU成为Redis的瓶颈的情况很少见，Redis的瓶颈最有可能是内存的大小或者网络限制。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240307132303677.png" alt="image-20240307132303677"></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 阻塞IO、非阻塞IO、IO多路复用 </summary>              <div class='content'>              <p>IO读取数据分为两个阶段:</p><ol><li>内核准备好数据</li><li>内核把数据从内核态拷贝到用户态</li></ol><blockquote><p>阻塞IO</p></blockquote><p>当用户调用 read 后，用户线程会被阻塞，等内核数据准备好并且数据从内核缓冲区拷贝到用户态缓存区后， read 才会返回。阻塞IO是两个阶段都会阻塞，没有数据时也会阻塞。</p><blockquote><p>非阻塞IO</p></blockquote><p>调用read后，如果没有数据就立马返回，通过不断轮询的方式去调用read，直到数据被拷贝到用户态的应用程序缓冲区，read请求才获取到结果。非阻塞IO阻塞的是第二个阶段，第一阶段没有数据时不会阻塞，第二阶段等待内核把数据从内核态拷贝到用户态的过程中才会阻塞。</p><blockquote><p>Select/poll IO多路复用</p></blockquote><p>一个线程可以同时监听多个socket上的事件（读、写、连接）</p><p>通过Select系统调用 ，用户线程阻塞。将一批文件描述符信息发送给内核，减少对内核的调用次数。由内核去遍历每一个socket查看有无数据到达，有数据到达后将此 Socket 标记为可读或可写， 接着再把整个文件描述符集合<strong>拷贝</strong>回用户态里，然后用户态还需要再通过<strong>遍历</strong>的方法找到可读或可写的 Socket，然后再对其处理。</p><blockquote><p>epoll</p></blockquote><p>epoll 在内核里使用<strong>红黑树来跟踪进程所有待检测的文件描述字</strong>，把需要监控的 socket 通过 <code>epoll_ctl()</code> 函数加入内核中的红黑树里。</p><p>epoll 使用<strong>事件驱动</strong>的机制，内核里<strong>维护了一个链表来记录就绪事件</strong>，当某个 socket 有事件发生时，通过<strong>回调函数</strong>内核会将其加入到这个就绪事件列表中，当用户调用 <code>epoll_wait()</code> 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select/poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。</p>              </div>            </details><hr><details class="folding-tag" green close><summary> Redis 数据结构 </summary>              <div class='content'>              <p><a href="https://www.xiaolincoding.com/redis/data_struct/command.html#string">Redis 常见数据类型和应用场景</a></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt=""></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240308144725480.png" alt="image-20240308144725480"></p><p>整数数组 ： 按序排列 二分查找</p><p>字典：类似java的HashTable，底层是数组加链表来解决哈希冲突 包含两个哈希表，ht[0]平常用，ht[1]用来rehash</p><p>Dict采用渐进式rehash，每次访问Dict时执行一次rehash</p><p>rehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表</p><p>最大的层数是 32</p><p>跳表</p><p>每个Node存储</p><p>score</p><p>数据</p><p>前驱节点指针</p><p>索引数组level</p><p>​    索引跨度</p><p>​    索引指向的node</p><p>插入节点 更新跨度</p>              </div>            </details><details class="folding-tag" blue close><summary> Redis持久化 </summary>              <div class='content'>              <p>RDB写时复制 COW</p><p>通过 fork 创建子进程时不会立刻触发大量内存的拷贝，内存在被修改时会以页为单位进行拷贝，这也就避免了大量拷贝内存而带来的性能问题；</p><p>父子进程共享的空间粒度是页（在Linux中，页的大小为4KB），父/子进程修改某个页时，该页的共享才结束，同时子进程分配该页大小的物理空间复制父进程对应页的内容。这样，如果当子进程运行期间，父子进程都没有修改数据，那么操作系统就节省了大量的内存复制时间和占用空间。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1Redis%E6%8C%81%E4%B9%85%E5%8C%96.png" alt="1Redis持久化"></p>              </div>            </details><hr><p>dict 渐进式哈希</p><hr><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2>]]></content>
    
    
    <summary type="html">Mysql&amp;Redis&amp;RocketMQ面试题</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="面试题" scheme="https://wuwawawa.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java日志体系</title>
    <link href="https://wuwawawa.github.io/posts/b41723d6.html"/>
    <id>https://wuwawawa.github.io/posts/b41723d6.html</id>
    <published>2023-12-25T05:55:36.000Z</published>
    <updated>2024-03-05T07:01:48.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志框架类别"><a href="#日志框架类别" class="headerlink" title="日志框架类别"></a>日志框架类别</h2><h3 id="记录型日志框架"><a href="#记录型日志框架" class="headerlink" title="记录型日志框架"></a>记录型日志框架</h3><ol><li><code>Jul (Java Util Logging)</code>：JDK中的日志记录工具，也常称为JDKLog、jdk-logging，自Java1.4以来的官方日志实现。</li><li><code>Log4j</code>：Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。 Log4j是几种Java日志框架之一。</li><li><code>Log4j</code>：一个具体的日志实现框架，是Log4j 1的下一个版本，与Log4j 1发生了很大的变化，Log4j 2不兼容Log4j 1。</li><li><code>Logback</code>：一个具体的日志实现框架，和Slf4j是同一个作者，但其性能更好(<span class='p green'>推荐使用</span>) 。</li></ol><hr><h3 id="门面型日志框架"><a href="#门面型日志框架" class="headerlink" title="门面型日志框架"></a>门面型日志框架</h3><ol><li><code>JCL</code>：Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging</li><li><code>SLF4J</code>：是一套简易Java日志门面，<span class='p green'>本身并无日志的实现</span>。（Simple Logging Facade for Java，缩写Slf4j）</li></ol><hr><h2 id="Java日志框架发展史"><a href="#Java日志框架发展史" class="headerlink" title="Java日志框架发展史"></a>Java日志框架发展史</h2><div class="tabs" id="429b6ca4-4b72-4496-bb40-135bd75ba457"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-3"><i class="fas fa-candy-cane"></i>3</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-4"><i class="fas fa-child"></i>4</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-5"><i class="fas fa-award"></i>5</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-6"><i class="fas fa-baseball-ball"></i>6</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-7"><i class="fas fa-anchor"></i>7</button></li><li class="tab"><button type="button" data-href="#429b6ca4-4b72-4496-bb40-135bd75ba457-8"><i class="fas fa-bone"></i>8</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="429b6ca4-4b72-4496-bb40-135bd75ba457-1"><p>2001年以前，Java是没有日志库的，打印日志全凭<code>System.out</code>和<code>System.err</code></p><p>缺点:</p><ol><li>产生大量的IO操作同时在生产环境中无法合理的控制是否需要输出</li><li>输出的内容不能保存到文件</li><li>只打印在控制台，打印完就过去了，也就是说除非你一直盯着程序跑</li><li>无法定制化，且日志粒度不够细</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-2"><p>2001年，一个<strong>ceki Gulcü</strong>的大佬搞了一个日志框架 log4j后来( log4j成为Apache项目，Ceki加入Apache组织 Apache还曾经建议Sun引入Log4j到Java的标准库中，但Sun拒绝了.</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/3bd956b4a3e905be00f003e0f3600fb4.png" alt="image-20211212211243016"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-3"><p>Sun有自己的小心思，2002年2月JDK1.4发布，Sun推出了自己的日志标准库JUL(Java Util Logging)，其实是照着Log4j抄的，而且还没抄好，还是在JDK1.5以后性能和可用性才有所提升。由于Log4j比JUL好用，并且成熟，所以Log4j在选择上占据了一定的优势。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-4"><p>2002年8月Apache推出了JCL(Jakarta Commons Logging)，也就是日志抽象层，支持运行时动态加载日志组件的实现，当然也提供一个默认实现Simple Log( ClassLoader 中进行查找，如果能找到Log4j则默认使用log4j实现，如果没有则使用JUL实现，再没有则使用JCL内部提供的 Simple Log实现)。</p><p>但是JUL有三个缺点:</p><p>1．效率较低。 </p><p>2．容易引发混乱。</p><p> 3．使用了自定义ClassLoader的程序中，使用JCL会引发内存泄露。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/bVbAMyv.png" alt="image.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-5"><p>2006年巨佬Ceki( Log4j的作者）因为一些原因离开了Apache组织，之后Ceki觉得JCL不好用，自己搀了一套新的日志标准接口规范Slf4j (Simple Logging Facacfor Java)，也可以称为日志门面，很明显Slf4j是对标JCL，后面也证明了Slf4j比JCL更优秀。 巨佬Ceki提供了一系列的桥接包来帮助Slf4j接口与其他日志库建立关系，这种方式称桥接设计模式。 代码使用Slf4j接口，就可以实现日志的统一标准化，后续如果想要更换日志实现，只需引入Slf4j与相关的桥接包，再引入具体的日志标准库即可。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-6"><p>但是由于<code>Slf4j</code>出来的较晚，而且还只是一个日志接口，所以之前已经出现的日志产品，如<code>JUL</code>和<code>Log4j</code>都是没有实现这个接口的，所以尴尬的是光有一个接口，没有实现的产品也是很憋屈啊，就算开发者想用<code>Slf4j</code>也是用不了。</p><p>于是大佬<strong>Ceki Gülcü</strong>撸出了之前提到的桥接包，于是日志系统现在有了这样的结构</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/bVbAMzq.png" alt="image.png" style="zoom:50%;" /></p><p>但是其实之前很多<code>Java</code>应用应该依赖的<code>JCL</code>，所以光有日志产品桥接包，好像还不够<strong>Ceki Gülcü</strong>：没问题，不就是不够桥接包么，我写，我来证明Slf4j是最完美的。</p><p>于是有了<code>JCL</code>的桥接包</p><p><img src="https://segmentfault.com/img/bVbAMA9" alt="image.png" style="zoom:50%;" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-7"><p>由于使用<code>Slf4j</code>，需要一次桥接包，也就是之前的日志产品都不是正统的<code>Slf4j</code>的实现，因此，2006年，出自<strong>Ceki Gülcü</strong>之手的日志产品<code>Logback</code>应运而生</p><p><code>Logback</code>是完美实现了<code>Slf4j</code>，于是现在日志系统变成了</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/bVbAMUJ.png" alt="未命名文件 (4).png" style="zoom:50%;" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="429b6ca4-4b72-4496-bb40-135bd75ba457-8"><p>2012年，Apache直接推出新项目Log4j2(不兼容Log4j) , Log4j2全面借鉴Slf4j+Logback 。 Log4j2不仅仅具有Logback的所有特性，还做了分离设计，分为log4j-api和log4j-core，log4j-api是日志接口，log4j-core是日志标准库，并且Apache也为Log4j2提供了各种桥接包。</p><p>而且log4j2 的性能提升很大，而且支持异步日志打印。增加很多新的特性。</p><p><img src="https://segmentfault.com/img/bVcTphN" alt="img" style="zoom: 67%;" /></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="Slf4j的使用"><a href="#Slf4j的使用" class="headerlink" title="Slf4j的使用"></a>Slf4j的使用</h2><h3 id="Slf4j与其它日志组件的关系说明"><a href="#Slf4j与其它日志组件的关系说明" class="headerlink" title="Slf4j与其它日志组件的关系说明"></a>Slf4j与其它日志组件的关系说明</h3><p>Slf4j的设计思想比较简洁，使用了Facade设计模式，Slf4j本身只提供了一个<code>slf4j-api-version.jar</code>包，这个jar中主要是日志的抽象接口，jar中本身并没有对抽象出来的接口做实现。</p><p>对于不同的日志实现方案(例如Logback，Log4j…)，封装出不同的桥接组件(例如logback-classic-version.jar，slf4j-log4j12-version.jar)，这样使用过程中可以灵活的选取自己项目里的日志实现。</p><hr><h3 id="Slf4j与其它日志组件集成图"><a href="#Slf4j与其它日志组件集成图" class="headerlink" title="Slf4j与其它日志组件集成图"></a>Slf4j与其它日志组件集成图</h3><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20231225145318031.png" alt="image-20231225145318031" style="zoom:67%;" /></p><p>如图所示，应用调了sl4j-api，即<strong>日志门面接口</strong>。日志门面接口本身通常并没有实际的日志输出能力，它底层还是需要去调用具体的日志框架API的，也就是实际上它需要跟具体的日志框架结合使用。由于具体日志框架比较多，而且互相也大都不兼容，日志门面接口要想实现与任意日志框架结合可能需要对应的桥接器，上图红框中的组件即是对应的各种桥接器！</p><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>jar包名</strong></th><th style="text-align:center"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>slf4j-log4j12-1.7.30.jar</strong></td><td style="text-align:center">Log4j1.2版本的桥接器，你需要将Log4j.jar加入Classpath。</td></tr><tr><td style="text-align:center"><strong>slf4j-jdk14-1.7.30.jar</strong></td><td style="text-align:center">java.util.logging的桥接器，Jdk原生日志框架。</td></tr><tr><td style="text-align:center"><strong>slf4j-nop-1.7.30.jar</strong></td><td style="text-align:center">NOP桥接器，默默丢弃一切日志。</td></tr><tr><td style="text-align:center"><strong>slf4j-simple-1.7.30.jar</strong></td><td style="text-align:center">一个简单实现的桥接器，该实现输出所有事件到System.err. 只有Info以及高于该级别的消息被打印，在小型应用中它也许是有用的。</td></tr><tr><td style="text-align:center"><strong>slf4j-jcl-1.7.30.jar</strong></td><td style="text-align:center">Jakarta Commons Logging 的桥接器. 这个桥接器将Slf4j所有日志委派给Jcl。</td></tr><tr><td style="text-align:center"><strong>logback-classic-1.0.13.jar(requires logback-core-1.0.13.jar)</strong></td><td style="text-align:center">Slf4j的原生实现，Logback直接实现了Slf4j的接口，因此使用Slf4j与Logback的结合使用也意味更小的内存与计算开销</td></tr></tbody></table></div><hr><h2 id="Slf4j源码分析"><a href="#Slf4j源码分析" class="headerlink" title="Slf4j源码分析"></a>Slf4j源码分析</h2><blockquote><p>slf4j-api-version.jar中几个核心类与接口</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center"><strong>类与接口</strong></th><th style="text-align:center"><strong>用途</strong></th></tr></thead><tbody><tr><td style="text-align:center">org.slf4j.LoggerFactory(class)</td><td style="text-align:center">给调用方提供的创建Logger的工厂类，在编译时绑定具体的日志实现组件</td></tr><tr><td style="text-align:center">org.slf4j.Logger(interface)</td><td style="text-align:center">给调用方提供的日志记录抽象方法，例如debug(String msg),info(String msg)等方法</td></tr><tr><td style="text-align:center">org.slf4j.ILoggerFactory(interface)</td><td style="text-align:center">获取的Logger的工厂接口，具体的日志组件实现此接口</td></tr><tr><td style="text-align:center">org.slf4j.helpers.NOPLogger(class)</td><td style="text-align:center">对org.slf4j.Logger接口的一个没有任何操作的实现，也是Slf4j的默认日志实现</td></tr><tr><td style="text-align:center">org.slf4j.impl.StaticLoggerBinder(class)</td><td style="text-align:center">与具体的日志实现组件实现的桥接类，具体的日志实现组件需要定义org.slf4j.impl包，并在org.slf4j.impl包下提供此类，注意在slf4j-api-version.jar中不存在org.slf4j.impl.StaticLoggerBinder，在源码包slf4j-api-version-source.jar中才存在此类</td></tr></tbody></table></div><hr><p><a href="https://juejin.cn/post/6905026199722917902#heading-19">https://juejin.cn/post/6905026199722917902#heading-19</a></p><p><a href="https://www.cnblogs.com/FlyAway2013/p/10691936.html">https://www.cnblogs.com/FlyAway2013/p/10691936.html</a></p><p><a href="https://juejin.cn/post/6939478456287625246">https://juejin.cn/post/6939478456287625246</a></p>]]></content>
    
    
    <summary type="html">Java日志体系</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JUC&amp;JVM面试题</title>
    <link href="https://wuwawawa.github.io/posts/c7a2e76a.html"/>
    <id>https://wuwawawa.github.io/posts/c7a2e76a.html</id>
    <published>2023-12-14T07:27:31.000Z</published>
    <updated>2024-04-11T07:10:25.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><a href="https://javabetter.cn/sidebar/sanfene/javathread.html#%E8%AF%B7%E8%AF%B4%E8%AF%B4-sleep-%E5%92%8C-wait-%E7%9A%84%E5%8C%BA%E5%88%AB-%E8%A1%A5%E5%85%85">sleep和wait的区别</a></p><p><a href="https://javabetter.cn/sidebar/sanfene/javathread.html#_28-%E8%AF%B4%E8%AF%B4-synchronized-%E5%92%8C-reentrantlock-%E7%9A%84%E5%8C%BA%E5%88%AB">synchronized和ReentrantLock的区别</a></p><details class="folding-tag" cyan close><summary> 三种等待、唤醒线程方法对比 </summary>              <div class='content'>              <blockquote><p>Object</p></blockquote><p><code>wait()，notify()，notifyAll()</code>用于线程的等待唤醒，都必须在synchronized内部中执行，否则会抛出异常<code>java.lang.IllegalMonitorStateException</code><br>唤醒后等待会导致线程一致阻塞。</p><blockquote><p>Condition</p></blockquote><p><code>await()、signal()和signalAll()</code>用于等待唤醒线程，但是必须放在lock()和unlock()加锁代码块中，否则会出异常<code>java.lang.IllegalMonitorStateException</code></p><p>唤醒后等待会导致线程一致阻塞。</p><blockquote><p>LockSupport</p></blockquote><p>LockSupport的使用不需要加到synchronized或lock修饰的同步代码块和同步方法中。LockSupport不用持有锁块，不用加锁，程序性能好。</p><p>LockSupport可以解决先通知后等待，线程一致阻塞问题。</p><p>使用到的是一种permit的许可 最大为1</p>              </div>            </details><hr><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AQS是多线程同步器，它是J.U.C包中多个组件的底层实现。 比如说ReentrantLock、CountdownLatch和Semaphore都用到了AQS。 </p><p>从本质上来说，AQS提供了两种锁的机制，分别是排他锁和共享锁。</p><p>排他锁，就是存在多个线程去竞争同一其享资源的时候，同一时刻只允许一哥线程去访问这样一个共享资源。</p><p>共享锁也称为读锁，就是在同一个时刻允讦多个线程同时获得这样一个锁的资源，比如CountDounLatch以及Semaphore，都用到了AQS中的共享锁的功能。</p><p>那么AQS作为互斥锁来说呢，需要解决三个核心的间题。</p><ol><li>互斤变量的设计，如何保证多线程同时更新互斤变量的时候的线程安全性 </li><li><p>未竞争到锁资源的线程的等待以及竞争到锁的资源释放锁之后的唤醒</p></li><li><p>锁竞争的公平性和非公平性</p></li></ol><p><a href="https://www.processon.com/view/link/5f90497463768906e6807c72">lock流程图</a></p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><div class="tag link"><a class="link-card" title="关键字: synchronized详解" href="https://www.pdai.tech/md/java/thread/java-thread-x-key-synchronized.html"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">关键字: synchronized详解</p><p class="url">https://www.pdai.tech/md/java/thread/java-thread-x-key-synchronized.html</p></div></a></div><div class="tag link"><a class="link-card" title="锁进阶" href="/posts/3f9c0b8e.html#8-2-轻量级锁"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">锁进阶</p><p class="url">/posts/3f9c0b8e.html#8-2-轻量级锁</p></div></a></div><hr><h2 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h2><details class="folding-tag" cyan close><summary> CAS和ABA问题 </summary>              <div class='content'>              <p>CAS是一种乐观锁技术，是Compare And Swap的简称。</p><p>主要就是在数据变更的时候，先对比，和期望值一致时再替换，否则不替换。</p><p>CAS(V,A,B)<br>1：V表示内存中的地址<br>2：A表示预期值<br>3：B表示要修改的新值</p><p>CAS的原理就是预期值A与内存中的值相比较，如果相同则将内存中的值改变成新值B。</p><p>Java中的CAS是通过Unsafe类实现的，通过使用 native 方法直接访问操作系统底层。底层cmpxchg指令，会锁定总线，防止其他线程对共享变量的访问</p><hr><p><span class='p red'>ABA问题</span></p><p>线程1准备利用CAS修改变量值A，但是在修改之前，其他线程已经将A变成了B，然后又变成A，即A-&gt;B-&gt;A,线程1执行CAS的时候发现仍然为A，所以CAS会操作成功，但是其实目前这个A已经是其他线程修改的了，但是线程1并不知道，最终内存值变成了B，这就导致了ABA问题。</p><p>结合实际情况，就能看出问题</p><p>假设有一个遵循CAS的提款机，小灰有100元存款，要用这个提款机来提款50元。</p><p>由于提款机硬件出了点问题，小灰的提款操作被同时提交了两次，开启了两个线程，两个线程都是获取当前值100元，要更新成50 元。理想情況下，应该一个线程更新成功，一个线程更新失败，小灰的存款值被扣一次。</p><p>线程1首先执行成功，把余额从100改成50。线程2因为某种原因阻塞。这时，小灰的妈妈刚好给小灰汇款50元。</p><p>线程2仍然是阻塞状态，线程3执行成功，把余额从50改成了100。</p><p>线程2恢复运行，由于阻塞之前获得了”当前值”100，并且经过compare检测，此时存款实际值也是100，所以会成功把变量值100更新成50。</p><blockquote><p>如何解决？</p></blockquote><p>数据库层面要解决 版本号</p><p>Java层面 <code>AtomicStampedReference</code>和<code>AtomicMarkableReference</code></p><p>AtomicStampedReference 利用一个int类型的标记来记录，它能够记录改变的次数。</p><p>AtomicMarkableReference 利用一个boolean类型的标记来记录，只能记录它改变过，不能记录改变的次数</p>              </div>            </details><hr><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html"><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">Java线程池实现原理及其在美团业务中的实践</a></a></p><details class="folding-tag" cyan close><summary> 线程池常见参数有哪些？ 线程池线程数该如何配置？ </summary>              <div class='content'>              <p><mark class="hl-label blue">CPU密集型</mark> </p><p>CPU密集型也就是计算密集型，高并发、任务执行时间短 —&gt;（ 核心线程数 = CPU核数+1 ），减少线程上下文的切换 。</p><p>计算型代码、Bitmap转换、Gson转换</p><p>为了应对线程执行过程中发生的缺页中断或其他异常导致的线程阻塞请求，额外再多设置一个线程，当某个线程暂时不需要CPU时，可以由替补线程继续来利用CPU。</p><p><mark class="hl-label green">IO密集型</mark> </p><p>IO密集型是指我们程序更多的工作是在通过磁盘、内存或者是网络读取数据，在IO期间我们线程是阻塞的，这期间CPU其实也是空闲的，这样我们的操作系统就可以切换其他线程来使用CPU资源。(核心线程数 = CPU核数 * 2 )</p><p>文件读写、DB读写、网络请求</p><p> 线程在执行IO型任务时，可能大部分时间都阻塞在IO上，假如现在有10个CPU，如果我们只设置了10个核心线程来执行IO型任务，那么这10个线程可能都阻塞在了IO上，这样10个CPU就没活干了，所以，对于IO型任务，核心线程数 = CPU核数 * 2</p><p>注：IO密集型（某大厂实践经验）<br>核心线程数 = CPU核数 / （1-阻塞系数） 例如阻塞系数 0.8，CPU核数为4</p><p>核心线程数= CPU核数 * （1 + 线程等待时间 / 线程运行总时间 ）</p><p>可以使用工具检测</p><p>则核心线程数为20</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240302151707280.png" alt="image-20240302151707280" style="zoom:50%;" /></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 线程池execute和submit有何区别？  出现异常时有何不同？ </summary>              <div class='content'>              <p>submit方法和execute方法最大的不同点在于submit方法可以获取到任务返回值或任务异常信息，execute方法不能获取任务返回值和异常信息。</p><p>执行 <code>execute</code> 方法，当任务抛出异常时，当前线程会终止，且会打印异常信息。</p><p>执行 <code>submit</code> 方法，当任务抛出异常时，当前线程不会终止，不会打印异常信息，只有在调用 get 方法的时候，才会打印异常信息。</p><p>解决方法:</p><blockquote><p>1.使用try-catch代码块</p></blockquote><p>在线程的 run() 方法中加入 try-catch 代码块，避免运行时异常，同时可以在 catch 块中记录异常日志。</p><p>线程池中的任务抛出的异常会被自身的 try-catch 代码块捕获，从而防止工作线程因异常而意外退出。这意味着 processWorkerExit 方法不会被执行。</p><blockquote><p>2.线程设置UncaughtExceptionHandler</p></blockquote><p>在第一个方法中，每个任务都需要手动添加 try-catch 代码块，这样做非常麻烦且不保险。如果有人忘记了添加 try-catch 代码块，在任务出现异常时，线程池会频繁删除异常的工作线程并创建新的工作线程，这样会严重影响线程池的性能。</p><p>可以使用 Thread.setDefaultUncaughtExceptionHandler 方法设置一个全局默认的未捕获异常处理器，该处理器会适用于所有线程。无论是主线程还是创建的其他线程，在发生未捕获异常时都将被该处理器处理。</p><p>但是该方法有两个问题：</p><ol><li>当 submit 方法提交的任务出现异常时，仍然无法处理该异常。</li><li>线程池仍然会删除异常的工作线程并创建新的工作线程，这并没有避免线程池的性能损耗。</li></ol><p>所以不推荐使用未捕获异常处理器来处理线程异常</p><blockquote><p>3.继承ThreadPoolExecutor重写afterExecute方法</p><p>4.实现ThreadFactory，自定义线程工厂类（推荐）</p></blockquote><p>自定义线程工厂方法，为每一个 run 方法添加 try-catch 代码块</p><p>显然，当使用 submit 方法提交的任务出现异常时，仍然无法进行处理。然而，我仍然推荐使用这种方式，因为它至少解决了在 execute 方法中任务出现异常的情况。对于 FutureTask 的异常，调用方需要自行处理，因为 FutureTask 设计的本意就是将结果交给调用方处理，这个结果也包含异常。</p>              </div>            </details><hr><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><details class="folding-tag" blue close><summary> Thread、ThreadLocal和ThreadLocalMap关系？ </summary>              <div class='content'>              <ul><li>Thread类中有一个ThreadLocal.ThreadLocalMap threadLocals = null的变量,这个ThreadLocal相当于是Thread类和ThreadLocalMap的桥梁,在ThreadLocal中有静态内部类ThreadLocalMap,ThreadLocalMap中有Entry数组</li><li><span class='p blue'>当我们为threadLocal变量赋值，实际上就是以当前threadLocal实例为key，值为value的Entry，往当前线程的threadLocalMap中存放</span></li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230405210717894.png" alt="image-20230405210717894" style="zoom:50%;" /></p><p>ThreadLocalMap从字面上就可以看出这是一个保存ThreadLocal对象的map(其实是以ThreadLocal为Key)，不过是经过了两层包装的ThreadLocal对象。</p>              </div>            </details><hr><details class="folding-tag" blue close><summary> 为什么 ThreadLocalMap 的 Entry 中的 key 设置为弱引用？ </summary>              <div class='content'>              <p>强软弱虚</p><p>ThreadLocalMap的Entry对ThreadLocal的的引用为弱引用，避免了ThreadLocal对象无法被回收的问题。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230405230616586.png" alt="image-20230405230616586" style="zoom:50%;" /></p><p>value为强引用，如果不清理Entry可能会照成泄漏。</p><p>养成习惯用完就remove。</p>              </div>            </details><hr><h2 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h2><details class="folding-tag" blue close><summary> 什么是双亲委派机制? 有什么作用? 如何打破双亲委派机制? </summary>              <div class='content'>              <p>双亲委派机制指的是：当一个类加载器接收到加载类的任务时，会向上交给父类加载器查找是否加载过，再由顶向下进行加载。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240315184540249.png" alt="image-20240315184540249" style="zoom:33%;" /></p><p><mark class="hl-label blue">双亲委派机制作用</mark> </p><p>1.保证类加载的安全性,避免恶意代码替换JDK中的核心类库</p><p>2.避免重复加载</p><p><mark class="hl-label green">如何打破双亲委派机制?</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240315185126628.png" alt="image-20240315185126628" style="zoom:50%;" /></p><blockquote><p>重写loadClass方法打破双亲委派机制</p></blockquote><p>在<code>loadClass</code>方法中实现了双亲委派机制,想要打破双亲委派机制就必须重写<code>loadClass</code>方法,将其中双亲委派机制代码去掉.</p><p>Tomcat的自定义 类加载器<code>ParallelWebappClassLoader</code>就打破了双亲委派机制,自己加载而不交给父类加载,实现了应用的隔离.</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240315185854247.png" alt="image-20240315185854247" style="zoom:50%;" /></p><blockquote><p>线程上下文类加载器打破双亲委派   例：JDBC</p></blockquote><p>JDBC中使用了<code>DriverManager</code>来管理项目中引入的不同数据库的驱动，比如mysql驱动、oracle驱动。</p><p>DriverManager属于rt.jar是启动类加载器加载的。而用户jar包中的驱动需要由应用类加载器加载，这就违反了双亲委派机制。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240317160601180.png" alt="image-20240317160601180" style="zoom:50%;" /></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 类的生命周期 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240320192522730.png" alt="image-20240320192522730"></p>              </div>            </details><h2 id="运行时数据区"><a href="#运行时数据区" class="headerlink" title="运行时数据区"></a>运行时数据区</h2><details class="folding-tag" cyan close><summary> 栈、堆、方法区的交互关系 </summary>              <div class='content'>              <ol><li>Person 类的 .class 信息存放在方法区中</li><li>person 变量存放在 Java 栈的局部变量表中</li><li>真正的 person 对象存放在 Java 堆中</li><li>在 person 对象中，有个指针指向方法区中的 person 类型数据，表明这个 person 对象是用方法区中的 Person 类 new 出来的</li></ol><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/img/b9f11764ee47b28d37f7764dfd9c9f55.png" style="zoom:50%;" /></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 常量池、运行时常量池和字符串常量池   演进 itern() </summary>              <div class='content'>              <p>当类加载到内存中后，JVM 就会将 class 文件常量池中的内容存放到运行时常量池中，每个.class对应有一个运行时常量池。</p><p><mark class="hl-label red">JDK6</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1a3aa55257c3150d78327542e5ca230e.png" alt="image-20200708211541300" style="zoom:50%;" /></p><p><mark class="hl-label blue">JDK7</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/e0f65fc4228d9b6573ae1b23d9a1558b.png" alt="image-20200708211609911" style="zoom:50%;" /></p><p><mark class="hl-label pink">JDK8</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/c3ed969b0d2bad704c22481208e5dd10.png" alt="image-20200708211637952" style="zoom:50%;" /></p><p>jdk7 版本对 intern 操作和常量池都做了一定的修改。主要包括2点：</p><ul><li>将String常量池 从 Perm 区移动到了 Java Heap区</li><li><code>String#intern</code> 方法时，如果存在堆中的对象，会直接保存对象的引用，而不会重新创建对象（而JDK6会创建）。</li></ul><p><a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html</a></p>              </div>            </details><hr><h2 id="垃圾回收算法和垃圾回收器"><a href="#垃圾回收算法和垃圾回收器" class="headerlink" title="垃圾回收算法和垃圾回收器"></a>垃圾回收算法和垃圾回收器</h2><details class="folding-tag" cyan close><summary> 哪些对象可以作为 GC Roots 呢？ </summary>              <div class='content'>              <p>虚拟机栈(栈帧中的局部变量表)中引用的对象</p><p>本地方法栈(Native 方法)中引用的对象</p><p>方法区中类静态属性引用的对象</p><p>方法区中常量引用的对象</p><p>所有被同步锁持有的对象</p><p>JNI（Java Native Interface）引用的对象</p>              </div>            </details><hr><details class="folding-tag" green close><summary> 垃圾回收算法 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318093257349.png" alt="image-20240318093257349"></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 常用的垃圾回收器 </summary>              <div class='content'>              <p>由于垃圾回收器分为年轻代和老年代，除了G1之外其他垃圾回收器必须成对组合进行使用。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318095326219.png" alt="image-20240318095326219" style="zoom: 50%;" /></p><blockquote><p>Serial + Serial Old   单线程串行</p></blockquote><p>单CPU处理器下吞吐量非常出色 多CPU处理器会让用户线程处于长时间等待</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318095609643.png" alt="image-20240318095609643"></p><blockquote><p>ParNew + CMS</p></blockquote><p>ParNew垃圾回收器本质上是对Serial在多CPU下的优化，使用多线程进行垃圾回收。多CPU处理器下停顿时间较短。吞吐量和停顿时间不如G1， 所以在JDK9之后不建议使用。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318101050149.png" alt="image-20240318101050149" style="zoom:25%;" /></p><p>CMS（Concurrent Mark Sweep）并发标记清除</p><p>CMS垃圾回收器关注的是系统的暂停时间， 允许用户线程和垃圾回收线程在某些步骤中同时执行，减少了用户线程的等待时间，系统由于垃圾回收出现的停顿时间较短，用户体验好。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318101200261.png" alt="image-20240318101200261" style="zoom:25%;" /></p><p>缺点</p><p>1、内存碎片问题 -  可以设置参数N次FULL GC 后再整理<br>2、浮动垃圾问题 </p><p>3、退化问题 - 如果老年代内存不足无法分配对象，CMS就会退化成Serial Old单线程回收老年代</p><p>CMS的并发模式失败 （concurrent mode failure） 现象。由于CMS的垃圾清理线程和用户线程是并行进行的，如果在并发清理的过程中老年代的空间不足以容纳放入老年代的对象，会产生并发模式失败。并发模式失败会导致Java虚拟机使用Serial old单线程进行FULLGC回收老年代，出现长时间的停顿。</p><p>可以设置参数提前进行回收 </p><blockquote><p>Parallel Scavenge + Parallel Old</p></blockquote><p>Parallel Scavenge是JDK8默认的年轻代垃圾回收器，多线程并行回收，关注的是系统的吞吐量。具备<span class='p red'>自动调整堆内存大小</span>的特点。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318102107265.png" alt="image-20240318102107265" style="zoom:25%;" /></p><p>Parallel Old是为Parallel Scavenge收集器设计的老年代版本，利用多线程并发收集。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318102307415.png" alt="image-20240318102307415" style="zoom:25%;" /></p><p>在使用这个组合时，不要设置堆内存的最大值，垃圾回收器会根据最大暂停时间和吞吐量自动调整内存大小。</p><blockquote><p>G1</p></blockquote><p>JDK9之后默认的垃圾回收器是G1 （Garbage First）垃圾回收器。</p><p>Parallel Scavenge关注吞吐量，允许用户设置最大暂停时间，但是会减少年轻代可用空间的大小。</p><p>CMS关注暂停时间，但是吞吐量方面会下降。</p><p>而G1设计目标就是将上述两种垃圾回收器的优点融合：</p><p>1.支持巨大的堆空间回收，并有较高的吞吐量。<br>2.支持多CPU并行垃圾回收。<br>3.允许用户设置最大暂停时间。</p><p>G1的整个堆会被划分成多个大小相等的区域，称之为区Region，区域不要求是连续的。分为Eden、Survivor、Old区。Region的大小通过堆空间大小/2048计算得到，也可以通过参数-XX:G1HeapRegionSize=32m指定（其中32m指定region大小为32M），Region size必须是2的指数幂，取值范围从1M到32M。</p><p>G1垃圾回收有两种方式：</p><p>1、年轻代回收 （Young GC）  回收Eden区和Survivor区中不用的对象。会导致STW,采用复制算法。根据配置的最大暂停时间计算出本次回收时最多能回收多少个Region 保证最大暂停时间。部分对象如果大小超过Region的一半，会直接放入老年代，这类老年代被称为Humongous区。比如每个Region是2M，只要一个大对象超过了1M就被放入 Humongous区，如果对象过大会横跨多个Region。</p><p>2、混合回收（Mixed GC） 回收所有的年轻代和部分老年代的的对象以及大对象区。采用复制算法完成。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318104441766.png" alt="image-20240318104441766" style="zoom:33%;" /></p><p>注意：如果清理过程中发现没有足够的空Region存放转移的对象，会出现Full GC。单线程执行标记-整理算法， 此时会导致用户线程的暂停。所以尽量保证应该用的堆内存有一定多余的空间。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318112942651.png" alt="image-20240318112942651"></p><p>ZGC低延时 但是吞吐量可能不佳 会进行多次垃圾回收</p>              </div>            </details><hr><h2 id="GC调优"><a href="#GC调优" class="headerlink" title="GC调优"></a>GC调优</h2><p><a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html"><a href="https://tech.meituan.com/2020/11/12/java-9-cms-gc.html">Java中9种常见的CMS GC问题分析与解决</a></a></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318162317624.png" alt="image-20240318162317624"></p><h2 id="内存调优"><a href="#内存调优" class="headerlink" title="内存调优"></a>内存调优</h2><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240318090040137.png" alt="image-20240318090040137"></p><hr><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p>4个概念: 工作区 暂存区 本地仓库  远程仓库</p><p>分支管理</p><p>工作流</p><p>master  release dev feature</p>]]></content>
    
    
    <summary type="html">JUC&amp;JVM面试题</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="面试题" scheme="https://wuwawawa.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java基础面试题</title>
    <link href="https://wuwawawa.github.io/posts/2e67a3f3.html"/>
    <id>https://wuwawawa.github.io/posts/2e67a3f3.html</id>
    <published>2023-12-14T05:45:41.000Z</published>
    <updated>2024-04-07T13:50:21.914Z</updated>
    
    <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th style="text-align:center">修饰符\权限</th><th style="text-align:center">类内部</th><th style="text-align:center">同包</th><th style="text-align:center">子类非同包</th><th style="text-align:center">非同包非子类</th></tr></thead><tbody><tr><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">defalut</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table></div><h2 id="封装继承多态"><a href="#封装继承多态" class="headerlink" title="封装继承多态"></a>封装继承多态</h2><div class="tabs" id="8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-1"><i class="fas fa-cat"></i>封装</button></li><li class="tab"><button type="button" data-href="#8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-2"><i class="fas fa-horse"></i>继承</button></li><li class="tab"><button type="button" data-href="#8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-3"><i class="fas fa-dove"></i>多态</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-1"><p>将数据和方法被保护在类的内部，尽可能地隐藏内部的实现细节，只保留一些对外接口使之与外部发生联系。</p><p>好处：</p><p>​    安全性 隐藏信息，实现细节。</p><p>​    </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-2"><p>子类可以通过继承从父类中获得父类的属性和方法，同时可以在其基础上进行扩展或者修改，实现代码的重用，同时也提供了一种分层结构，可以更好地组织和管理代码。</p><p>通过继承，可以实现多态性</p><p>子类重写父类方法 两同两小一大原则</p><p>两同: 方法名相同 方法参数相同</p><p>两小: 子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等</p><p>一大: 子类的访问权限修饰符应比父类的访问权限修饰符更大</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8d28a2e3-d8a9-4e60-88b8-fb48aa3b6581-3"><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>多态性可以通过继承和方法重写来实现。具体来说，父类的引用可以指向子类的对象，并且调用相同的方法时会根据实际的对象类型执行不同的代码。多态性使得代码更加灵活，能够适应不同的需求和情境，同时也提高了代码的可扩展性和可维护性。</p><p>多态性使得代码能够以一种统一的方式处理不同类型的对象，从而提高了代码的可扩展性和可维护性。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h2><details class="folding-tag" cyan close><summary> 接口与抽象类异同 </summary>              <div class='content'>              <p>都可以定义抽象方法</p><p>都不能创建本类对象</p><hr><p>抽象类不一定需要包含抽象方法，但是如果一个类中包含有抽象方法，那么这个类必须声明为抽象类。</p><p>(<code>AbstractQueuedSynchronizer</code>是抽象类，但是其中并没有抽象方法。既然AQS定义为抽象类，那么该子类实现的方法为什么不定义为抽象方法呢？AQS设计的初衷就是为其它组件提供一个强大的基础，不希望其他组件直接拿来使用直接new 创建对象，所以定义为抽象类。模版方法，按需重写，如果直接使用则抛异常)</p><p>抽象类使用<code>extend</code>关键字继承，接口使用<code>implement</code>关键字实现</p><p>抽象类可以去实现接口，而接口只能继承接口，不能继承类。同时一个类最多继承一个父类，但可以实现多个接口。</p><p>抽象类可以定义成员属性，而接口不能定义成员属性，只能定义静态属性，而且只能用<code>final</code>关键字定义静态常量。</p><p>接口没有构造器，而抽象类可以定义构造器（限定子类的构造行为）。</p><p>Java8之后，接口可以定义静态方法以及可以用<code>default</code>关键字来默认实现方法。被<code>default</code>关键字修饰的方法就不是抽象方法也就不会强制要求子类去实现方法。</p><p>所以当我们发现既可以用抽象类也可以用接口时，尽量去选择接口。 这样子类的灵活度会更高。</p><p>抽象类更进一步地抽象后就诞生了接口。接口比抽象类更纯粹，因为它没有了成员属性，只有方法。子类实现接口后，唯一能做的就是重写方法。不像抽象类，子类继承抽象类连带着将父类的成员属性也继承过来了。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240306185159397.png" alt="image-20240306185159397"></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 枚举的本质 </summary>              <div class='content'>              <p> 定义枚举类型时本质上就是定义一个类别，只不过很多细节由编译器帮我们完成了，所以某些程度上，enum关键字的作用 就像是class或interface</p><p>1 枚举的本质：其实就是终止类，并继承Enum抽象类。</p><p>2 枚举中的变量，其实就是一个当前类型的静态常量。</p><p>枚举类也可以继承接口</p>              </div>            </details><hr><p><a href="https://blog.csdn.net/lisainan66/article/details/133135939">多态之父类引用指向子类实例</a></p><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><details class="folding-tag" cyan close><summary> 使用foreach内部进行删除，为什么会抛出异常 </summary>              <div class='content'>              <p>迭代器在遍历是直接访问集合中的内容，并且在遍历过程中使用了一个<code>modCount</code>变量。集合在被遍历期间，如果它的内容发生了变化，就会改变<code>modCount</code>变量的值。迭代器在使用<code>hashNext()/next()</code>遍历下一个元素之前，会检测<code>modCount</code>变量是否为预期值，是就返回遍历，否则抛出<code>ConcurrentModificationException</code>异常    </p><p>正确的方式是使用 迭代器 对元素进行删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        add(<span class="number">1</span>);</span><br><span class="line">        add(<span class="number">2</span>);</span><br><span class="line">        add(<span class="number">3</span>);</span><br><span class="line">        add(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cur</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">2</span>) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag link"><a class="link-card" title="List集合的遍历方式" href="/posts/494ad091.html#List集合的遍历方式"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">List集合的遍历方式</p><p class="url">/posts/494ad091.html#List集合的遍历方式</p></div></a></div><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516205838333.png" alt="image-20230516205838333" style="zoom: 50%;" /></p>              </div>            </details><hr><details class="folding-tag" green close><summary> 增强for循环的底层实现原理 </summary>              <div class='content'>              <p>增强for循环是JAVA提供的语法糖，虽然增强for循环通过迭代器实现，但是删除元素还是得通过迭代器来进行删除。</p><p>以下代码进行反编译</p><div class="tabs" id="12d75644-1286-4f09-9156-e500ad2a10df"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#12d75644-1286-4f09-9156-e500ad2a10df-1"><i class="fas fa-seedling"></i>原代码</button></li><li class="tab"><button type="button" data-href="#12d75644-1286-4f09-9156-e500ad2a10df-2"><i class="fas fa-leaf"></i>反编译后</button></li><li class="tab"><button type="button" data-href="#12d75644-1286-4f09-9156-e500ad2a10df-3"><i class="fab fa-apple"></i>分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="12d75644-1286-4f09-9156-e500ad2a10df-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">   System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="12d75644-1286-4f09-9156-e500ad2a10df-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator(); iterator.hasNext(); System.out.println(i))&#123;</span><br><span class="line">   i = (Integer)iterator.next();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="12d75644-1286-4f09-9156-e500ad2a10df-3"><p>反编译后的代码其实比较复杂，我们按照执行顺序拆解一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Integer i; 定义一个临时变量i</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator(); 获取List的迭代器</span><br><span class="line">iterator.hasNext(); 判断迭代器中是否有未遍历过的元素</span><br><span class="line">i = (Integer)iterator.next(); 获取第一个未遍历的元素，赋值给临时变量i</span><br><span class="line">System.out.println(i) 输出临时变量i的值</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><hr><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">初始容量</th><th style="text-align:center">时机</th><th style="text-align:center">倍数</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">空参构造默认容量10 懒创建<br/>若指定则立刻创建该大小的数组</td><td style="text-align:center">容量满的时候才会进行扩容</td><td style="text-align:center">1.5</td></tr><tr><td style="text-align:center">HashMap</td><td style="text-align:center">空参构造默认容量为16 懒创建<br/>有参构造容量为大于等于参数的最小2的幂次</td><td style="text-align:center">++size &gt; threshold<br/>元素数目达到容量*负载因子时</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">Concurrent<br>HashMap</td><td style="text-align:center">空参构造默认容量为16<br/>sizeCtl为大于等于(1.0 + (long)initialCapacity / loadFactor)参数的最小2的幂次</td><td style="text-align:center">元素数目达到sizeCtl时</td><td style="text-align:center">2</td></tr></tbody></table></div><p><code>ArrayList</code>构造时如果未指定容量，则会在第一次add元素时，设置默认容量大小为10，之后每次新增元素时都会判断当前size+1，是否大于目前容量，如果大于则进行扩容，也就是<code>ArrayList</code>是在容量满的时候才会进行扩容，并且每次通过<code>Arrays.copyOf</code>的方式，扩容为原数组的1.5倍，最大容量为<code>Integer.MAX_VALUE</code></p><p><code>HashMap1.8</code> 当拉链长度大于8且数组长度大于64时会树化,当树的节点小于6就会把树转为链表.</p><blockquote><p>ConcurrentHashMap</p></blockquote><p><code>sizeCtl</code>为0，代表数组未初始化， 且数组的初始容量为16</p><p><code>sizeCtl</code>为正数，<span class='p green'>如果数组未初始化，那么其记录的是数组的初始容量，如果数组已经初始化，那么其记录的是数组的扩容阈值</span></p><p><code>sizeCtl</code>为-1，表示数组正在进行初始化</p><p><code>sizeCtl</code>小于0，并且不是-1，表示数组正在扩容， -(1+n)，表示此时有n个线程正在共同完成数组的扩容操作</p><p>ConcurrentHashMap负载因子只影响初始表容量,后续使用<code>n - (n &gt;&gt;&gt; 2 )</code>为扩容阈值.</p><hr><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><details class="folding-tag" cyan close><summary> HashMap1.7数据结构、插入方式、扩容并发死链问题 </summary>              <div class='content'>              <p>数据结构：数组+单向链表</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-e326681a8e66e07a23e1cf45d4686001_1440w.webp" alt="img" style="zoom:33%;" /></p><p>插入方式：头插法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">//取出索引位置的元素</span></span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    <span class="comment">//将新的元素放置到索引位，同时将原节点的作为新元素的next，形成单向链表</span></span><br><span class="line">    <span class="comment">//头插法</span></span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-b7d6d61af1a3887611c01e91a1ac5784_1440w.webp" alt="img" style="zoom:33%;" /></p><blockquote><p>正常情况下扩容</p></blockquote><p>HashMap正常情况下的扩容实现如下图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-ad1f36eb1b79f629ca500c73987c4531_1440w.webp" alt="img" style="zoom:33%;" /></p><p>旧HashMap的节点会依次转移到新HashMap中，旧HashMap转移的顺序是A、B、C，而新HashMap使用的是头插法，所以最终在新HashMap中的顺序是C、B、A，也就是上图展示的那样。</p><blockquote><p>并发扩容死链</p></blockquote><p><mark class="hl-label blue">步骤一</mark> </p><p>死循环是因为并发HashMap扩容导致的，并发扩容的第一步，线程T1和线程T2要对HashMap进行扩容操作，此时T1和T2指向的是链表的头结点元素A，而T1和T2的下一个节点，也就是T1.next和T2.next指向的是B节点，如下图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-e0b4f5ea00cb277bde490f315b9b387f_1440w.webp" alt="img" style="zoom:33%;" /></p><p><mark class="hl-label red">步骤二</mark> </p><p>死循环的第二步操作是，线程T2时间片用完进入休眠状态，而线程T1开始执行扩容操作，一直到线程T1扩容完成后，线程T2才被唤醒，扩容之后的场景如下图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-5f78d8ac8af1efc79e7d79a1f3fdc154_1440w.webp" alt="img" style="zoom:33%;" /></p><p>从上图可知线程T1执行之后，因为是头插法，所以HashMap的顺序已经发生了改变，但线程T2对于发生的一切是不可知的，所以它的指向元素依然没变，如上图展示的那样，T2指向的是A元素，T2.next指向的节点是B元素。</p><p><mark class="hl-label pink">步骤三</mark> </p><p>当线程T1执行完，而线程T2恢复执行时，死循环就建立了，如下图所示：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/v2-bd4a753db8c985119aa4dcd4356609cf_1440w.webp" alt="img" style="zoom:33%;" /></p><p>因为T1执行完扩容之后B节点的下一个节点是A，而T2线程指向的首节点是A，第二个节点是B，这个顺序刚好和T1扩完容完之后的节点顺序是相反的。<strong>T1执行完之后的顺序是B到A，而T2的顺序是A到B，这样A节点和B节点就形成死循环了</strong>，这就是HashMap死循环导致的原因。</p>              </div>            </details><hr><details class="folding-tag" cyan close><summary> HashMap1.8数据结构、插入方式、并发元素丢失 </summary>              <div class='content'>              <p>数据结构：数组+单向链表+红黑树+双向链表</p><p>插入方式：尾插法</p><p>并发元素丢失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加元素时，会有数据覆盖丢失数据</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//此处，如果多个线程向同一个位置存入元素，会有值覆盖的问题，导致数丢失</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面代码省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩容时，迁移数据的情况下，会有数据覆盖丢失的问题</span></span><br><span class="line"><span class="comment">// 多线程环境下，给同一个数组的相同位置赋值，会有数据覆盖的风险</span></span><br><span class="line"><span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    loTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j] = loHead;  <span class="comment">//将原始索引位的数据迁移到新数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">    hiTail.next = <span class="literal">null</span>;</span><br><span class="line">    newTab[j + oldCap] = hiHead; <span class="comment">//将新索引位的数据迁移到新数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">table = newTab;</span><br></pre></td></tr></table></figure><p>put 和 get 并发时，可能导致 get 为 null。线程 1 执行 put 时，因为元素个数超出 threshold 而导致 rehash，线程 2 此时执行 get，有可能导致这个问题。这个问题在 JDK 1.7 和 JDK 1.8 中都存在。</p>              </div>            </details><hr><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><details class="folding-tag" cyan close><summary> HashMap、HashTable、ConcurrentHashMap区别 </summary>              <div class='content'>              <blockquote><p>HashMap</p></blockquote><p> HashMap 是线程不安全的，在多线程环境下，使用 Hashmap 进行 put 操作会引起死循环，导致 CPU 利用率接近 100%，所以在并发情况下不能使用 HashMap。</p><blockquote><p>HashTable</p></blockquote><p>HashTable 和 HashMap 的实现原理几乎一样，差别无非是</p><ul><li>HashTable 不允许 key 和 value 为 null</li><li>HashTable 是线程安全的 但是 HashTable 线程安全的策略实现代价却太大了，简单粗暴，get/put 所有相关操作都是 synchronized 的，这相当于给整个哈希表加了一把大锁。</li></ul><p>多线程访问时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，在竞争激烈的并发场景中性能就会非常差。</p><blockquote><p>ConcurrentHashMap</p></blockquote><p>主要就是为了应对 <code>HashMap</code> 在并发环境下不安全而诞生的， <code>ConcurrentHashMap</code> 的设计与实现非常精巧，大量的利用了 <code>volatile</code>，<code>final</code>， <code>CAS</code> 等无锁技术来减少锁竞争对于性能的影响。</p>              </div>            </details><details class="folding-tag" green close><summary> 1.7、1.8 ConcurrentHashMap对比 </summary>              <div class='content'>              <div class="tabs" id="794a187f-5e35-4305-96f0-a006bcf78cf1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#794a187f-5e35-4305-96f0-a006bcf78cf1-1"><i class="fas fa-seedling"></i>JDK1.7</button></li><li class="tab"><button type="button" data-href="#794a187f-5e35-4305-96f0-a006bcf78cf1-2"><i class="fas fa-leaf"></i>JDK1.8</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="794a187f-5e35-4305-96f0-a006bcf78cf1-1"><p>在 JDK1.7 中 ConcurrentHashMap 采用了数组+Segment+分段锁的方式实现。</p><p><strong>1.Segment(分段锁)</strong><br> ConcurrentHashMap 中的分段锁称为 Segment，它即类似于 HashMap 的结构，即内部拥有一个 Entry 数组，数组中的每个元素又是一个链表,同时又是一个 ReentrantLock（Segment 继承了 ReentrantLock）。</p><p><strong>2.内部结构</strong><br> ConcurrentHashMap 使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。如下图是 ConcurrentHashMap 的内部结构图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240228161103148.png" alt="image-20240228161103148" style="zoom: 33%;" /></p><p>从上面的结构我们可以了解到，ConcurrentHashMap 定位一个元素的过程需要进行两次 Hash 操作。第一次 Hash 定位到 Segment，第二次 Hash 定位到元素所在的链表的头部。</p><p><strong>3.该结构的优劣势</strong><br> <strong>坏处:</strong><br> 这一种结构的带来的副作用是 Hash 的过程要比普通的 HashMap 要长<br> <strong>好处:</strong><br> 写操作的时候可以只对元素所在的 Segment 进行加锁即可，不会影响到其他的 Segment，这样，在最理想的情况下，ConcurrentHashMap 可以最高同时支 持 Segment 数量大小的写操作（刚好这些写操作都非常平均地分布在所有的 Segment 上）。</p><p>所以，通过这一种结构，ConcurrentHashMap 的并发能力可以大大的提高。</p><p>计算元素个数前，先不加锁计算两次，如果前后两次结果如一样，认为个数正确返回</p><p>如果不一样，进行重试，重试次数超过 3，将所有 segment 锁住，重新计算个数返回</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="794a187f-5e35-4305-96f0-a006bcf78cf1-2"><p>JDK8 中 ConcurrentHashMap 参考了 JDK8 HashMap 的实现，采用了数组+链表+红黑树的实现方式来设计，内部大量采用 CAS 操作。</p><p>Java8 ConcurrentHashMap 结构基本上和 Java8 的 HashMap 一样，不过保证线程安全性。</p><p>其实可以看出 JDK1.8 版本的 ConcurrentHashMap 的数据结构已经接近 HashMap，相对而言，ConcurrentHashMap 只是增加了同步的操作来控制并发，从 JDK1.7 版本的 ReentrantLock+Segment+HashEntry，到 JDK1.8 版本中 synchronized+CAS+HashEntry+红黑树。</p><ol><li>数据结构：取消了 Segment 分段锁的数据结构，取而代之的是数组+链表+红黑树的结构。</li><li>保证线程安全机制：JDK1.7 采用 segment 的分段锁机制实现线程安全，其中 segment 继承自 ReentrantLock。JDK1.8 采用 CAS+Synchronized 保证线程 安全。</li><li>锁的粒度：原来是对需要进行数据操作的 Segment 加锁，现调整为对每个数组元素加锁（Node）。</li><li>链表转化为红黑树:定位结点的 hash 算法简化会带来弊端,Hash 冲突加剧,因此在链表节点数量大于 8 时，会将链表转化为红黑树进行存储。</li><li>查询时间复杂度：从原来的遍历链表 O(n)，变成遍历红黑树O(logN)。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details>]]></content>
    
    
    <summary type="html">Java基础面试题</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="面试题" scheme="https://wuwawawa.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring面试题</title>
    <link href="https://wuwawawa.github.io/posts/489ef953.html"/>
    <id>https://wuwawawa.github.io/posts/489ef953.html</id>
    <published>2023-12-08T06:04:44.000Z</published>
    <updated>2024-03-20T09:39:14.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring-IOC"></a>Spring-IOC</h2><details class="folding-tag" blue close><summary> Spring refresh 流程 </summary>              <div class='content'>              <p>refresh 是 <code>AbstractApplicationContext</code> 中的一个方法，负责初始化 <code>ApplicationContext</code> 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤：</p><ol><li><code>prepareRefresh</code></li><li><code>obtainFreshBeanFactory</code></li><li><code>prepareBeanFactory</code></li><li><code>postProcessBeanFactory</code></li><li><code>invokeBeanFactoryPostProcessors</code></li><li><code>registerBeanPostProcessors</code></li><li><code>initMessageSource</code></li><li><code>initApplicationEventMulticaster</code></li><li><code>onRefresh</code></li><li><code>registerListeners</code></li><li><code>finishBeanFactoryInitialization</code></li><li><code>finishRefresh</code></li></ol><p>1 为准备环境</p><p>2 3 4 5 6 为准备 <code>BeanFactory</code></p><p>7 8 9 10 12 为准备 <code>ApplicationContext</code></p><p>11 为初始化 <code>BeanFactory</code> 中非延迟单例 bean</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/refresh%E6%B5%81%E7%A8%8B.png" alt="refresh流程"></p>              </div>            </details><hr><details class="folding-tag" cyan close><summary> Bean的生命周期？ </summary>              <div class='content'>              <p>Instantiate 实例化</p><p>Initialize 初始化</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2Bean%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="2Bean 生命周期"></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240301114922096.png" alt="image-20240301114922096"></p>              </div>            </details><hr><details class="folding-tag" blue close><summary> set循环依赖、二级缓存就已经可以解决循环依赖了为什么还需要三级缓存呢？ </summary>              <div class='content'>              <p><a href="#jump">代理对象创建的时机↓↓↓</a></p><p><mark class="hl-label blue">一级缓存</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903100752165.png" alt="image-20210903100752165" style="zoom:80%;" /></p><p>作用是保证单例对象仅被创建一次</p><ul><li>第一次走 <code>getBean(&quot;a&quot;)</code> 流程后，最后会将成品 a 放入 singletonObjects 一级缓存</li><li>后续再走 <code>getBean(&quot;a&quot;)</code> 流程时，先从一级缓存中找，这时已经有成品 a，就无需再次创建</li></ul><p><mark class="hl-label blue">一级缓存与循环依赖</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903100914140.png" alt="image-20210903100914140" style="zoom:80%;" /></p><p>一级缓存无法解决循环依赖问题，分析如下</p><ul><li>无论是获取 bean a 还是获取 bean b，走的方法都是同一个 getBean 方法，假设先走 <code>getBean(&quot;a&quot;)</code></li><li>当 a 的实例对象创建，接下来执行 <code>a.setB()</code> 时，需要走 <code>getBean(&quot;b&quot;)</code> 流程，红色箭头 1</li><li>当 b 的实例对象创建，接下来执行 <code>b.setA()</code> 时，又回到了 <code>getBean(&quot;a&quot;)</code> 的流程，红色箭头 2</li><li>但此时 singletonObjects 一级缓存内没有成品的 a，陷入了死循环</li></ul><p><mark class="hl-label pink">二级缓存</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903101849924.png" alt="image-20210903101849924" style="zoom:80%;" /></p><p>解决思路如下：</p><ul><li>再增加一个 singletonFactories 缓存</li><li>在依赖注入前，即 <code>a.setB()</code> 以及 <code>b.setA()</code> 将 a 及 b 的半成品对象（未完成依赖注入和初始化）放入此缓存</li><li>执行依赖注入时，先看看 singletonFactories 缓存中是否有半成品的对象，如果有拿来注入，顺利走完流程</li></ul><p>对于上面的图</p><ul><li><code>a = new A()</code> 执行之后就会把这个半成品的 a 放入 singletonFactories 缓存，即 <code>factories.put(a)</code></li><li>接下来执行 <code>a.setB()</code>，走入 <code>getBean(&quot;b&quot;)</code> 流程，红色箭头 3</li><li>这回再执行到 <code>b.setA()</code> 时，需要一个 a 对象，有没有呢？有！</li><li><code>factories.get()</code> 在 singletonFactories  缓存中就可以找到，红色箭头 4 和 5</li><li>b 的流程能够顺利走完，将 b 成品放入 singletonObject 一级缓存，返回到 a 的依赖注入流程，红色箭头 6</li></ul><p><mark class="hl-label pink">二级缓存与创建代理</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903103030877.png" alt="image-20210903103030877" style="zoom:80%;" /></p><p>二级缓存的场景<span class='p red'>无法正确处理循环依赖并且包含有代理创建</span>，分析如下</p><ul><li>spring 默认要求，在 <code>a.init</code> 完成之后才能创建代理 <code>pa = proxy(a)</code></li><li>由于 a 的代理创建时机靠后，在执行 <code>factories.put(a)</code> 向 singletonFactories 中放入的还是原始对象</li><li>接下来箭头 3、4、5 这几步 b 对象拿到和注入的都是原始对a象</li></ul><p><mark class="hl-label red">三级缓存</mark> </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903103628639.png" alt="image-20210903103628639"></p><p>简单分析的话，只需要将代理的创建时机放在依赖注入之前即可，但 spring 仍然希望代理的创建时机在 init 之后，只有出现循环依赖时，才会将代理的创建时机提前。所以解决思路稍显复杂：</p><ul><li>图中 <code>factories.put(fa)</code> 放入的既不是原始对象，也不是代理对象而是工厂对象 fa</li><li>当检查出发生循环依赖时，fa 的产品就是代理 pa，没有发生循环依赖，fa 的产品是原始对象 a</li><li>假设出现了循环依赖，拿到了 singletonFactories 中的工厂对象，通过在依赖注入前获得了 pa，红色箭头 5</li><li>这回 <code>b.setA()</code> 注入的就是代理对象，保证了正确性，红色箭头 7</li><li>还需要把 pa 存入新加的 earlySingletonObjects 缓存，红色箭头 6</li><li><code>a.init</code> 完成后，无需二次创建代理，从哪儿找到 pa 呢？earlySingletonObjects 已经缓存，蓝色箭头 9</li></ul><p>当成品对象产生，放入 singletonObject 后，singletonFactories 和 earlySingletonObjects 就中的对象就没有用处，清除即可</p>              </div>            </details><hr><details class="folding-tag" yellow close><summary> 构造循环依赖如何解决？ 三级缓存能否解决？ </summary>              <div class='content'>              <p>无法用三级缓存解决</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903085906315.png" alt="image-20210903085906315"  /></p><p><mark class="hl-label blue">注入代理对象，通过代理对象访问</mark> </p><p>a 注入 b 的代理对象，这样能够保证 a 的流程走通。后续需要用到 b 的真实对象时，可以通过代理间接访问</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903091627659.png" alt="image-20210903091627659" style="zoom: 50%;" /></p><p>用 <code>@Lazy</code> 为构造方法参数生成代理</p><p>或<code>@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)</code></p><p><mark class="hl-label pink">注入工厂对象，延迟对象创建</mark> </p><p>a 注入 b 的工厂对象，让 b 的实例创建被推迟，这样能够保证 a 的流程先走通。后续需要用到 b 的真实对象时，再通过 ObjectFactory 工厂间接访问</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903091743366.png" alt="image-20210903091743366" style="zoom:50%;" /></p><p>用 ObjectProvider 延迟依赖对象的创建</p>              </div>            </details><hr><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring-AOP"></a>Spring-AOP</h2><details class="folding-tag" cyan close><summary> 什么是代理模式?聊聊JDK和CGLib动态代理实现和区别? </summary>              <div class='content'>              <p>代理模式是一种比较好理解的设计模式。 简单来说就是我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p><p>Java中的代理按照代理类生成时机不同又分为<code>静态代理</code>和<code>动态代理</code>。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有<code>JDK代理</code>和<code>CGLib代理</code>两种。</p><hr><p><mark class="hl-label blue">JDK动态代理</mark> </p><p><code>JDK</code>的动态代理是基于<strong>反射</strong>实现。<code>JDK</code>通过反射，生成一个代理类，这个代理类实现了原来那个类的全部接口，并对接口中定义的所有方法进行了代理。当我们通过代理对象执行原来那个类的方法时，代理类底层会通过反射机制，回调我们实现的<code>InvocationHandler</code>接口的<code>invoke</code>方法。并且这个代理类是Proxy类的子类。这就是<code>JDK</code>动态代理大致的实现方式。</p><p>优点:</p><ol><li><code>JDK</code>动态代理是<code>JDK</code>原生的，不需要任何依赖即可使用；</li><li>通过反射机制生成代理类的速度要比<code>CGLib</code>操作字节码生成代理类的速度更快；</li></ol><p>缺点:</p><ol><li>如果要使用<code>JDK</code>动态代理，被代理的类必须实现了接口，否则无法代理()；</li><li><code>JDK</code>动态代理无法为没有在接口中定义的方法实现代理，假设我们有一个实现了接口的类，我们为它的一个不属于接口中的方法配置了切面，<code>Spring</code>仍然会使用<code>JDK</code>的动态代理，但是由于配置了切面的方法不属于接口，为这个方法配置的切面将不会被织入。</li><li><code>JDK</code>动态代理执行代理方法时，需要通过反射机制进行回调，此时方法执行的效率比较低；</li></ol><p>注：JDK代理，代理的是接口，既然代理的是接口，那如果没有实现类怎么办，能不能代理。答案是可以的，Mybatis就是这样的。</p><hr><p><mark class="hl-label green">CGLib动态代理</mark> </p><p><code>CGLib</code>实现动态代理的原理是，底层采用了<code>ASM</code>字节码生成框架，直接对需要代理的类的字节码进行操作，生成这个类的一个子类，并重写了类的所有可以重写的方法，在重写的过程中，将我们定义的额外的逻辑（简单理解为<code>Spring</code>中的切面）织入到方法中，对方法进行了增强。而通过字节码操作生成的代理类，和我们自己编写并编译后的类没有太大区别。</p><p>优点:</p><ol><li>使用<code>CGLib</code>代理的类，不需要实现接口，因为<code>CGLib</code>生成的代理类是直接继承自需要被代理的类；</li><li><code>CGLib</code>生成的代理类是原来那个类的子类，这就意味着这个代理类可以为原来那个类中，所有能够被子类重写的方法进行代理；</li><li><code>CGLib</code>生成的代理类，和我们自己编写并编译的类没有太大区别，对方法的调用和直接调用普通类的方式一致，所以<code>CGLib</code>执行代理方法的效率要高于<code>JDK</code>的动态代理；</li></ol><p>缺点:</p><ol><li>由于<code>CGLib</code>的代理类使用的是继承，这也就意味着如果需要被代理的类是一个<code>final</code>类，则无法使用<code>CGLib</code>代理；</li><li>由于<code>CGLib</code>实现代理方法的方式是重写父类的方法，所以无法对<code>final</code>方法，或者<code>private</code>方法进行代理，因为子类无法重写这些方法；</li><li><code>CGLib</code>生成代理类的方式是通过操作字节码，这种方式生成代理类的速度要比<code>JDK</code>通过反射生成代理类的速度更慢；</li></ol>              </div>            </details><hr><details class="folding-tag" green close><summary> 代理对象创建的时机? </summary>              <div class='content'>              <p><span id="jump"></span></p><p>Aspect = advice + pointcut ， 一个切面类中可能有一到多个通知方法。</p><p>advisor = 更细粒度的切面，包含一个通知和切点。</p><p>配置的切点、切面都会转换成一个个<code>Advisor</code>对象。</p><p>代理对象内部会保存关联的<code>Advisor</code>对象。</p><p><code>AnnotationAwareAspectJAutoProxyCreator#wrapIfNecessary()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="built_in">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 判断bean是否是切点、切面、通知 这些不进行增强</span></span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create proxy if we have advice. 寻找匹配的切面</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line"><span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">     <span class="comment">// 返回代理对象</span></span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">   <span class="comment">// 没有匹配的切面 不进行增强</span></span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动代理后处理器在哪里会被调用到</p><p>创建阶段 如果传入了TargetSource （了解即可）</p><p>初始化阶段 后处理器代理</p><p>依赖注入阶段 产生了循环依赖 在单例工厂池中通过工厂对象间接调用到后处理器类创建代理</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240301114922096.png" alt="image-20240301114922096"></p>              </div>            </details><hr><h2 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring-事务"></a>Spring-事务</h2><details class="folding-tag" cyan close><summary> Spring事务失效场景 </summary>              <div class='content'>              <blockquote><p>配置问题</p></blockquote><p><mark class="hl-label blue">数据库不支持事务</mark> </p><p>事务本来就是数据库的功能，如果数据库本身不支持事务，那任凭代码上如何设置也是没用的。以MySQL为例，InnoDB引擎是支持事务的，而像MyISAM、MEMORY等是不支持事务的。从MySQL5.5.5开始默认的存储引擎是InnoDB，之前默认都是MyISAM。</p><hr><p><mark class="hl-label green">未开启事务</mark> </p><p>如果是SpringBoot项目，那么SpringBoot通过DataSourceTransactionManagerAutoConfiguration自动配置类帮我们开启了事务。如果是传统的Spring项目，则需要我们自己配置</p><hr><blockquote><p>Spring-AOP代理</p></blockquote><p><mark class="hl-label blue">事务方法被final或static关键字修饰</mark> </p><p>如果<code>Spring</code>使用了<code>Cglib</code>代理实现（比如你的代理类没有实现接口），而你的业务方法恰好使用了<code>final</code>或者<code>static</code>关键字，那么事务也会失败。更具体地说，它应该抛出异常，因为<code>Cglib</code>使用字节码增强技术生成被代理类的子类并重写被代理类的方法来实现代理。如果被代理的方法的方法使用<code>final</code>或<code>static</code>关键字，则子类不能重写被代理的方法。</p><p>如果<code>Spring</code>使用<code>JDK</code>动态代理实现，<code>JDK</code>动态代理是基于接口实现的，那么<code>final</code>和<code>static</code>修饰的方法也就无法被代理。</p><p>总而言之，方法连代理都没有，那么肯定无法实现事务回滚了。</p><p><strong>解决方案：</strong></p><p>去掉final或者static关键字</p><hr><p><mark class="hl-label green">方法的访问权限不是public</mark> </p><p>如果方法的访问权限不是<code>public</code>，<code>Spring</code>事务也会失败，因为<code>Spring</code>的事务管理源码<code>AbstractFallbackTransactionAttributeSource</code>中有判断<code>computeTransactionAttribute()。</code>如果目标方法不是公共的，则<code>TransactionAttribute</code>返回<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Don&#x27;t allow no-public methods as required.</span></span><br><span class="line"><span class="keyword">if</span> (allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>是将当前方法访问级别更改为<code>public</code></p><hr><p><mark class="hl-label red">同一个类中，方法内部调用</mark> </p><p>事务是通过 <code>Spring AOP</code>代理来实现的，而在同一个类中，一个方法调用另一个方法时， 调用方法直接调用目标方法的代码，而不是通过代理类进行调用，因此事务不生效。</p><p><strong>解决方案：</strong></p><ol><li>依赖注入自己（代理），通过代理类来调用目标方法</li><li>开启<code>@EnableAspectJAutoProxy(exposeProxy = true)</code>，<code>AopContext.currentProxy())</code>得到代理对象，再调用目标方法</li></ol><hr><blockquote><p>错误的异常处理</p></blockquote><p><mark class="hl-label blue">抛出检查异常</mark> </p><p>比如你的事务控制代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>@Transactional</code> 没有特别指定，Spring 只会在遇到运行时异常RuntimeException或者error时进行回滚，而<code>IOException</code>等检查异常不会影响回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">rollbackOn</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (ex <span class="keyword">instanceof</span> RuntimeException || ex <span class="keyword">instanceof</span> Error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>知道原因后，解决方法也很简单。配置<code>rollbackFor</code>属性，例如<code>@Transactional(rollbackFor = Exception.class)</code>。</p><hr><p><mark class="hl-label green">业务方法本身捕获了异常</mark> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">            <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">                accountMapper.update(to, amount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种场景下，事务失败的原因也很简单，事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉。</p><p><strong>解决方案：</strong></p><ol><li>异常catch后再次抛出</li><li>手动设置 <code>TransactionInterceptor.currentTransactionstatus().setRolLbackOnly();</code></li></ol><hr><p><mark class="hl-label red">AOP切面顺序导致导致异常在切面处处理</mark> </p><p><code>Spring</code>的事务切面优先级最低，所以如果异常被别的切面捕获，Spring也不能正常处理事务，因为事务管理器无法捕获异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* transfer(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        LoggerUtils.get().debug(<span class="string">&quot;log:&#123;&#125;&quot;</span>, pjp.getTarget());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><ol><li>异常catch后再次抛出</li><li>手动设置 <code>TransactionInterceptor.currentTransactionstatus().setRolLbackOnly();</code></li><li>调整切面顺序，在 MyAspect 上添加 <code>@Order(Ordered.LOWEST_PRECEDENCE - 1)</code> （不推荐）</li></ol><hr><blockquote><p>@Transactional相关</p></blockquote><p><mark class="hl-label blue">使用了错误的事务传播机制</mark> </p><p><code>Spring</code>提供了七种事务传播机制，可根据“是否支持当前事务”的维度分为以下 3 类：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image.png" alt="image" style="zoom: 45%;" /></p><p>若propagation属性设置如下三种事务传播行为，事务将不会发生回滚。</p><ul><li>SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li>NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li>NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。</li></ul><hr><p><mark class="hl-label green">Transactional没有保证原子行为</mark> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Service7.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromBalance</span> <span class="operator">=</span> accountMapper.findBalanceBy(from);</span><br><span class="line">        logger.debug(<span class="string">&quot;更新前查询余额为: &#123;&#125;&quot;</span>, fromBalance);</span><br><span class="line">        <span class="keyword">if</span> (fromBalance - amount &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            accountMapper.update(from, -<span class="number">1</span> * amount);</span><br><span class="line">            accountMapper.update(to, amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBalance</span><span class="params">(<span class="type">int</span> accountNo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findBalanceBy(accountNo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码实际上是有 bug 的，假设 from 余额为 1000，两个线程都来转账 1000，可能会出现扣减为负数的情况</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903120436365.png" alt="image-20210903120436365" style="zoom: 50%;" /></p><p>如上图所示，红色线程和蓝色线程的查询都发生在扣减之前，都以为自己有足够的余额做扣减</p><p><mark class="hl-label red">针对上面的问题，能否在方法上加synchronized锁来解决呢？</mark> </p><p>答案是不行，原因如下：</p><ul><li>synchronized 保证的仅是目标方法的原子性，环绕目标方法的还有 commit 等操作，它们并未处于 sync 块内</li><li>可以参考下图发现，蓝色线程的查询只要在红色线程提交之前执行，那么依然会查询到有 1000 足够余额来转账</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20210903120800185.png" alt="image-20210903120800185" style="zoom:50%;" /></p><ul><li><p>解法1：synchronized 范围应扩大至代理方法调用</p></li><li><p>解法2：使用 select … for update 替换 select</p></li></ul><hr><blockquote><p>多线程调用</p></blockquote><p>这是因为 <code>Spring</code>事务是基于线程绑定的， 每个线程都有自己的事务上下文，而多线程环境下可能会存在多个线程共享同一个事务上下文的情况，导致事务不生效。 <code>Spring</code>事务管理器通过使用线程本地变量（ <code>ThreadLocal</code>）来实现线程安全。在Spring事务管理器中，通过<code>TransactionSynchronizationManager</code>类来管理事务上下文。<code>TransactionSynchronizationManager</code>内部维护了一个<code>ThreadLocal</code>对象，用来存储当前线程的事务上下文。在事务开始时，<code>TransactionSynchronizationManager</code>会将事务上下文绑定到当前线程的<code>ThreadLocal</code>对象中，当事务结束时，<code>TransactionSynchronizationManager</code>会将事务上下文从<code>ThreadLocal</code>对象中移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">(User user)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子线程执行</span></span><br><span class="line">    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主线程执行</span></span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程都会将Connection连接放在自己的threadlocal里面，所以@Transactional获取不到子线程的连接，没法回滚</p><p><strong>解决方案：</strong></p><p>父子线程共用一个连接，子线程如果运行出错，要在主线程中获取到并抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.在主线程里获取数据库连接资源</span></span><br><span class="line">    <span class="type">ConnectionHolder</span> <span class="variable">conHolder</span> <span class="operator">=</span></span><br><span class="line">            (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">    <span class="comment">//子线程执行</span></span><br><span class="line">    CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 2.子线程绑定主线程的数据库连接资源</span></span><br><span class="line">        TransactionSynchronizationManager.bindResource(dataSource, conHolder);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 3.解绑</span></span><br><span class="line">        TransactionSynchronizationManager.unbindResource(dataSource);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//主线程执行</span></span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="comment">// 阻塞等待子线程 并拿到子线程的异常 若抛出异常 则join后也会抛出异常</span></span><br><span class="line">    future.join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><details class="folding-tag" cyan close><summary> Jarlauncher的作用? </summary>              <div class='content'>              <p>在开发环境中通过运行idea中的run方式即可运行SpringBoot应用，也是在开发过程中最常见的一种方式。这种方式启动使用的类加载器为<code>AppClassLoader</code>，所有依赖的jar包都通过<code>-classpath</code>添加至启动参数。</p><p>在生产环境，将Maven插件将项目打成jar包后，可以通过运行命令函参数<code>java -jar</code>的方式运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── BOOT-INF</span><br><span class="line">│   ├── classes -- 应用程序</span><br><span class="line">│   └── lib --项目运行依赖的jar包</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF --清单文件</span><br><span class="line">│   └── maven</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br><span class="line">            └── loader -- 通过打包插件打入</span><br></pre></td></tr></table></figure><p>在清单文件中<code>MANIFEST.MF</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attr">Created-By</span>: <span class="string">Maven JAR Plugin 3.2.2</span></span><br><span class="line"><span class="attr">Build-Jdk-Spec</span>: <span class="string">17</span></span><br><span class="line"><span class="attr">Main-Class</span>: <span class="string">org.springframework.boot.loader.JarLauncher </span></span><br><span class="line"><span class="attr">Start-Class</span>: <span class="string">com.whut.PortApplication </span></span><br><span class="line"><span class="attr">Spring-Boot-Version</span>: <span class="string">3.0.7</span></span><br><span class="line"><span class="attr">Spring-Boot-Classes</span>: <span class="string">BOOT-INF/classes/</span></span><br><span class="line"><span class="attr">Spring-Boot-Lib</span>: <span class="string">BOOT-INF/lib/</span></span><br><span class="line"><span class="attr">Spring-Boot-Classpath-Index</span>: <span class="string">BOOT-INF/classpath.idx</span></span><br><span class="line"><span class="attr">Spring-Boot-Layers-Index</span>: <span class="string">BOOT-INF/layers.idx</span></span><br></pre></td></tr></table></figure><ul><li><code>Main-Class</code>是<code>org.springframework.boot.loader.JarLauncher</code>，即jar启动的Main函数；</li><li><code>Start-Class</code>是<code>com.whut.PortApplication</code> ，即我们自己SpringBoot项目的启动类；</li></ul><p>因为org.springframework.boot.loader.JarLauncher类存在于org.springframework.boot:spring-boot-loader中，所以看源码之前需要先引入maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-loader<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tabs" id="91a018db-47a9-47db-82d9-fbd971ee6736"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#91a018db-47a9-47db-82d9-fbd971ee6736-1"><i class="fas fa-seedling"></i>JarLauncher源码</button></li><li class="tab"><button type="button" data-href="#91a018db-47a9-47db-82d9-fbd971ee6736-2"><i class="fas fa-leaf"></i>Launcher#launch(args)方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="91a018db-47a9-47db-82d9-fbd971ee6736-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JarLauncher</span> <span class="keyword">extends</span> <span class="title class_">ExecutableArchiveLauncher</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EntryFilter</span> <span class="variable">NESTED_ARCHIVE_ENTRY_FILTER</span> <span class="operator">=</span> (entry) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getName().equals(<span class="string">&quot;BOOT-INF/classes/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entry.getName().startsWith(<span class="string">&quot;BOOT-INF/lib/&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JarLauncher</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">JarLauncher</span><span class="params">(Archive archive)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(archive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isPostProcessingClassPathArchives</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isNestedArchive</span><span class="params">(Archive.Entry entry)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> NESTED_ARCHIVE_ENTRY_FILTER.matches(entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String <span class="title function_">getArchiveEntryPathPrefix</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;BOOT-INF/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">JarLauncher</span>().launch(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JarLauncher#main()</code>中新建了<code>JarLauncher</code>并调用父类Launcher中的<code>launch()</code>方法启动程序；<br><code>isNestedArchive(Archinve.Entry entry)</code>方法用于判断FAT JAR资源的相对路径是否为<code>nestedArchive</code>嵌套文档。进而决定这些FAT JAR是否会被launch。当方法返回false时，说明FAT JAR被解压至文件目录</p><blockquote><p>Archive的概念</p></blockquote><p>archive即归档文件，这个概念在linux下比较常见；通常就是一个tar/zip格式的压缩包；而jar正是zip格式的。</p><p>SpringBoot抽象了Archive的概念，一个Archive可以是jar（JarFileArchive），也可以是文件目录（ExplodedArchive）；这样也就统一了访问资源的逻辑层；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Archive</span> <span class="keyword">extends</span> <span class="title class_">Iterable</span>&lt;Archive.Entry&gt;, AutoCloseable &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Archive</code>继承自<code>Archive.Entry</code>，<code>Archive.Entry</code>有两种实现：</p><ul><li><code>JarFileArchive.JarFileEntry</code> —&gt; 基于<code>java.util.jar.JarEntry</code>实现，表示FAT JAR嵌入资源。</li><li><code>ExplodedArchive.FileEntry</code> —&gt; 基于文件系统实现；</li></ul><p>两者的主要差别是<code>ExplodedArchive</code>相比于JarFileArchive多了一个获取文件的getFile()方法；</p><p>也就是说一个在jar包环境下寻找资源，一个在文件夹目录下寻找资源</p><p><strong>当执行java -jar命令时，将调用/META-INF /MANIFEST.MF文件的Main-Class属性的main()方法，实际上调用的是JarLauncher#launch(args)方法；</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="91a018db-47a9-47db-82d9-fbd971ee6736-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isExploded()) &#123;</span><br><span class="line">        <span class="comment">// phase1：注册jar URL处理器</span></span><br><span class="line">        JarFile.registerUrlProtocolHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// phase2：创建ClassLoader</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> createClassLoader(getClassPathArchivesIterator());</span><br><span class="line">    <span class="type">String</span> <span class="variable">jarMode</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;jarmode&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">launchClass</span> <span class="operator">=</span> (jarMode != <span class="literal">null</span> &amp;&amp; !jarMode.isEmpty()) ? JAR_MODE_LAUNCHER : getMainClass();</span><br><span class="line">    <span class="comment">// phase3：反射调用实际的引导类launch</span></span><br><span class="line">    launch(args, launchClass, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，JDK提供的ClassLoader只能识别jar中的class文件以及加载classpath下的其他jar包中的class文件，对于jar in jar的包无法加载；<br>当SpringBoot FAT JAR被<code>java -jar</code>命令引导时，其内部的JAR文件无法被内嵌实现当做classPath，故需要定义了一套URLStreamHandler实现类和JarURLConnection实现类，用来加载jar in jar包的class类文件。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>总结</p></blockquote><p>Spring Boot应用打包之后，生成一个<code>Fat jar</code>，包含了应用依赖的所有三方jar包和SpringBoot Loader相关的类。</p><p>Fat jar的启动Main函数是<code>JarLauncher</code>，它负责创建一个<code>LaunchedURLClassLoader</code>来加载<code>BOOT-INF/classes</code>目录以及<code>/BOOT-INF/lib下面的jar</code>，并利用反射获取<code>mainClass</code>类中的<code>main(Stirng[])</code>方法并调用。</p><p>即：运行JarLauncher实际上是在同进程、同线程内调用Start-Class类的main(Stirng[])方法，并且在调用前准备好ClassPath。</p>              </div>            </details><hr><details class="folding-tag" green close><summary> 自动装配原理 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240320114427371.png" alt="image-20240320114427371"></p>              </div>            </details><hr><details class="folding-tag" blue close><summary> Tomcat并发量 </summary>              <div class='content'>              <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20240320143615690.png" alt="image-20240320143615690"></p>              </div>            </details><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>适配器模式</p><p>DisposableBeanAdapter</p><p>HeandlerAdapter</p><hr><p>享元模式(池化)</p><p>hikari连接池</p><p>在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了 valueOf 方法，例如 Long 的 valueOf 会缓存 -128~127 之间的 Long 对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对象</p><hr><p>责任链模式</p>]]></content>
    
    
    <summary type="html">Spring面试题</summary>
    
    
    
    <category term="Spring" scheme="https://wuwawawa.github.io/categories/Spring/"/>
    
    
    <category term="面试题" scheme="https://wuwawawa.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>区间最值问题与ST表</title>
    <link href="https://wuwawawa.github.io/posts/95223a9d.html"/>
    <id>https://wuwawawa.github.io/posts/95223a9d.html</id>
    <published>2023-10-17T05:22:19.000Z</published>
    <updated>2023-10-17T06:38:47.783Z</updated>
    
    <content type="html"><![CDATA[<p>我们先从一个简单的区间问题切入</p><p>给定一个长度为 N 的数列，和 M 次询问，求出每一次询问的区间[L , R] 内数字的最大值。</p><blockquote><p>示例</p></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">下标：0<span class="number"> 1 </span>2<span class="number"> 3 </span>4<span class="number"> 5 </span>6 7</span><br><span class="line">数列：9<span class="number"> 3 </span>1<span class="number"> 7 </span>5<span class="number"> 6 </span>0 8</span><br><span class="line">询问：</span><br><span class="line">[0,5] -&gt; 9</span><br><span class="line">[4,5] -&gt; 6</span><br><span class="line">[3,5] -&gt; 7</span><br></pre></td></tr></table></figure><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><div class="tabs" id="f67643ba-62fd-4f13-a803-a1c293ff0cdb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f67643ba-62fd-4f13-a803-a1c293ff0cdb-1"><i class="fas fa-atom"></i>暴力解法</button></li><li class="tab"><button type="button" data-href="#f67643ba-62fd-4f13-a803-a1c293ff0cdb-2"><i class="far fa-sun"></i>暴力打表</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f67643ba-62fd-4f13-a803-a1c293ff0cdb-1"><p> 对于每次询问，都遍历一遍区间</p><p>O(NM)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt(), M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (M-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> sc.nextInt(), r = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f67643ba-62fd-4f13-a803-a1c293ff0cdb-2"><p>定义数组 <code>ans[i][j]</code>  表示[i , j]区间的答案 使用动态规划的思想对数组进行填充</p><p>空间复杂度 O(n*n)</p><p>时间复杂度 O(n*n + m)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt(), M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打表</span></span><br><span class="line">    <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">    <span class="comment">//base case</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) ans[i][i] = arr[i];</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; N; j++) &#123;</span><br><span class="line">            ans[i][j] = Math.max(ans[i][j - <span class="number">1</span>], arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (M-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> sc.nextInt(), r = sc.nextInt();</span><br><span class="line">        System.out.println(ans[l][r]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h2 id="稀疏表优化"><a href="#稀疏表优化" class="headerlink" title="稀疏表优化"></a>稀疏表优化</h2><p>在暴力打表的解法中 我们把每个小区间都进行了存储，太过于紧凑，使得占用的空间过大</p><p>[0,1] [0,2] [0,3] [0,4] [0,5] [0,6] [0,7] </p><p>[1,2] [1,3] [1,4] [1,5] [1,6] [1,7]</p><p>[2,3] [2,4] [2,5] [2,6] [2,7]</p><p>……</p><hr><p>ST表则是基于动态规划 + 倍增的思想：</p><p>假如我们需要求[0 , x]区间的最大值，我们只需要知道[0 ,  x/2] 和 [x/2 + 1 , x]的最大值 反复减半直至区间长度为1</p><p>定义 <code>dp[i][j]</code> 表示 从 i 开始 ，长度为 2^j 的 区间最大值</p><p>base case </p><p><code>dp[i][0] = arr[i]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对于每次询问 [l , r] 区间最大值为 </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.log(R - L + <span class="number">1</span>) / Math.log(<span class="number">2</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Math.max(dp[L][j], dp[R - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>][j]);</span><br><span class="line"></span><br><span class="line">假设区间为[<span class="number">1</span>,<span class="number">8</span>]</span><br><span class="line">  那我们取的两个区间是[<span class="number">1</span>,<span class="number">8</span>] 和 [<span class="number">1</span>,<span class="number">8</span>]</span><br><span class="line">假设区间为[<span class="number">1</span>,<span class="number">9</span>]</span><br><span class="line">  那我们取的两个区间是[<span class="number">1</span>,<span class="number">8</span>] 和 [<span class="number">2</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt(), M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.log(N) / Math.log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][size + <span class="number">5</span>];</span><br><span class="line">    <span class="comment">//base case</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) dp[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= size; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; N; i++) &#123;</span><br><span class="line">            dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (M-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> sc.nextInt(), R = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.log(R - L + <span class="number">1</span>) / Math.log(<span class="number">2</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Math.max(dp[L][j], dp[R - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>][j]);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ST表不仅仅可以用来求max ，还可以用来求 min gcd(最大公约数) lcm(最小公倍数)</p><p>ST 表是一个静态表，只能处理一些离线问题，而不能处理在线问题。</p>]]></content>
    
    
    <summary type="html">sparse table 稀疏表</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法模版</title>
    <link href="https://wuwawawa.github.io/posts/bb13e2f5.html"/>
    <id>https://wuwawawa.github.io/posts/bb13e2f5.html</id>
    <published>2023-10-04T03:38:05.000Z</published>
    <updated>2024-04-07T02:58:07.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="经典模版题"><a href="#经典模版题" class="headerlink" title="经典模版题"></a>经典模版题</h3><p>关键词： 满足xxx条件（计算结果(加减乘除)、出现次数(cnt数组准备)、同时包含）长度最长/最短子串/子数组</p><p>注意点<br>1.if/while使用条件判断<br>2.right-left+1的重要性</p><div class="tabs" id="df3b0974-b073-4def-8595-8222f2f2897c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#df3b0974-b073-4def-8595-8222f2f2897c-1"><i class="fas fa-seedling"></i>209</button></li><li class="tab"><button type="button" data-href="#df3b0974-b073-4def-8595-8222f2f2897c-2"><i class="fas fa-leaf"></i>713</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="df3b0974-b073-4def-8595-8222f2f2897c-1"><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">长度最小的子数组</a></p><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span> , r = <span class="number">0</span> , len = nums.length;</span><br><span class="line">    <span class="keyword">while</span>(r &lt; len)&#123;</span><br><span class="line">        sum += nums[r];    </span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">            res = Math.min(res , r - l + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[l];</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="df3b0974-b073-4def-8595-8222f2f2897c-2"><p><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">乘积小于 K 的子数组</a></p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回子数组内所有元素的乘积严格小于 <code>k</code> 的连续子数组的数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> <span class="number">1</span> , len = nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span> , r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &lt; len)&#123;</span><br><span class="line">        product *= nums[r];</span><br><span class="line">        r++;</span><br><span class="line">        <span class="keyword">while</span>(product &gt;= k &amp;&amp; l &lt; r)&#123;</span><br><span class="line">            product /= nums[l++];</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 以nums[r] 结尾子数组个数</span></span><br><span class="line">        res += r - l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="两端滑动窗口套路模板题"><a href="#两端滑动窗口套路模板题" class="headerlink" title="两端滑动窗口套路模板题"></a>两端滑动窗口套路模板题</h3><p>正难则反，从两边拿难思考，最大化拿外面等价转换为最小化拿里面<br>由此变为模板题：从两端取数字等等，连续子数组，字串，可以想到滑动窗口解决</p><div class="tabs" id="174d806e-4979-4493-a287-fb02300675f0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#174d806e-4979-4493-a287-fb02300675f0-1"><i class="fas fa-seedling"></i>2516</button></li><li class="tab"><button type="button" data-href="#174d806e-4979-4493-a287-fb02300675f0-2"><i class="fas fa-leaf"></i>1423</button></li><li class="tab"><button type="button" data-href="#174d806e-4979-4493-a287-fb02300675f0-3"><i class="fab fa-apple"></i>1658</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="174d806e-4979-4493-a287-fb02300675f0-1"><p><a href="https://leetcode.cn/problems/take-k-of-each-character-from-left-and-right/"> 每种字符至少取 K 个</a></p><p>给你一个由字符 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code> 组成的字符串 <code>s</code> 和一个非负整数 <code>k</code> 。每分钟，你可以选择取走 <code>s</code> <strong>最左侧</strong> 还是 <strong>最右侧</strong> 的那个字符。</p><p>你必须取走每种字符 <strong>至少</strong> <code>k</code> 个，返回需要的 <strong>最少</strong> 分钟数；如果无法取到，则返回 <code>-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">takeCharacters</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] cs = s.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> cs.length;</span><br><span class="line">    <span class="comment">// 统计词频</span></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&#x27;a&#x27;</span>,-k);</span><br><span class="line">    map.put(<span class="string">&#x27;b&#x27;</span>,-k);</span><br><span class="line">    map.put(<span class="string">&#x27;c&#x27;</span>,-k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : cs) &#123;</span><br><span class="line">       map.merge(c,<span class="number">1</span>,Integer::sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 窗口</span></span><br><span class="line">    HashMap&lt;Character, Integer&gt; window = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; len) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">rc</span> <span class="operator">=</span> cs[r];</span><br><span class="line">        window.merge(rc, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        <span class="keyword">while</span> (window.get(rc) &gt; map.get(rc) &amp;&amp; l &lt;= r) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">lc</span> <span class="operator">=</span> cs[l];</span><br><span class="line">            window.merge(lc, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans, r - l + <span class="number">1</span>);</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len - ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="174d806e-4979-4493-a287-fb02300675f0-2"><p><a href="https://leetcode.cn/problems/maximum-points-you-can-obtain-from-cards/">可获得的最大点数</a></p><p>几张卡牌 <strong>排成一行</strong>，每张卡牌都有一个对应的点数。点数由整数数组 <code>cardPoints</code> 给出。</p><p>每次行动，你可以从行的开头或者末尾拿一张卡牌，最终你必须正好拿 <code>k</code> 张卡牌。</p><p>你的点数就是你拿到手中的所有卡牌的点数之和。</p><p>给你一个整数数组 <code>cardPoints</code> 和整数 <code>k</code>，请你返回可以获得的最大点数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxScore</span><span class="params">(<span class="type">int</span>[] cardPoints, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> cardPoints.length;</span><br><span class="line">    k = len - k;</span><br><span class="line">    <span class="comment">// 计算sum</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(cardPoints).sum();</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; len) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rx</span> <span class="operator">=</span> cardPoints[r];</span><br><span class="line">        total += rx;</span><br><span class="line">        <span class="keyword">if</span> (r - l + <span class="number">1</span> == k + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lx</span> <span class="operator">=</span> cardPoints[l];</span><br><span class="line">            total -= lx;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r - l + <span class="number">1</span> == k) &#123;</span><br><span class="line">            ans = Math.min(ans, total);</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum - ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="174d806e-4979-4493-a287-fb02300675f0-3"><p><a href="https://leetcode.cn/problems/minimum-operations-to-reduce-x-to-zero/">将 x 减到 0 的最小操作数</a></p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>x</code> 。每一次操作时，你应当移除数组 <code>nums</code> 最左边或最右边的元素，然后从 <code>x</code> 中减去该元素的值。请注意，需要 <strong>修改</strong> 数组以供接下来的操作使用。</p><p>如果可以将 <code>x</code> <strong>恰好</strong> 减到 <code>0</code> ，返回 <strong>最小操作数</strong> ；否则，返回 <code>-1</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">    <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> sum - x;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span> (x == sum) &#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在窗口内找到最长子数组 其和等于target</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (r &lt; len) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rx</span> <span class="operator">=</span> nums[r];</span><br><span class="line">        s += rx;</span><br><span class="line">        <span class="keyword">while</span> (s &gt; target &amp;&amp; l &lt;= r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lx</span> <span class="operator">=</span> nums[l];</span><br><span class="line">            s -= lx;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s == target) &#123;</span><br><span class="line">            res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res == -<span class="number">1</span> ? -<span class="number">1</span> : len - res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="两个left计算区间个数"><a href="#两个left计算区间个数" class="headerlink" title="两个left计算区间个数"></a>两个left计算区间个数</h3><p>滑动窗口区间个数计算模板题（两个left计算区间个数）</p><p>主要解决的问题是利用滑动窗口的两个left计算区间个数的模板解决相关套路题。</p><p>题目中往往包含<span class='p green'>恰好字眼</span></p><blockquote><p>把「恰好」 转换成为 「最多」。</p><p>例如求恰好k个，就用最多k个 - 最多k-1个 = 恰好k个</p></blockquote><div class="tabs" id="8c93d26e-1b54-4ffd-9dce-d4803af8693d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8c93d26e-1b54-4ffd-9dce-d4803af8693d-1"><i class="fas fa-seedling"></i>LC930</button></li><li class="tab"><button type="button" data-href="#8c93d26e-1b54-4ffd-9dce-d4803af8693d-2"><i class="fas fa-leaf"></i>LC1248</button></li><li class="tab"><button type="button" data-href="#8c93d26e-1b54-4ffd-9dce-d4803af8693d-3"><i class="fab fa-apple"></i>LC992</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8c93d26e-1b54-4ffd-9dce-d4803af8693d-1"><p><a href="https://leetcode.cn/problems/binary-subarrays-with-sum/">和相同的二元子数组</a></p><p>给你一个二元数组 <code>nums</code> ，<code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code>，和一个整数 <code>goal</code> ，请你统计并返回有多少个和为 <code>goal</code> 的 <strong>非空</strong> 子数组。</p><p><strong>子数组</strong> 是数组的一段连续部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numSubarraysWithSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> goal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cal(nums, goal) - cal(nums, goal - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[right];</span><br><span class="line">        s += x;</span><br><span class="line">        <span class="keyword">while</span> (s &gt; k &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">            s -= nums[left];</span><br><span class="line">            left += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += right - left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c93d26e-1b54-4ffd-9dce-d4803af8693d-2"><p><a href="https://leetcode.cn/problems/count-number-of-nice-subarrays/">统计优美子数组</a></p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>。如果某个连续子数组中恰好有 <code>k</code> 个奇数数字，我们就认为这个子数组是「<strong>优美子数组</strong>」。</p><p>请返回这个数组中 <strong>「优美子数组」</strong> 的数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cal(nums, k) - cal(nums, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">countOdd</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; len; right++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums[right];</span><br><span class="line">        countOdd += ((x &amp; <span class="number">1</span>) == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (countOdd &gt; k &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">            countOdd -= ((nums[left] &amp; <span class="number">1</span>) == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += right - left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8c93d26e-1b54-4ffd-9dce-d4803af8693d-3"><p><a href="https://leetcode.cn/problems/subarrays-with-k-different-integers/"> K 个不同整数的子数组</a></p><p>给定一个正整数数组 <code>nums</code>和一个整数 <code>k</code>，返回 <code>nums</code> 中 「<strong>好子数组」</strong> 的数目。</p><p>如果 <code>nums</code> 的某个子数组中不同整数的个数恰好为 <code>k</code>，则称 <code>nums</code> 的这个连续、不一定不同的子数组为 <strong>「好子数组 」</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraysWithKDistinct</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cal(nums, k) - cal(nums, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; len; right++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rx</span> <span class="operator">=</span> nums[right];</span><br><span class="line">        map.merge(rx, <span class="number">1</span>, Integer::sum);</span><br><span class="line">        <span class="keyword">while</span> (map.size() &gt; k &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lx</span> <span class="operator">=</span> nums[left];</span><br><span class="line">            map.merge(lx, -<span class="number">1</span>, Integer::sum);</span><br><span class="line">            <span class="keyword">if</span> (map.get(lx) == <span class="number">0</span>) &#123;</span><br><span class="line">                map.remove(lx);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += right - left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="分组循环"><a href="#分组循环" class="headerlink" title="分组循环"></a>分组循环</h2><p><strong>适用场景</strong>：按照题目要求，数组会被分割成若干组，且每一组的判断/处理逻辑是一样的。</p><p><strong>核心思想</strong>：</p><ul><li>外层循环负责遍历组之前的准备工作（记录开始位置），和遍历组之后的统计工作（更新答案最大值）。</li><li>内层循环负责遍历组，找出这一组在哪结束。</li></ul><p>一般来说，分组循环的模板如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(nums)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; n:</span><br><span class="line">    start = i</span><br><span class="line">    <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> ...:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 从 start 到 i-1 是一组</span></span><br><span class="line">    <span class="comment"># 下一组从 i 开始，无需 i += 1</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/">最长奇偶子数组</a></p><p><a href="https://leetcode.cn/problems/consecutive-characters/">连续字符</a></p><p><a href="https://leetcode.cn/problems/longer-contiguous-segments-of-ones-than-zeros/">哪种连续子字符串更长</a></p><p><a href="https://leetcode.cn/problems/minimum-time-to-make-rope-colorful/">使绳子变成彩色的最短时间</a></p><p><a href="https://leetcode.cn/problems/longest-substring-of-all-vowels-in-order/">所有元音按顺序排布的最长子字符串</a></p><h2 id="双向BFS"><a href="#双向BFS" class="headerlink" title="双向BFS"></a>双向BFS</h2><p>「双向 BFS」的基本实现思路如下：</p><p>创建「两个队列」分别用于两个方向的搜索；<br>创建「两个哈希表」用于「解决相同节点重复搜索」和「记录转换次数」；<br>为了尽可能让两个搜索方向“平均”，每次从队列中取值进行扩展时，先判断哪个队列容量较少；<br>如果在搜索过程中「搜索到对方搜索过的节点」，说明找到了最短路径。<br>「双向 BFS」基本思路对应的伪代码大致如下：</p><div class="tabs" id="019b1ae0-3bce-4c44-8e19-84a975519e1b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#019b1ae0-3bce-4c44-8e19-84a975519e1b-1"><i class="fas fa-seedling"></i>伪代码</button></li><li class="tab"><button type="button" data-href="#019b1ae0-3bce-4c44-8e19-84a975519e1b-2"><i class="fas fa-leaf"></i>示例代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="019b1ae0-3bce-4c44-8e19-84a975519e1b-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d1、d2 为两个方向的队列</span><br><span class="line">m1、m2 为两个方向的哈希表，记录每个节点距离起点的</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 只有两个队列都不空，才有必要继续往下搜索</span></span><br><span class="line"><span class="comment">// 如果其中一个队列空了，说明从某个方向搜到底都搜不到该方向的目标节点</span></span><br><span class="line"><span class="keyword">while</span>(!d1.isEmpty() &amp;&amp; !d2.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (d1.size() &lt; d2.size()) &#123;</span><br><span class="line">        update(d1, m1, m2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update(d2, m2, m1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update 为将当前队列 d 中包含的元素取出，进行「一次完整扩展」的逻辑（按层拓展）</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Deque d, Map cur, Map other)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="019b1ae0-3bce-4c44-8e19-84a975519e1b-2"><p><a href="https://leetcode.cn/problems/minimum-operations-to-convert-number/">转化数字的最小运算数</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] nums;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumOperations</span><span class="params">(<span class="type">int</span>[] _nums, <span class="type">int</span> s, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    nums = _nums;</span><br><span class="line">    Deque&lt;Long&gt; d1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;(), d2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Long, Integer&gt; m1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(), m2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    d1.addLast(s * <span class="number">1L</span>);</span><br><span class="line">    d2.addLast(t * <span class="number">1L</span>);</span><br><span class="line">    m1.put(s * <span class="number">1L</span>, <span class="number">0</span>);</span><br><span class="line">    m2.put(t * <span class="number">1L</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (!d1.isEmpty() &amp;&amp; !d2.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (d1.size() &lt; d2.size()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> update(d1, m1, d2, m2, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (ans != -<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> update(d2, m2, d1, m1, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (ans != -<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">update</span><span class="params">(Deque&lt;Long&gt; d1, Map&lt;Long, Integer&gt; m1, Deque&lt;Long&gt; d2, Map&lt;Long, Integer&gt; m2, <span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> d1.size();</span><br><span class="line">    <span class="keyword">while</span> (m-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> d1.pollFirst();</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> m1.get(cur);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="comment">// 正向搜索：进行出队检查，只有出队元素符合条件，才能使用出队元素往下拓展</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> &lt;= cur &amp;&amp; cur &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    <span class="type">long</span>[] result = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;cur + i, cur - i, cur ^ i&#125;;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">long</span> next : result) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (m2.containsKey(next)) <span class="keyword">return</span> step + <span class="number">1</span> + m2.get(next);</span><br><span class="line">                        <span class="keyword">if</span> (!m1.containsKey(next)) &#123;</span><br><span class="line">                            d1.addLast(next);</span><br><span class="line">                            m1.put(next, step + <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 反向搜索：进行入队检查，只有拓展元素符合条件，才能将拓展元素入队</span></span><br><span class="line">                <span class="type">long</span>[] result = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;cur + i, cur - i, cur ^ i&#125;;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">long</span> next : result) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0</span> &lt;= next &amp;&amp; next &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (m2.containsKey(next)) <span class="keyword">return</span> step + <span class="number">1</span> + m2.get(next);</span><br><span class="line">                        <span class="keyword">if</span> (!m1.containsKey(next)) &#123;</span><br><span class="line">                            d1.addLast(next);</span><br><span class="line">                            m1.put(next, step + <span class="number">1</span>);</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h2 id="换根DP"><a href="#换根DP" class="headerlink" title="换根DP"></a>换根DP</h2><hr><h2 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h2><p>将 n 转换成字符串 s，定义 <code>f(i,mask,isLimit,hasNum)</code> 表示构造第 i 位及其之后数位的合法方案数，其参数的含义为:</p><ul><li>mask 表示前面选过的数字集合，换句话说，第 i 位要选的数字不能在 mask 中。</li><li>isLimit 表示当前是否受到了 n 的约束（注意要构造的数字不能超过 n）。若为真，则第 i 位填入的数字至多为 s[i]，否则可以是 9。如果在受到约束的情况下填了 s[i]，那么后续填入的数字仍会受到 n 的约束。例如 n=123，那么 i=0 填的是 1 的话，i=1 的这一位至多填 2。</li><li>hasNum 表示 i 前面的数位是否填了数字。若为假，则当前位可以跳过（不填数字），或者要填入的数字至少为 1；若为真，则要填入的数字可以从 0 开始。例如 n=1233，在 i=0 时跳过的话，相当于后面要构造的是一个 9 以内的数字了，如果 i=1 不跳过，那么相当于构造一个 10 到 99 的两位数，如果 i=1 跳过，相当于构造的是一个 9 以内的数字。</li></ul><blockquote><p>如果一个正整数每一个数位都是 <strong>互不相同</strong> 的，我们称它是 <strong>特殊整数</strong> 。给你一个 <strong>正</strong> 整数 <code>n</code> ，请你返回区间 <code>[1, n]</code> 之间特殊整数的数目。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] memo;   <span class="comment">// memo[i][mask]记录当前选择顺位为i，已选状态为mask时，构造第i位及后面位的合法方案数</span></span><br><span class="line">    <span class="type">char</span>[] s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSpecialNumbers</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参考灵神の数位DP记忆化DFS模板：</span></span><br><span class="line"><span class="comment">        注意这题与LC1012是一样的，不过这题更直接求每一位都不相同数字</span></span><br><span class="line"><span class="comment">        dfs(i, mask, isLimit, hasNum) 代表从左到右选到第i个数字时(i从0开始)，前面数字已选状态为mask时的合法方案数</span></span><br><span class="line"><span class="comment">        各个参数的含义如下:</span></span><br><span class="line"><span class="comment">        i:当前选择的数字位次，从0开始</span></span><br><span class="line"><span class="comment">        mask:前面已择数字的状态，是一个10位的二进制数，如:0000000010就代表前面已经选了1</span></span><br><span class="line"><span class="comment">        isLimit:boolean类型，代表当前位选择是否被前面位的选择限制了；</span></span><br><span class="line"><span class="comment">            如n=1234，前面选了12，选第3位的时候会被限制在0~3，isLimit=true；否则是0~9，isLimit=false</span></span><br><span class="line"><span class="comment">        hasNum:表示前面是否已经选择了数字，若选择了就为true(识别直接构造低位的情况)</span></span><br><span class="line"><span class="comment">        时间复杂度:O(1024*M*10) 空间复杂度:O(1024*M)</span></span><br><span class="line"><span class="comment">        记忆化DFS的时间复杂度=状态数*每一次枚举的情况数</span></span><br><span class="line"><span class="comment">        **记忆化本质就是减少前面已选状态一致的情况，将1eM的时间复杂度压缩至1&lt;&lt;M，效率非常高**</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        s = String.valueOf(n).toCharArray();    <span class="comment">// 转化为字符数组形式</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];     <span class="comment">// i∈[0,m-1]，mask为一个10位二进制数</span></span><br><span class="line">        <span class="comment">// 初始化memo为-1代表该顺位下该已选状态还没进行计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意一开始最高位是有限制的，isLimit=true</span></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dfs(i, mask, isLimit, hasNum) 代表从左到右选第i个数字时，前面已选状态为mask时的合法方案数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> mask, <span class="type">boolean</span> isLimit, <span class="type">boolean</span> hasNum)</span> &#123;</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="comment">// i越过最后一位，此时前面选了就算一个，没选的就不算，因为不选后面也没得选了</span></span><br><span class="line">        <span class="keyword">if</span> (i == s.length) <span class="keyword">return</span> hasNum ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 已经计算过该状态，并且该状态是有效的，直接返回该状态</span></span><br><span class="line">        <span class="comment">// 这一步是降低时间复杂度的关键，使得记忆化dfs的时间复杂度控制得很低</span></span><br><span class="line">        <span class="comment">// !isLimit表示没有被限制的才可以直接得出结果，否则还要根据后面的数字进行计算子问题计算</span></span><br><span class="line">        <span class="keyword">if</span> (!isLimit &amp;&amp; hasNum &amp;&amp; memo[i][mask] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][mask];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 结果</span></span><br><span class="line">        <span class="comment">// 本位可以取0(可直接构造低位数)的情况，此时要加上构造低位数0xxx的方案数</span></span><br><span class="line">        <span class="comment">// 将是否选了数字作为分类条件是为了避免出现00010这样有多个0的就不能统计了</span></span><br><span class="line">        <span class="keyword">if</span> (!hasNum) res = dfs(i + <span class="number">1</span>, mask, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 构造与当前顺位相同位数的数字就要枚举可选的数字进行DFS</span></span><br><span class="line">        <span class="comment">// 枚举的起点要视hasNum而定，如果前面选择了数字，那么现在可以选0；否则只能从1开始</span></span><br><span class="line">        <span class="comment">// 枚举得终点视isLimit而定，若被限制了只能到s[i]，否则可以到9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> hasNum ? <span class="number">0</span> : <span class="number">1</span>, end = isLimit ? s[i] - <span class="string">&#x27;0&#x27;</span> : <span class="number">9</span>; k &lt;= end; k++) &#123;</span><br><span class="line">            <span class="comment">// 如果该数字k还没有被选中，那猫就可以选该位数字</span></span><br><span class="line">            <span class="keyword">if</span> (((mask &gt;&gt; k) &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 方案数遵循加法原理</span></span><br><span class="line">                <span class="comment">// i:进行下一位的DFS，因此为i+1</span></span><br><span class="line">                <span class="comment">// mask:由于该位选中了k，mask掩膜传下去就要更新，已选状态加上k</span></span><br><span class="line">                <span class="comment">// isLimit:当且仅当前面的被限制了且该位被限制</span></span><br><span class="line">                <span class="comment">// hasNum:该位选了必定为true</span></span><br><span class="line">                res += dfs(i + <span class="number">1</span>, mask | (<span class="number">1</span> &lt;&lt; k), isLimit &amp;&amp; k == end, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isLimit &amp;&amp; hasNum) memo[i][mask] = res;    <span class="comment">// 如果前面没有限制，表明后面都是同质的，可以记录进memo中</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题单：</p><p><a href="https://leetcode.cn/problems/number-of-digit-one/">233. 数字 1 的个数</a></p><p><a href="https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/">600. 不含连续1的非负整数</a></p><p><a href="https://leetcode.cn/problems/count-numbers-with-unique-digits/">357. 统计各位数字都不同的数字个数</a></p><p><a href="https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/">902. 最大为 N 的数字组合</a></p><p><a href="https://leetcode.cn/problems/rotated-digits/">788. 旋转数字</a></p><p><a href="https://leetcode.cn/problems/numbers-with-repeated-digits/">1012. 至少有 1 位重复的数字</a></p><p><a href="https://leetcode.cn/problems/count-special-integers/">2376. 统计特殊整数</a></p><p><a href="https://leetcode.cn/problems/count-numbers-with-unique-digits/">357. 统计各位数字都不同的数字个数</a></p><hr><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启了路径压缩和按大小合并的并查集</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] size;</span><br><span class="line">    <span class="comment">// 当前连通分支数目</span></span><br><span class="line">    <span class="type">int</span> branchCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.branchCount = n;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(size, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">// 路径压缩</span></span><br><span class="line">        <span class="keyword">return</span> parent[x] == x ? x : (parent[x] = find(parent[x]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        x = find(x);</span><br><span class="line">        y = find(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 按大小合并</span></span><br><span class="line">        <span class="keyword">if</span> (size[x] &lt; size[y]) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">            x = y;</span><br><span class="line">            y = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        parent[y] = x;</span><br><span class="line">        size[x] += size[y];</span><br><span class="line">        --branchCount;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">branchCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> branchCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><hr><h3 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h3><hr><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p>定义<code>preSum[i][j]</code> 是从(0,0) 到 (i,j) 的 和</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1614615488-IBbfAx-%E4%BA%8C%E7%BB%B4%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2.png" alt="二维区域和检索" style="zoom: 25%;" /></p><p><code>sumRegion(A,D)=sumRegion(O,D)−sumRegion(O,E)−sumRegion(O,F)+sumRegion(O,G)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line"><span class="comment">// 二维前缀和</span></span><br><span class="line"><span class="type">int</span>[][] preSum = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        preSum[i][j] = preSum[i - <span class="number">1</span>][j] + preSum[i][j - <span class="number">1</span>] - preSum[i - <span class="number">1</span>][j - <span class="number">1</span>] + grid[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><p>如果将矩阵的第 (i,j) 个单元格中的值增加 1，那么，若对矩阵求二维前缀和，那么下图 (a) 中的黄色区域的值都会增加 1。</p><p>如果要将矩阵中的 任意 矩形区域（如下图中 (b) 的蓝色区域）的值增加 1 呢？只需按照下图 (c) 来修改矩阵即可。修改后，若对矩阵求前缀和，那么，只会有蓝色的区域的值 +1，其它区域的值都不变。</p><p><img src="https://pic.leetcode-cn.com/1641658840-YrICJa-image.png" alt="image.png" style="zoom: 25%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] rangeAddQueries(<span class="type">int</span> n, <span class="type">int</span>[][] queries) &#123;</span><br><span class="line">    <span class="type">int</span>[][] diff = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span>[] q : queries)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> q[<span class="number">0</span>] , y1 = q[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> q[<span class="number">2</span>] , y2 = q[<span class="number">3</span>];</span><br><span class="line">        diff[x1][y1]++;</span><br><span class="line">        diff[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>]++;</span><br><span class="line">        diff[x2 + <span class="number">1</span>][y1]--;</span><br><span class="line">        diff[x1][y2 + <span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[][] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="comment">// 使用差分数组求前缀和</span></span><br><span class="line">    ans[<span class="number">0</span>][<span class="number">0</span>] = diff[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="comment">// 求第一行</span></span><br><span class="line">        ans[<span class="number">0</span>][i] = ans[<span class="number">0</span>][i - <span class="number">1</span>] + diff[<span class="number">0</span>][i];</span><br><span class="line">        <span class="comment">// 求第一列</span></span><br><span class="line">        ans[i][<span class="number">0</span>] = ans[i - <span class="number">1</span>][<span class="number">0</span>] + diff[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">            ans[i][j] = ans[i - <span class="number">1</span>][j] + ans[i][j - <span class="number">1</span>] - ans[i - <span class="number">1</span>][j - <span class="number">1</span>] + diff[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h2><p>ST 表是用于解决 可重复贡献问题 的数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> sc.nextInt(), M = sc.nextInt();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        arr[i] = sc.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.log(N) / Math.log(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][size + <span class="number">5</span>];</span><br><span class="line">    <span class="comment">//base case</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) dp[i][<span class="number">0</span>] = arr[i];</span><br><span class="line">    <span class="comment">// 状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= size; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; N; i++) &#123;</span><br><span class="line">            dp[i][j] = calculate(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (M-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> sc.nextInt(), R = sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.log(R - L + <span class="number">1</span>) / Math.log(<span class="number">2</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> calculate(dp[L][j], dp[R - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>][j]);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="快速幂-amp-组合计数"><a href="#快速幂-amp-组合计数" class="headerlink" title="快速幂&amp;组合计数"></a>快速幂&amp;组合计数</h2><div class="tabs" id="657446ae-ec88-48e3-9f15-2c6218a8c84b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#657446ae-ec88-48e3-9f15-2c6218a8c84b-1"><i class="fas fa-seedling"></i>DP打表</button></li><li class="tab"><button type="button" data-href="#657446ae-ec88-48e3-9f15-2c6218a8c84b-2"><i class="fas fa-leaf"></i>Lucas</button></li><li class="tab"><button type="button" data-href="#657446ae-ec88-48e3-9f15-2c6218a8c84b-3"><i class="fab fa-apple"></i>exLucas</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="657446ae-ec88-48e3-9f15-2c6218a8c84b-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[][] comb = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        comb[i][<span class="number">0</span>] = comb[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            comb[i][j] = comb[i - <span class="number">1</span>][j] + comb[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            comb[i][j] %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(comb[<span class="number">5</span>][<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="657446ae-ec88-48e3-9f15-2c6218a8c84b-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">100002</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">long</span>) (<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span>[] fac = <span class="keyword">new</span> <span class="title class_">long</span>[N];</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化阶乘</span></span><br><span class="line">    fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; N; i++) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="title function_">ksm</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> n, <span class="type">long</span> mod)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            ans = ans * x % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="title function_">C</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m, <span class="type">long</span> p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == m || m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; m) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m * <span class="number">2</span> &gt; n) &#123;</span><br><span class="line">        m = n - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fac[(<span class="type">int</span>) n] * ksm(fac[(<span class="type">int</span>) m] * fac[(<span class="type">int</span>) (n - m)] % p, p - <span class="number">2</span>, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    计算 C(n,m)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">long</span> <span class="title function_">lucas</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m, <span class="type">long</span> p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lucas(n / p, m / p, p) * C(n % p, m % p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="657446ae-ec88-48e3-9f15-2c6218a8c84b-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="原地堆化"><a href="#原地堆化" class="headerlink" title="原地堆化"></a>原地堆化</h2><div class="tabs" id="e7e66a86-91ce-4f22-b37a-9e457c4b1f9d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-1"><i class="fas fa-seedling"></i>最大堆</button></li><li class="tab"><button type="button" data-href="#e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-2"><i class="fas fa-leaf"></i>最小堆</button></li><li class="tab"><button type="button" data-href="#e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-3"><i class="fab fa-apple"></i>使用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原地堆化（最大堆）</span></span><br><span class="line"> <span class="comment">// 堆化可以保证 h[0] 是堆顶元素，且 h[i] &gt;= max(h[2*i+1], h[2*i+2])</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] h)</span> &#123;</span><br><span class="line">     <span class="comment">// 倒着遍历，从而保证 i 的左右子树一定是堆，那么 sink(h, i) 就可以把左右子树合并成一个堆</span></span><br><span class="line">     <span class="comment">// 下标 &gt;= h.length / 2 的元素是二叉树的叶子，无需下沉</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">         sink(h, i);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 把 h[i] 不断下沉，直到 i 的左右儿子都 &lt;= h[i]</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span>[] h, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> h.length;</span><br><span class="line">     <span class="keyword">while</span> (<span class="number">2</span> * i + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// i 的左儿子</span></span><br><span class="line">         <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; h[j + <span class="number">1</span>] &gt; h[j]) &#123; <span class="comment">// i 的右儿子比 i 的左儿子大</span></span><br><span class="line">             j++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (h[j] &lt;= h[i]) &#123; <span class="comment">// 说明 i 的左右儿子都 &lt;= h[i]，停止下沉</span></span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         swap(h, i, j); <span class="comment">// 下沉</span></span><br><span class="line">         i = j;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 交换 h[i] 和 h[j]</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] h, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">     <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> h[i];</span><br><span class="line">     h[i] = h[j];</span><br><span class="line">     h[j] = tmp;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原地堆化（最小堆）</span></span><br><span class="line"><span class="comment">// 堆化可以保证 h[0] 是堆顶元素，且 h[i] &lt;= max(h[2*i+1], h[2*i+2])</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] h)</span> &#123;</span><br><span class="line">    <span class="comment">// 倒着遍历，从而保证 i 的左右子树一定是堆，那么 sink(h, i) 就可以把左右子树合并成一个堆</span></span><br><span class="line">    <span class="comment">// 下标 &gt;= h.length / 2 的元素是二叉树的叶子，无需下沉</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sink(h, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 h[i] 不断下沉，直到 i 的左右儿子都 &gt;= h[i]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sink</span><span class="params">(<span class="type">int</span>[] h, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> h.length;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">2</span> * i + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// i 的左儿子</span></span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n &amp;&amp; h[j + <span class="number">1</span>] &lt; h[j]) &#123; <span class="comment">// i 的右儿子比 i 的左儿子大</span></span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h[j] &gt;= h[i]) &#123; <span class="comment">// 说明 i 的左右儿子都 &lt;= h[i]，停止下沉</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(h, i, j); <span class="comment">// 下沉</span></span><br><span class="line">        i = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换 h[i] 和 h[j]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] h, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> h[i];</span><br><span class="line">    h[i] = h[j];</span><br><span class="line">    h[j] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e7e66a86-91ce-4f22-b37a-9e457c4b1f9d-3"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">堆顶元素 -&gt; h<span class="selector-attr">[0]</span></span><br><span class="line">更改后 <span class="built_in">sink</span>(h, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p><a href="https://leetcode.cn/circle/discuss/H4aMOn/">https://leetcode.cn/circle/discuss/H4aMOn/</a></p><div class="tabs" id="9c7b8dd6-e778-4726-b122-cb09a92c4e26"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9c7b8dd6-e778-4726-b122-cb09a92c4e26-1"><i class="fas fa-atom"></i>单点覆盖+区间求和+区间求最值</button></li><li class="tab"><button type="button" data-href="#9c7b8dd6-e778-4726-b122-cb09a92c4e26-2"><i class="far fa-sun"></i>区间加值+区间求和</button></li><li class="tab"><button type="button" data-href="#9c7b8dd6-e778-4726-b122-cb09a92c4e26-3"><i class="fas fa-wind"></i>区间覆盖+区间求最值</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9c7b8dd6-e778-4726-b122-cb09a92c4e26-1"><p>单点修改或覆盖型没必要用上lazy标记，因为这是直接作用于某个点，没有范围可言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">BinaryFunction</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">apply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原数组  下标从 0 开始</span></span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] segTree;</span><br><span class="line"></span><br><span class="line">    BinaryFunction merger;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> unit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] data, BinaryFunction merger, <span class="type">int</span> unit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.merger = merger;</span><br><span class="line">        <span class="built_in">this</span>.unit = unit;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> data.length;</span><br><span class="line">        segTree = <span class="keyword">new</span> <span class="title class_">int</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        Arrays.fill(segTree, unit);</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下方方法调用中 root 1  left 1 right n</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segTree[root] = data[left - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> root)</span> &#123;</span><br><span class="line">        segTree[root] = merger.apply(segTree[root &lt;&lt; <span class="number">1</span>], segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将cur位置值修改为val</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> cur, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segTree[root] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="keyword">if</span> (cur &lt;= mid) &#123;</span><br><span class="line">            update(root &lt;&lt; <span class="number">1</span>, left, mid, cur, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            update(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, cur, val);</span><br><span class="line">        &#125;</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">        <span class="comment">// 两个区间无重合</span></span><br><span class="line">        <span class="keyword">if</span> (from &gt; right || to &lt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span> unit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 完全包含</span></span><br><span class="line">        <span class="keyword">if</span> (from &lt;= left &amp;&amp; to &gt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> segTree[root];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (right - left) / <span class="number">2</span> + left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l_res</span> <span class="operator">=</span> query(root &lt;&lt; <span class="number">1</span>, left, mid, from, to);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r_res</span> <span class="operator">=</span> query(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, from, to);</span><br><span class="line">        <span class="keyword">return</span> merger.apply(l_res, r_res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9c7b8dd6-e778-4726-b122-cb09a92c4e26-2"><p>对真正的区间操作就需要用到懒惰标记了，懒惰标记的作用在于多次更新，少量查询，就是在update()的时候先暂缓的记下来，最后query的时候一口气作用出来。</p><p>实现思路：</p><p>核心在与如何把单个val加入到一个区间的每个数字中，我们知道一个root代表一个区间，区间就有长度；那只需把val * length(root的区间) 即可；</p><p>可以理解为改区间里的每个点都有一个贡献的val，n个val相加，那就是n*val。同理，在pushDown()的时候也要计算该父节点对应左右孩子的长度；因此，这里的pushDown()还需要传入左右点的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] segTree;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] lazy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> data.length;</span><br><span class="line">        segTree = <span class="keyword">new</span> <span class="title class_">int</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        lazy = <span class="keyword">new</span> <span class="title class_">int</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segTree[root] = data[left - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> root)</span> &#123;</span><br><span class="line">        segTree[root] = (segTree[root &lt;&lt; <span class="number">1</span>] + segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftLen</span> <span class="operator">=</span> mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightLen</span> <span class="operator">=</span> right - mid;</span><br><span class="line">        <span class="keyword">if</span> (lazy[root] != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// val 累计lazy*len</span></span><br><span class="line">            segTree[root &lt;&lt; <span class="number">1</span>] = (segTree[root &lt;&lt; <span class="number">1</span>] + lazy[root] * leftLen);</span><br><span class="line">            segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = (segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + lazy[root] * rightLen);</span><br><span class="line">            <span class="comment">// lazy 直接累计</span></span><br><span class="line">            lazy[root &lt;&lt; <span class="number">1</span>] = (lazy[root &lt;&lt; <span class="number">1</span>] + lazy[root]);</span><br><span class="line">            lazy[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = (lazy[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + lazy[root]);</span><br><span class="line"></span><br><span class="line">            lazy[root] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from &gt; right || to &lt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from &lt;= left &amp;&amp; right &lt;= to) &#123;</span><br><span class="line">            segTree[root] =</span><br><span class="line">                    (segTree[root] + val * (right - left + <span class="number">1</span>));</span><br><span class="line">            lazy[root] = (lazy[root] + val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(root, left, right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        update(root &lt;&lt; <span class="number">1</span>, left, mid, from, to, val);</span><br><span class="line">        update(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, from, to, val);</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from &gt; right || to &lt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from &lt;= left &amp;&amp; right &lt;= to) &#123;</span><br><span class="line">            <span class="keyword">return</span> segTree[root];</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(root, left, right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (query(root &lt;&lt; <span class="number">1</span>, left, mid, from, to) +</span><br><span class="line">                query(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, from, to));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9c7b8dd6-e778-4726-b122-cb09a92c4e26-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] segTree;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] lazy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> data.length;</span><br><span class="line">        segTree = <span class="keyword">new</span> <span class="title class_">int</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        lazy = <span class="keyword">new</span> <span class="title class_">int</span>[n &lt;&lt; <span class="number">2</span>];</span><br><span class="line">        build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            segTree[root] = data[left - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">        build(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushUp</span><span class="params">(<span class="type">int</span> root)</span> &#123;</span><br><span class="line">        segTree[root] = Math.max(segTree[root &lt;&lt; <span class="number">1</span>], segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(<span class="type">int</span> root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazy[root] != <span class="number">0</span>) &#123;</span><br><span class="line">            segTree[root &lt;&lt; <span class="number">1</span>] = segTree[root];</span><br><span class="line">            segTree[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = segTree[root];</span><br><span class="line">            lazy[root &lt;&lt; <span class="number">1</span>] = lazy[root];</span><br><span class="line">            lazy[root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = lazy[root];</span><br><span class="line">            lazy[root] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from &gt; right || to &lt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from &lt;= left &amp;&amp; right &lt;= to) &#123;</span><br><span class="line">            segTree[root] = val;</span><br><span class="line">            lazy[root] = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushDown(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        update(root &lt;&lt; <span class="number">1</span>, left, mid, from, to, val);</span><br><span class="line">        update(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, from, to, val);</span><br><span class="line">        pushUp(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> from, <span class="type">int</span> to)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (from &gt; right || to &lt; left) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (from &lt;= left &amp;&amp; right &lt;= to) &#123;</span><br><span class="line">            <span class="keyword">return</span> segTree[root];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pushDown(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(query(root &lt;&lt; <span class="number">1</span>, left, mid, from, to), query(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, from, to));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>高效处理「前缀」查询，单点修改</p><p>通常使用树状数组是为了维护一些前缀，如前缀和、前缀最小值、前缀最大值。</p><p>但由于最小值和最大值不可逆，在大多数情况下是维护不了区间最小值和最大值的。</p><p><img src="https://pic.leetcode-cn.com/257e6c5742751f7cfdfd0704e7380ceccbd123335347a589165d74fa7ad11d40.png" alt="在这里插入图片描述" style="zoom: 33%;" /></p><div class="table-container"><table><thead><tr><th style="text-align:center">数组 <code>C</code> 的值由数组 <code>A</code> 的哪些元素而来</th><th style="text-align:center">数组 <code>A</code> 的元素个数</th></tr></thead><tbody><tr><td style="text-align:center">C[1] = A[1]</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C[2] = A[1] + A[2]</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">C[3] = A[3]</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C[4] = A[1] + A[2] + A[3] + A[4]</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">C[5] = A[5]</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C[6] = A[5] + A[6]</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">C[7] = A[7]</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C[8] = A[1] + A[2] + A[3] + A[4] + A[5] + A[6] + A[7] + A[8]</td><td style="text-align:center">8</td></tr></tbody></table></div><p>通过图中不难看出，sum[7]=c[7]+c[6]+c[4] ,我们进一步发现,6=7-lowbit(7),4=6-lowbit(6)，所以我们可以通过不断的-lowbit操作来实现求和</p><p>在数据范围比较分散时，可以离散化数据。</p><p>原数组下标也从1开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line">    BIT(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lowBit</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt;= n) &#123;</span><br><span class="line">            data[idx] += val;</span><br><span class="line">            idx += lowBit(idx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            sum += data[x];</span><br><span class="line">            x -= lowBit(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h2><p>它的标准定义是：具有N个点N条边的连通图。如果不保证联通，它就会成为基环树森林。</p><p>内向基环树的定义是每个点有且只有一条出边。</p><p>外向基环树的定义是每个点有且只有一条入边。</p><p>从 i 向 to[i] 连边，可以得到一张有向图。由于每个大小为 k 的连通块都有 k 个点和 k 条边，所以<span class='p green'>每个连通块必定有且仅有一个环</span>，且由于每个点的出度均为 1，这样的有向图又叫做内向基环树 (pseudotree)，由基环树组成的森林叫基环树森林 (pseudoforest)。</p><p>每一个内向基环树（连通块）都由一个基环和其余指向基环的树枝组成。例如 以下示例 <code>to = [3,0,1,4,1]</code>  可以得到如下内向基环树，其基环由节点 0、1、3 和 4 组成，节点 2 为其树枝：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1641096462-IsWZUX-1-20231101095643697.png" alt="1.png" style="zoom: 67%;" /></p><p>常见的处理方式：拓扑排序去掉树枝</p><p><a href="https://leetcode.cn/problems/maximum-employees-to-be-invited-to-a-meeting/">参加会议的最多员工数</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumInvitations</span><span class="params">(<span class="type">int</span>[] favorite)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> favorite.length;</span><br><span class="line">        <span class="type">int</span>[] deg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> f : favorite) &#123;</span><br><span class="line">            deg[f]++; <span class="comment">// 统计基环树每个节点的入度</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt;[] rg = <span class="keyword">new</span> <span class="title class_">List</span>[n]; <span class="comment">// 反图</span></span><br><span class="line">        Arrays.setAll(rg, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        Deque&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123; <span class="comment">// 拓扑排序，剪掉图上所有树枝</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> favorite[x]; <span class="comment">// x 只有一条出边</span></span><br><span class="line">            rg[y].add(x);</span><br><span class="line">            <span class="keyword">if</span> (--deg[y] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.add(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxRingSize</span> <span class="operator">=</span> <span class="number">0</span>, sumChainSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历基环上的点</span></span><br><span class="line">            deg[i] = <span class="number">0</span>; <span class="comment">// 将基环上的点的入度标记为 0，避免重复访问</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ringSize</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 基环长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> favorite[i]; x != i; x = favorite[x]) &#123;</span><br><span class="line">                deg[x] = <span class="number">0</span>; <span class="comment">// 将基环上的点的入度标记为 0，避免重复访问</span></span><br><span class="line">                ringSize++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ringSize == <span class="number">2</span>) &#123; <span class="comment">// 基环长度为 2</span></span><br><span class="line">                sumChainSize += rdfs(i, rg) + rdfs(favorite[i], rg); <span class="comment">// 累加两条最长链的长度</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxRingSize = Math.max(maxRingSize, ringSize); <span class="comment">// 取所有基环长度的最大值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxRingSize, sumChainSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反图 rg 寻找树枝上最深的链</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">rdfs</span><span class="params">(<span class="type">int</span> x, List&lt;Integer&gt;[] rg)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> son : rg[x]) &#123;</span><br><span class="line">            maxDepth = Math.max(maxDepth, rdfs(son, rg) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxDepth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="字典树-amp-二进制字典树"><a href="#字典树-amp-二进制字典树" class="headerlink" title="字典树&amp;二进制字典树"></a>字典树&amp;二进制字典树</h2><div class="tabs" id="0832b00f-ca2f-43ba-a0f6-65d4ce426d75"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0832b00f-ca2f-43ba-a0f6-65d4ce426d75-1"><i class="fas fa-bug"></i>字典树</button></li><li class="tab"><button type="button" data-href="#0832b00f-ca2f-43ba-a0f6-65d4ce426d75-2"><i class="fas fa-cannabis"></i>二进制字典树</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0832b00f-ca2f-43ba-a0f6-65d4ce426d75-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TireNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TireNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TireNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.next[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.next[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">TireNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TireNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            node = node.next[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">TireNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix.toCharArray()) &#123;</span><br><span class="line">            node = node.next[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TireNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">public</span> TireNode[] next;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TireNode</span><span class="params">()</span> &#123;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        next = <span class="keyword">new</span> <span class="title class_">TireNode</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0832b00f-ca2f-43ba-a0f6-65d4ce426d75-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trie01</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_BIT</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TireNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie01</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TireNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">TireNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MAX_BIT; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (node.next[bit] == <span class="literal">null</span>) &#123;</span><br><span class="line">                node.next[bit] = <span class="keyword">new</span> <span class="title class_">TireNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node.next[bit].cnt++;</span><br><span class="line">            node = node.next[bit];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">TireNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> MAX_BIT; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit</span> <span class="operator">=</span> (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            node.next[bit].cnt--;</span><br><span class="line">            node = node.next[bit];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TireNode</span> &#123;</span><br><span class="line">    TireNode[] next;</span><br><span class="line">  <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TireNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="keyword">new</span> <span class="title class_">TireNode</span>[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><mark class="hl-label blue">BKDR-HASH</mark> <p>把 <code>String</code> 当成一个 <code>X</code> 进制的数</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;123&quot;</span> -&gt; <span class="number">123</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;abz&quot;</span> -&gt; <span class="number">0</span> <span class="number">1</span> <span class="number">26</span>(<span class="number">26</span>)</span><br></pre></td></tr></table></figure><div class="tabs" id="62813119-1ef5-4a50-a4d6-d2ccbf7883b0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#62813119-1ef5-4a50-a4d6-d2ccbf7883b0-1"><i class="fas fa-seedling"></i>求整个字符串哈希</button></li><li class="tab"><button type="button" data-href="#62813119-1ef5-4a50-a4d6-d2ccbf7883b0-2"><i class="fas fa-leaf"></i>前缀和思想求每个子串哈希</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="62813119-1ef5-4a50-a4d6-d2ccbf7883b0-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] cs = <span class="string">&quot;abc&quot;</span>.toCharArray();</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">13331</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">hash_code</span> <span class="operator">=</span> cs[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; cs.length; i++) &#123;</span><br><span class="line">    hash_code = hash_code * x + cs[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="62813119-1ef5-4a50-a4d6-d2ccbf7883b0-2"><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">12345</span><br><span class="line">h<span class="comment">[0]</span> = 1h<span class="comment">[1]</span> = 12h<span class="comment">[2]</span> = 123h<span class="comment">[3]</span> = 1234h<span class="comment">[4]</span> = 12345</span><br><span class="line"></span><br><span class="line">如何得到234的hash 即 234</span><br><span class="line">h<span class="comment">[3]</span> - h<span class="comment">[0]</span> ???</span><br><span class="line">h<span class="comment">[3]</span> - h<span class="comment">[0]</span> * 10^3</span><br></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">char[] cs = <span class="string">&quot;abcdefe&quot;</span>.toCharArray();</span><br><span class="line">int len = cs.length;</span><br><span class="line">long[] h = new long[len];</span><br><span class="line">long[] x = new long[len];</span><br><span class="line">int <span class="symbol">X</span> = <span class="number">13331</span>;</span><br><span class="line">h[<span class="number">0</span>] = cs[<span class="number">0</span>];</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">for (int i = <span class="number">1</span>; i &lt; cs.length; i++) &#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * <span class="symbol">X</span> + cs[i];</span><br><span class="line">    x[i] = x[i - <span class="number">1</span>] * <span class="symbol">X</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 计算子字符串hash [<span class="symbol">L</span>,<span class="symbol">R</span>]</span><br><span class="line">int <span class="symbol">L</span>, <span class="symbol">R</span>;</span><br><span class="line">long hash = <span class="symbol">L</span> == <span class="number">0</span> ? h[<span class="symbol">R</span>] : h[<span class="symbol">R</span>] - h[<span class="symbol">L</span> - <span class="number">1</span>] * x[<span class="symbol">R</span> - <span class="symbol">L</span> + <span class="number">1</span>];</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><ol><li>全转小写：ch|=32</li><li>全转大写：ch&amp;=-33 (原理是32的补码（原码取反+1）再-1)</li><li>大小写对换（大写变小写，小写变大）ch^=32</li></ol><hr><h2 id="隔板法"><a href="#隔板法" class="headerlink" title="隔板法"></a>隔板法</h2><p><strong>隔板法</strong> 就是在n个元素间的（n-1）个空中插入k个板，可以把n个元素分成k+1组的方法</p><div class="tabs" id="adcb06f7-b745-4b55-b30a-26b14d08e162"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#adcb06f7-b745-4b55-b30a-26b14d08e162-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#adcb06f7-b745-4b55-b30a-26b14d08e162-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#adcb06f7-b745-4b55-b30a-26b14d08e162-3"><i class="fab fa-apple"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="adcb06f7-b745-4b55-b30a-26b14d08e162-1"><p>例1. 求方程 x+y+z=10的正整数解的个数。<br>分析：将10个球排成一排，球与球之间形成9个空隙，将两个隔板插入这些空隙中（每空至多插一块隔板），规定由隔板分成的左、中、右三部分的球数分别为x、y、z之值（如下图）。则隔法与解的个数之间建立了一一对立关系，故解的个数为C（9，2）=36（个）。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adcb06f7-b745-4b55-b30a-26b14d08e162-2"><p>例2. 求方程 x+y+z=10的非负整数解的个数。 （添加球数用隔板法）<br>分析：注意到x、y、z可以为零，故例1解法中的限定“每空至多插一块隔板”就不成立了，怎么办呢？只要添加三个球，给x、y、z各添加一个球，这样原问题就转化为求 x+y+z=13的正整数解的个数了，易得解的个数为C（12，2）=66（个）。</p><p>令x1 = x + 1 , y1 = y + 1 , z1 = z + 1 ,则x1 ， y1 , z1 &gt;=1 </p><p>则 x1 + y1 + z1 = n + k </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="adcb06f7-b745-4b55-b30a-26b14d08e162-3"><p>例3. 将20个相同的小球放入编号分别为1，2，3，4的四个盒子中，要求每个盒子中的球数不少于它的编号数，求放法总数。（减少球数用隔板法）<br>分析：先在编号1，2，3，4的四个盒子内分别放0，1，2，3个球，剩下14个球，有1种方法；再把剩下的球分成4组，每组至少1个，由例1知方法有C（13，3）=286（种）。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortArray(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        quickSort2(nums , <span class="number">0</span> , nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选取第一个元素当做基准元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">quickSort1</span><span class="params">(<span class="type">int</span>[] arr , <span class="type">int</span> l , <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l , j = r , x = arr[i];</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="comment">// 从右往左找  &lt; x</span></span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt; x) j--;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j) arr[i++] = arr[j];</span><br><span class="line">                <span class="comment">// 从左往右找 &gt; x</span></span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt; x) i++;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j) arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = x;</span><br><span class="line">            quickSort1(arr , l , i - <span class="number">1</span>);</span><br><span class="line">            quickSort1(arr , i + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机选择元素当做基准元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">quickSort2</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l , <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> random.nextInt(l , r + <span class="number">1</span>);</span><br><span class="line">            swap(arr, l , randomIndex);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l , j = r , x = arr[i];</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">                <span class="comment">// 从右往左找  &lt; x</span></span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt; x) j--;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j) arr[i++] = arr[j];</span><br><span class="line">                <span class="comment">// 从左往右找 &gt; x</span></span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt; x) i++;</span><br><span class="line">                <span class="keyword">if</span>(i &lt; j) arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = x;</span><br><span class="line">            quickSort2(arr , l , i - <span class="number">1</span>);</span><br><span class="line">            quickSort2(arr , i + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换数组中的两个元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h2><mark class="hl-label blue">邻接矩阵朴素Dijkstra算法</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 存图</span></span><br><span class="line">        <span class="type">int</span>[][] g = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="comment">// 初始化邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                g[i][j] = g[j][i] = i == j ? <span class="number">0</span> : INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] conn : times) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> conn[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> conn[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> conn[<span class="number">2</span>];</span><br><span class="line">            g[from][to] = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// dist[x] = y 代表从「源点/起点」到 x 的最短距离为 y</span></span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 记录哪些点已经被更新过</span></span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 迭代n次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">            <span class="comment">// 每次找到「最短距离最小」且「未被更新」的点 t</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i] &amp;&amp; (t == -<span class="number">1</span> || dist[i] &lt; dist[t])) t = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标记点 t 为已更新</span></span><br><span class="line">            vis[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 用点 t 的「最小距离」更新其他点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                dist[i] = Math.min(dist[i], dist[t] + g[t][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            ans = Math.max(ans, dist[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans &gt; INF / <span class="number">2</span> ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>邻接表堆优化Dijkstra算法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">networkDelayTime</span><span class="params">(<span class="type">int</span>[][] times, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dist, Integer.MAX_VALUE);</span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 建图</span></span><br><span class="line">        ArrayList&lt;<span class="type">int</span>[]&gt;[] g = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.setAll(g, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="comment">// 建图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edges : times) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> edges[<span class="number">0</span>], v = edges[<span class="number">1</span>], w = edges[<span class="number">2</span>];</span><br><span class="line">            g[u].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;v, w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;k, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] p = queue.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> p[<span class="number">0</span>], d = p[<span class="number">1</span>];</span><br><span class="line">          <span class="comment">// x 之前出堆过</span></span><br><span class="line">            <span class="keyword">if</span> (d &gt; dist[x]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] e : g[x]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> e[<span class="number">0</span>], c = e[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (c + d &lt; dist[y]) &#123;</span><br><span class="line">                    dist[y] = c + d;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;y, dist[y]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Arrays.stream(dist).skip(<span class="number">1</span>).max().getAsInt();</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">Floyd算法</mark> <p>初始化dp矩阵全为INF</p><p>自己到自己的距离为0</p><p>给定的初始化距离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一些常用的算法模版</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>周赛复盘</title>
    <link href="https://wuwawawa.github.io/posts/e7135cd3.html"/>
    <id>https://wuwawawa.github.io/posts/e7135cd3.html</id>
    <published>2023-10-01T06:13:22.000Z</published>
    <updated>2023-11-12T09:11:35.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前缀最大值-后缀最大值"><a href="#前缀最大值-后缀最大值" class="headerlink" title="前缀最大值+后缀最大值"></a>前缀最大值+后缀最大值</h2><p><a href="https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/">有序三元组中的最大值</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。</p><p>请你从所有满足 <code>i &lt; j &lt; k</code> 的下标三元组 <code>(i, j, k)</code> 中，找出并返回下标三元组的最大值。如果所有满足条件的三元组的值都是负数，则返回 <code>0</code> 。</p><p><strong>下标三元组</strong> <code>(i, j, k)</code> 的值等于 <code>(nums[i] - nums[j]) * nums[k]</code> 。</p><div class="tabs" id="e9e2c01f-875d-4e1c-9742-03b1bc516d2b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e9e2c01f-875d-4e1c-9742-03b1bc516d2b-1"><i class="fas fa-seedling"></i>示例1</button></li><li class="tab"><button type="button" data-href="#e9e2c01f-875d-4e1c-9742-03b1bc516d2b-2"><i class="fas fa-leaf"></i>示例2</button></li><li class="tab"><button type="button" data-href="#e9e2c01f-875d-4e1c-9742-03b1bc516d2b-3"><i class="fab fa-apple"></i>示例3</button></li><li class="tab"><button type="button" data-href="#e9e2c01f-875d-4e1c-9742-03b1bc516d2b-4"><i class="fas fa-tree"></i>数据范围</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e9e2c01f-875d-4e1c-9742-03b1bc516d2b-1"><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[12,6,1,2,7]</span></span><br><span class="line">输出：77</span><br><span class="line">解释：下标三元组 (0, 2, 4) 的值是 (nums<span class="comment">[0]</span> - nums<span class="comment">[2]</span>) * nums<span class="comment">[4]</span> = 77 。</span><br><span class="line">可以证明不存在值大于 77 的有序下标三元组。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e9e2c01f-875d-4e1c-9742-03b1bc516d2b-2"><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,10,3,4,19]</span></span><br><span class="line">输出：133</span><br><span class="line">解释：下标三元组 (1, 2, 4) 的值是 (nums<span class="comment">[1]</span> - nums<span class="comment">[2]</span>) * nums<span class="comment">[4]</span> = 133 。</span><br><span class="line">可以证明不存在值大于 133 的有序下标三元组。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e9e2c01f-875d-4e1c-9742-03b1bc516d2b-3"><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：0</span><br><span class="line">解释：唯一的下标三元组 (0, 1, 2) 的值是一个负数，(nums<span class="comment">[0]</span> - nums<span class="comment">[1]</span>) * nums<span class="comment">[2]</span> = -3 。因此，答案是 0 。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e9e2c01f-875d-4e1c-9742-03b1bc516d2b-4"><p>两题的数据只是数据范围存在不同</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="枚举J"><a href="#枚举J" class="headerlink" title="枚举J"></a>枚举J</h3><p>在枚举J的情况下，想要<code>(nums[i] - nums[j]) * nums[k]</code>尽量大，就是要让两个数都尽量大。</p><p>对于 <code>nums[j]</code> 来说，如果固定了 <code>j</code> 的位置，那我们需要知道</p><ul><li><code>nums[j + 1] ~ nums[n - 1]</code> 的最大值 即后缀最大值</li><li><code>nums[0] ~ nums[j - 1]</code> 的最大值 即前缀最大值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTripletValue</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 后缀最大值</span></span><br><span class="line">    <span class="type">int</span>[] suf_max = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        suf_max[i] = Math.max(suf_max[i + <span class="number">1</span>] , nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前缀最大值</span></span><br><span class="line">    <span class="type">int</span>[] pre_max = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    pre_max[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; n;i++)&#123;</span><br><span class="line">        pre_max[i] = Math.max(pre_max[i - <span class="number">1</span>] , nums[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//枚举j</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;j &lt; n - <span class="number">1</span>;j++)&#123;</span><br><span class="line">        ans = Math.max(ans,(<span class="type">long</span>)(pre_max[j - <span class="number">1</span>] - nums[j]) * suf_max[j + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="枚举k"><a href="#枚举k" class="headerlink" title="枚举k"></a>枚举k</h3><p>一次遍历，从左到右遍历所有的 <code>nums[k]</code> </p><ul><li>那么就需要维护 <code>nums[i] - nums[j]</code>的最大值 max_diff</li><li>同时我们还需要知道左侧的最大值pre_max</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maximumTripletValue</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">max_diff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">pre_max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x : nums)&#123;</span><br><span class="line">        <span class="comment">// 先把 x 当做 nums[k]</span></span><br><span class="line">        ans = Math.max(ans , max_diff * x);</span><br><span class="line">        <span class="comment">// 再把 x 当做 nums[j]</span></span><br><span class="line">        max_diff = Math.max(max_diff , pre_max - x);</span><br><span class="line">        <span class="comment">// 再把 x 当做 nums[i]</span></span><br><span class="line">        pre_max = Math.max(pre_max , x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这三句话的顺序不能改变，因为题目严格要求<code>i &lt; j &lt; k</code></p><hr><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-in-infinite-array/">无限数组的最短子数组</a></p><p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>下标从 <strong>0</strong> 开始的数组 <code>infinite_nums</code> 是通过无限地将 nums 的元素追加到自己之后生成的。</p><p>请你从 <code>infinite_nums</code> 中找出满足 <strong>元素和</strong> 等于 <code>target</code> 的 <strong>最短</strong>子数组，并返回该子数组的长度。如果不存在满足条件的子数组，返回 <code>-1</code> 。</p><div class="tabs" id="3c20ef88-8338-403a-abf5-62b17d741a18"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3c20ef88-8338-403a-abf5-62b17d741a18-1"><i class="fas fa-seedling"></i>示例1</button></li><li class="tab"><button type="button" data-href="#3c20ef88-8338-403a-abf5-62b17d741a18-2"><i class="fas fa-leaf"></i>示例2</button></li><li class="tab"><button type="button" data-href="#3c20ef88-8338-403a-abf5-62b17d741a18-3"><i class="fab fa-apple"></i>示例3</button></li><li class="tab"><button type="button" data-href="#3c20ef88-8338-403a-abf5-62b17d741a18-4"><i class="fas fa-tree"></i>数据范围</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3c20ef88-8338-403a-abf5-62b17d741a18-1"><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="keyword">target</span> = <span class="number">5</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：在这个例子中 infinite_nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,...] 。</span><br><span class="line">区间 [<span class="number">1</span>,<span class="number">2</span>] 内的子数组的元素和等于 <span class="keyword">target</span> = <span class="number">5</span> ，且长度 length = <span class="number">2</span> 。</span><br><span class="line">可以证明，当元素和等于目标值 <span class="keyword">target</span> = <span class="number">5</span> 时，<span class="number">2</span> 是子数组的最短长度。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3c20ef88-8338-403a-abf5-62b17d741a18-2"><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1,1,1,2</span>,<span class="number">3</span>], target = <span class="number">4</span></span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：在这个例子中 infinite_nums = [<span class="number">1,1,1,2</span>,<span class="number">3,1,1,1</span>,<span class="number">2,3,1,1</span>,...].</span><br><span class="line">区间 [<span class="number">4</span>,<span class="number">5</span>] 内的子数组的元素和等于 target = <span class="number">4</span> ，且长度 length = <span class="number">2</span> 。</span><br><span class="line">可以证明，当元素和等于目标值 target = <span class="number">4</span> 时，<span class="number">2</span> 是子数组的最短长度。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3c20ef88-8338-403a-abf5-62b17d741a18-3"><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2,4,6,8</span>], target = <span class="number">3</span></span><br><span class="line">输出：-<span class="number">1</span></span><br><span class="line">解释：在这个例子中 infinite_nums = [<span class="number">2,4,6,8</span>,<span class="number">2,4,6,8</span>,...] 。</span><br><span class="line">可以证明，不存在元素和等于目标值 target = <span class="number">3</span> 的子数组。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3c20ef88-8338-403a-abf5-62b17d741a18-4"><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li><li><code>1 &lt;= target &lt;= 109</code></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1696131371-UYYmoV-w365c-c.png" alt="img" style="zoom: 33%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSizeSubarray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x : nums) total += x;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span> , right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right &lt; <span class="number">2</span>*n)&#123;</span><br><span class="line">        sum += nums[right % n];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt; target % total)&#123;</span><br><span class="line">            sum -= nums[left % n];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新答案</span></span><br><span class="line">        <span class="keyword">if</span>(sum == target % total)&#123;</span><br><span class="line">            ans = Math.min(ans, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        right++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans + (<span class="type">int</span>)(target / total) * n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p><a href="https://leetcode.cn/problems/minimum-operations-to-collect-elements/">收集元素的最少操作次数</a></p><p>给你一个正整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>一次操作中，你可以将数组的最后一个元素删除，将该元素添加到一个集合中。</p><p>请你返回收集元素 <code>1, 2, ..., k</code> 需要的 <strong>最少操作次数</strong> 。</p><div class="tabs" id="6a55aa92-f333-4d58-8119-bccb9431f404"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6a55aa92-f333-4d58-8119-bccb9431f404-1"><i class="fas fa-seedling"></i>示例1</button></li><li class="tab"><button type="button" data-href="#6a55aa92-f333-4d58-8119-bccb9431f404-2"><i class="fas fa-leaf"></i>示例2</button></li><li class="tab"><button type="button" data-href="#6a55aa92-f333-4d58-8119-bccb9431f404-3"><i class="fab fa-apple"></i>示例3</button></li><li class="tab"><button type="button" data-href="#6a55aa92-f333-4d58-8119-bccb9431f404-4"><i class="fas fa-tree"></i>数据范围</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6a55aa92-f333-4d58-8119-bccb9431f404-1"><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1,5,4,2], k = 2</span><br><span class="line">输出：4</span><br><span class="line">解释：4 次操作后，集合中的元素依次添加了<span class="number"> 2 </span>，4 ，5 和<span class="number"> 1 </span>。此时集合中包含元素<span class="number"> 1 </span>和<span class="number"> 2 </span>，所以答案为<span class="number"> 4 </span>。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a55aa92-f333-4d58-8119-bccb9431f404-2"><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1,5,4,2], k = 5</span><br><span class="line">输出：5</span><br><span class="line">解释：5 次操作后，集合中的元素依次添加了<span class="number"> 2 </span>，4 ，5 ，1 和<span class="number"> 3 </span>。此时集合中包含元素<span class="number"> 1 </span>到<span class="number"> 5 </span>，所以答案为<span class="number"> 5 </span>。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a55aa92-f333-4d58-8119-bccb9431f404-3"><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,5,3,1], k = 3</span><br><span class="line">输出：4</span><br><span class="line">解释：4 次操作后，集合中的元素依次添加了<span class="number"> 1 </span>，3 ，5 和<span class="number"> 2 </span>。此时集合中包含元素<span class="number"> 1 </span>到<span class="number"> 3 </span> ，所以答案为<span class="number"> 4 </span>。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a55aa92-f333-4d58-8119-bccb9431f404-4"><ul><li><code>1 &lt;= nums.length &lt;= 50</code></li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li><li>输入保证你可以收集到元素 <code>1, 2, ..., k</code> 。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>由于元素范围在[1,50]，我们可以用一个 64 位整数表示集合，只要集合中有 1 到 k 就立刻返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minOperations</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">    <span class="type">long</span> <span class="variable">mask</span> <span class="operator">=</span> (<span class="number">1L</span> &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">2</span>;</span><br><span class="line">    <span class="type">long</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 结束状态 mask 是 statsu 的子集</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="comment">// 更新status</span></span><br><span class="line">        status |= <span class="number">1L</span> &lt;&lt; nums.get(i);</span><br><span class="line">        <span class="keyword">if</span>((mask &amp; status) == mask)&#123;</span><br><span class="line">            <span class="keyword">return</span> n - i;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p><a href="https://leetcode.cn/problems/find-indices-with-index-and-value-difference-ii/">找出满足差值条件的下标 II</a></p><p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> ，以及整数 <code>indexDifference</code> 和整数 <code>valueDifference</code> 。</p><p>你的任务是从范围 <code>[0, n - 1]</code> 内找出 <strong>2</strong> 个满足下述所有条件的下标 <code>i</code> 和 <code>j</code> ：</p><ul><li><code>abs(i - j) &gt;= indexDifference</code> 且</li><li><code>abs(nums[i] - nums[j]) &gt;= valueDifference</code></li></ul><p>返回整数数组 <code>answer</code>。如果存在满足题目要求的两个下标，则 <code>answer = [i, j]</code> ；否则，<code>answer = [-1, -1]</code> 。如果存在多组可供选择的下标对，只需要返回其中任意一组即可。</p><p><strong>注意：</strong><code>i</code> 和 <code>j</code> 可能 <strong>相等</strong> 。</p><div class="tabs" id="a01cbf90-6b71-4b34-aac8-ad28ebabb777"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a01cbf90-6b71-4b34-aac8-ad28ebabb777-1"><i class="fas fa-seedling"></i>思路</button></li><li class="tab"><button type="button" data-href="#a01cbf90-6b71-4b34-aac8-ad28ebabb777-2"><i class="fas fa-leaf"></i>代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a01cbf90-6b71-4b34-aac8-ad28ebabb777-1"><p>拆绝对值</p><ul><li>j - i &gt;= id</li><li>| ai - aj | &gt;= vd</li></ul><p>一边枚举j ，一边维护j - id 之前的最大和最下值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a01cbf90-6b71-4b34-aac8-ad28ebabb777-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findIndices(<span class="type">int</span>[] nums, <span class="type">int</span> indexDifference, <span class="type">int</span> valueDifference) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIdx</span> <span class="operator">=</span> <span class="number">0</span>, minIdx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> indexDifference; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j - indexDifference;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[maxIdx]) &#123;</span><br><span class="line">                maxIdx = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt; nums[minIdx]) &#123;</span><br><span class="line">                minIdx = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[maxIdx] - nums[j] &gt;= valueDifference) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;maxIdx, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] - nums[minIdx] &gt;= valueDifference) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;minIdx, j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>判断二次幂 + lowBit操作</p><p>~x + 1 相当于-x</p><p><a href="https://leetcode.cn/problems/minimum-impossible-or/">最小无法得到的或值</a></p><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><p>可自顶向下思考 -&gt; 记忆化搜索</p><p>可自递向上思考 -&gt; 树形DP</p><p><a href="https://leetcode.cn/problems/maximum-points-after-collecting-coins-from-all-nodes/">收集所有金币可获得的最大积分</a></p><h2 id="子序列DP"><a href="#子序列DP" class="headerlink" title="子序列DP"></a>子序列DP</h2><p><a href="https://leetcode.cn/problems/longest-unequal-adjacent-groups-subsequence-ii/">最长相邻不相等子序列 II</a></p><mark class="hl-label DP">子序列</mark> <ul><li>子序列 + 不考虑相邻元素：选或不选。代表题目：<a href="https://leetcode.cn/problems/target-sum/">494. 目标和（0-1 背包）</a>。</li><li>子序列 + 考虑相邻元素：枚举选哪个。代表题目：<a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getWordsInLongestSubsequence</span><span class="params">(<span class="type">int</span> n, String[] words, <span class="type">int</span>[] groups)</span> &#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            res.add(words[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] from = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        dp[n -<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        from[n - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxId</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>;i &gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &gt; dp[i] &amp;&amp; groups[i] != groups[j] &amp;&amp; isDOne(words[i],words[j]))&#123;</span><br><span class="line">                    dp[i] = dp[j];</span><br><span class="line">                    from[i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]++;</span><br><span class="line">            <span class="keyword">if</span>(dp[i] &gt; dp[maxId])&#123;</span><br><span class="line">                maxId = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dp[maxId];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; size;i++)&#123;</span><br><span class="line">            res.add(words[maxId]);</span><br><span class="line">            maxId = from[maxId];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDOne</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">var</span> <span class="variable">diff</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != t.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (diff) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                diff = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0-1背包</p><p><a href="https://leetcode.cn/problems/length-of-the-longest-subsequence-that-sums-to-target/">和为目标值的最长子序列的长度</a></p><p>子序列DP 选或不选 + 状态机DP</p><p><a href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/">使数组变美的最小增量运算数</a></p><p>单调队列优化DP</p><p><a href="https://leetcode.cn/problems/constrained-subsequence-sum/">1425. 带限制的子序列和</a></p><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p><a href="https://leetcode.cn/problems/count-of-sub-multisets-with-bounded-sum/">和带限制的子多重集合的数目</a></p><p>斜率优化 + 滚动数组 + 数据范围优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 多重背包</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubMultisets</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            cnt.merge(x, <span class="number">1</span>, Integer::sum);</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r = Math.min(r, sum);</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[r + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = cnt.getOrDefault(<span class="number">0</span>, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        cnt.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">curMax</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; e : cnt.entrySet()) &#123;</span><br><span class="line">            <span class="comment">// 数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="comment">// 次数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            curMax = Math.min(curMax + x * c, r);</span><br><span class="line">            <span class="type">int</span>[] newDp = dp.clone();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt;= curMax; i++) &#123;</span><br><span class="line">                newDp[i] = (newDp[i] + newDp[i - x]) % MOD;</span><br><span class="line">                <span class="keyword">if</span> (i - (c + <span class="number">1</span>) * x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    newDp[i] = (newDp[i] - dp[i - (c + <span class="number">1</span>) * x] + MOD) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp = newDp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l; i &lt;= r; ++i) &#123;</span><br><span class="line">            ans = (ans + dp[i]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展欧几里得exgcd"><a href="#拓展欧几里得exgcd" class="headerlink" title="拓展欧几里得exgcd"></a>拓展欧几里得exgcd</h2><p>求解不定方程 ax + by = c</p><p><a href="https://leetcode.cn/problems/minimum-number-of-groups-to-create-a-valid-assignment/">合法分组的最少组数</a></p><h2 id="统计所有子数组"><a href="#统计所有子数组" class="headerlink" title="统计所有子数组"></a>统计所有子数组</h2><p><a href="https://leetcode.cn/problems/total-appeal-of-a-string/">字符串的总引力</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    使用变化量来思考</span></span><br><span class="line"><span class="comment">    示例：</span></span><br><span class="line"><span class="comment">    C   A   B   A   D   A</span></span><br><span class="line"><span class="comment">    1</span></span><br><span class="line"><span class="comment">    2   1</span></span><br><span class="line"><span class="comment">    3   2   1</span></span><br><span class="line"><span class="comment">    2   1   2   1</span></span><br><span class="line"><span class="comment">    3   2   3   2   1</span></span><br><span class="line"><span class="comment">    3   2   2   1   2   1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/count-unique-characters-of-all-substrings-of-a-given-string/">统计子串中的唯一字符</a></p><hr><h2 id="01字典树"><a href="#01字典树" class="headerlink" title="01字典树"></a>01字典树</h2><p><a href="https://leetcode.cn/problems/maximum-strong-pair-xor-ii/">找出强数对的最大异或值 II</a></p><p>遇到绝对值要想到排序拆绝对值 </p><p>滑动窗口 + 从字典树中删除 + 子数组最大异或<a href="https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/">421. 数组中两个数的最大异或值</a></p><hr><h2 id="容斥定理"><a href="#容斥定理" class="headerlink" title="容斥定理"></a>容斥定理</h2><p><a href="https://leetcode.cn/problems/distribute-candies-among-children-ii/">给小朋友们分糖果 II</a></p><p><a href="https://leetcode.cn/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/">重新排列后包含指定子字符串的字符串数目</a></p>]]></content>
    
    
    <summary type="html">LeetCode周赛</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最短路算法</title>
    <link href="https://wuwawawa.github.io/posts/5697d1d5.html"/>
    <id>https://wuwawawa.github.io/posts/5697d1d5.html</id>
    <published>2023-09-26T06:13:22.000Z</published>
    <updated>2023-10-01T09:00:02.859Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230926155902091.png" alt="image-20230926155902091"></p><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>Dijkstra本质上是一种贪心算法，通过不断调整每个点的“当前距离”最终得到最优结果。</p><p>假设现在要求出从某一点s到其他所有点的最短距离，对于每个点v均维护一个“当前距离”（dist[v]）和“是否访问过”(visited[v])。首先将dist[s]初始化为0，将其他点的距离初始化为无穷，并将所有点初始化为未访问的。记u-&gt;v的边权为weight[u-&gt;v]。然后进行以下步骤：</p><ol><li>从所有未访问的点中，找出当前距离最小的，设为u，并将其标记为已访问的。</li><li>调整u的所有边（若是有向图则为出边）连接的并且<strong>未被访问过的</strong>点：若weight[u-&gt;v] + dist[u] &lt; dist[v], 则将dist[v]更新为dist[u]+weight[u-&gt;v]。</li><li>重复1和2步骤，直到所有点都被标记为已访问的，则dist[i]即s到i的最短距离。如果只想求从s到某一点的最短距离，那么当该点被标记为访问过之后可直接退出。</li><li>补充：如果除了最短距离之外还想求出具体的路径，只需建立一个pre数组，在步骤2后添加操作：pre[v] = u（前提是dist[v]被更新）。</li></ol><div class="tabs" id="e1220ca0-3a93-4dc3-aaa1-66a274d0966f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e1220ca0-3a93-4dc3-aaa1-66a274d0966f-1"><i class="fas fa-seedling"></i>邻接矩阵</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e1220ca0-3a93-4dc3-aaa1-66a274d0966f-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">110</span>, M = <span class="number">6010</span>;</span><br><span class="line">    <span class="comment">// 邻接矩阵数组：w[a][b] = c 代表从 a 到 b 有权重为 c 的边</span></span><br><span class="line">    <span class="type">int</span>[][] w = <span class="keyword">new</span> <span class="title class_">int</span>[N][N];</span><br><span class="line">    <span class="comment">// dist[x] = y 代表从「源点/起点」到 x 的最短距离为 y</span></span><br><span class="line">    <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="comment">// 记录哪些点已经被更新过</span></span><br><span class="line">    <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[N];</span><br><span class="line">    <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="type">int</span> n, src;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span>[][] conn)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化邻接矩阵</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                w[i][j] = w[j][i] = i == j ? <span class="number">0</span> : INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] t : conn) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> t[<span class="number">0</span>], v = t[<span class="number">1</span>], c = t[<span class="number">2</span>];</span><br><span class="line">            w[u][v] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最短路</span></span><br><span class="line">        dijkstra();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dijkstra</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 起始先将所有的点标记为「未更新」和「距离为正无穷」</span></span><br><span class="line">        Arrays.fill(vis, <span class="literal">false</span>);</span><br><span class="line">        Arrays.fill(dist, INF);</span><br><span class="line">        <span class="comment">// 只有起点最短距离为 0</span></span><br><span class="line">        dist[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 迭代 n 次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>; p &lt;= n; p++) &#123;</span><br><span class="line">            <span class="comment">// 每次找到「最短距离最小」且「未被更新」的点 t</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[i] &amp;&amp; (t == -<span class="number">1</span> || dist[i] &lt; dist[t])) t = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 标记点 t 为已更新</span></span><br><span class="line">            vis[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 用点 t 的「最小距离」更新其他点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                dist[i] = Math.min(dist[i], dist[t] + w[t][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>动态规划</p><p><code>dp[i][j]</code> 表示 <code>i-&gt;j</code> 的最短距离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借用别的点求解</p>]]></content>
    
    
    <summary type="html">Dijkstra + SPFA + Bellman-Ford + Floyd</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>差分数组</title>
    <link href="https://wuwawawa.github.io/posts/f4bb8efc.html"/>
    <id>https://wuwawawa.github.io/posts/f4bb8efc.html</id>
    <published>2023-09-25T06:45:09.000Z</published>
    <updated>2023-09-25T09:37:30.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在介绍差分数组之前，先回顾一下「前缀和数组」</p><p>前缀和主要适用的场景是原始数组不会被修改的情况下，频繁查询某个区间的累加和</p><p>差分数组的主要适用场景是频繁对原始数组的某个区间的元素进行增减</p><p>使用场景：对于一个数组 <code>nums[]</code></p><ul><li>要求一：对 <code>num[2...4]</code> 全部 + 1</li><li>要求二：对 <code>num[1...3]</code> 全部 - 3</li><li>要求三：对 <code>num[0...4]</code> 全部 + 9</li></ul><p>看到上述情景，首先想到的肯定是遍历（bao li）。直接对数组循环 3 遍，每次在规定的区间上按要求进行操作，此时时间复杂度O(3n)</p><p>但是当这样的操作变得频繁后，时间复杂度也呈线性递增</p><p>所以针对这种场景，提出了「差分数组」的概念，举个简单的例子</p><p><img src="https://pic.leetcode-cn.com/1649302054-sjfBPU-1036101649298970IqiB0Himage-20220407103610070.png" alt="1036101649298970IqiB0Himage-20220407103610070.png"></p><p><code>diff[]</code> 和 <code>nums[]</code> 的关系：<code>diff[i] = nums[i] - nums[i - 1]</code>，<code>diff[0]</code> 除外</p><hr><h2 id="使用好处"><a href="#使用好处" class="headerlink" title="使用好处"></a>使用好处</h2><p>当我们需要对 <code>nums[]</code> 进行上述三个要求时，不需要一次一次的遍历整个数组了，而只需要对 <code>diff[]</code> 进行一次 <code>O(1)</code> 的操作即可</p><ul><li>要求一：对 <code>num[2...4]</code> 全部 + 1  -&gt; <code>diff[2] += 1</code></li><li>要求二：对 <code>num[1...3]</code> 全部 - 3  -&gt; <code>diff[1] += (-3); diff[3 + 1] -= (-3)</code> </li><li>要求三：对 <code>num[0...4]</code> 全部 + 9  -&gt; <code>diff[0] += 9</code></li></ul><p>总结：对于改变区间 <code>[i, j]</code> 的值，只需要进行如下操作 <code>diff[i] += val; diff[j + 1] -= val</code></p><p><strong>注</strong>：当 <code>j + 1 &gt;= diff.length</code> 时，不需要进行 <code>diff[j + 1] -= val</code> 操作</p><hr><h2 id="还原数据"><a href="#还原数据" class="headerlink" title="还原数据"></a>还原数据</h2><p>怎么通过 <code>diff[]</code> 得到更新后的数组呢？？？？？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复原操作</span></span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"><span class="comment">// 下标为 0 的元素相等</span></span><br><span class="line">res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    res[i] = diff[i] + res[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="diff-原理"><a href="#diff-原理" class="headerlink" title="diff[] 原理"></a>diff[] 原理</h2><p>还原数据就相当于对diff数组求一个前缀和。</p><p>当我们需要对区间 <code>[i, j]</code> 进行 <code>+ val</code> 操作时，我们对 <code>diff[i] += val; diff[j + 1] -= val;</code></p><p>在复原操作时，当我们求 <code>res[i]</code> 时，<code>res[i - 1]</code> 没有变，而 <code>diff[i]</code> 增加了 3，所以 <code>res[i]</code> 增加 3</p><p>当我们求 <code>res[i + 1]</code> 时，<code>res[i]</code> 增加了 3，而 <code>diff[i + 1]</code> 没有变，故 <code>res[i + 1] = diff[i + 1] + res[i]</code> 增加 3。即：虽然 <code>diff[i + 1]</code> 没有变，但是 <code>res[i]</code> 对后面的 <code>res[i + 1]</code> 有一个累积作用</p><p>当我们求 <code>res[j + 1]</code> 时，<code>res[j]</code> 增加了 3，而 <code>diff[j + 1]</code> 减少了 3，故 <code>res[j + 1] = diff[j + 1] + res[j]</code> 增加没有变。即：我们在 j + 1 的时候，把上述的累积作用去除了，所以 j + 1 后面的元素不受影响</p><hr><h2 id="完整模版"><a href="#完整模版" class="headerlink" title="完整模版"></a>完整模版</h2><p>差分数组也可以不用原数组进行初始化，使用全为0的元素进行初始化，这样得到的结果数组就是偏移数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Difference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 差分数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] diff;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化差分数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums nums</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Difference</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> nums.length &gt; <span class="number">0</span>;</span><br><span class="line">        diff = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        diff[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            diff[i] = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对区间 [i, j] 增加 val（val 可为负数）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j j</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        diff[i] += val;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; diff.length) &#123;</span><br><span class="line">            diff[j + <span class="number">1</span>] -= val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复原操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> res</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] result() &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[diff.length];</span><br><span class="line">        res[<span class="number">0</span>] = diff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; diff.length; i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] + diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">差分数组</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>筛质数</title>
    <link href="https://wuwawawa.github.io/posts/996e4f07.html"/>
    <id>https://wuwawawa.github.io/posts/996e4f07.html</id>
    <published>2023-09-19T00:51:18.000Z</published>
    <updated>2023-12-09T12:25:39.835Z</updated>
    
    <content type="html"><![CDATA[<p>统计 [2,n] 中质数的数量是一个很常见的题目，也有很多巧妙高效的做法，接下来的部分只会讲述一些常见的做法。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>很直观的思路是我们枚举每个数判断其是不是质数。</p><p>考虑质数的定义：在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然数。因此对于每个数 x，我们可以从小到大枚举 [2,x-1] 中的每个数 y，判断 y 是否为 x 的因数。但这样判断一个数是否为质数的时间复杂度最差情况下会到 O(n)，无法通过所有测试数据。</p><p>考虑到如果 y 是 x 的因数，那么 x/y 也必然是x 的因数，因此我们只要校验 y 或者 x/y 。不难发现我们只需要枚举 [2,$\sqrt{x}$]即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ans += isPrime(i) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i * i &lt;= x; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li><p>时间复杂度O(n$\sqrt{n}$)。单个数检查的时间复杂度为O($\sqrt{n}$)，一共要检查n个数。</p></li><li><p>空间复杂度O(1)</p></li></ul><hr><hr><h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><p>枚举没有考虑到数与数的关联性，因此难以再继续优化时间复杂度。接下来我们介绍一个常见的算法，该算法由希腊数学家厄拉多塞提出，称为厄拉多塞筛法，简称埃氏筛。</p><p>我们考虑这样一个事实：如果 x 是质数，那么大于 x 的 x 的倍数 2x,3x,…… 一定不是质数，因此我们可以从这里入手。</p><p>我们创建一个数组 isPrime[n] , 其中 isPrime[i] 表示数 i 是不是质数。如果是质数则为 0 ，否则为 1 。</p><p>从小到大遍历每个数，如果这个数为质数，则将其所有倍数都标记为合数（除了该质数本身），这样在运行结束的时候我们就能知道质数的个数。</p><p>当然这里还可以继续优化，对于一个质数 x，如果按上文说的我们从 2x 开始标记其实是冗余的，应该直接从 x⋅x 开始标记，因为 2x,3x,…这些数一定在 x 之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            ans += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) i * i &lt;= n) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i * i; j &lt;= n; j += i) &#123;</span><br><span class="line">                    isPrime[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li>时间复杂度O(nloglog n)。</li><li>空间复杂度O(n)</li></ul><hr><hr><h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><p>埃氏筛其实还是存在冗余的标记操作，比如对于 45 这个数，它会同时被 3,5 两个数标记为合数，因此我们优化的目标是让每个合数只被标记一次，这样时间复杂度即能保证为 O(n)，这就是我们接下来要介绍的线性筛。</p><p>相较于埃氏筛，我们多维护一个 primes 数组表示当前得到的质数集合。我们从小到大遍历，如果当前的数 x 是质数，就将其加入 primes 数组。</p><p>另一点与埃氏筛不同的是，「标记过程」不再仅当 x 为质数时才进行，而是对每个整数 x 都进行。对于整数 x，我们不再标记其所有的倍数 x⋅x,x⋅(x+1),…，而是只标记质数集合中的数与 x 相乘的数，即 x⋅primes[0], x⋅primes[1] ….. ，且在发现 x mod primes[i] = 0 的时候结束当前标记。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            primes.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime &gt; n) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            isPrime[i * prime] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primes.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="预处理质数"><a href="#预处理质数" class="headerlink" title="预处理质数"></a>预处理质数</h2><p>在有些题目中，我们需要预处理质数，省去一些重复计算。</p><div class="tabs" id="c23a3bbc-d05e-4e05-abcf-62948c072c4e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c23a3bbc-d05e-4e05-abcf-62948c072c4e-1"><i class="fas fa-cat"></i>埃氏筛预处理</button></li><li class="tab"><button type="button" data-href="#c23a3bbc-d05e-4e05-abcf-62948c072c4e-2"><i class="fas fa-horse"></i>线性筛预处理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c23a3bbc-d05e-4e05-abcf-62948c072c4e-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MX</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 0 表示是质数 1 表示是合数</span></span><br><span class="line">    <span class="type">int</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">int</span>[MX + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= MX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            primes.add(i);</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">long</span>) i * i &lt;= MX) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i * i; j &lt;= MX; j += i) &#123;</span><br><span class="line">                    isPrime[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c23a3bbc-d05e-4e05-abcf-62948c072c4e-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MX</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ArrayList&lt;Integer&gt; primes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 0 表示是质数 1 表示是合数</span></span><br><span class="line">    <span class="type">int</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">int</span>[MX + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= MX; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            primes.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * prime &gt; MX) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            isPrime[i * prime] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">枚举、埃氏筛、线性筛</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="https://wuwawawa.github.io/posts/c517589e.html"/>
    <id>https://wuwawawa.github.io/posts/c517589e.html</id>
    <published>2023-09-14T01:33:46.000Z</published>
    <updated>2023-10-02T07:45:43.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。</p><p>顾名思义，并查集支持两种操作：</p><ul><li>合并(Union)：合并两个元素所属集合（合并对应的树）</li><li>查询(Find)：查询某个元素所属集合（查询对应的树的根节点），这可以用于判断两个元素是否属于同一集合</li></ul><hr><hr><h2 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h2><p>运用以下这三个函数可以构建并查集算法的基本框架</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] cnt;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化并查集的父节点数组，将每个元素的父节点都初始化为自己</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        N = n;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        cnt = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            cnt[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素x和元素y所在的集合合并成一个集合。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pra</span> <span class="operator">=</span> find(a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">prb</span> <span class="operator">=</span> find(b);</span><br><span class="line">        <span class="keyword">if</span> (pra != prb) &#123;</span><br><span class="line">            parent[prb] = pra;</span><br><span class="line">            cnt[pra] += cnt[prb];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素x的父节点，判断元素x属于哪个集合</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (parent[x] != x) &#123;</span><br><span class="line">            x = parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 连通块个数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getBlockNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == find(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">并查集</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大数运算</title>
    <link href="https://wuwawawa.github.io/posts/8878d18a.html"/>
    <id>https://wuwawawa.github.io/posts/8878d18a.html</id>
    <published>2023-09-09T05:44:29.000Z</published>
    <updated>2023-09-14T01:35:39.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h2><p>算法流程： 设定 i，j 两指针分别指向 num1，num2 尾部，模拟人工加法；</p><p>计算进位： 计算 carry = tmp // 10，代表当前位相加是否产生进位；</p><p>添加当前位： 计算 tmp = n1 + n2 + carry，并将当前位 tmp % 10 添加至 res 头部；</p><p>索引溢出处理： 当指针 i或j 走过数字首部后，给 n1，n2 赋值为 0，相当于给 num1，num2 中长度较短的数字前面填 0，以便后续计算。</p><p>当遍历完 num1，num2 后跳出循环，并根据 carry 值决定是否在头部添加进位 1，最终返回 res 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num1.length() - <span class="number">1</span>, j = num2.length() - <span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> i &gt;= <span class="number">0</span> ? num1.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> j &gt;= <span class="number">0</span> ? num2.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">        res.append(tmp % <span class="number">10</span>);</span><br><span class="line">        carry = tmp / <span class="number">10</span>;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">        res.append(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="大数相乘"><a href="#大数相乘" class="headerlink" title="大数相乘"></a>大数相乘</h2><p>如果 <code>num1</code> 和 <code>num2</code> 之一是0 ，则直接将0作为结果返回即可。</p><p>如果 <code>num1</code> 和 <code>num2</code> 都不是0，则可以用过模拟「竖式乘法」的方法计算乘积。从右往左遍历乘数，将乘数的每一位与被乘数相乘得到对应的结果，再将每次得到的结果进行累加。</p><p>这道题中，被乘数是 <code>nums1</code> ,乘数是 <code>num2</code>。</p><p>需要注意的是，<code>num2</code> 除了最低位以外，其余的每一位的运算结果都需要补 0。 </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/sol1.png" alt="fig1" style="zoom:48%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">multiply</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num1.equals(<span class="string">&quot;0&quot;</span>) || num2.equals(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> num1.length(), len2 = num2.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> len2 - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">curProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 补0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len2 - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            curProduct.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">curNum2</span> <span class="operator">=</span> num2.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用 curNum 去乘 num1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> len1 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curNum1</span> <span class="operator">=</span> num1.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> curNum1 * curNum2 + carry;</span><br><span class="line"></span><br><span class="line">            curProduct.append(product % <span class="number">10</span>);</span><br><span class="line">            carry /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = addStrings(ans,curProduct.reverse().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addStrings</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num1.length() - <span class="number">1</span>, j = num2.length() - <span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> i &gt;= <span class="number">0</span> ? num1.charAt(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> j &gt;= <span class="number">0</span> ? num2.charAt(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> n1 + n2 + carry;</span><br><span class="line">        res.append(tmp % <span class="number">10</span>);</span><br><span class="line">        carry = tmp / <span class="number">10</span>;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry == <span class="number">1</span>) &#123;</span><br><span class="line">        res.append(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="大数相减"><a href="#大数相减" class="headerlink" title="大数相减"></a>大数相减</h2><p>1、执行计算前首先比较减数(num1)和被减数(num2)的大小，如果num1&gt;num2,那么就模拟num1-num2的过程，如果num1&lt;num2，那么结果就为-(num2-num1) 。当然可以为了稳定模拟时候一个大一个小，可将num1始终指向较大的那个数，少写一个if/else.</p><p>2、在比较两个数字大小的时候，因为是字符形式，首先比较两个字符串的长度，长的那个更大短的那个更小，如果两个字符串等大，那么就可以通过字典序从前往后进行比较(Java可直接使用compareTo方法)。</p><p>3、和加法不同的是，减法前面可能产生若干前缀0，这些0是需要你去掉的，例如”1100”-“1000”计算得到的结果为”0100”,你就要把前面的0去掉返回”100”。</p><p>4、具体实现的时候和加法相似，如果使用StringBuilder存储，需要逆置顺序，如果是个负数，前面还要加上’-‘.</p><p>5、每个位置正常进行减法运算，如果值小于0，那么就需要向上借位(+10),那么处理上一位进行减法时候还要将借位的处理一下。</p><p><img src="https://ask.qcloudimg.com/http-save/yehe-4372098/mlwn6ygdwd.png" alt="img" style="zoom: 67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (num1.length() &lt; num2.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (num1.length() &gt; num2.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> num1.compareTo(num2) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">subtractString</span><span class="params">(String num1, String num2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="string">&#x27;+&#x27;</span>;<span class="comment">//正负号</span></span><br><span class="line">    <span class="comment">//让num1&gt;num2 如果num1&lt;num2 那么结果就是—(num2-num1)</span></span><br><span class="line">    <span class="comment">//可以先将num1和num2交换和前面情况统一</span></span><br><span class="line">    <span class="keyword">if</span> (!compare(num1, num2)) &#123;</span><br><span class="line">        sign = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">team</span> <span class="operator">=</span> num2;</span><br><span class="line">        num2 = num1;</span><br><span class="line">        num1 = team;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num1.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> num2.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">borrow</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//借位</span></span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> i &gt;= <span class="number">0</span> ? (num1.charAt(i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> j &gt;= <span class="number">0</span> ? (num2.charAt(j) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> n1 - n2 - borrow;</span><br><span class="line">        borrow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>)<span class="comment">//需要向前借位</span></span><br><span class="line">        &#123;</span><br><span class="line">            borrow = <span class="number">1</span>;</span><br><span class="line">            num += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">        j--;</span><br><span class="line">        sb.append(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb = sb.reverse();<span class="comment">//需要先翻转</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//去掉前面没用的’0‘</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; sb.length() &amp;&amp; sb.charAt(index) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果两个数相同 直接返回&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (index == sb.length())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (sign == <span class="string">&#x27;+&#x27;</span>)<span class="comment">//如果正数</span></span><br><span class="line">        <span class="keyword">return</span> sb.substring(index);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> sign + sb.substring(index);<span class="comment">//负数需要返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="大数相除"><a href="#大数相除" class="headerlink" title="大数相除"></a>大数相除</h2><p>对于大数a/b，一般最多要求求到其整数解或者余数，即a/b=c……d（a,b,c,d均为整）;也就是<strong>a里面有c个b</strong>，并且还剩下d。核心是先求c是多少，对于程序来说，可以通过枚举啊，将除法变成减法，从a中不断减d，一直到不能减为止。</p><p>但是有个问题，如果被除数a很大很大，可能有居多个b，那么这样时间复杂度太高了，不可能执行那么多次，那么需要怎么样去优化这个方法呢？</p><p>那就要加速寻找次数，减少这个减法的次数了，减法次数减小的一个最好方案就是能不能<strong>扩大除数b</strong>。如果b后面加个<code>&#39;0&#39;</code>，那么算出来的结果就乘以10，减法的次数变成原来十分之一。根据这个思想我们可以一直每次找到b的最大10的倍数(小于a)计算减的次数再换算成减b的总词数，将结果要以字符串方式保留，后面一直迭代到最后为止,这虽然是一道除法运算的题，但是也蕴含减法和加法(次数叠加到结果中)。</p>]]></content>
    
    
    <summary type="html">大数相加、大数相减、大数相乘、</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>限流算法</title>
    <link href="https://wuwawawa.github.io/posts/32609cb8.html"/>
    <id>https://wuwawawa.github.io/posts/32609cb8.html</id>
    <published>2023-09-02T05:04:36.000Z</published>
    <updated>2023-09-02T07:37:52.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="固定窗口算法"><a href="#固定窗口算法" class="headerlink" title="固定窗口算法"></a>固定窗口算法</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>固定窗口限流算法，也叫<span class='p green'>计数器限流算法</span>，是最简单的一种限流算法。</p><p><strong>实现原理是：</strong> 在一个固定长度的时间窗口内限制请求数量，每来一个请求，请求次数加一，如果请求数量超过最大限制，就拒绝该请求。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230902132700830.png" alt="image-20230902132700830" style="zoom: 50%;" /></p><hr><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固定窗口限流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FixWindowLimiter</span> <span class="keyword">implements</span> <span class="title class_">Limiter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">10L</span>; <span class="comment">// 每个窗口的最大请求数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">windowUnit</span> <span class="operator">=</span> <span class="number">1000L</span>; <span class="comment">// 窗口大小，单位ms</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">reqCount</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 窗口内的当前请求数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastTime</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 窗口开始时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限流方法，返回true表示限流</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Boolean <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 判断是否在当前时间窗口内，如果不在就开启一个新的时间窗口</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - lastTime &gt; windowUnit) &#123;</span><br><span class="line">            <span class="comment">// 重置计数器</span></span><br><span class="line">            reqCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 开启新窗口</span></span><br><span class="line">            lastTime = currentTime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// // 判断是否超过最大请求量</span></span><br><span class="line">        <span class="keyword">if</span> (reqCount &lt; threshold) &#123;</span><br><span class="line">            reqCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong> 实现简单，容易理解。</p><p><strong>缺点：</strong></p><ol><li>限流不够平滑。例如：限流是每秒3个，在第一毫秒发送了3个请求，达到限流，窗口剩余时间的请求都将会被拒绝，体验不好。</li><li>无法处理窗口边界问题。因为是在某个时间窗口内进行流量控制，所以可能会出现窗口边界效应，即在时间窗口的边界处可能会有大量的请求被允许通过，从而导致突发流量。</li></ol><p>例如：限流是每秒3个，在第一秒的最后一毫秒发送了3个请求，在第二秒的第一毫秒又发送了3个请求。在这两毫米内处理了6个请求，但是并没有触发限流。如果出现突发流量，可能会压垮服务器。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230902134743416.png" alt="image-20230902134743416" style="zoom: 50%;" /></p><hr><hr><h2 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h2><h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><p>为了解决固定窗口算法统计精度太低的问题，引入了滑动窗口算法。在滑动窗口算法中，窗口的起止时间是动态的，窗口的大小固定。这种算法能够较好地处理窗口边界问题，但是实现相对复杂，需要记录每个请求的时间戳。</p><p><strong>实现原理是：</strong> 每来一个请求，就向后推一个时间窗口，计算这个窗口内的请求数量。如果请求数量超过限制就拒绝请求，否则就处理请求，并记录请求的时间戳。另外还需要一个任务清理过期的时间戳。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230902135306151.png" alt="image-20230902135306151" style="zoom:50%;" /></p><hr><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SlidingWindowLimiter</span> <span class="keyword">implements</span> <span class="title class_">Limiter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 每个窗口的最大请求数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">windowUnit</span> <span class="operator">=</span> <span class="number">1000</span>; <span class="comment">// 窗口大小，1000ms</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Long&gt; requestList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//  请求集合，用来存储窗口内的请求数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 限流方法，返回true表示拦截</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 统计当前窗口内，有效的请求数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeOfValid</span> <span class="operator">=</span> <span class="built_in">this</span>.sizeOfValid(currentTime);</span><br><span class="line">        <span class="comment">// 判断是否超过最大请求数量</span></span><br><span class="line">        <span class="keyword">if</span> (sizeOfValid &lt; threshold) &#123;</span><br><span class="line">            <span class="comment">// 把当前请求添加到请求集合里</span></span><br><span class="line">            requestList.add(currentTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计当前窗口内，有效的请求数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sizeOfValid</span><span class="params">(<span class="type">long</span> currentTime)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeOfValid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long requestTime : requestList) &#123;</span><br><span class="line">            <span class="comment">// 判断是否在当前时间窗口内</span></span><br><span class="line">            <span class="keyword">if</span> (currentTime - requestTime &lt;= windowUnit) &#123;</span><br><span class="line">                sizeOfValid++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sizeOfValid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理过期的请求（单独启动一个线程处理）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否超出当前时间窗口内</span></span><br><span class="line">        requestList.removeIf(requestTime -&gt; System.currentTimeMillis() - requestTime &gt; windowUnit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong> 解决了固定窗口算法的窗口边界问题，避免突发流量压垮服务器。</p><p><strong>缺点：</strong> 还是存在限流不够平滑的问题。例如：限流是每秒3个，在第一毫秒发送了3个请求，达到限流，剩余窗口时间的请求都将会被拒绝，体验不好。</p><hr><hr><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><h3 id="实现原理-2"><a href="#实现原理-2" class="headerlink" title="实现原理"></a>实现原理</h3><p>漏桶限流算法是一种常用的流量整形（Traffic Shaping）和流量控制（Traffic Policing）的算法，它可以有效地控制数据的传输速率以及防止网络拥塞。</p><p>实现原理是：</p><ol><li>一个固定容量的漏桶，按照固定速率出水（处理请求）；</li><li>当流入水（请求数量）的速度过大会直接溢出（请求数量超过限制则直接拒绝）。</li><li>桶里的水（请求）不够则无法出水（桶内没有请求则不处理）。</li></ol><p>当请求流量正常或者较小的时候，请求能够得到正常的处理。当请求流量过大时，漏桶限流算法可以通过丢弃部分请求来防止系统过载。</p><p>这种算法的一个重要特性是，输出数据的速率始终是稳定的，无论输入的数据流量如何变化。这就确保了系统的负载不会超过预设的阈值。但是，由于漏桶的出口速度是固定的，所以无法处理突发流量。此外，如果入口流量过大，漏桶可能会溢出，导致数据丢失。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230902144242297.png" alt="image-20230902144242297" style="zoom:50%;" /></p><hr><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakyBucketLimiter</span> <span class="keyword">implements</span> <span class="title class_">Limiter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 桶的最大容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 桶内当前水量(当前累计的请求数)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">leakRate</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 漏水速率(每秒系统能处理的请求数)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastLeakTime</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 上次漏水时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回true，表示限流</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用漏水方法</span></span><br><span class="line">        <span class="built_in">this</span>.leak();</span><br><span class="line">        <span class="comment">// 判断是否超过最大请求数量</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt; threshold) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 漏水方法，计算并更新这段时间内漏水量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leak</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取系统当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 计算这段时间内，需要流出的水量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">leakWater</span> <span class="operator">=</span> (currentTime - lastLeakTime) * leakRate / <span class="number">1000</span>;</span><br><span class="line">        count = Math.max(count - leakWater, <span class="number">0</span>);</span><br><span class="line">        lastLeakTime = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li><strong>平滑流量。</strong>由于漏桶算法以固定的速率处理请求，可以有效地平滑和整形流量，避免流量的突发和波动（类似于消息队列的削峰填谷的作用）。</li><li><strong>防止过载。</strong>当流入的请求超过桶的容量时，可以直接丢弃请求，防止系统过载。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>无法处理突发流量</strong>：由于漏桶的出口速度是固定的，无法处理突发流量。面对突发流量的时候，漏桶算法还是循规蹈矩地处理请求，这不是我们想看到的。流量变突发时，我们肯定希望系统尽量快点处理请求，提升用户体验。</li><li><strong>可能会丢失数据</strong>：如果入口流量过大，超过了桶的容量，那么就需要丢弃部分请求。在一些不能接受丢失请求的场景中，这可能是一个问题。</li><li><strong>不适合速率变化大的场景</strong>：如果速率变化大，或者需要动态调整速率，那么漏桶算法就无法满足需求。</li></ol><hr><hr><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><h3 id="实现原理-3"><a href="#实现原理-3" class="headerlink" title="实现原理"></a>实现原理</h3><p>令牌桶限流算法是一种常用的流量整形和速率限制算法。与漏桶算法一样，令牌桶算法也是用来控制发送到网络上的数据的数量。</p><p>实现原理：</p><ol><li>系统以固定的速率向桶中添加令牌；</li><li>当有请求到来时，会尝试从桶中移除一个令牌，如果桶中有足够的令牌，则请求可以被处理或数据包可以被发送；</li><li>如果桶中没有令牌，那么请求将被拒绝；</li><li>桶中的令牌数不能超过桶的容量，如果新生成的令牌超过了桶的容量，那么新的令牌会被丢弃。</li></ol><p>令牌桶算法的一个重要特性是，它能够应对突发流量。当桶中有足够的令牌时，可以一次性处理多个请求，这对于需要处理突发流量的应用场景非常有用。但是又不会无限制的增加处理速率导致压垮服务器，因为桶内令牌数量是有限制的。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230902150018034.png" alt="image-20230902150018034" style="zoom:50%;" /></p><hr><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBucketLimiter</span> <span class="keyword">implements</span> <span class="title class_">Limiter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">threshold</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 桶的最大容量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 桶内当前的令牌数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">tokenRate</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 令牌生成速率（每秒5次）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">lastRefillTime</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 上次生成令牌的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回true表示限流</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">limit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用生成令牌方法</span></span><br><span class="line">        <span class="built_in">this</span>.refillTokens();</span><br><span class="line">        <span class="comment">// 判断桶内是否还有令牌</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成令牌方法，计算并更新这段时间内生成的令牌数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refillTokens</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 计算这段时间内，需要生成的令牌数量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">refillTokens</span> <span class="operator">=</span> (currentTime - lastRefillTime) * tokenRate / <span class="number">1000</span>;</span><br><span class="line">        count = Math.min(count + refillTokens, threshold);</span><br><span class="line">        lastRefillTime = currentTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li><strong>可以处理突发流量</strong>：令牌桶算法可以处理突发流量。当桶满时，能够以最大速度处理请求。这对于需要处理突发流量的应用场景非常有用。</li><li><strong>限制平均速率</strong>：在长期运行中，数据的传输率会被限制在预定义的平均速率（即生成令牌的速率）。</li><li><strong>灵活性</strong>：与漏桶算法相比，令牌桶算法提供了更大的灵活性。例如，可以动态地调整生成令牌的速率。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>可能导致过载</strong>：如果令牌产生的速度过快，可能会导致大量的突发流量，这可能会使网络或服务过载。</li><li><strong>需要存储空间</strong>：令牌桶需要一定的存储空间来保存令牌，可能会导致内存资源的浪费。</li><li><strong>实现稍复杂</strong>：相比于计数器算法，令牌桶算法的实现稍微复杂一些。</li></ol><hr><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>固定窗口算法</strong>实现简单，但是限流不够平滑，存在窗口边界问题，适用于需要简单实现限流的场景。</p><p><strong>滑动窗口算法</strong>解决了窗口边界问题，但是还是存在限流不够平滑的问题，适用于需要控制平均请求速率的场景。</p><p><strong>漏桶算法</strong>的优点是流量处理更平滑，但是无法应对突发流量，适用于需要平滑流量的场景。</p><p><strong>令牌桶算法</strong>既能平滑流量，又能处理突发流量，适用于需要处理突发流量的场景。</p>]]></content>
    
    
    <summary type="html">固定窗口、滑动窗口、漏桶和令牌桶限流</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="限流算法" scheme="https://wuwawawa.github.io/tags/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分查找-红蓝边界法</title>
    <link href="https://wuwawawa.github.io/posts/c1110203.html"/>
    <id>https://wuwawawa.github.io/posts/c1110203.html</id>
    <published>2023-08-11T06:49:12.000Z</published>
    <updated>2023-09-14T13:32:08.638Z</updated>
    
    <content type="html"><![CDATA[<p>二分查找是一种在有序数组中查找某一特定元素的搜索算法。在很多人的印象里，二分查找是一种比较简单的算法。然而在实际中，二分查找经常容易写错，特别是在处理边界条件的时候。算法大神高德纳曾经说过，“虽然二分查找的基本思想相对简单直白，但是细节上却惊人的tricky”。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定有序数组<code>1 2 3 5 5 5 8 9</code>，有4个小问题分别是：</p><p>1) 找到第一个<code>&gt;=5</code>的元素</p><p>2) 找到最后一个<code>&lt;5</code>的元素</p><p>3) 找到第一个<code>&gt;5</code>的元素</p><p>4) 找到最后一个<code>&lt;=5</code>的元素</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230715195248912.png" alt="image-20230715195248912" style="zoom: 50%;" /></p><p>大家可以看到，对于这四个问题来说，它们表面上是比较相似的，但是细节上却有些微的不同，它们的答案也是完全不同的。</p><p>可想而知，如果我们用二分查找来解决这个问题，细节处理并不容易，一不小心可能就会出错。</p><hr><hr><h2 id="新的角度"><a href="#新的角度" class="headerlink" title="新的角度"></a>新的角度</h2><p>让我们暂时忘掉刚才的问题，从一个全新的角度来审视二分查找。</p><p>大家可以看到，这里有一个数组，里面一共有N个元素，这些元素的编号是0到N-1。在这N个元素里面，前K个元素颜色是蓝色，后面的元素是红色。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716093005464.png" alt="image-20230716093005464" style="zoom:80%;" /></p><p>然而，在这个问题中，蓝红边界的位置是未知的，即K是未知的。换句话说，在我们一开始拿到数组的时候，整个数组都是灰色的。这个问题的最终目标，是把蓝红边界找出来，即求出未知数K。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716093139742.png" alt="image-20230716093139742" style="zoom:80%;" /></p><hr><h2 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h2><p>在这里，我们假设一共有9个元素，前面5个元素是蓝色，后面4个元素是红色</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716093644294.png" alt="image-20230716093644294"></p><p>在我们一开始拿到数组的时候，整个数组都是灰色的。</p><p>我们可以设计一个蓝色指针，一开始指向最左面，随后不断向右移动，直到移动到蓝红边界。或者设计一个红色指针，一开始指向最右面，然后不断向左移动，直到移动到蓝红边界。</p><p>这样就求得了蓝红边界所在的位置。</p><p>当然，这种算法是非常低效的，它的算法复杂度是O(n）</p><hr><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>接下来我们看一下如何通过二分查找高效的寻找到蓝红边界，在刚才的朴素算法中，我们持续不断的将蓝色指针向右移动。对于这个过程，我们可以把它理解为蓝色区域不断被拓展。同理，红色指针不断向左移动，我们可以把这个过程理解为红色区域不断被拓展。</p><p>朴素算法之所以效率低下，是因为蓝色区域和红色区域的拓展是缓慢进行的，每次只能拓展一个元素。</p><hr><h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><blockquote><p>那么，我们有没有什么办法来加速两个区域的拓展过程呢？</p></blockquote><div class="tabs" id="c747378e-3702-44cf-8e98-a9f5063d2056"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c747378e-3702-44cf-8e98-a9f5063d2056-1"><i class="fas fa-seedling"></i>循环次数1</button></li><li class="tab"><button type="button" data-href="#c747378e-3702-44cf-8e98-a9f5063d2056-2"><i class="fas fa-leaf"></i>循环次数2</button></li><li class="tab"><button type="button" data-href="#c747378e-3702-44cf-8e98-a9f5063d2056-3"><i class="fab fa-apple"></i>循环次数3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c747378e-3702-44cf-8e98-a9f5063d2056-1"><p>我们可以这样做，我们可以直接看一下灰色区域最中间的那个元素颜色。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094245363.png" alt="image-20230716094245363"></p><p>在这里，我们发现这个元素颜色为蓝色。它就意味着，这个元素，以及这个元素之前所有的元素都是蓝色。这样的话，我们便可以直援将蓝色区域拓展到这个元素所在位置。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094329526.png" alt="image-20230716094329526"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c747378e-3702-44cf-8e98-a9f5063d2056-2"><p>让我们继续这样的操作。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094455062.png" alt="image-20230716094455062"></p><p>观察灰色区域中最中间的那个元素颜色，我们发现它是红色，这也就说明了，这个元素以及这个元素后面的元素都是红色。这样的话，我们便可以直接将红色区域拓展到这个元素所在的位置。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094652765.png" alt="image-20230716094652765"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c747378e-3702-44cf-8e98-a9f5063d2056-3"><p>接下来，我们不断的重复这种操作</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094835833.png" alt="image-20230716094835833"></p><p>直到最后，我们便找到了蓝红边界</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716094859442.png" alt="image-20230716094859442"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="伪代码实现"><a href="#伪代码实现" class="headerlink" title="伪代码实现"></a>伪代码实现</h3><div class="tabs" id="33539071-8bba-4bca-a801-0931002f5bff"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#33539071-8bba-4bca-a801-0931002f5bff-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#33539071-8bba-4bca-a801-0931002f5bff-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#33539071-8bba-4bca-a801-0931002f5bff-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#33539071-8bba-4bca-a801-0931002f5bff-4"><i class="fas fa-tree"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="33539071-8bba-4bca-a801-0931002f5bff-1"><p>一开始，我们设计L，R两个指针，L指向-1,R指向N</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716095333538.png" alt="image-20230716095333538"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="33539071-8bba-4bca-a801-0931002f5bff-2"><p>当L+1！=R的时候，就会进入循环体。</p><p>然后，我们求得灰色区域中间的那个元素位置M，M=(L+R) /2并且向下取整。如果M的颜色是蓝色，我们就将L赋值为M，也就是将蓝色区域拓展到M。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716095536554.png" alt="image-20230716095536554"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="33539071-8bba-4bca-a801-0931002f5bff-3"><p>如果M的颜色是红色，我们便将R赋值为M，也就是将红色区域拓展到M</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716095650860.png" alt="image-20230716095650860"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="33539071-8bba-4bca-a801-0931002f5bff-4"><p>我们持续不断的重复这个过程，直到达成L+1=R这个条件，便退出循环。</p><p>此时，我们可以发现，L和R刚刚好指向蓝红边界，我们可以根据实际情况来决定返回L还是R。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716095837237.png" alt="image-20230716095837237"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h3><p>刚刚我绍的二分查找伪代码，可能和大家在其他地方所看到的版本有所不同。为了进一步证明算法的正确性，让我们看几个细节问题。</p><blockquote><p>为什么<span class='p blue'>L</span>的初始值为-1，<span class='p red'>R</span>的初始值为N?</p></blockquote><p>难道我们不能将L初始化为0，或者让R初始化为N-1么?</p><p>答案是不可以</p><p>试想一下，假如整个数组都是红色,那么如果让L初始化为0，L一开始便处于红色区域内，这也便会造成错误。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716100233717.png" alt="image-20230716100233717"></p><p>同理，如果整个数组都是蓝色，那么如果让R初始化为N-1，R一开始便处于蓝色区域，也就造成了错误。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716100344067.png" alt="image-20230716100344067"></p><p>所以，我们需要让L初始化为-1，R初始化为N。</p><hr><blockquote><p>更新指针时，能不能写成L=m+1，或者R=m-1?</p></blockquote><p>比如说，对于这样一种情况，在某次循环中，M刚刚好指向蓝色区域的最后一个元素。那么，如果我们让L变成M+1，就会让L指向红色区域，这样就造成了错误。 </p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716100809314.png" alt="image-20230716100809314"></p><hr><h2 id="问题答案"><a href="#问题答案" class="headerlink" title="问题答案"></a>问题答案</h2><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230716100920458.png" alt="image-20230716100920458"></p><hr><h2 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h2><ul><li>建模：划分<span class='p blue'>蓝</span><span class='p red'>红</span>区域，确定<code>isBlue()</code>函数</li><li>确定返回<span class='p blue'>L</span>还是<span class='p red'>R</span></li><li>套用算法模版</li><li>后处理逻辑</li></ul>]]></content>
    
    
    <summary type="html">二分查找</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://wuwawawa.github.io/posts/e8eb0480.html"/>
    <id>https://wuwawawa.github.io/posts/e8eb0480.html</id>
    <published>2023-08-10T02:28:21.000Z</published>
    <updated>2023-09-14T13:32:14.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="寻找一个数-基本的二分查找"><a href="#寻找一个数-基本的二分查找" class="headerlink" title="寻找一个数(基本的二分查找)"></a>寻找一个数(基本的二分查找)</h2><p>这个场景是最简单的，肯能也是大家最熟悉的，即搜索一个数，如果存在，返回其索引，否则返回 -1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target)</span><br><span class="line">            left = mid + <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target)</span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意点分析</p></blockquote><div class="tabs" id="5c9537ee-7214-4745-8b2a-37749be89f75"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5c9537ee-7214-4745-8b2a-37749be89f75-1"><i class="fas fa-seedling"></i>while循环退出条件</button></li><li class="tab"><button type="button" data-href="#5c9537ee-7214-4745-8b2a-37749be89f75-2"><i class="fas fa-leaf"></i>l和r更新</button></li><li class="tab"><button type="button" data-href="#5c9537ee-7214-4745-8b2a-37749be89f75-3"><i class="fab fa-apple"></i>缺陷</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5c9537ee-7214-4745-8b2a-37749be89f75-1"><p><mark class="hl-label blue">为什么while循环的条件中是&lt;=而不是&lt;</mark> </p><p>因为初始化 <code>right</code> 的赋值是 <code>nums.length - 1</code>，即最后一个元素的索引，而不是 <code>nums.length</code></p><p>这二者可能出现在不同功能的二分查找中，区别是：前者相当于两端都闭区间 <code>[left, right]</code>，后者相当于左闭右开区间 <code>[left, right)</code>，因为索引大小为 <code>nums.length</code> 是越界的。</p><p>我们这个算法中使用的是前者 <code>[left, right]</code> 两端都闭的区间。</p><p><code>while(left &lt;= right)</code> 的终止条件是 <code>left == right + 1</code>，写成区间的形式就是 <code>[right + 1, right]</code>，或者带个具体的数字进去 <code>[3, 2]</code>，可见<strong>这时候区间为空</strong>，因为没有索引既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p><p><code>while(left &lt; right)</code> 的终止条件是 <code>left == right</code>，写成区间的形式就是 <code>[left, right]</code>，或者带个具体的数字进去 <code>[2, 2]</code>，<strong>这时候区间非空</strong>，还有一个数 2，但此时 while 循环终止了。也就是说这区间 <code>[2, 2]</code> 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5c9537ee-7214-4745-8b2a-37749be89f75-2"><p>什么 <code>left = mid + 1</code>，<code>right = mid - 1</code>？我看有的代码是 <code>right = mid</code> 或者 <code>left = mid</code>，没有这些加加减减，到底怎么回事，怎么判断？</p><p>刚才明确了「搜索区间」这个概念，而且本算法的搜索区间是两端都闭的，即 <code>[left, right]</code>。那么当我们发现索引 <code>mid</code> 不是要找的 <code>target</code> 时，下一步应该去搜索哪里呢？</p><p>当然是去搜索 <code>[left, mid-1]</code> 或者 <code>[mid+1, right]</code> 对不对？因为 <code>mid</code> 已经搜索过，应该从搜索区间中去除。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5c9537ee-7214-4745-8b2a-37749be89f75-3"><p>比如说给你有序数组 <code>nums = [1,2,2,2,3]</code>，<code>target</code> 为 2，此算法返回的索引是 2，没错。但是如果我想得到 <code>target</code> 的左侧边界，即索引 1，或者我想得到 <code>target</code> 的右侧边界，即索引 3，这样的话此算法是无法处理的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="寻找第一个满足该条件的值"><a href="#寻找第一个满足该条件的值" class="headerlink" title="寻找第一个满足该条件的值"></a>寻找第一个满足该条件的值</h2><p>当 check(mid) == true 调整的是 r 时：计算 mid 的方式应该为 mid = l + r &gt;&gt; 1</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">int</span> l = <span class="number">0</span>, r = <span class="built_in">n</span> - <span class="number">1</span>;</span><br><span class="line">while (l &lt; r) &#123;</span><br><span class="line">       <span class="built_in">int</span> <span class="built_in">mid</span> = l + r &gt;&gt; <span class="number">1</span>; //推荐写法 <span class="built_in">int</span> <span class="built_in">mid</span> = l +( r - l) / <span class="number">2</span>;</span><br><span class="line">       <span class="built_in">if</span> (check(<span class="built_in">mid</span>)) &#123;</span><br><span class="line">           //偏移r, 求第一个满足该条件的值</span><br><span class="line">           r = <span class="built_in">mid</span>;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           l = <span class="built_in">mid</span> + <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="寻找最后一个满足该条件的值"><a href="#寻找最后一个满足该条件的值" class="headerlink" title="寻找最后一个满足该条件的值"></a>寻找最后一个满足该条件的值</h2><p>当 check(mid) == true 调整的是 l 时：计算 mid 的方式应该为 mid = l + r + 1 &gt;&gt; 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;<span class="comment">//向上取整， +1 操作主要是为了避免发生「死循环」</span></span><br><span class="line">       <span class="keyword">if</span> (check(mid)) &#123;</span><br><span class="line">           <span class="comment">//偏移l, 求最后一个满足该条件的值</span></span><br><span class="line">           l = mid;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           r = mid - <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">二分查找</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>回溯</title>
    <link href="https://wuwawawa.github.io/posts/f92eff5d.html"/>
    <id>https://wuwawawa.github.io/posts/f92eff5d.html</id>
    <published>2023-08-02T04:06:11.000Z</published>
    <updated>2023-09-14T01:35:44.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="划分k个相等的子集"><a href="#划分k个相等的子集" class="headerlink" title="划分k个相等的子集"></a>划分k个相等的子集</h2><div class="tabs" id="a5be2cec-b383-4537-9ec2-3406ea64a6ae"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a5be2cec-b383-4537-9ec2-3406ea64a6ae-1"><i class="fas fa-seedling"></i>火柴拼正方形</button></li><li class="tab"><button type="button" data-href="#a5be2cec-b383-4537-9ec2-3406ea64a6ae-2"><i class="fas fa-leaf"></i>划分为k个相等的子集</button></li><li class="tab"><button type="button" data-href="#a5be2cec-b383-4537-9ec2-3406ea64a6ae-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#a5be2cec-b383-4537-9ec2-3406ea64a6ae-4"><i class="fas fa-tree"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a5be2cec-b383-4537-9ec2-3406ea64a6ae-1"><div class="tag link"><a class="link-card" title="473. 火柴拼正方形" href="https://leetcode.cn/problems/matchsticks-to-square/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">473. 火柴拼正方形</p><p class="url">https://leetcode.cn/problems/matchsticks-to-square/</p></div></a></div><p>你将得到一个整数数组 matchsticks ，其中 matchsticks[i] 是第 i 个火柴棒的长度。你要用 所有的火柴棍 拼成一个正方形。你 不能折断 任何一根火柴棒，但你可以把它们连在一起，而且每根火柴棒必须 使用一次 。</p><p>如果你能使这个正方形，则返回 true ，否则返回 false 。</p><div class="tabs" id="10b05bf4-7acc-4492-a4d8-1a859f0abe58"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#10b05bf4-7acc-4492-a4d8-1a859f0abe58-1"><i class="fas fa-cat"></i>解法一</button></li><li class="tab"><button type="button" data-href="#10b05bf4-7acc-4492-a4d8-1a859f0abe58-2"><i class="fas fa-horse"></i>解法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="10b05bf4-7acc-4492-a4d8-1a859f0abe58-1"><p>边界条件时不需要对每个桶是否都达到target进行判断。</p><p>若某个桶的长度小于target，那达到末尾时，就必然会有桶长度大于target。而这种情况不会进入下一次递归的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] matchsticks;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makesquare</span><span class="params">(<span class="type">int</span>[] _matchsticks)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(_matchsticks).sum();</span><br><span class="line">    <span class="keyword">if</span>(sum % <span class="number">4</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    target = sum/<span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    matchsticks = Arrays.stream(_matchsticks).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray();</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span> , <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> idx ,<span class="type">int</span>[] edges)</span>&#123;</span><br><span class="line">    <span class="comment">// 边界条件</span></span><br><span class="line">    <span class="keyword">if</span>(idx == matchsticks.length) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将当前的木棍放置到4个桶中</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">        edges[i] += matchsticks[idx];</span><br><span class="line">        <span class="keyword">if</span>(edges[i] &lt;= target &amp;&amp; dfs(idx + <span class="number">1</span>,edges))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        edges[i] -= matchsticks[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="10b05bf4-7acc-4492-a4d8-1a859f0abe58-2"><p>状态压缩+记忆化</p><p>使用<code>curSum + matchsticks[i] &lt;= side</code>和<code>int newSum = (curSum + matchsticks[i]) % side;</code></p><p>两种方式巧妙实现单边的增长以及当达到side时进行下一条边的选择。</p><p>当sum&lt;side时，sum会一直累积。当刚好达到side时，清0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> side; <span class="comment">// 边长</span></span><br><span class="line"><span class="type">int</span>[] cache;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] matchsticks;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">makesquare</span><span class="params">(<span class="type">int</span>[] _matchsticks)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(_matchsticks).sum();</span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">4</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    side = sum / <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 排序</span></span><br><span class="line">    matchsticks = Arrays.stream(_matchsticks).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray();</span><br><span class="line">    n = _matchsticks.length;</span><br><span class="line"></span><br><span class="line">    cache = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span> &lt;&lt; n];</span><br><span class="line">    cache[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> state, <span class="type">int</span> curSum)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache[state] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[state] == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (((state &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; curSum + matchsticks[i] &lt;= side) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newSum</span> <span class="operator">=</span> (curSum + matchsticks[i]) % side;</span><br><span class="line">            <span class="keyword">if</span> (dfs(state | (<span class="number">1</span> &lt;&lt; i), newSum)) &#123;</span><br><span class="line">                ans = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cache[state] = ans ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a5be2cec-b383-4537-9ec2-3406ea64a6ae-2"><p><div class="tag link"><a class="link-card" title="698. 火柴拼正方形" href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">698. 火柴拼正方形</p><p class="url">https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/</p></div>&lt;/a&gt;&lt;/div&gt;</p><p>给定一个整数数组 <code>nums</code> 和一个正整数 <code>k</code>，找出是否有可能把这个数组分成 <code>k</code> 个非空子集，其总和都相等。</p><p>同上一题写法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a5be2cec-b383-4537-9ec2-3406ea64a6ae-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a5be2cec-b383-4537-9ec2-3406ea64a6ae-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">回溯</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
