<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuckyBoy🥝</title>
  
  
  <link href="https://wuwawawa.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuwawawa.github.io/"/>
  <updated>2023-06-07T06:41:49.342Z</updated>
  <id>https://wuwawawa.github.io/</id>
  
  <author>
    <name>LuckyBoy🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis实战</title>
    <link href="https://wuwawawa.github.io/posts/1bd023c5.html"/>
    <id>https://wuwawawa.github.io/posts/1bd023c5.html</id>
    <published>2023-06-07T01:27:51.000Z</published>
    <updated>2023-06-07T06:41:49.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询缓存">查询缓存</h2><h3 id="为什么要使用缓存">为什么要使用缓存</h3><p>一句话:因为<span class='p green'>速度快好用</span></p><p>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降用户访问并发量带来的服务器读写压力</p><p>实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为&quot;避震器&quot;,系统是几乎撑不住的,所以企业会大量运用到缓存技术;</p><p>但是缓存也会增加代码复杂度和运营的成本:</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220523214414123.png" alt="image-20220523214414123" style="zoom:67%;" /><hr><h3 id="如何使用缓存">如何使用缓存</h3><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用</p><p>浏览器缓存：主要是存在于浏览器端的缓存</p><p>应用层缓存：可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存</p><p>数据库缓存：在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中</p><p>CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220523212915666.png" alt="image-20220523212915666" style="zoom:67%;" /><hr><h3 id="添加缓存示例">添加缓存示例</h3><div class="tabs" id="84f6d553-6ab6-4b83-b7b7-552490e051a5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#84f6d553-6ab6-4b83-b7b7-552490e051a5-1"><i class="fas fa-seedling"></i>原本操作</button></li><li class="tab"><button type="button" data-href="#84f6d553-6ab6-4b83-b7b7-552490e051a5-2"><i class="fas fa-leaf"></i>改进思路</button></li><li class="tab"><button type="button" data-href="#84f6d553-6ab6-4b83-b7b7-552490e051a5-3"><i class="fab fa-apple"></i>实现代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="84f6d553-6ab6-4b83-b7b7-552490e051a5-1"><p>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库那肯定慢咯，所以我们需要增加缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//这里是直接查询数据库</span></span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="84f6d553-6ab6-4b83-b7b7-552490e051a5-2"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1653322097736.png" alt="1653322097736" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="84f6d553-6ab6-4b83-b7b7-552490e051a5-3"><p>代码思路：如果缓存有，则直接返回，如果缓存不存在，则查询数据库，然后存入redis。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1653322190155.png" alt="1653322190155" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="缓存更新策略">缓存更新策略</h3><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p><p>内存淘汰：redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p><p>超时剔除：当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p><p>主动更新：我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">内存淘汰</th><th style="text-align:center">超时剔除</th><th style="text-align:center">主动更新</th></tr></thead><tbody><tr><td style="text-align:center">说明</td><td style="text-align:center">不用自己维护，利用Redis的內存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存。</td><td style="text-align:center">给缓存数据添加TTL时间，到期后自动删除缓存。下次查询时更新缓存。</td><td style="text-align:center">编写业务逻辑，在修改数据库的同时，更新缓存。</td></tr><tr><td style="text-align:center">一致性</td><td style="text-align:center">差</td><td style="text-align:center">一般</td><td style="text-align:center">好</td></tr><tr><td style="text-align:center">维护成本</td><td style="text-align:center">无</td><td style="text-align:center">底</td><td style="text-align:center">高</td></tr></tbody></table><p>业务场景：</p><p>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</p><p>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</p><hr><p>主动更新业务实现常见的有三种模式：</p><p>Cache Aside Pattern：由缓存的调用者，在更新数据库的同时更新缓存</p><p>Read/Write Through Pattern：缓存与数据库整合为一个服务， 由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题</p><p>Write Behind Caching Pattern：调用者只操作缓存，由其它线程异步的将缓存数据持久化到数据库，保证最终一致</p><p>一般情况下，我们使用最多的还是方案一：Cache Aside Pattern。</p><p>因此在编码过程中，我们还需要考虑几个问题</p><mark class="hl-label blue">删除缓存还是更新缓存？</mark> <ul><li><span class='p red'>更新缓存</span>：每次更新数据库都更新缓存，无效写操作较多❌</li><li><span class='p green'>删除缓存</span>：更新数据库时让缓存失效，查询时再更新缓存✅</li></ul><mark class="hl-label blue">如何保证缓存与数据库的操作的同时成功或失败？</mark> <ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等分布式事务方案</li></ul><mark class="hl-label blue">先操作缓存还是先操作数据库？</mark> <ul><li><span class='p red'>先删除缓存，再操作数据库</span>❌</li><li><span class='p green'>先操作数据库，再删除缓存</span>✅</li></ul><p>我们应当是先操作数据库，再删除缓存，原因在于，如果你选择第一种方案，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。</p><p>方案二同样可能发生不一致问题，当线程1查询时缓存刚好失效了，此时线程2过来更新数据库删除缓存，线程1再把旧数据写入缓存。但是这种情况相对来说出现的可能性比较低。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1653323595206.png" alt="1653323595206" style="zoom:67%;" /><mark class="hl-label blue">代码实现</mark> <div class="tabs" id="389b01db-8771-4ebc-a638-e6fb1484da0f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#389b01db-8771-4ebc-a638-e6fb1484da0f-1"><i class="fas fa-bug"></i>核心思路</button></li><li class="tab"><button type="button" data-href="#389b01db-8771-4ebc-a638-e6fb1484da0f-2"><i class="fas fa-cannabis"></i>设置redis缓存时添加过期时间</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="389b01db-8771-4ebc-a638-e6fb1484da0f-1"><p>核心思路如下：</p><p>修改ShopController中的业务逻辑，满足下面的需求：</p><p>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</p><p>根据id修改店铺时，先修改数据库，再删除缓存</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="389b01db-8771-4ebc-a638-e6fb1484da0f-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1653325871232.png" alt="1653325871232"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label blue">总结：缓存更新策略的最佳实践方案</mark> <p>1.低一致性需求：使用Redis自带的内存淘汰机制</p><p>2.高一致性需求：主动更新，并以超时剔除作为兜底方案</p><ul><li>读操作<ul><li>缓存命中直接返回</li><li>缓存未命中则查询数据库，并写入缓存，设定超时时间</li></ul></li><li>写操作<ul><li>先写数据库，然后删除缓存</li><li>要确保数据库与缓存操作的原子性</li></ul></li></ul><hr><h3 id="缓存穿透">缓存穿透</h3><hr><h3 id="缓存雪崩">缓存雪崩</h3><hr><h3 id="缓存击穿">缓存击穿</h3><hr><h3 id="缓存工具封装">缓存工具封装</h3><hr><hr><h2 id="优惠券秒杀">优惠券秒杀</h2><hr><hr><h2 id="分布式锁">分布式锁</h2><hr><hr><h2 id="分布式锁-redission">分布式锁-redission</h2><hr><hr><h2 id="秒杀优化">秒杀优化</h2><hr><hr><h2 id="Redis消息队列">Redis消息队列</h2><hr><hr><h2 id="点赞实现-sortedSet">点赞实现-sortedSet</h2><hr><hr><h2 id="好友关注-set">好友关注-set</h2><hr><hr><h2 id="附近商户-GEO">附近商户-GEO</h2><hr><hr><h2 id="用户签到-BitMap">用户签到-BitMap</h2><hr><hr><h2 id="UV统计-HyperLogLog">UV统计-HyperLogLog</h2>]]></content>
    
    
    <summary type="html">缓存、秒杀、点赞实现、共同关注、GEO、BitMap、HyperLogLog</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Redis" scheme="https://wuwawawa.github.io/tags/Redis/"/>
    
    <category term="数据库" scheme="https://wuwawawa.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="https://wuwawawa.github.io/posts/6dfcb629.html"/>
    <id>https://wuwawawa.github.io/posts/6dfcb629.html</id>
    <published>2023-06-06T01:14:58.000Z</published>
    <updated>2023-06-07T02:21:05.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis入门">Redis入门</h2><h3 id="什么是NoSQL">什么是NoSQL</h3><ul><li>NoSQL最常见的解释是&quot;<code>non-relational</code>&quot;， 很多人也说它是&quot;<span class='p green'>Not Only SQL</span>&quot;</li><li>NoSQL仅仅是一个概念，泛指<span class='p blue'>非关系型的数据库</span></li><li>区别于关系数据库，它们不保证关系数据的ACID特性</li><li>NoSQL是一项全新的数据库革命性运动，提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入</li><li>常见的NoSQL数据库有：<code>Redis</code>、<code>MemCache</code>、<code>MongoDB</code>等</li></ul><hr><h3 id="NoSQL与SQL的差异">NoSQL与SQL的差异</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">SQL</th><th style="text-align:center">NoSQL</th></tr></thead><tbody><tr><td style="text-align:center">数据结构</td><td style="text-align:center">结构化</td><td style="text-align:center">非结构化</td></tr><tr><td style="text-align:center">数据关联</td><td style="text-align:center">关联的</td><td style="text-align:center">无关联的</td></tr><tr><td style="text-align:center">查询方式</td><td style="text-align:center">SQL查询</td><td style="text-align:center">非SQL</td></tr><tr><td style="text-align:center">事务特性</td><td style="text-align:center">ACID</td><td style="text-align:center">BASE</td></tr><tr><td style="text-align:center">存储方式</td><td style="text-align:center">磁盘</td><td style="text-align:center">内存</td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">垂直</td><td style="text-align:center">水平</td></tr><tr><td style="text-align:center">使用场景</td><td style="text-align:center">1）数据结构固定<br>2）相关业务对数据安全性、一致性要求较高</td><td style="text-align:center">1）数据结构不固定<br>2）对一致性、安全性要求不高<br>3）对性能要求</td></tr></tbody></table><hr><h3 id="认识Redis">认识Redis</h3><blockquote><p>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p></blockquote><mark class="hl-label blue">Redis的特征：</mark> <ul><li>键值（<code>key-value</code>）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><hr><h3 id="单线程架构">单线程架构</h3><p>Redis使用了<span class='p blue'>单线程架构</span>和<span class='p green'>I/O多路复用模型</span>来实现高性能的内存数据库服务。</p><div class="tabs" id="6f10bb80-30b4-4dbd-9043-37cd961f9301"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6f10bb80-30b4-4dbd-9043-37cd961f9301-1"><i class="fas fa-award"></i>1</button></li><li class="tab"><button type="button" data-href="#6f10bb80-30b4-4dbd-9043-37cd961f9301-2"><i class="fas fa-baseball-ball"></i>2</button></li><li class="tab"><button type="button" data-href="#6f10bb80-30b4-4dbd-9043-37cd961f9301-3"><i class="fas fa-bone"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6f10bb80-30b4-4dbd-9043-37cd961f9301-1"><p>Redis 客户端与服务端的模型可以简化成下图, 每次客户端调用都经历了发送命令、执行命令、返回结果三个过程。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Redis%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Redis流程图" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f10bb80-30b4-4dbd-9043-37cd961f9301-2"><p>其中第2步是重点要讨论的，因为Redis 是单线程来处理命令的，所以一条命令从客户端达到服务端不会立刻被执行，所有命令都会进入一个队列中，然后逐个被执行。</p><p>发送命令、返回结果、命令排队肯定不像描述的这么简单， Redis使用了I/O多路复用技术来解决I/O的问题</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Redis%E5%91%BD%E4%BB%A4%E9%98%9F%E5%88%971.jpg" alt="Redis命令队列1" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f10bb80-30b4-4dbd-9043-37cd961f9301-3"><p>命令的执行顺序是不确定的，但是可以确定不会有两条命令被同时执行。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Redis%E5%91%BD%E4%BB%A4%E9%98%9F%E5%88%973.jpg" alt="Redis命令队列3" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <blockquote><p>为什么单线程还能这么快</p></blockquote><p>通常来讲，单线程处理能力要比多线程差，例如有10000斤货物，每辆车的运载能力是每次200斤，那么要50次才能完成，但是如果有50辆车，只要安排合理，只需要一次就可以完成任务。那么为什么Redis 使用单线程模型会达到每秒万级别的处理能力呢？可以将其归结为三点：</p><p>第一，纯内存访问， Redis 将所有数据放在内存中，内存的响应时长大约为100 纳秒，这是Redis达到每秒万级别访问的重要基础。</p><p>第二，非阻塞I/O, Redis 使用epoll作为I/O多路复用技术的实现，再加上Redis自身的事件处理模型将epoll中的连接、读写、关闭都转换为事件，不在网络I/O上浪费过多的时间。</p><p>第三，单线程避免了线程切换和竞态产生的消耗。</p><p>但是单线程会有一个问题：对于每个命令的执行时间是有要求的。如果某个命令执行过长，会造成其他命令的阻塞，对于Redis 这种高性能的服务来说是致命的，所以Redis 是面向快速执行场景的数据库。</p><hr><h3 id="Redis使用场景">Redis使用场景</h3><div class="tabs" id="afd4130e-07a4-4024-b30c-71235e734c38"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#afd4130e-07a4-4024-b30c-71235e734c38-1"><i class="fas fa-seedling"></i>缓存</button></li><li class="tab"><button type="button" data-href="#afd4130e-07a4-4024-b30c-71235e734c38-2"><i class="fas fa-leaf"></i>排行榜系统</button></li><li class="tab"><button type="button" data-href="#afd4130e-07a4-4024-b30c-71235e734c38-3"><i class="fab fa-apple"></i>计数器应用</button></li><li class="tab"><button type="button" data-href="#afd4130e-07a4-4024-b30c-71235e734c38-4"><i class="fas fa-tree"></i>社交网络</button></li><li class="tab"><button type="button" data-href="#afd4130e-07a4-4024-b30c-71235e734c38-5"><i class="fas fa-heartbeat"></i>消息队列系统</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="afd4130e-07a4-4024-b30c-71235e734c38-1"><p>缓存机制几乎在所有的大型网站都有使用，合理地使用缓存不仅可以加快数据的访问速度，而且能够有效地降低后端数据源的压力。Redis 提供了键值过期时间设置，并且也提供了灵活控制最大内存和内存溢出后的淘汰策略。可以这么说，一个合理的缓存设计能够为一个网站的稳定保驾护航。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="afd4130e-07a4-4024-b30c-71235e734c38-2"><p>排行榜系统几乎存在于所有的网站，例如按照热度排名的排行榜，按照发布时间的排行榜，按照各种复杂维度计算出的排行榜， Redis提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="afd4130e-07a4-4024-b30c-71235e734c38-3"><p>计数器在网站中的作用至关重要，例如视频网站有播放数、电商网站有浏览数，为了保证数据的实时性，每一次播放和浏览都要做加1 的操作，如果并发量很大对于传统关系型数据的性能是一种挑战。Redis 天然支持计数功能而且计数的性能也非常好，可以说是计数器系统的重要选择。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="afd4130e-07a4-4024-b30c-71235e734c38-4"><p>赞／踩、粉丝、共同好友／喜好、推送、下拉刷新等是社交网站的必备功能，由于社交网站访问量通常比较大，而且传统的关系型数据不太适合保存这种类型的数据， Redis 提供的数据结构可以相对比较容易地实现这些功能。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="afd4130e-07a4-4024-b30c-71235e734c38-5"><p>消息队列系统可以说是一个大型网站的必备基础组件，因为其具有业务解耦、非实时业务削峰等特性。Redi s 提供了发布订阅功能和阻塞队列的功能，虽然和专业的消息队列比还不够足够强大，但是对于一般的消息队列功能基本可以满足。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="Redis全局命令">Redis全局命令</h2><div class="tabs" id="56da306b-3cff-458e-b89a-0e52e5a6f25b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#56da306b-3cff-458e-b89a-0e52e5a6f25b-1"><i class="fas fa-cat"></i>键管理</button></li><li class="tab"><button type="button" data-href="#56da306b-3cff-458e-b89a-0e52e5a6f25b-2"><i class="fas fa-horse"></i>遍历键</button></li><li class="tab"><button type="button" data-href="#56da306b-3cff-458e-b89a-0e52e5a6f25b-3"><i class="fas fa-heartbeat"></i>键过期</button></li><li class="tab"><button type="button" data-href="#56da306b-3cff-458e-b89a-0e52e5a6f25b-4"><i class="fas fa-cookie-bite"></i>键的数据结构类型和内部编码</button></li><li class="tab"><button type="button" data-href="#56da306b-3cff-458e-b89a-0e52e5a6f25b-5"><i class="fas fa-dove"></i>数据库管理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="56da306b-3cff-458e-b89a-0e52e5a6f25b-1"><p><code>del key</code></p><p>del 是一个通用命令，无论值是什么数据结构类型， del 命令都可以将其删除</p><p>返回结果为成功删除键的个数，假设删除一个不存在的键，就会返回0</p><p><code>dbsize</code></p><p>dbsize 命令会返回当前数据库中键的总数。</p><p>dbsize命令在计算键总数时不会遍历所有键，而是直接获取Redis内置的键总数变量，所以dbsize命令的时间复杂度是0(1) 。</p><p>而keys命令会遍历所有键，所以它的时间复杂度是O(n), 当Redis保存了大量键时，线上环境禁止使用。</p><p><code>exists key</code></p><p>如果键存在则返回1不存在则返回0</p><p><code>rename key newkey</code></p><p>键重命名</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="56da306b-3cff-458e-b89a-0e52e5a6f25b-2"><p><code>keys pattern</code></p><p>全量遍历键，根据pattern匹配</p><p>＊代表匹配任意字符。会将所有的键输出，<span class='p red'>不建议在生产环境设备上使用</span></p><p>? 代表匹配一个字符</p><p>[] 代表pp部分字符</p><p><code>scan cursor [match pattern] [count number]</code></p><p>渐进式遍历</p><p>cursor是必需参数，实际上cursor 是一个游标，第一次遍历从0 开始，每次scan遍历完都会返回当前游标的值，直到游标值为0, 表示遍历结束。</p><p>match pattern是可选参数，它的作用的是做模式的匹配，这点和keys的模式匹配很像。</p><p>count number是可选参数,它的作用是表明每次要遍历的键个数，默认值是10, 此参数可以适当增大。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="56da306b-3cff-458e-b89a-0e52e5a6f25b-3"><p><code>expire key seconds</code></p><p>Redis 支持对键添加过期时间，当超过过期时间后，会自动删除</p><p><code>ttl key</code></p><p>ttl命令会返回键的剩余过期时间，它有3 种返回值：</p><ul><li>大于等于0 的整数：键剩余的过期时间。</li><li>-1: 键没设置过期时间。</li><li>-2: 键不存在</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="56da306b-3cff-458e-b89a-0e52e5a6f25b-4"><p><code>type key</code></p><p>返回键的数据结构类型，如果键不存在，则返回none</p><p><code>object encoding key</code></p><p>每种数据结构都有自己底层的内部编码实现，而且是多种实现，这样Redis会在合适的场景选择合适的内部编码。例如list数据结构包含了linkedlist和ziplist两种内部编码。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="56da306b-3cff-458e-b89a-0e52e5a6f25b-5"><p><code>select dbIndex</code></p><p>切换数据库。。Redis默认配置中是有16 个数据库，默认使用的就是0号数据库</p><p><code>FLUSHDB</code></p><p>删除当前数据库中的所有key</p><p><code>FLUSHALL</code></p><p>删除所有数据库中的所有key</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="Redis数据结构">Redis数据结构</h2><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样，不仅可以可以是字符串，而且还可以是具体的数据结构。</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220524205926164.png" alt="image-20220524205926164"></p><hr><hr><h2 id="String类型">String类型</h2><p>字符串类型是Redis最基础的数据结构。首先键都是字符串类型，而且其他几种数据结构都是在字符串类型基础上构建的。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增、自减操作</li><li><code>float</code>：浮点类型，可以做自增、自减操作</li></ul><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过512m.</p><hr><h3 id="常见命令">常见命令</h3><div class="tabs" id="2fc12848-ed04-4e93-a442-0ffca0b79ef7"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2fc12848-ed04-4e93-a442-0ffca0b79ef7-1"><i class="fas fa-cat"></i>设置值</button></li><li class="tab"><button type="button" data-href="#2fc12848-ed04-4e93-a442-0ffca0b79ef7-2"><i class="fas fa-horse"></i>获取值</button></li><li class="tab"><button type="button" data-href="#2fc12848-ed04-4e93-a442-0ffca0b79ef7-3"><i class="fas fa-dove"></i>自增值</button></li><li class="tab"><button type="button" data-href="#2fc12848-ed04-4e93-a442-0ffca0b79ef7-4"><i class="fas fa-dragon"></i>不常用命令</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2fc12848-ed04-4e93-a442-0ffca0b79ef7-1"><p><code>set key value [ex seconds] [px milliseconds] [nx|xx]</code></p><p>set命令有几个选项：</p><ul><li>ex seconds：为键设置秒级过期时间。</li><li>px milliseconds：为键设置毫秒级过期时间。</li><li>nx : 键必须不存在，才可以设置成功，用于添加。</li><li>xx：与nx相反，键必须存在，才可以设置成功， 用于更新。</li></ul><p>除了set选项， Redis 还提供了<code>setex</code>和<code>setnx</code>两个命令，它们的作用和ex和nx选项是一样的。</p><p><code>mset key value [key value ...]</code></p><p>批量设置值，通过<code>mset</code>命令可以一次性设置多个键值对。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2fc12848-ed04-4e93-a442-0ffca0b79ef7-2"><p><code>get key</code></p><p>如果要获取的键不存在，则返回nil(空)</p><p><code>mget key [key ...]</code></p><p>批量获取值，通过<code>mget</code>命令可以一次性获取多个键的值。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2fc12848-ed04-4e93-a442-0ffca0b79ef7-3"><p><code>incr key</code></p><p>incr命令用于对值做自增操作，返回结果分为三种情况：</p><ul><li>值不是整数，返回错误。</li><li>值是整数，返回自增后的结果。</li><li>键不存在，按照值为0 自增，返回结果为1 。</li></ul><p>除了incr命令，Redis提供了decr(自减)、incrby(自增指定数字)、decrby (自减指定数字)、incrbyfloat(自增浮点数)</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2fc12848-ed04-4e93-a442-0ffca0b79ef7-4"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>append key value </code></td><td>向字符串尾部追加值</td></tr><tr><td><code>strlen key</code></td><td>字符串长度</td></tr><tr><td><code>getset key value</code></td><td>设置值并返回键原来的值</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="内部编码">内部编码</h3><p>字符串类型的内部编码有3 种：</p><ul><li>int: 8 个字节的长整型。</li><li>embstr: 长度小于等于44的字符串。</li><li>raw: 大于44个字节的字符串。</li></ul><p>Redis 会根据当前值的类型和长度决定使用哪种内部编码实现。</p><div class="tabs" id="95fe8596-9b07-4151-8343-ec780819f209"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#95fe8596-9b07-4151-8343-ec780819f209-1"><i class="fas fa-seedling"></i>整数类型示例</button></li><li class="tab"><button type="button" data-href="#95fe8596-9b07-4151-8343-ec780819f209-2"><i class="fas fa-leaf"></i>短字符串示例</button></li><li class="tab"><button type="button" data-href="#95fe8596-9b07-4151-8343-ec780819f209-3"><i class="fab fa-apple"></i>长字符串示例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="95fe8596-9b07-4151-8343-ec780819f209-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 123</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> key1</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; object encoding key1</span><br><span class="line"><span class="string">&quot;int&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="95fe8596-9b07-4151-8343-ec780819f209-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 <span class="string">&quot;hello,world&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> key2</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; object encoding key2 </span><br><span class="line"><span class="string">&quot;embstr&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="95fe8596-9b07-4151-8343-ec780819f209-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key3 <span class="string">&quot;one string greater than 39 byte..............&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; object encoding key3</span><br><span class="line"><span class="string">&quot;raw&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; strlen key3</span><br><span class="line">(<span class="built_in">integer</span>) 45</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="使用场景">使用场景</h3><div class="tabs" id="e4babf27-43ae-4acf-be62-fad0bb243223"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e4babf27-43ae-4acf-be62-fad0bb243223-1"><i class="fas fa-cat"></i>缓存功能</button></li><li class="tab"><button type="button" data-href="#e4babf27-43ae-4acf-be62-fad0bb243223-2"><i class="fas fa-horse"></i>计数</button></li><li class="tab"><button type="button" data-href="#e4babf27-43ae-4acf-be62-fad0bb243223-3"><i class="fas fa-dove"></i>共享Session</button></li><li class="tab"><button type="button" data-href="#e4babf27-43ae-4acf-be62-fad0bb243223-4"><i class="fas fa-dragon"></i>限速</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e4babf27-43ae-4acf-be62-fad0bb243223-1"><p>Redis 作为缓存层， MySQL 作为存储层，绝大部分请求的数据都是从Redis中获取。由千Redis具有支撑高并发的特性，所以缓存通常能起到加速读写和降低后端压力的作用。</p><p>与 MySQL等关系型数据库不同的是，Redis没有命令空间， 而且也没有对键名有 强制要求（除了不能使用一些特殊字符）。 但设计合理的键名， 有利于防止键冲突，和项目的可维护性， 比较推荐的方式是使用 <code>&quot;业务名:对象名:id:[属性]</code> 作为键名（也可以不是分号）。</p><p>例如MySQL的数据库名为vs, 用户表名为user, 那么对应的键可以用<code>&quot;vs:user:1&quot;,&quot;vs:user:1:name&quot;</code>来表示， 如果当前Redis只被一个业务使用， 甚至可以去掉 “vs”。</p><p>如果键名比较长， 例如<code>&quot;user:{uid}:friends:messages:{mid}&quot;</code>, 可以在能描述键含义的前提下适当减少键的长度， 例如变为<code>&quot;u:{uid}:fr:m:{mid}&quot;</code>, 从而减少由于键过长的内存浪费。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e4babf27-43ae-4acf-be62-fad0bb243223-2"><p>许多应用都会使用Redis作为计数的基础工具， 它可以实现快速计数、 查询缓存的功能，同时数据可以异步落地到其他数据源。</p><p>例如视频播放数计系统就是使用Redis作为视频播放数计数的基础组件， 用户每播放一次视频， 相应的视频播放数就会自增1。</p><p>实际上一个真实的计数系统要考虑的问题会很多：防作弊、按照不同维度计数，数据持久化到底层数据源等。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e4babf27-43ae-4acf-be62-fad0bb243223-3"><p>一个分布式Web服务将用户的Session信息（例如用户登录信息）保存在各自服务器中，这样会造成一个问题，出千负载均衡的考虑，分布式服务会将用户的访问均衡到不同服务器上，用户刷新一次访问可能会发现需要重新登录，这个问题是用户无法容忍的。</p><p>为了解决这个问题，可以使用Redis将用户的Session进行集中管理，，在这种模式下只要保证Redis是高可用和扩展性的，每次用户更新或者查询登录信息都直接从Redis中集中获取。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e4babf27-43ae-4acf-be62-fad0bb243223-4"><p>很多应用出于安全的考虑，会在每次进行登录时，让用户输入手机验证码，从而确定是否是用户本人。但是为了短信接口不被频繁访问，会限制用户每分钟获取验证码的频率，例如一分钟不能超过5次。</p><p>一些网站限制一个IP 地址不能在一秒钟之内访间超过n 次也可以采用类似的思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="Hash类型">Hash类型</h2><p>几乎所有的编程语言都提供了哈希(hash) 类型，它们的叫法可能是哈希、字典、关联数组。在Redis 中，哈希类型是指键值本身又是一个键值对结构，形如<code>value=&#123;&#123;fi eldl,valuel&#125;,... &#123;fieldN,valueN&#125;&#125;</code>, Redis键值对和哈希类型二者的关系可以用下图来表示。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20220525001227167.png" alt="image-20220525001227167"  /><p>哈希类型中的映射关系叫作field-value, 注意这里的value是指field对应的值，不是键对应的值，请注意value在不同上下文的作用。</p><hr><h3 id="常见命令-2">常见命令</h3><div class="tabs" id="c3256886-0ff3-4b02-b127-c277beeba0ae"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c3256886-0ff3-4b02-b127-c277beeba0ae-1"><i class="fas fa-seedling"></i>设置值</button></li><li class="tab"><button type="button" data-href="#c3256886-0ff3-4b02-b127-c277beeba0ae-2"><i class="fas fa-leaf"></i>获取值</button></li><li class="tab"><button type="button" data-href="#c3256886-0ff3-4b02-b127-c277beeba0ae-3"><i class="fab fa-apple"></i>field</button></li><li class="tab"><button type="button" data-href="#c3256886-0ff3-4b02-b127-c277beeba0ae-4"><i class="fas fa-tree"></i>value</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c3256886-0ff3-4b02-b127-c277beeba0ae-1"><p><code>hset key field value</code></p><p>如果设置成功会返回1, 反之会返回0。此外Redis提供了hsetnx命令，它们的关系就像set和setnx命令一样，只不过作用域由键变为field 。</p><p><code>hmset key field value [field value....]</code></p><p>批量设置值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c3256886-0ff3-4b02-b127-c277beeba0ae-2"><p><code>hget key field</code></p><p>如果键或field不存在，会返回nil</p><p><code>hmget field [field ...]</code></p><p>批量获取值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c3256886-0ff3-4b02-b127-c277beeba0ae-3"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hdel key field [field ...]</code></td><td>hdel会删除一个或多个field，返回删除field的个数</td></tr><tr><td><code>hlen key</code></td><td>计算key中field个数</td></tr><tr><td><code>hexists key field</code></td><td>判断key中field是否存在</td></tr><tr><td><code>hkeys keys</code></td><td>获取key中所有field</td></tr><tr><td><code>hgetall key</code></td><td>获取key的索引field-value</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c3256886-0ff3-4b02-b127-c277beeba0ae-4"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>hvals key</code></td><td>获取key的所有value</td></tr><tr><td><code>hincrby key field</code></td><td>对应key-field-value递增整数</td></tr><tr><td><code>hincrbyfloat key field</code></td><td>对应key-field-value递增浮点数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="内部编码-2">内部编码</h3><p>哈希类型的内部编码有两种：</p><ul><li>listpack(压缩列表)：当哈希类型元素个数小于hash-max-listpack-entries配置（默认512 个）、同时所有值都小于hash-max-listpack－value 配置（默认64字节）时， Redis 会使用listpack作为哈希的内部实现，listpack使用更加紧凑的结构实现多个元素的连续存储，所以在节省内存方面比hashtable更加优秀。</li><li>hashtable(哈希表)：当哈希类型无法满足ziplist的条件时， Redis会使用hashtable作为哈希的内部实现，因为此时ziplist的读写效率会下降，而hashtable 的读写时间复杂度为0(1) 。</li></ul><div class="tabs" id="73731162-3585-43b0-9a3a-0f1ac9d26ced"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#73731162-3585-43b0-9a3a-0f1ac9d26ced-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#73731162-3585-43b0-9a3a-0f1ac9d26ced-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#73731162-3585-43b0-9a3a-0f1ac9d26ced-3"><i class="fas fa-dove"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="73731162-3585-43b0-9a3a-0f1ac9d26ced-1"><p>当field个数比较少且没有大的value 时，内部编码为listpack</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset hashkey f1 v1 f2 v2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> hashkey</span><br><span class="line"><span class="built_in">hash</span></span><br><span class="line">127.0.0.1:6379&gt; object encoding hashkey</span><br><span class="line"><span class="string">&quot;listpack&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73731162-3585-43b0-9a3a-0f1ac9d26ced-2"><p>当有value大千64 字节，内部编码会由listpack变为hashtable</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset hashkey f3 <span class="string">&quot;one string is bigger than 64 byte ............................................................&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; object encoding hashkey</span><br><span class="line"><span class="string">&quot;hashtable&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="73731162-3585-43b0-9a3a-0f1ac9d26ced-3"><p>当field个数超过512, 内部编码也会由listpack变为hashtabl</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1:6379</span>&gt; hset hashkey1 f4 v4 f5 v5 ......f513 v513</span><br><span class="line">ok</span><br><span class="line"><span class="number">127.0.0.1:6379</span>&gt; object encoding hashkey1</span><br><span class="line"><span class="string">&quot;hashtable&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="使用场景-2">使用场景</h3><p>相比于使用字符串序列化缓存用户信息，哈希类型变得更加直观，并且在更新操作上会更加便捷。可以将每个用户的id定义为键后缀，多对field-value 对应每个用户的属性。</p><p>到目前为止，我们已经能够用三种方法缓存用户信息，下面给出三种方案的实现方法和优缺点分析。</p><div class="tabs" id="93174b1e-5063-45a8-9951-073e9c3b1815"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#93174b1e-5063-45a8-9951-073e9c3b1815-1"><i class="fas fa-atom"></i>原生字符串类型</button></li><li class="tab"><button type="button" data-href="#93174b1e-5063-45a8-9951-073e9c3b1815-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#93174b1e-5063-45a8-9951-073e9c3b1815-3"><i class="fas fa-wind"></i>哈希类型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="93174b1e-5063-45a8-9951-073e9c3b1815-1"><p>每个属性一个键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> user:1:name <span class="string">&quot;tom&quot;</span></span><br><span class="line"><span class="built_in">set</span> user:1:age 23</span><br><span class="line"><span class="built_in">set</span> user:1:city <span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure><p>优点：简单直观，每个属性都支待更新操作。</p><p>缺点：占用过多的键，内存占用量较大，同时用户信息内聚性比较差，所以此种方案一般不会在生产环境使用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="93174b1e-5063-45a8-9951-073e9c3b1815-2"><p>序列化字符串类型：将用户信息序列化后用一个键保存。</p><p><code>set user:1 serialize(userInfo)</code></p><p>优点：简化编程，如果合理的使用序列化可以提高内存的使用效率。</p><p>缺点：序列化和反序列化有一定的开销，同时每次更新属性都需要把全部数据取出进行反序列化，更新后再序列化到Redis中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="93174b1e-5063-45a8-9951-073e9c3b1815-3"><p>每个用户属性使用一对field-value, 但是只用一个键保存。</p><p><code>hmset user:1 name &quot;tom&quot; age 23 city &quot;beijing&quot;</code></p><p>优点：简单直观，如果使用合理可以减少内存空间的使用。</p><p>缺点：要控制哈希在listpack和hashtable两种内部编码的转换， hashtable会消耗更多内存。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="List类型">List类型</h2><p>列表(list)类型是用来存储多个有序的字符串，列表中的每个字符串称为元素(element),一个列表最多可以存储2的32次方个元素。在Redis中，可以对列表两端插入(push) 和弹出(pop),还可以获取指定范围的元素列表、获取指定索引下标的元素等。列表是一种比较灵活的数据结构，它可以充当栈和队列的角色，在实际开发上有很多应用场景。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/new.gif" alt="new"></p><p>列表类型有两个特点：</p><p>第一、列表中的元素是有序的，这就意味着可以通过索引下标获取某个元素或者某个范围内的元素列表。</p><p>第二、列表中的元素可以是重复的。</p><hr><h3 id="常见命令-3">常见命令</h3><div class="tabs" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9a7ceafc-8a90-480c-a138-38d48c77fbcd-1"><i class="fas fa-seedling"></i>添加操作</button></li><li class="tab"><button type="button" data-href="#9a7ceafc-8a90-480c-a138-38d48c77fbcd-2"><i class="fas fa-leaf"></i>查找</button></li><li class="tab"><button type="button" data-href="#9a7ceafc-8a90-480c-a138-38d48c77fbcd-3"><i class="fab fa-apple"></i>删除</button></li><li class="tab"><button type="button" data-href="#9a7ceafc-8a90-480c-a138-38d48c77fbcd-4"><i class="fas fa-tree"></i>修改</button></li><li class="tab"><button type="button" data-href="#9a7ceafc-8a90-480c-a138-38d48c77fbcd-5"><i class="fas fa-heartbeat"></i>阻塞操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd-1"><p><code>rpush key value [value ....]</code></p><p>从右边插入元素</p><p><code>lpush key value [value]</code></p><p>从左边插入元素</p><p><code>linsert key before|after pivot value</code></p><p>linsert命令会从列表中找到等于pivot的元素，在其前(before)或者后(after) 插入一个新的元素value</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd-2"><p><code>lrange key start end </code></p><p>获取指定范围内的元素列表，start为0，end为-1是表示获取所有元素</p><p><code>lindex key index</code></p><p>获取列表指定索引下标的元素</p><p><code>llen key</code></p><p>获取列表长度</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd-3"><p><code>lpop key</code></p><p>从列表左侧弹出元素</p><p><code>rpop key</code></p><p>从列表右侧弹出</p><p><code>ltrim key start end</code></p><p>按照索引范围修剪列表</p><p><code>lrem key count value</code></p><p>删除指定元素</p><p>lrem 命令会从列表中找到等千value 的元素进行删除，根据count的不同分为三种情况：</p><ul><li>count＞0, 从左到右，删除最多count个元素</li><li>count&lt;0, 从右到左，删除最多count绝对值个元素</li><li>count=0,删除所有</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd-4"><p><code>lset key index newValue</code></p><p>修改指定索引下标的元素</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9a7ceafc-8a90-480c-a138-38d48c77fbcd-5"><p>阻塞式弹出如下：</p><p><code>blpop key [key . . .] timeout </code></p><p><code>brpop key [key . . .] timeout</code></p><p>blpop和brpop是lpop和rpop的阻塞版本，它们除了弹出方向不同，使用方法基本相同，所以下面以brpop命令进行说明， brpop命令包含两个参数：</p><p>[key . . .]  多个列表的键</p><p>timeout 阻塞时间（单位：秒）</p><p>1)列表为空：如果timeout =3 ，那么客户端要等到3秒后返回nil，如果timeout＝ 0，那么客户端一直阻塞等下去</p><p>2)列表为空：如果此期间添加了数据element，客户端立即返回</p><p>3)列表不为空：客户端会立即返回</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="内部编码-3">内部编码</h3><p>列表类型的内部编码有两种。</p><p>ziplist(压缩列表)： 当列表的元素个数小于list-max-ziplist-entries配置(默认512个)，同时列表中每个元素的值都小于list-max-ziplist－value 配置（默认64字节）时， Redis 会使用ziplist作为列表的内部实现。</p><p>linkedlist(链表)：当列表类型无法满足ziplist的条件时， Redis会使用linkedlist作为列表的内部实现。</p><p>Redis3.2 版本提供了quicklist内部编码，简单地说它是以一个ziplist为节点的linkedlist,它结合了ziplist和linkedlist两者的优势，为列表类型提供了一种更为优秀的内部编码实现。</p><hr><h3 id="使用场景-3">使用场景</h3><p>Redis 的lpush+brpop命令组合即可实现阻塞队列，生产者客户端使用lrpush 从列表左侧插入元素，多个消费者客户端使用brpop命令阻塞式的＂抢＂列表尾部的元素，多个客户端保证了消费的负载均衡和高可用性。</p><p>实际上列表的使用场景很多，在选择时可以参考以下口诀</p><p>lpush+lpop = Stack(栈)</p><p>lpush+rpop = Queue(队列)</p><p>lpush+ltrim = Capped Collection(有限集合)</p><p>lpush+brpop = Message Queue(消息队列)</p><hr><hr><h2 id="Set类型">Set类型</h2><p>集合(set)类型也是用来保存多个的字符串元素，但和列表类型不一样的是，集合中不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。一个集</p><p>合最多可以存储2的32次方- 1个元素。</p><p>Redis除了支持集合内的增删改查，同时还支持多个集合取交集、并集、差集，合理地使用好集合类型，能在实际开发中解决很多实际问题。</p><hr><h3 id="常见命令-4">常见命令</h3><div class="tabs" id="ae2f84aa-7721-4abd-bbcb-20d3a2f0410a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-1"><i class="fas fa-seedling"></i>添加元素</button></li><li class="tab"><button type="button" data-href="#ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-2"><i class="fas fa-leaf"></i>删除元素</button></li><li class="tab"><button type="button" data-href="#ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-3"><i class="fab fa-apple"></i>集合操作</button></li><li class="tab"><button type="button" data-href="#ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-4"><i class="fas fa-tree"></i>集合间操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-1"><p><code>sadd key element [element ...]</code></p><p>返回结果为添加成功的元素个数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-2"><p><code>srem key element [element ...]</code></p><p>返回结果为成功删除元素个数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-3"><p><code>smembers key</code></p><p>获取所有元素</p><p><code>scard key</code></p><p>计算元素个数,scard 的时间复杂度为0(1), 它不会遍历集合所有元素，而是直接用Redis内部的变量</p><p><code>sismember key element</code></p><p>判断元素是否在集合中，如果给定元素element在集合内返回1, 反之返回0</p><p><code>srandmember key [count]</code></p><p>随机从集合返回指定个数元素，[count]是可选参数，如果不写默认为1</p><p><code>spop key</code></p><p>从集合随机弹出元素,srandmember 和spop都是随机从集合选出元素，两者不同的是spop命令执行后，元素会从集合中删除，而srandmember 不会。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ae2f84aa-7721-4abd-bbcb-20d3a2f0410a-4"><p><code>sinter key [key ...]</code></p><p>求多个集合的交集</p><p><code>suinon key [key ...]</code></p><p>求多个集合的并集</p><p><code>sdiff key [key ...]</code></p><p>求多个集合的差集</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sinterstore</span> destination_key<span class="meta"> [key1 key2 ...]</span></span><br><span class="line"><span class="attribute">suinonstore</span> destination_key<span class="meta"> [key1 key2 ...]</span></span><br><span class="line"><span class="attribute">sdiffstore</span> destination_key<span class="meta"> [key1 key2 ...]</span></span><br></pre></td></tr></table></figure><p>将交集、并集、差集的结果保存到destination_key中</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="内部编码-4">内部编码</h3><p>集合类型的内部编码有两种：</p><ul><li>intset(整数集合)：当集合元素个数小于set-max-intset-entries配置（默认512 个），Redis 会使用intset作为集合的内部实现，从而减少内存的使用。</li><li>hashtable(哈希表)：当集合类型无法满足intset的条件时， Redis会使用hashtable作为集合的内部实现。</li></ul><p>当元素个数较少且都为整数时，内部编码为intset</p><p>当某个元素不为整数时，内部编码也会变为hashtable</p><p>当元素个数超过512 个，内部编码变为hashtable</p><hr><h3 id="使用场景-4">使用场景</h3><p>集合类型比较典型的使用场景是标签(tag)。例如一个用户可能对娱乐、体育比较感兴趣，另一个用户可能对历史、新闻比较感兴趣，这些兴趣点就是标签。有了这些数据就可以得到喜欢同一个标签的人，以及用户的共同喜好的标签，这些数据对于用户体验以及增强用户黏度比较重要。例如一个电子商务的网站会对不同标签的用户做不同类型的推荐，比如对数码产品比较感兴趣的人，在各个页面或者通过邮件的形式给他们推荐最新的数码产品，通常会为网站带来更多的利益。</p><hr><hr><h2 id="SortedSet类型">SortedSet类型</h2><p>有序集合相对于哈希、列表、集合来说会有一点点陌生，但既然叫有序集合，那么它和集合必然有着联系，它保留了集合不能有重复成员的特性，但不同的是，有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个分数(score） ，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><blockquote><p>有序集合中的元素不能重复，但是score 可以重复，就和一个班里的同学学号不能重复，但是考试成绩可以相同。</p></blockquote><h3 id="常见命令-5">常见命令</h3><div class="tabs" id="ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-1"><i class="fas fa-seedling"></i>添加成员</button></li><li class="tab"><button type="button" data-href="#ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-2"><i class="fas fa-leaf"></i>删除成员</button></li><li class="tab"><button type="button" data-href="#ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-3"><i class="fab fa-apple"></i>集合操作</button></li><li class="tab"><button type="button" data-href="#ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-4"><i class="fas fa-tree"></i>集合间操作</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-1"><p><code>zadd key score member [score member ...]</code></p><p>返回结果代表成功添加成员的个数</p><p>zadd 命令添加了nx 、xx 、ch 、incr 四个选项</p><p>• nx: member必须不存在，才可以设置成功，用于添加</p><p>• xx: member必须存在，才可以设置成功，用于更新</p><p>• ch: 返回此次操作后，有序集合元素和分数发生变化的个数</p><p>• incr：对score 做增加，相当于后面介绍的zincrby</p><p>有序集合相比集合提供了排序字段，但是也产生了代价， zadd 的时间复杂度为O(lo g(n)), sadd 的时间复杂度为0(1)。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-2"><p><code>zrem key member [member ...]</code></p><p>返回结果为成功删除的个数。</p><p><code>zremrangebyrank key start end</code></p><p>删除指定排名内的升序元素</p><p><code>zremrangebyscore key min max</code></p><p>删除指定分数范围的成员</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-3"><p><code>zcard key</code></p><p>计算成员个数</p><p><code>zscore key member</code></p><p>计算某个成员的分数</p><p><code>zincrby key increment member</code></p><p>增加成员的分数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange key start end [withscores]</span><br><span class="line">zrevrange key start end [withscores]</span><br></pre></td></tr></table></figure><p>返回指定排名范围的成员,有序集合是按照分值排名的， zran g e 是从低到高返回， zrevran g e 反之。下面代码</p><p>返回排名最低的是三个成员，如果加上w it hscores 选项，同时会返回成员的分数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure><p>计算成员的排名,zrank 是从分数从低到高返回排名， zrevrank 反之。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [withsocre] [<span class="built_in">limit</span> offset count]</span><br><span class="line">zrevrangebyscore key min max [withsocre] [<span class="built_in">limit</span> offset count]</span><br></pre></td></tr></table></figure><p>返回指定分数范围的成员,其中zrangebyscore按照分数从低到高返回，zrevrangebyscore反之,withscores选项会同时返回每个成员的分数。</p><p>[limit offset count]选项可以限制输出的起始位置和个数</p><p><code>zcount key min max </code></p><p>返回指定分数范围成员个数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ceb52e25-aef0-4aae-9d3b-c0c2a49b0cdf-4"><div class="tabs" id="ad595fb0-f098-427c-8472-85c3ecf2eedc"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ad595fb0-f098-427c-8472-85c3ecf2eedc-1"><i class="fas fa-cat"></i>导入数据</button></li><li class="tab"><button type="button" data-href="#ad595fb0-f098-427c-8472-85c3ecf2eedc-2"><i class="fas fa-horse"></i>交集</button></li><li class="tab"><button type="button" data-href="#ad595fb0-f098-427c-8472-85c3ecf2eedc-3"><i class="fas fa-dove"></i>并集</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ad595fb0-f098-427c-8472-85c3ecf2eedc-1"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">zadd</span> user:ranking:<span class="number">1</span> <span class="number">1</span> kris <span class="number">91</span> mike <span class="number">200</span> frank <span class="number">220</span> tim <span class="number">250</span> martin <span class="number">251</span> tom</span><br><span class="line"><span class="attribute">zadd</span> user:ranking:<span class="number">2</span> <span class="number">8</span> james <span class="number">77</span> mike <span class="number">625</span> martin <span class="number">888</span> tom</span><br></pre></td></tr></table></figure><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230606161459008.png" alt="image-20230606161459008" style="zoom:33%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ad595fb0-f098-427c-8472-85c3ecf2eedc-2"><p><code>zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</code></p><p>交集:这个命令参数较多，下面分别进行说明：</p><p>destination: 交集计算结果保存到这个键。</p><p>numkeys: 需要做交集计算键的个数。</p><p>key [key …]:需要做交集计算的键。</p><p>[weights weight [weight …]]:每个键的权重，在做交集计算时，每个键中的每个member 会将自己分数乘以这个权重，每个键的权重默认是1。</p><p>aggregate sum|min|max:计算成员交集后，分值可以按照sum和、min最小值、max最大值做汇总，默认值是sum 。</p><p><mark class="hl-label blue">示例</mark></p><p>下面操作对user:ranking:1和user:ranking:2做交集， weight和aggregate使用了默认配置，可以看到目标键user:ranking:inter对分值做了sum 操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zinterstore user:ranking:inter 2 user:ranking:1 user:ranking:2 </span><br><span class="line">zrange user:ranking:inter 0 -1 withscores </span><br><span class="line">1) <span class="string">&quot;mike&quot;</span></span><br><span class="line">2) <span class="string">&quot;168&quot;</span></span><br><span class="line">3) <span class="string">&quot;martin&quot;</span></span><br><span class="line">4) <span class="string">&quot;875&quot;</span></span><br><span class="line">5) <span class="string">&quot;tom&quot;</span></span><br><span class="line">6) <span class="string">&quot;1139&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ad595fb0-f098-427c-8472-85c3ecf2eedc-3"><p><code>zunionstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</code></p><p>参数和zinterstore是一致的，只不过是做并集计算</p><p><mark class="hl-label blue">示例</mark></p><p>下面操作对user:ranking:1和user:ranking:2做并集， weight和aggregate使用了默认配置，可以看到目标键user:ranking:union对分值做了sum操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zunionstore user:ranking:union 2 user:ranking:1 user:ranking:2 </span><br><span class="line">zrange user:ranking:union 0 -1 withscores </span><br><span class="line"> 1) <span class="string">&quot;kris&quot;</span></span><br><span class="line"> 2) <span class="string">&quot;1&quot;</span></span><br><span class="line"> 3) <span class="string">&quot;james&quot;</span></span><br><span class="line"> 4) <span class="string">&quot;8&quot;</span></span><br><span class="line"> 5) <span class="string">&quot;mike&quot;</span></span><br><span class="line"> 6) <span class="string">&quot;168&quot;</span></span><br><span class="line"> 7) <span class="string">&quot;frank&quot;</span></span><br><span class="line"> 8) <span class="string">&quot;200&quot;</span></span><br><span class="line"> 9) <span class="string">&quot;tim&quot;</span></span><br><span class="line">10) <span class="string">&quot;220&quot;</span></span><br><span class="line">11) <span class="string">&quot;martin&quot;</span></span><br><span class="line">12) <span class="string">&quot;875&quot;</span></span><br><span class="line">13) <span class="string">&quot;tom&quot;</span></span><br><span class="line">14) <span class="string">&quot;1139&quot;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="内部编码-5">内部编码</h3><p>有序集合类型的内部编码有两种：</p><p>ziplist(压缩列表)： 当列表的元素个数小于list-max-ziplist-entries配置(默认512个)，同时列表中每个元素的值都小于list-max-ziplist－value 配置（默认64字节）时， Redis 会使用ziplist作为有序的内部实现。</p><p>skiplist(跳表)：当无法满足ziplist的条件时， Redis会使用skiplist作为有序集合的内部实现，因为此时ziplist的读写效率会下降。</p><p>当元素个数较少且每个元素较小时，内部编码为ziplist</p><p>当元素个数超过128 个，内部编码变为skiplist</p><p>当某个元素大于64 字节时，内部编码也会变为hashtable:</p><hr><h3 id="使用场景-5">使用场景</h3><p>有序集合比较典型的使用场景就是排行榜系统。例如视频网站需要对用户上传的视频做排行榜，榜单的维度可能是多个方面的：按照时间、按照播放数量、按照获得的赞数。</p><p>使用赞数这个维度，记录每天用户上传视频的排行榜。主要需要实现以下4 个功能。</p><div class="tabs" id="6f561f11-7489-4c61-a554-c7bb7ac8838d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6f561f11-7489-4c61-a554-c7bb7ac8838d-1"><i class="fas fa-award"></i>添加用户赞数</button></li><li class="tab"><button type="button" data-href="#6f561f11-7489-4c61-a554-c7bb7ac8838d-2"><i class="fas fa-baseball-ball"></i>取消用户赞数</button></li><li class="tab"><button type="button" data-href="#6f561f11-7489-4c61-a554-c7bb7ac8838d-3"><i class="fas fa-bone"></i>展示获取赞数最多的十个用户</button></li><li class="tab"><button type="button" data-href="#6f561f11-7489-4c61-a554-c7bb7ac8838d-4"><i class="fas fa-anchor"></i>展示用户信息以及用户分数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6f561f11-7489-4c61-a554-c7bb7ac8838d-1"><p>例如用户mike上传了一个视频，并获得了3 个赞，可以使用有序集合的zadd和zincrby功能：</p><p><code>zadd user:ranking mike 3</code></p><p>如果之后再获得一个赞，可以使用zincrby</p><p><code>zincrby user:ranking mike 1</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f561f11-7489-4c61-a554-c7bb7ac8838d-2"><p>由于各种原因（例如用户注销、用户作弊）需要将用户删除，此时需要将用户从榜单中删除掉，可以使用zrem 。例如删除成员tom:</p><p><code>zrem user:ranking tom</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f561f11-7489-4c61-a554-c7bb7ac8838d-3"><p>此功能使用zrevrange命令实现：</p><p><code>zrevrangebyrank user:ranking 0 9</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f561f11-7489-4c61-a554-c7bb7ac8838d-4"><p>此功能将用户名作为键后缀，将用户信息保存在哈希类型中，至于用户的分数和排名可以使用zscore 和zrank 两个功能：</p><p><code>hgetall user:info:tom</code></p><p><code>zscore user:ranking mike</code></p><p><code>zrank user:ranking mike</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="SpringDataRedis客户端">SpringDataRedis客户端</h2><p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis。</p><p>官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p><ul><li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/UFlNIV0.png" alt=""></p><hr><h3 id="快速使用">快速使用</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单。</p><div class="tabs" id="d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-1"><i class="fas fa-award"></i>引入依赖</button></li><li class="tab"><button type="button" data-href="#d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-2"><i class="fas fa-baseball-ball"></i>配置Redis</button></li><li class="tab"><button type="button" data-href="#d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-3"><i class="fas fa-bone"></i>注入RedisTemplate</button></li><li class="tab"><button type="button" data-href="#d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-4"><i class="fas fa-anchor"></i>编写测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-3"><p>因为有了SpringBoot的自动装配，我们可以拿来就用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8e4ee01-5335-4db3-a2f8-7eaaf1b9e974-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 写入一条String数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;虎哥&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取string数据</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="自定义序列化">自定义序列化</h3><p>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/5FjtWk5.png" alt=""></p><p>缺点：</p><ul><li>可读性差</li><li>内存占用较大</li></ul><p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/XOAq3cN.png" alt=""></p><p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p><hr><h3 id="String序列化">String序列化</h3><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Ip9TKSY.png" style="zoom:67%;" /><p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了。</p><p>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/zXH6Qn6.png" style="zoom:67%;" /><p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="comment">// JSON序列化工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSaveUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;虎哥&quot;</span>, <span class="number">21</span>);</span><br><span class="line">    <span class="comment">// 手动序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">    <span class="comment">// 写入数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">    <span class="comment">// 手动反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Redis入门、常见命令、客户端</summary>
    
    
    
    <category term="数据库" scheme="https://wuwawawa.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Redis" scheme="https://wuwawawa.github.io/tags/Redis/"/>
    
    <category term="数据库" scheme="https://wuwawawa.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>IO流</title>
    <link href="https://wuwawawa.github.io/posts/7f134d07.html"/>
    <id>https://wuwawawa.github.io/posts/7f134d07.html</id>
    <published>2023-06-04T07:03:25.000Z</published>
    <updated>2023-06-05T08:39:06.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-IO概述">1. IO概述</h2><h3 id="1-1-什么是IO">1.1 什么是IO</h3><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><hr><h3 id="1-2-IO的分类">1.2 IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。</li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流，可以操作所有类型的文件。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流，只能操作纯文本文件。</li></ul><hr><h3 id="1-3-IO的流向说明图解">1.3 IO的流向说明图解</h3><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1_io.jpg" style="zoom:67%;" /><hr><h3 id="1-4-顶级父类们">1.4 顶级父类们</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"><strong>输入流</strong></th><th style="text-align:center">输出流</th></tr></thead><tbody><tr><td style="text-align:center"><strong><span class='p blue'>字节流</span></strong></td><td style="text-align:center">字节输入流<br /><strong><span class='p blue'>InputStream</span></strong></td><td style="text-align:center">字节输出流<br /><strong><span class='p blue'>OutputStream</span></strong></td></tr><tr><td style="text-align:center"><strong><span class='p green'>字符流</span></strong></td><td style="text-align:center">字符输入流<br /><strong><span class='p green'>Reader</span></strong></td><td style="text-align:center">字符输出流<br /><strong><span class='p green'>Writer</span></strong></td></tr></tbody></table><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605103133931.png" alt="image-20230605103133931" style="zoom: 50%;" /><hr><hr><h2 id="2-字节流">2. 字节流</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以<span class='p blue'>二进制数字</span>的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><hr><h3 id="2-1-字节输出流-OutputStream">2.1 字节输出流[OutputStream]</h3><p><code>java.io.OutputStream </code>抽象类是表示<span class='p blue'>字节输出流</span>的所有类的<span class='p green'>超类</span>，将指定的字节信息写出到目的地。它定义了字节输出流的<strong>基本共性功能方法</strong>。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>public void close()</code></td><td style="text-align:left">关闭此输出流并释放与此流相关联的任何系统资源</td></tr><tr><td style="text-align:left"><code>public void flush() </code></td><td style="text-align:left">刷新此输出流并强制任何缓冲的输出字节被写出</td></tr><tr><td style="text-align:left"><code>public void write(byte[] b)</code></td><td style="text-align:left">将 b.length字节从指定的字节数组写入此输出流</td></tr><tr><td style="text-align:left"><code>public void write(byte[] b, int off, int len)</code></td><td style="text-align:left">从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流</td></tr><tr><td style="text-align:left"><code>public abstract void write(int b)</code></td><td style="text-align:left">将指定的字节输出流</td></tr></tbody></table><p>小贴士：</p><blockquote><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><hr><h3 id="2-2-FileOutputStream类">2.2 FileOutputStream类</h3><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream </code>类是文件输出流，用于将数据写出到文件。</p><hr><h4 id="构造方法">构造方法</h4><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。</p><p>该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><p>如果该父级路径不存在，则会抛异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="写出字节数据">写出字节数据</h4><div class="tabs" id="21c1247c-49c1-4bc8-b28c-26f07175856d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#21c1247c-49c1-4bc8-b28c-26f07175856d-1"><i class="fas fa-seedling"></i>写出字节</button></li><li class="tab"><button type="button" data-href="#21c1247c-49c1-4bc8-b28c-26f07175856d-2"><i class="fas fa-leaf"></i>写出字节数组</button></li><li class="tab"><button type="button" data-href="#21c1247c-49c1-4bc8-b28c-26f07175856d-3"><i class="fab fa-apple"></i>写出指定长度字节数组</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="21c1247c-49c1-4bc8-b28c-26f07175856d-1"><p><code>write(int b)</code> 方法，每次可以写出一个字节数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure><p>小贴士：</p><blockquote><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="21c1247c-49c1-4bc8-b28c-26f07175856d-2"><p><code>write(byte[] b)</code>，每次可以写出数组中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] b = <span class="string">&quot;黑马程序员&quot;</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//黑马程序员</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="21c1247c-49c1-4bc8-b28c-26f07175856d-3"><p><code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">//cd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="数据追加续写">数据追加续写</h4><p>每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。</li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。</li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>，<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//文件操作前：cd</span></span><br><span class="line"><span class="comment">//文件操作后：cdabcde</span></span><br></pre></td></tr></table></figure><hr><h4 id="写出换行">写出换行</h4><p>Windows系统里，换行符号是<code>\r\n</code> 。以指定是否追加续写了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FOSWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;fos.txt&quot;</span>);  </span><br><span class="line">      <span class="comment">// 定义字节数组</span></span><br><span class="line">      <span class="type">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">      <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">          <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul><hr><hr><h3 id="2-3-字节输入流-InputStream">2.3 字节输入流[InputStream]</h3><p><code>java.io.InputStream </code>抽象类是表示<span class='p blue'>字节输入流</span>的所有类的<span class='p green'>超类</span>，可以读取字节信息到内存中。它定义了字节输入流的<strong>基本共性功能方法</strong>。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public void close()</code></td><td>关闭此输入流并释放与此流相关联的任何系统资源</td></tr><tr><td><code>public abstract int read()</code></td><td>从输入流读取数据的下一个字节</td></tr><tr><td><code>public int read(byte[] b)</code></td><td>从输入流中读取一些字节数，并将它们存储到字节数组 b中</td></tr></tbody></table><hr><h3 id="2-4-FileInputStream类">2.4 FileInputStream类</h3><p><code>java.io.FileInputStream </code>类是文件输入流，从文件中读取字节。</p><hr><h4 id="构造方法-2">构造方法</h4><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileInputStreamConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="读取字节数据">读取字节数据</h4><div class="tabs" id="de55a6fe-5f85-42d2-8091-b9d3495e2f38"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#de55a6fe-5f85-42d2-8091-b9d3495e2f38-1"><i class="fas fa-cat"></i>读取字节</button></li><li class="tab"><button type="button" data-href="#de55a6fe-5f85-42d2-8091-b9d3495e2f38-2"><i class="fas fa-horse"></i>使用字节数组读取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="de55a6fe-5f85-42d2-8091-b9d3495e2f38-1"><p><code>read</code>方法，每次可以读取一个字节的数据，<span class='p red'>自动提升为int类型</span>，读取到文件末尾，返回`-1</p><p><mark class="hl-label blue">循环读取方式</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="de55a6fe-5f85-42d2-8091-b9d3495e2f38-2"><p><code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;read.txt&quot;</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="2-5-字节流练习-图片复制">2.5 字节流练习:图片复制</h3><mark class="hl-label blue">复制原理图解</mark> <p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2_copy.jpg" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Copy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 指定数据源</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/fortune/Downloads/test.png&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2 指定目的地</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test_copy.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.读写数据</span></span><br><span class="line">        <span class="comment">// 2.1 定义数组</span></span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 2.2 定义长度</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 2.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.4 写出数据</span></span><br><span class="line">            fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">小贴士-流的关闭原则</mark> <p>先开后关，后开先关</p><hr><hr><h2 id="3-字符编码和字符集">3 字符编码和字符集</h2><h3 id="字符编码">字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<span class='p blue'>编码</span> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<span class='p green'>解码</span> 。</p><p>比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p>编码:字符(能看懂的)–字节(看不懂的)</p><p>解码:字节(看不懂的)–&gt;字符(能看懂的)</p><p>字符编码<code>Character Encoding</code> : 就是一套自然语言的字符与二进制数之间的对应规则。</p><p>编码表:生活中文字和计算机中二进制的对应规则</p><h3 id="字符集">字符集</h3><p>字符集 <code>Charset</code>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1_charset.jpg" alt=""></p><p>可见，当指定了<span class='p blue'>编码</span>，它所对应的<span class='p green'>字符集</span>自然就指定了，所以<span class='p blue'>编码</span>才是我们最终要关心的。</p><ul><li>ASCII字符集 ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li>ISO-8859-1字符集：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li>GBxxx字符集：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li>GB2312：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的&quot;全角&quot;字符，而原来在127号以下的那些就叫&quot;半角&quot;字符了。</li><li>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li>GB18030：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li>Unicode字符集 ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。</li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><div class="tabs" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-1"><i class="fas fa-cat"></i>ASCII</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-2"><i class="fas fa-dragon"></i>GBK</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-3"><i class="fas fa-horse"></i>GBK-英文</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-4"><i class="fas fa-dove"></i>GBK-中文</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-5"><i class="fas fa-heartbeat"></i>练习1</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-6"><i class="fas fa-cookie-bite"></i>Unicode</button></li><li class="tab"><button type="button" data-href="#184ab7b2-45a9-47d5-b04c-fa10b15e6949-7"><i class="fas fa-seedling"></i>练习2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605105932374.png" alt="image-20230605105932374" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605110521924.png" alt="image-20230605110521924"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-3"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605110159762.png" alt="image-20230605110159762" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-4"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605110902419.png" alt="image-20230605110902419" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-5"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605110938055.png" alt="image-20230605110938055" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-6"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605111250559.png" alt="image-20230605111250559" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605111345585.png" alt="image-20230605111345585" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="184ab7b2-45a9-47d5-b04c-fa10b15e6949-7"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605111953146.png" alt="image-20230605111953146"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="编码引出的问题">编码引出的问题</h3><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E:\\File_GBK.txt&quot;</span>);</span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><hr><h3 id="为什么会出现乱码">为什么会出现乱码</h3><div class="tabs" id="772e38d1-bb09-4f2e-b77a-e4f2ea15ea94"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#772e38d1-bb09-4f2e-b77a-e4f2ea15ea94-1"><i class="fas fa-atom"></i>读取数据时未读完整个汉字</button></li><li class="tab"><button type="button" data-href="#772e38d1-bb09-4f2e-b77a-e4f2ea15ea94-2"><i class="far fa-sun"></i>编码和解码时的方式不统一</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="772e38d1-bb09-4f2e-b77a-e4f2ea15ea94-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605112545784.png" alt="image-20230605112545784" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="772e38d1-bb09-4f2e-b77a-e4f2ea15ea94-2"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605112647860.png" alt="image-20230605112647860" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="如何避免乱码">如何避免乱码</h3><ol><li>不要用字节流读取文本文件</li><li>编码解码时使用同一个码表，同一个编码方式</li></ol><hr><h3 id="Java中编码与解码">Java中编码与解码</h3><table><thead><tr><th>String类中方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public byte[] geyBytes()</code></td><td>使用默认方式进行编码</td></tr><tr><td><code>public byte[] getBytes(String charsetName)</code></td><td>使用指定方式进行编码</td></tr><tr><td><code>String(byte[] bytes)</code></td><td>使用默认方式进行解码</td></tr><tr><td><code>String(byte[] bytes, String charsetName)</code></td><td>使用指定方式进行解码</td></tr></tbody></table><hr><hr><h2 id="4-字符流">4. 字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><span class='p red'>字符流的底层其实就是字节流</span><p>字符流= 字节流+字符集</p><span class='p green'>特点</span><p>输入流：一次读一个字节，遇到中文时，一次读多个字节</p><span class='p blue'>使用场景</span><p>对于纯文本文件进行读写操作</p><hr><h3 id="4-1-字符输入流-Reader">4.1 字符输入流[Reader]</h3><p><code>java.io.Reader</code>抽象类是表示用于读取<span class='p blue'>字符流</span>的所有类的<span class='p green'>字符流</span>，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>public void close()</code></td><td style="text-align:left">关闭此流并释放与此流相关联的任何系统资源</td></tr><tr><td style="text-align:left"><code>public int read()</code></td><td style="text-align:left">从输入流读取一个字符</td></tr><tr><td style="text-align:left"><code>public int read(char[] cbuf)</code></td><td style="text-align:left">从输入流中读取一些字符，并将它们存储到字符数组 cbuf中</td></tr></tbody></table><h3 id="4-2-FileReader类">4.2 FileReader类</h3><p><code>java.io.FileReader </code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><ol><li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。idea中UTF-8</p></li><li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p></li></ol><hr><h4 id="构造方法-3">构造方法</h4><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。</li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReaderConstructor</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="读取字符数据">读取字符数据</h4><p>字符流的底层也是字节流，默认也是一个字节一个字节的读取的。</p><p>如果遇到中文就会一次读取多个，GBK一次读两个字节，UTF-8一次读三个字节</p><div class="tabs" id="b7b8e42e-fb85-44ea-96a1-96a262669edd"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b7b8e42e-fb85-44ea-96a1-96a262669edd-1"><i class="fas fa-atom"></i>读取字符</button></li><li class="tab"><button type="button" data-href="#b7b8e42e-fb85-44ea-96a1-96a262669edd-2"><i class="far fa-sun"></i>使用字符数组读取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b7b8e42e-fb85-44ea-96a1-96a262669edd-1"><p><code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code></p><p><mark class="hl-label blue">需要强转</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="type">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">黑</span><br><span class="line">马</span><br><span class="line">程</span><br><span class="line">序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b7b8e42e-fb85-44ea-96a1-96a262669edd-2"><p><code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code></p><p><mark class="hl-label blue">不需要强转</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FISRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;read.txt&quot;</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="type">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h3 id="4-3-字符输出流-Writer">4.3 字符输出流[Writer]</h3><p><code>java.io.Writer </code>抽象类是表示用于<span class='p blue'>写出字符流</span>的所有类的<span class='p green'>超类</span>，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void write(int c)</code></td><td>写入单个字符</td></tr><tr><td><code>void write(char[] cbuf) </code></td><td>写入字符数组</td></tr><tr><td><code>abstract  void write(char[] cbuf, int off, int len) </code></td><td>写入字符数组的某一部分,off数组的开始索引,len写的字符个数</td></tr><tr><td><code>void write(String str) </code></td><td>写入字符串</td></tr><tr><td><code>void write(String str, int off, int len)</code></td><td>写入字符串的某一部分,off字符串的开始索引,len写的字符个数</td></tr><tr><td><code>void flush() </code></td><td>刷新该流的缓冲</td></tr><tr><td><code>void close()</code></td><td>关闭此流，但要先刷新它</td></tr></tbody></table><hr><h3 id="4-4-FileWriter类">4.4 FileWriter类</h3><p><code>java.io.FileWriter </code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><hr><h4 id="构造方法-4">构造方法</h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。</li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriterConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="写出字符数据">写出字符数据</h4><div class="tabs" id="e6d3229b-770e-460b-8f25-294467efdc76"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e6d3229b-770e-460b-8f25-294467efdc76-1"><i class="fas fa-award"></i>写出字符</button></li><li class="tab"><button type="button" data-href="#e6d3229b-770e-460b-8f25-294467efdc76-2"><i class="fas fa-baseball-ball"></i>写出字符数组</button></li><li class="tab"><button type="button" data-href="#e6d3229b-770e-460b-8f25-294467efdc76-3"><i class="fas fa-bone"></i>写出字符串</button></li><li class="tab"><button type="button" data-href="#e6d3229b-770e-460b-8f25-294467efdc76-4"><i class="fas fa-anchor"></i>续写和换行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e6d3229b-770e-460b-8f25-294467efdc76-1"><p><code>write(int b)</code> 方法，每次可以写出一个字符数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">&#x27;C&#x27;</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e6d3229b-770e-460b-8f25-294467efdc76-2"><p><code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="string">&quot;黑马程序员&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(chars); <span class="comment">// 黑马程序员</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e6d3229b-770e-460b-8f25-294467efdc76-3"><p><code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出字符数组</span></span><br><span class="line">        fw.write(msg); <span class="comment">//黑马程序员</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写出从索引2开始，2个字节。索引2是&#x27;程&#x27;，两个字节，也就是&#x27;程序&#x27;。</span></span><br><span class="line">        fw.write(msg, <span class="number">2</span>, <span class="number">2</span>);<span class="comment">// 程序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e6d3229b-770e-460b-8f25-294467efdc76-4"><p>操作类似于FileOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>，<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出换行</span></span><br><span class="line">        fw.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">黑马 </span><br><span class="line">程序员</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h4 id="关闭和刷新">关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close </code>: 先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FWWrite</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">&#x27;刷&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">&#x27;新&#x27;</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">&#x27;关&#x27;</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">&#x27;闭&#x27;</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">小贴士</mark> <p>即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p><p>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p><hr><hr><hr><h2 id="5-IO异常的处理">5. IO异常的处理</h2><div class="tabs" id="336c0b22-4fcd-45ed-a6cd-98e737540fa5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#336c0b22-4fcd-45ed-a6cd-98e737540fa5-1"><i class="fas fa-bug"></i>JDK7前处理</button></li><li class="tab"><button type="button" data-href="#336c0b22-4fcd-45ed-a6cd-98e737540fa5-2"><i class="fas fa-cannabis"></i>JDK7的处理</button></li><li class="tab"><button type="button" data-href="#336c0b22-4fcd-45ed-a6cd-98e737540fa5-3"><i class="fas fa-candy-cane"></i>JDK9的改进</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="336c0b22-4fcd-45ed-a6cd-98e737540fa5-1"><p><code>try...catch...finally</code> 代码块，处理异常部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandleException1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">&quot;黑马程序员&quot;</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="literal">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="336c0b22-4fcd-45ed-a6cd-98e737540fa5-2"><p><code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><p>原理：实现了AutoClosable接口，特定的情况下，可以自动释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句，如果多个,使用<span class="string">&#x27;;&#x27;</span>隔开) &#123;</span><br><span class="line"><span class="comment">// 读写数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandleException2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> ( <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;fw.txt&quot;</span>); ) &#123;</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">&quot;黑马程序员&quot;</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="336c0b22-4fcd-45ed-a6cd-98e737540fa5-3"><p><code>try-with-resource</code> 的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被final修饰的对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Resource</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(<span class="string">&quot;resource1&quot;</span>);</span><br><span class="line"><span class="comment">// 普通对象</span></span><br><span class="line"><span class="type">Resource</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>(<span class="string">&quot;resource2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入方式：直接引入</span></span><br><span class="line"><span class="keyword">try</span> (resource1; resource2) &#123;</span><br><span class="line">     <span class="comment">// 使用对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TryDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;in.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;out.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 引入到try中</span></span><br><span class="line">        <span class="keyword">try</span> (fr; fw) &#123;</span><br><span class="line">            <span class="comment">// 定义变量</span></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            <span class="keyword">while</span> ((b = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 写出数据</span></span><br><span class="line">                fw.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="6-综合练习">6. 综合练习</h2><h3 id="6-1-拷贝文件夹">6.1 拷贝文件夹</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyDir</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//拷贝一个文件夹，考虑子文件夹</span></span><br><span class="line">        <span class="comment">//1.创建对象表示数据源</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/fortune/Daily/论文汇报&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建对象表示目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/fortune/Daily/未命名文件夹&quot;</span>);</span><br><span class="line">        <span class="comment">//3.调用方法开始拷贝</span></span><br><span class="line">        copydir(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copydir</span><span class="params">(File src, File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        dest.mkdirs();</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="comment">//1.进入数据源</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                <span class="comment">//3.判断文件，拷贝</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,file.getName()));</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len = fis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//4.判断文件夹，递归</span></span><br><span class="line">                copydir(file, <span class="keyword">new</span> <span class="title class_">File</span>(dest,file.getName()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6-2-数字排序">6.2 数字排序</h3><p>文本文件中有以下的数据：<br>2-1-9-4-7-8<br>将文件中的数据进行排序，变成以下的数据：<br>1-2-4-7-8-9</p><div class="tabs" id="895d1d50-960d-47e9-946c-fd0e2c421614"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#895d1d50-960d-47e9-946c-fd0e2c421614-1"><i class="fas fa-seedling"></i>实现方式一</button></li><li class="tab"><button type="button" data-href="#895d1d50-960d-47e9-946c-fd0e2c421614-2"><i class="fas fa-leaf"></i>实现方式二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="895d1d50-960d-47e9-946c-fd0e2c421614-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取数据</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span>((ch = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sb.append((<span class="type">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        <span class="comment">//2.排序</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        String[] arrStr = str.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//2-1-9-4-7-8</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : arrStr) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//3.写出</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == list.size() - <span class="number">1</span>)&#123;</span><br><span class="line">                fw.write(list.get(i) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                fw.write(list.get(i) + <span class="string">&quot;-&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="895d1d50-960d-47e9-946c-fd0e2c421614-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.读取数据</span></span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span>((ch = fr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            sb.append((<span class="type">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">        <span class="comment">//2.排序</span></span><br><span class="line">        Integer[] arr = Arrays.stream(sb.toString()</span><br><span class="line">                                      .split(<span class="string">&quot;-&quot;</span>))</span><br><span class="line">            .map(Integer::parseInt)</span><br><span class="line">            .sorted()</span><br><span class="line">            .toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="comment">//3.写出</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;myio\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.toString(arr).replace(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> s.substring(<span class="number">1</span>, s.length() - <span class="number">1</span>);</span><br><span class="line">        fw.write(result);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="7-缓冲流">7. 缓冲流</h2><h3 id="7-1-概述">7.1 概述</h3><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605131840638.png" alt="image-20230605131840638" style="zoom:67%;" /><hr><h3 id="7-2-字节缓冲流">7.2 字节缓冲流</h3><h4 id="构造方法-5">构造方法</h4><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。</li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;bis.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;bos.txt&quot;</span>));</span><br></pre></td></tr></table></figure><hr><h4 id="效率测试">效率测试</h4><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><div class="tabs" id="9d5d2982-e909-4d73-9076-fa41f7f0fcb5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9d5d2982-e909-4d73-9076-fa41f7f0fcb5-1"><i class="fas fa-seedling"></i>基本流</button></li><li class="tab"><button type="button" data-href="#9d5d2982-e909-4d73-9076-fa41f7f0fcb5-2"><i class="fas fa-leaf"></i>缓冲流1</button></li><li class="tab"><button type="button" data-href="#9d5d2982-e909-4d73-9076-fa41f7f0fcb5-3"><i class="fab fa-apple"></i>缓冲流2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9d5d2982-e909-4d73-9076-fa41f7f0fcb5-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>)</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">十几分钟过去了...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9d5d2982-e909-4d73-9076-fa41f7f0fcb5-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line">                <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">            <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缓冲流复制时间:<span class="number">8016</span> 毫秒</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9d5d2982-e909-4d73-9076-fa41f7f0fcb5-3"><p>如何更快呢？使用数组的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">      <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdk9.exe&quot;</span>));</span><br><span class="line"> <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;copy.exe&quot;</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">          <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;缓冲流使用数组复制时间:&quot;</span>+(end - start)+<span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缓冲流使用数组复制时间:<span class="number">666</span> 毫秒</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h3 id="7-3-字符缓冲流">7.3 字符缓冲流</h3><h4 id="构造方法-6">构造方法</h4><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。</li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;br.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;bw.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="特有方法">特有方法</h4><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。</li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 跨平台的换行</li></ul><div class="tabs" id="76a42036-3cc4-4933-9695-5f84eea8bb52"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#76a42036-3cc4-4933-9695-5f84eea8bb52-1"><i class="fas fa-cat"></i>readLine</button></li><li class="tab"><button type="button" data-href="#76a42036-3cc4-4933-9695-5f84eea8bb52-2"><i class="fas fa-horse"></i>newLine</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="76a42036-3cc4-4933-9695-5f84eea8bb52-1"><p>readLine方法在读取的时候，一次读一整行，遇到回车换行结束</p><p>但是不会把回车换行读入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedReaderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">&quot;------&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="76a42036-3cc4-4933-9695-5f84eea8bb52-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferedWriterDemo</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  &#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;黑马&quot;</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;程序&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">&quot;员&quot;</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出效果:</span></span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="练习">练习</h4><p>请将文本信息恢复顺序。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><ol><li>逐行读取文本信息。</li><li>把读取到的文本存储到集合中</li><li>对集合中的文本进行排序</li><li>遍历集合，按顺序，写出文本信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建ArrayList集合,泛型使用String</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.创建BufferedReader对象,构造方法中传递FileReader对象</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;10_IO\\in.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//3.创建BufferedWriter对象,构造方法中传递FileWriter对象</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;10_IO\\out.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//4.使用BufferedReader对象中的方法readLine,以行的方式读取文本</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//5.把读取到的文本存储到ArrayList集合中</span></span><br><span class="line">            list.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.使用Collections集合工具类中的方法sort,对集合中的元素按照自定义规则排序</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                o1-o2:升序</span></span><br><span class="line"><span class="comment">                o2-o1:降序</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                <span class="comment">//依次比较集合中两个元素的首字母,升序排序</span></span><br><span class="line">                <span class="keyword">return</span> o1.charAt(<span class="number">0</span>)-o2.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//7.遍历ArrayList集合,获取每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="comment">//8.使用BufferedWriter对象中的方法wirte,把遍历得到的元素写入到文本中(内存缓冲区中)</span></span><br><span class="line">            bw.write(s);</span><br><span class="line">            <span class="comment">//9.写换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10.释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="8-转换流">8. 转换流</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605142703576.png" alt="image-20230605142703576" style="zoom:67%;" /><h3 id="8-1-InputStreamReader类">8.1 InputStreamReader类</h3><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h4 id="构造方法-7">构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>));</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;in.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="指定编码读取">指定编码读取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\file_gbk.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName));</span><br><span class="line">        <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FileName) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="type">int</span> read;</span><br><span class="line">        <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-2-OutputStreamWriter类">8.2 OutputStreamWriter类</h3><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><hr><h4 id="构造方法-8">构造方法</h4><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。</li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>));</span><br><span class="line"><span class="type">OutputStreamWriter</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>) , <span class="string">&quot;GBK&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="指定编码写出">指定编码写出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\out.txt&quot;</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">FileName2</span> <span class="operator">=</span> <span class="string">&quot;E:\\out2.txt&quot;</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FileName2),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">&quot;你好&quot;</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-3-转换流理解图解">8.3 转换流理解图解</h3><p><strong><span class='p blue'>转换流是字节与字符间的桥梁！</span></strong></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2_zhuanhuan.jpg" alt=""></p><hr><h3 id="8-4-练习">8.4 练习</h3><p>转换文件编码:将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.定义文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="string">&quot;file_gbk.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="string">&quot;file_utf8.txt&quot;</span>;</span><br><span class="line">        <span class="comment">// 2.创建流对象</span></span><br><span class="line">        <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile) , <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile));</span><br><span class="line">        <span class="comment">// 3.读写数据</span></span><br><span class="line">        <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="9-序列化流">9. 序列化流</h2><h3 id="9-1-概述">9.1 概述</h3><p>Java 提供了一种对象<span class='p blue'>序列化</span>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<span class='p red'>持久保存</span>了一个对象的信息。</p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<span class='p green'>反序列化</span>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/3_xuliehua.jpg" alt=""></p><hr><h3 id="9-2-ObjectOutputStream类">9.2 ObjectOutputStream类</h3><p><code>java.io.ObjectOutputStream </code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h4 id="构造方法-9">构造方法</h4><p><code>public ObjectOutputStream(OutputStream out) </code>： 创建一个指定OutputStream的ObjectOutputStream。</p><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br></pre></td></tr></table></figure><h4 id="序列化操作">序列化操作</h4><ol><li>一个对象要想序列化，必须满足两个条件:</li></ol><ul><li>该类必须实现<code>java.io.Serializable </code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="type">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>serializable接口里面是没有抽象方法，标记型接口</p><p>一旦实现了这个接口，那么就表示当前类可以被序列化</p><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeDemo</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    e.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    e.address = <span class="string">&quot;beiqinglu&quot;</span>;</span><br><span class="line">    e.age = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建序列化流对象</span></span><br><span class="line">          <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;employee.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        out.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;Serialized data is saved&quot;</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">Serialized data is saved</span><br></pre></td></tr></table></figure><hr><h3 id="9-3-ObjectInputStream类">9.3 ObjectInputStream类</h3><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。</p><hr><h4 id="构造方法-10">构造方法</h4><p><code>public ObjectInputStream(InputStream in) </code>： 创建一个指定InputStream的ObjectInputStream</p><hr><h4 id="反序列化操作">反序列化操作</h4><div class="tabs" id="2b2d4f12-f62d-4af1-abb9-0995ae782e8b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2b2d4f12-f62d-4af1-abb9-0995ae782e8b-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#2b2d4f12-f62d-4af1-abb9-0995ae782e8b-2"><i class="far fa-sun"></i>2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2b2d4f12-f62d-4af1-abb9-0995ae782e8b-1"><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><p><code>public final Object readObject ()</code> : 读取一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>   &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建反序列化流</span></span><br><span class="line">             <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;employee.txt&quot;</span>);</span><br><span class="line">             <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">             <span class="comment">// 读取一个对象</span></span><br><span class="line">             e = (Employee) in.readObject();</span><br><span class="line">             <span class="comment">// 释放资源</span></span><br><span class="line">             in.close();</span><br><span class="line">             fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">             <span class="comment">// 捕获其他异常</span></span><br><span class="line">             i.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line">        <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">             System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">             c.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">&quot;age: &quot;</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2b2d4f12-f62d-4af1-abb9-0995ae782e8b-2"><p>**另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。**发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ul><p><code>Serializable</code> 接口给需要序列化的类，根据成员变量、静态变量、方法，提供了一个序列版本号。</p><p><code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> eid; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addressCheck</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Address  check : &quot;</span> + name + <span class="string">&quot; -- &quot;</span> + address);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提前定固定好serialVersionUID，后面再添加字段也能反序列化。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <mark class="hl-label blue">细节汇总</mark> <p>①使用序列化流将对象写到文件时，需要让Javabean类实现Serializable接口。否则，会出现NotSerializableException异常</p><p>② 序列化流写到文件中的数据是不能修改的，一旦修改就无法再次读回来了</p><p>③序列化对象后，修改了Javabean类，再次反序列化，会不会有问题？</p><p>会出问题，会抛出InvalidclassException异常</p><p>解决方案：给Javabean类添加serialversionUID（序列号、版本号）</p><p>④如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢？</p><p>解决方案：给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</p><hr><h3 id="9-4-练习">9.4 练习</h3><p>序列化集合</p><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><blockquote><p>分析</p></blockquote><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><div class="tabs" id="3e032854-f16e-4c94-96cd-b7f5d280e943"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#3e032854-f16e-4c94-96cd-b7f5d280e943-1"><i class="fas fa-bug"></i>序列化</button></li><li class="tab"><button type="button" data-href="#3e032854-f16e-4c94-96cd-b7f5d280e943-2"><i class="fas fa-cannabis"></i>反序列化</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="3e032854-f16e-4c94-96cd-b7f5d280e943-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老王&quot;</span>, <span class="string">&quot;laow&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老张&quot;</span>, <span class="string">&quot;laoz&quot;</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;老李&quot;</span>, <span class="string">&quot;laol&quot;</span>);</span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line">ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="3e032854-f16e-4c94-96cd-b7f5d280e943-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;list.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list = (ArrayList&lt;Student&gt;) ois.readObject();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">    Student s=list.get(i);</span><br><span class="line">    System.out.println(s.getName()+<span class="string">&quot;--&quot;</span>+s.getPwd());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="10-打印流">10. 打印流</h2><h3 id="10-1-概述">10.1 概述</h3><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><p>打印流只有输出流，没有输入流。</p><p>打印流分为两种PrintStream字节打印流，PrintWriter字符打印流。</p><hr><h3 id="10-2-PrintStream类">10.2 PrintStream类</h3><h4 id="构造方法-11">构造方法</h4><p><code>public PrintStream(String fileName)  </code>： 使用指定的文件名创建一个新的打印流。</p><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>)；</span><br></pre></td></tr></table></figure><hr><h4 id="成员方法">成员方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>public void write(int b)</code></td><td>常规方法：规则和之前一样，将指定的字节写出</td></tr><tr><td><code>public void println(Xxx xx)</code></td><td>特有方法：打印任意数据，自动刷新，自动换行</td></tr><tr><td><code>public void print(Xxx xx)</code></td><td>特有方法：打印任意数据，不换行</td></tr><tr><td><code>public void printf(String format,Object... args)</code></td><td>特有方法：带有占位符的打印语句，不换行</td></tr></tbody></table><hr><h4 id="改变打印流向">改变打印流向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个&quot;小把戏&quot;，改变它的流向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取打印流的对象，此打印流在虚拟机启动的时候，由虚拟机创建，默认指向控制台</span></span><br><span class="line">    <span class="comment">//特殊的打印流，系统中的标准输出流</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用打印流中的方法println</span></span><br><span class="line">    <span class="comment">// 写出数据，自动换行，自动刷新</span></span><br><span class="line">    ps.println(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">ps1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(<span class="string">&quot;ps.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">    System.setOut(ps1);</span><br><span class="line">    <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">    System.out.println(<span class="number">97</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h3 id="10-3-PrintWriter类">10.3 PrintWriter类</h3><h4 id="构造方法-12">构造方法</h4><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605151225339.png" alt="image-20230605151225339" style="zoom:67%;" /><hr><h4 id="成员方法-2">成员方法</h4><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605151421711.png" alt="image-20230605151421711" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1.创建字符打印流对象</span></span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;myio\\a.txt&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//2.写出数据</span></span><br><span class="line">    pw.println(<span class="string">&quot;今天你终于来了&quot;</span>);</span><br><span class="line">    pw.print(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    pw.printf(<span class="string">&quot;%s爱上了%s&quot;</span>,<span class="string">&quot;阿珍&quot;</span>,<span class="string">&quot;阿强&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="10-4-总结">10.4 总结</h3><ol><li>打印流有几种？各有什么特点？</li></ol><p>有字节打印流和字符打印流两种</p><p>打印流不操作数据源，只能操作目的地</p><p>字节打印流：默认自动刷新，特有的println自动换行</p><p>字符打印流：自动刷新需要开启，特有的println自动换行</p><hr><hr><h2 id="11-压缩流和解压缩流">11. 压缩流和解压缩流</h2><p>压缩流：</p><p>​负责压缩文件或者文件夹</p><p>解压缩流：</p><p>​负责把压缩包中的文件和文件夹解压出来</p><div class="tabs" id="68286546-a105-4ead-9347-4855a17501be"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#68286546-a105-4ead-9347-4855a17501be-1"><i class="fas fa-cat"></i>压缩流1</button></li><li class="tab"><button type="button" data-href="#68286546-a105-4ead-9347-4855a17501be-2"><i class="fas fa-horse"></i>压缩流2</button></li><li class="tab"><button type="button" data-href="#68286546-a105-4ead-9347-4855a17501be-3"><i class="fas fa-dove"></i>解压缩流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="68286546-a105-4ead-9347-4855a17501be-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   压缩流</span></span><br><span class="line"><span class="comment">         *      需求：</span></span><br><span class="line"><span class="comment">         *          把D:\\a.txt打包成一个压缩包</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//1.创建File对象表示要压缩的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建File对象表示压缩包的位置</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>);</span><br><span class="line">        <span class="comment">//3.调用方法用来压缩</span></span><br><span class="line">        toZip(src,dest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   作用：压缩</span></span><br><span class="line"><span class="comment">    *   参数一：表示要压缩的文件</span></span><br><span class="line"><span class="comment">    *   参数二：表示压缩包的位置</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,<span class="string">&quot;a.zip&quot;</span>)));</span><br><span class="line">        <span class="comment">//2.创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹</span></span><br><span class="line">        <span class="comment">//参数：压缩包里面的路径</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;aaa\\bbb\\a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//3.把ZipEntry对象放到压缩包当中</span></span><br><span class="line">        zos.putNextEntry(entry);</span><br><span class="line">        <span class="comment">//4.把src文件中的数据写到压缩包当中</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            zos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        zos.closeEntry();</span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="68286546-a105-4ead-9347-4855a17501be-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *   压缩流</span></span><br><span class="line"><span class="comment">         *      需求：</span></span><br><span class="line"><span class="comment">         *          把D:\\aaa文件夹压缩成一个压缩包</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">//1.创建File对象表示要压缩的文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建File对象表示压缩包放在哪里（压缩包的父级路径）</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">destParent</span> <span class="operator">=</span> src.getParentFile();<span class="comment">//D:\\</span></span><br><span class="line">        <span class="comment">//3.创建File对象表示压缩包的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destParent,src.getName() + <span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//4.创建压缩流关联压缩包</span></span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dest));</span><br><span class="line">        <span class="comment">//5.获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">        toZip(src,zos,src.getName());<span class="comment">//aaa</span></span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        zos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   作用：获取src里面的每一个文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line"><span class="comment">    *   参数一：数据源</span></span><br><span class="line"><span class="comment">    *   参数二：压缩流</span></span><br><span class="line"><span class="comment">    *   参数三：压缩包内部的路径</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">toZip</span><span class="params">(File src,ZipOutputStream zos,String name)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1.进入src文件夹</span></span><br><span class="line">        File[] files = src.listFiles();</span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">                <span class="comment">//3.判断-文件，变成ZipEntry对象，放入到压缩包当中</span></span><br><span class="line">                <span class="type">ZipEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipEntry</span>(name + <span class="string">&quot;\\&quot;</span> + file.getName());<span class="comment">//aaa\\no1\\a.txt</span></span><br><span class="line">                zos.putNextEntry(entry);</span><br><span class="line">                <span class="comment">//读取文件中的数据，写到压缩包</span></span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span>((b = fis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    zos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fis.close();</span><br><span class="line">                zos.closeEntry();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.判断-文件夹，递归</span></span><br><span class="line">                toZip(file,zos,name + <span class="string">&quot;\\&quot;</span> + file.getName());</span><br><span class="line">                <span class="comment">//     no1            aaa   \\   no1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="68286546-a105-4ead-9347-4855a17501be-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZipStreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个File表示要解压的压缩包</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\aaa.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建一个File表示解压的目的地</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        unzip(src,dest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法用来解压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unzip</span><span class="params">(File src,File dest)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//解压的本质：把压缩包里面的每一个文件或者文件夹读取出来，按照层级拷贝到目的地当中</span></span><br><span class="line">        <span class="comment">//创建一个解压缩流用来读取压缩包中的数据</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">        <span class="comment">//要先获取到压缩包里面的每一个zipentry对象</span></span><br><span class="line">        <span class="comment">//表示当前在压缩包中获取到的文件或者文件夹</span></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span>((entry = zip.getNextEntry()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="keyword">if</span>(entry.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//文件夹：需要在目的地dest处创建一个同样的文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//文件：需要读取到压缩包中的文件，并把他存放到目的地dest文件夹中（按照层级目录进行存放）</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest,entry.toString()));</span><br><span class="line">                <span class="type">int</span> b;</span><br><span class="line">                <span class="keyword">while</span>((b = zip.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//写到目的地</span></span><br><span class="line">                    fos.write(b);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                <span class="comment">//表示在压缩包中的一个文件处理完毕了。</span></span><br><span class="line">                zip.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        zip.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="12-工具包">12. 工具包</h2><h3 id="Commons-io">Commons-io</h3><p>介绍：</p><p>​Commons是apache开源基金组织提供的工具包，里面有很多帮助我们提高开发效率的API</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605152735412.png" alt="image-20230605152735412" style="zoom:67%;" /><blockquote><p>常见方法</p></blockquote><div class="tabs" id="99950581-ffc1-4236-b396-1a2789bddfe2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#99950581-ffc1-4236-b396-1a2789bddfe2-1"><i class="fas fa-seedling"></i>FileUtils</button></li><li class="tab"><button type="button" data-href="#99950581-ffc1-4236-b396-1a2789bddfe2-2"><i class="fas fa-leaf"></i>IOUtils</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="99950581-ffc1-4236-b396-1a2789bddfe2-1"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605152935221.png" alt="image-20230605152935221"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="99950581-ffc1-4236-b396-1a2789bddfe2-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605153001115.png" alt="image-20230605153001115"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsIODemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          FileUtils类</span></span><br><span class="line"><span class="comment">                static void copyFile(File srcFile, File destFile)                   复制文件</span></span><br><span class="line"><span class="comment">                static void copyDirectory(File srcDir, File destDir)                复制文件夹</span></span><br><span class="line"><span class="comment">                static void copyDirectoryToDirectory(File srcDir, File destDir)     复制文件夹</span></span><br><span class="line"><span class="comment">                static void deleteDirectory(File directory)                         删除文件夹</span></span><br><span class="line"><span class="comment">                static void cleanDirectory(File directory)                          清空文件夹</span></span><br><span class="line"><span class="comment">                static String readFileToString(File file, Charset encoding)         读取文件中的数据变成成字符串</span></span><br><span class="line"><span class="comment">                static void write(File file, CharSequence data, String encoding)    写出数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            IOUtils类</span></span><br><span class="line"><span class="comment">                public static int copy(InputStream input, OutputStream output)      复制文件</span></span><br><span class="line"><span class="comment">                public static int copyLarge(Reader input, Writer output)            复制大文件</span></span><br><span class="line"><span class="comment">                public static String readLines(Reader input)                        读取数据</span></span><br><span class="line"><span class="comment">                public static void write(String data, OutputStream output)          写出数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* File src = new File(&quot;myio\\a.txt&quot;);</span></span><br><span class="line"><span class="comment">        File dest = new File(&quot;myio\\copy.txt&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.copyFile(src,dest);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*File src = new File(&quot;D:\\aaa&quot;);</span></span><br><span class="line"><span class="comment">        File dest = new File(&quot;D:\\bbb&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.copyDirectoryToDirectory(src,dest);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*File src = new File(&quot;D:\\bbb&quot;);</span></span><br><span class="line"><span class="comment">        FileUtils.cleanDirectory(src);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="hutool">hutool</h3><p>介绍：</p><p>​Commons是国人开发的开源工具包，里面有很多帮助我们提高开发效率的API</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230605153252059.png" alt="image-20230605153252059"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FileUtil类:</span></span><br><span class="line"><span class="comment">                file：根据参数创建一个file对象</span></span><br><span class="line"><span class="comment">                touch：根据参数创建文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                writeLines：把集合中的数据写出到文件中，覆盖模式。</span></span><br><span class="line"><span class="comment">                appendLines：把集合中的数据写出到文件中，续写模式。</span></span><br><span class="line"><span class="comment">                readLines：指定字符编码，把文件中的数据，读到集合中。</span></span><br><span class="line"><span class="comment">                readUtf8Lines：按照UTF-8的形式，把文件中的数据，读到集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                copy：拷贝文件或者文件夹</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* File file1 = FileUtil.file(&quot;D:\\&quot;, &quot;aaa&quot;, &quot;bbb&quot;, &quot;a.txt&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file1);//D:\aaa\bbb\a.txt</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        File touch = FileUtil.touch(file1);</span></span><br><span class="line"><span class="comment">        System.out.println(touch);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        File file2 = FileUtil.writeLines(list, &quot;D:\\a.txt&quot;, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file2);*/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/*  ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        list.add(&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">        File file3 = FileUtil.appendLines(list, &quot;D:\\a.txt&quot;, &quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(file3);*/</span></span><br><span class="line">        List&lt;String&gt; list = FileUtil.readLines(<span class="string">&quot;D:\\a.txt&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">字节流、字符流、其他流、工具包</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus原理解析</title>
    <link href="https://wuwawawa.github.io/posts/66abc186.html"/>
    <id>https://wuwawawa.github.io/posts/66abc186.html</id>
    <published>2023-06-01T00:53:00.000Z</published>
    <updated>2023-06-02T09:25:22.213Z</updated>
    
    <content type="html"><![CDATA[<p>在使用MyBatis Plus时，我们的Mapper接口继承父接口：BaseMapper。BaseMapper中定义了一系列CRUD方法，子接口可以继承。但是项目中并没有编写 CRUD SQL语句，为什么可以对数据库进行CRUD操作呢？ MyBatis Plus是怎么进行SQL 语句拼接的？</p><mark class="hl-label blue">分析</mark> <blockquote><p>Mybatis Plus如何感知要操作哪张表，哪些列呢？</p></blockquote><p>实体对象与表是可以进行映射的，在定义Mapper接口时，BaseMapper中明确指定了泛型为对应实体对象，那么可以借助反射获取实体类字节码对象。获取到字节码对象后，就可以通过反射获取实体类的类名和字段名。</p><blockquote><p>SQL拼接需要考虑哪些核心点？</p></blockquote><p>增：insert into 表(列1，列2 …) values(…)</p><p>删：delete from 表</p><p>改：update 表 set 列1 = xxx,列2 = xxx</p><p>查： select 列1，列2 from 表</p><ul><li>表名</li><li>列名</li></ul><p>二者对应MyBatis Plus中<code>TableInfo</code>类。</p><hr><hr><h2 id="从Springboot自动装配类开始">从Springboot自动装配类开始</h2><p>从 mybatis-plus 源码中的 spring.factories 文件中我们可以了解到，其加载入口为 <code>MybatisPlusAutoConfiguration</code>。 点进去这个类可以发现里面有几个核心的 bean:</p><div class="tabs" id="8ca46c6e-24e7-41ac-be61-0cafadeb370e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8ca46c6e-24e7-41ac-be61-0cafadeb370e-1"><i class="fas fa-seedling"></i>SqlSessionFactory</button></li><li class="tab"><button type="button" data-href="#8ca46c6e-24e7-41ac-be61-0cafadeb370e-2"><i class="fas fa-leaf"></i>SqlSessionTemplate</button></li><li class="tab"><button type="button" data-href="#8ca46c6e-24e7-41ac-be61-0cafadeb370e-3"><i class="fab fa-apple"></i>MapperScannerConfigurer</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8ca46c6e-24e7-41ac-be61-0cafadeb370e-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// mybatisplus 重写的 SqlSessionFactoryBean</span></span><br><span class="line">    <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">    factory.setDataSource(dataSource);</span><br><span class="line">    applyConfiguration(factory); <span class="comment">// setConfiguration</span></span><br><span class="line">    <span class="comment">// set ：interceptors，typeHandlers，</span></span><br><span class="line">    <span class="comment">//      mapperLocations，typeEnumsPackage，globalConfig 等</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> factory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8ca46c6e-24e7-41ac-be61-0cafadeb370e-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">    <span class="type">ExecutorType</span> <span class="variable">executorType</span> <span class="operator">=</span> <span class="built_in">this</span>.properties.getExecutorType();</span><br><span class="line">    <span class="keyword">if</span> (executorType != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory, executorType);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8ca46c6e-24e7-41ac-be61-0cafadeb370e-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个 MapperScannerConfigurer beanDefinition</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AutoConfiguredMapperScannerRegistrar</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>, ImportBeanDefinitionRegistrar &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义 MapperScannerConfigurer</span></span><br><span class="line">        <span class="type">BeanDefinitionBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class="line">        <span class="comment">// addPropertyValue: basePackage等</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        registry.registerBeanDefinition(MapperScannerConfigurer.class.getName(), builder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="MapperScannerConfigurer">MapperScannerConfigurer</h2><p>首先看<code>MapperScannerConfigurer</code>这个 bean，这是一个扫描 mapper 的配置类，实现了<code>BeanDefinitionRegistryPostProcessor</code>接口，是一个Bean工厂后处理器，内部使用 <code>ClassPathMapperScanner</code> 根据配置扫描 mapper 接口并将接口注册为 <code>MapperFactoryBean</code>。</p><p>创建 MapperScannerConfigurer bean的方式一般有两种:</p><ul><li>通过MyBatisPlus的自动装配类注册，默认扫描默认包下的带 <code>@Mapper</code> 注解的接口。</li><li>通过解析 <code>@MapperScan</code> 注解的属性在 spring 中注册 <code>MapperScannerConfigurer</code> 的 beanDefinition，扫描@MapperScan注解设置的basepackage。</li></ul><div class="tabs" id="25546681-aa8c-4e11-94a2-92f95721ebc3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#25546681-aa8c-4e11-94a2-92f95721ebc3-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#25546681-aa8c-4e11-94a2-92f95721ebc3-2"><i class="fas fa-horse"></i>2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="25546681-aa8c-4e11-94a2-92f95721ebc3-1"><p><mark class="hl-label blue">MapperScannerConfigurer#postProcessBeanDefinitionRegistry</mark></p><p>创建 <code>ClassPathMapperScanner</code> 对象（继承 <code>ClassPathBeanDefinitionScanner</code>），设置相关属性（参考<code>MapperScan</code>属性），根据设置的属性注册扫描过滤器，开始执行扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class="line">      processPropertyPlaceHolders();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">ClassPathMapperScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathMapperScanner</span>(registry);</span><br><span class="line">    <span class="comment">// set 相关属性  扫描过滤规则、指定 sqlSessionxxx。。</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">// 根据 set 的属性，注册扫描过滤器</span></span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    <span class="comment">// 扫描 mapper 接口，并注册 beanDefinition， 底层是 doScan</span></span><br><span class="line">    scanner.scan(</span><br><span class="line">        StringUtils.tokenizeToStringArray(<span class="built_in">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="25546681-aa8c-4e11-94a2-92f95721ebc3-2"><p><mark class="hl-label green">ClassPathMapperScanner#doScan</mark></p><ul><li>根据<code>@MapperScan(&quot;com.example.mybatisplus.mapper&quot;)</code>配置的basePackage扫描mapper，并注册 beanDifinition</li><li>修改扫描到的 beanDefinition 类型为 <code>MapperFactoryBean</code> (或<code>@MapperScan</code> 指定的自定义类型)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用父类 ClassPathBeanDefinitionScanner 方法扫描并注册 beanDifinition</span></span><br><span class="line">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="built_in">super</span>.doScan(basePackages);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">      LOGGER.warn(() -&gt; <span class="string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)</span><br><span class="line">          + <span class="string">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 对 mapper 的 beanDefinition 进行处理: 修改 beanClass 类型等。</span></span><br><span class="line">      processBeanDefinitions(beanDefinitions);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> &#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line">      <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> definition.getBeanClassName();</span><br><span class="line">      ...</span><br><span class="line">      <span class="comment">// 构造方法中传入原 mapper bean 类型</span></span><br><span class="line">      definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName);</span><br><span class="line">      <span class="comment">// 修改 bean 类型为 MapperFactoryBean</span></span><br><span class="line">      definition.setBeanClass(<span class="built_in">this</span>.mapperFactoryBeanClass);</span><br><span class="line">      ... <span class="comment">// set sqlSessionFactory, sqlSessionTemplate (如果存在的话)</span></span><br><span class="line">      <span class="comment">// 设置懒加载</span></span><br><span class="line">      definition.setLazyInit(lazyInitialization);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>扫描 Mapper 后会将其 beanDefinition.beanClass 修改为 <code>MapperFactoryBean</code>。 所以在后续 spring 将 mapper bean初始化时，会通过调用 <code>MapperFactoryBean.getObject</code> 获取其对象。</p><p>查看源码可以发现，最终是调用 sqlSession 的 getMapper 方法获取mapper代理对象。具体实现后面再看。</p><hr><hr><h2 id="SqlSessionFactory">SqlSessionFactory</h2><p>自动装配类里的sqlSessionFactory bean是 mybatis plus的用来获取 sqlSession (用来执行 sql 管理事务的对象)的工厂类。</p><p>创建 sqlSessionFactory 的逻辑在 <code>MybatisSqlSessionFactoryBean#buildSqlSessionFactory</code> 方法中，里面主要是</p><ul><li>设置配置文件里配置的属性：globalConfig，typeHandlers，interceptor…</li><li>解析 mapper.xml 并保存到 configuration 中</li><li>创建sqlSessionFactory</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> SqlSessionFactory <span class="title function_">buildSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> Configuration targetConfiguration;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.configuration != <span class="literal">null</span>) &#123;  <span class="comment">// AutoConfig  里面 set 的 configuration</span></span><br><span class="line">        targetConfiguration = <span class="built_in">this</span>.configuration;</span><br><span class="line">        ...</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 加载前面的配置 并 set 到 targetConfiguration 中, </span></span><br><span class="line">    <span class="comment">//      如：set globalConfig, register typeHandlers， addInterceptor， parse xmlMapper</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 解析 mapper.xml, 并将解析的结果存在 targetConfiguration 中</span></span><br><span class="line">    <span class="keyword">for</span> (Resource mapperLocation : <span class="built_in">this</span>.mapperLocations) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="type">Builder</span> <span class="variable">xmlMapperBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(mapperLocation.getInputStream(),</span><br><span class="line">                            targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments());</span><br><span class="line">        xmlMapperBuilder.parse();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 构建 SqlSessionFactory， 实现类为 DefaultSqlSessionFactory</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBuilder</span>().build(targetConfiguration);</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="解析mapper-xml">解析mapper.xml</h3><p>XMLMapperBuilder 主要用于解析 mapper.xml 文件，入口为 <code>XMLMapperBuilder#parse</code>， XMLMapperBuilder 会解析 mapper.xml 文件中配置的 statements、resultMap、parameter 等信息， 并将其存放于 Configuration 的 对应 map 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XMLMapperBuilder.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// resource： file /../xxxMapper.xml 判断是否加载过</span></span><br><span class="line">    <span class="keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class="line">        <span class="comment">// 1 解析 mapper.xml 文件</span></span><br><span class="line">        configurationElement(parser.evalNode(<span class="string">&quot;/mapper&quot;</span>));</span><br><span class="line">        configuration.addLoadedResource(resource);</span><br><span class="line">        <span class="comment">// 2  注册 Mapper 底层调用 MybatisMapperRegistry#addMapper 注册 Mapper</span></span><br><span class="line">        bindMapperForNamespace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前面没解析完成的 继续解析， 看代码主要是针对前面解析出错的</span></span><br><span class="line">    parsePendingResultMaps();</span><br><span class="line">    parsePendingCacheRefs();</span><br><span class="line">    parsePendingStatements();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析 mapper.xml 后 Configuration 对象示例：当前只包含 mapper.xml 中的 sql 语句。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230602155859233.png" alt="image-20230602155859233" style="zoom: 50%;" /><p>XMLMapperBuilder 解析完 xml 文件后，就会在 <code>MybatisMapperRegistry</code> 中添加对应的 Mapper 代理工厂 <code>MybatisMapperProxyFactory</code>。同时使用 <code>MybatisMapperAnnotationBuilder</code> 解析 mapper 接口中使用注解写的 sql 语句。</p><p><code>MybatisMapperProxyFactory</code> 就是用来获取 Mapper 代理（<code>MybatisMapperProxy</code>）的工厂类。 在调用 Mapper 中方法的时候其实就是调用的 <code>MybatisMapperProxy#invoke</code> 方法。</p><mark class="hl-label blue">MybatisMapperRegistry#addMappe</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type 为 mapper 接口</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isInterface()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasMapper(type)) &#123;</span><br><span class="line">            <span class="comment">// TODO 如果之前注入 直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loadCompleted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册 Mapper 的代理工厂</span></span><br><span class="line">            knownMappers.put(type, <span class="keyword">new</span> <span class="title class_">MybatisMapperProxyFactory</span>&lt;&gt;(type));</span><br><span class="line">            <span class="comment">// 再解析Mapper接口中使用注解写的 sql 语句</span></span><br><span class="line">            <span class="type">MybatisMapperAnnotationBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisMapperAnnotationBuilder</span>(config, type);</span><br><span class="line">            <span class="comment">// 里面会继续调用 AbstractSqlInjector#inspectInject 注入 mybatisPlus 的动态 curd 方法</span></span><br><span class="line">            parser.parse();</span><br><span class="line">            loadCompleted = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">                knownMappers.remove(type);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注入动态SQL">注入动态SQL</h3><p><code>MybatisMapperAnnotationBuilder</code> 在解析完注解 sql 后，会注入 mybatis-plus 的的 curd 动态 sql。平时调用 mybatis-plus 的 BaseMapper 的方法就是使用的这里注入的动态 sql。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MybatisMapperAnnotationBuilder.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> type.toString();</span><br><span class="line">    <span class="keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 遍历Mapper 接口中的方法，解析方法上的注解 sql（如果存在的话）</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : type.getMethods()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            parseStatement(method);</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// 如果继承了 baseMapper，就注入 CURD 动态 SQL</span></span><br><span class="line">        <span class="keyword">if</span> (GlobalConfigUtils.isSupperMapperChildren(configuration, type)) &#123;</span><br><span class="line">            parserInjector();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    parsePendingMethods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入动态 sql， AbstractSqlInjector</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">parserInjector</span><span class="params">()</span> &#123;</span><br><span class="line">    GlobalConfigUtils.getSqlInjector(configuration).inspectInject(assistant, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>abstractSqlInjector 注入的 sql 默认为 DefaultSqlInjector 中的方法（也就是 BaseMapper 中的方法）。 注入的方式为：根据不同方法的模板构建对应的 sql 脚本（同 xml），并填充对应的数据表和实体类的字段。这里的数据表字段是通过 <code>TableInfoHelper</code> 获得对应实体类的<code>TableInfo</code>类推断出来的，如根据 <code>@TableField</code>/<code>@TableId</code> 注解指定字段名，或根据驼峰下划线转换规则推断。</p><div class="tabs" id="f8f09fe7-2eec-4be1-8965-8c1be1e1c20d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-3"><i class="fas fa-candy-cane"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-1"><p><mark class="hl-label blue">AbstractSqlInjector#inspectInject</mark></p><p><code>ISqlInjector</code>接口只有一个inspectInject方法来提供SQL注入的操作，在<code>AbstractSqlInjector</code>抽象类来提供具体的操作，最终对外的默认实现类是<code>DefaultSqlInjector</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inspectInject</span><span class="params">(MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; modelClass = extractModelClass(mapperClass);</span><br><span class="line">    <span class="keyword">if</span> (modelClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> mapperClass.toString();</span><br><span class="line">        Set&lt;String&gt; mapperRegistryCache = GlobalConfigUtils.getMapperRegistryCache(builderAssistant.getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (!mapperRegistryCache.contains(className)) &#123;</span><br><span class="line">            <span class="comment">//获得CRUD一系列的操作方法</span></span><br><span class="line">            List&lt;AbstractMethod&gt; methodList = <span class="built_in">this</span>.getMethodList(mapperClass);<span class="comment">//-&gt;2</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methodList)) &#123;</span><br><span class="line">                <span class="comment">//取得对应TableEntity</span></span><br><span class="line">                <span class="type">TableInfo</span> <span class="variable">tableInfo</span> <span class="operator">=</span> TableInfoHelper.initTableInfo(builderAssistant, modelClass);</span><br><span class="line">                <span class="comment">// 循环注入自定义方法</span></span><br><span class="line">                methodList.forEach(m -&gt; m.inject(builderAssistant, mapperClass, modelClass, tableInfo));<span class="comment">//-&gt;3</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(mapperClass.toString() + <span class="string">&quot;, No effective injection method was found.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mapperRegistryCache.add(className);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-2"><p><mark class="hl-label green">DefaultSqlInjector#getMethodList</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSqlInjector</span> <span class="keyword">extends</span> <span class="title class_">AbstractSqlInjector</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title function_">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">        Stream.Builder&lt;AbstractMethod&gt; builder = Stream.&lt;AbstractMethod&gt;builder()</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">Insert</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">Delete</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">DeleteByMap</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">Update</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectByMap</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectCount</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectMaps</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectMapsPage</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectObjs</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectList</span>())</span><br><span class="line">            .add(<span class="keyword">new</span> <span class="title class_">SelectPage</span>());</span><br><span class="line">        <span class="keyword">if</span> (tableInfo.havePK()) &#123;</span><br><span class="line">            builder.add(<span class="keyword">new</span> <span class="title class_">DeleteById</span>())</span><br><span class="line">                .add(<span class="keyword">new</span> <span class="title class_">DeleteBatchByIds</span>())</span><br><span class="line">                .add(<span class="keyword">new</span> <span class="title class_">UpdateById</span>())</span><br><span class="line">                .add(<span class="keyword">new</span> <span class="title class_">SelectById</span>())</span><br><span class="line">                .add(<span class="keyword">new</span> <span class="title class_">SelectBatchByIds</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.warn(String.format(<span class="string">&quot;%s ,Not found @TableId annotation, Cannot use Mybatis-Plus &#x27;xxById&#x27; Method.&quot;</span>,</span><br><span class="line">                tableInfo.getEntityType()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build().collect(toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f8f09fe7-2eec-4be1-8965-8c1be1e1c20d-3"><p>以deleteById为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteById</span> <span class="keyword">extends</span> <span class="title class_">AbstractMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;deleteById&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 方法名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.5.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeleteById</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">injectMappedStatement</span><span class="params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> &#123;</span><br><span class="line">        String sql;</span><br><span class="line">        <span class="type">SqlMethod</span> <span class="variable">sqlMethod</span> <span class="operator">=</span> SqlMethod.LOGIC_DELETE_BY_ID;</span><br><span class="line">        <span class="keyword">if</span> (tableInfo.isWithLogicDelete()) &#123;</span><br><span class="line">            List&lt;TableFieldInfo&gt; fieldInfos = tableInfo.getFieldList().stream()</span><br><span class="line">                .filter(TableFieldInfo::isWithUpdateFill)</span><br><span class="line">                .filter(f -&gt; !f.isLogicDelete())</span><br><span class="line">                .collect(toList());</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(fieldInfos)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sqlSet</span> <span class="operator">=</span> <span class="string">&quot;SET &quot;</span> + SqlScriptUtils.convertIf(fieldInfos.stream()</span><br><span class="line">                    .map(i -&gt; i.getSqlSet(EMPTY)).collect(joining(EMPTY)), <span class="string">&quot;!@org.apache.ibatis.type.SimpleTypeRegistry@isSimpleType(_parameter.getClass())&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">                    + tableInfo.getLogicDeleteSql(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlSet, tableInfo.getKeyColumn(),</span><br><span class="line">                    tableInfo.getKeyProperty(), tableInfo.getLogicDeleteSql(<span class="literal">true</span>, <span class="literal">true</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), sqlLogicSet(tableInfo),</span><br><span class="line">                    tableInfo.getKeyColumn(), tableInfo.getKeyProperty(),</span><br><span class="line">                    tableInfo.getLogicDeleteSql(<span class="literal">true</span>, <span class="literal">true</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> languageDriver.createSqlSource(configuration, sql, Object.class);</span><br><span class="line">            <span class="keyword">return</span> addUpdateMappedStatement(mapperClass, modelClass, getMethod(sqlMethod), sqlSource);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sqlMethod = SqlMethod.DELETE_BY_ID;</span><br><span class="line">            sql = String.format(sqlMethod.getSql(), tableInfo.getTableName(), tableInfo.getKeyColumn(),</span><br><span class="line">                tableInfo.getKeyProperty());</span><br><span class="line">            <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> languageDriver.createSqlSource(configuration, sql, Object.class);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.addDeleteMappedStatement(mapperClass, getMethod(sqlMethod), sqlSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="SqlSessionTemplate">SqlSessionTemplate</h2><p><code>SqlSessionTemplate</code> 实现了 <code>SqlSession</code> 接口，但是内部持有一个 sqlSessionProxy 代理对象，最后都是调用的代理对象的方法。 而代理对象中最终调用的 sqlSession 也是通过 <code>sqlSessionFactory.openSession</code> 来获取的。只不过在 openSession 前会从 spring 事务同步管理器中获取一遍，不存在才创建一个新的 sqlSession，并且再执行完成后关闭或释放（引用数量-1）。</p><p>这样就可以在需要使用 sqlSession 时直接使用 sqlSessionTemplate，而不是需要每次都通过 sqlSessinFactory 获取 sqlSession，也不需要考虑 sqlSesion 的关闭。同时保证了在同一个 spring 事务中使用同一个 sqlSession 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionTemplate</span> <span class="keyword">implements</span> <span class="title class_">SqlSession</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span></span><br><span class="line"><span class="params">          PersistenceExceptionTranslator exceptionTranslator)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="built_in">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">        <span class="built_in">this</span>.executorType = executorType;</span><br><span class="line">        <span class="built_in">this</span>.exceptionTranslator = exceptionTranslator;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个 sqlSession 的代理， 实现为一个内部类</span></span><br><span class="line">        <span class="built_in">this</span>.sqlSessionProxy = (SqlSession) newProxyInstance(SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; SqlSession.class &#125;, <span class="keyword">new</span> <span class="title class_">SqlSessionInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数据库的相关操作均由代理对象实现, 但是不支持 commit，因为代理对象中户实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.sqlSessionProxy.selectOne(statement);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前面提到的 getMapper 方法，最终到 Configuration 中获取</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getConfiguration().getMapper(type, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * sqlSession 的代理实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取真正的 sqlSession，逻辑参考：SqlSessionUtils#getSqlSession） </span></span><br><span class="line">      <span class="comment">//    从 spring 的 TransactionSynchronizationManager 事务同步管理器 (中的 threadlocal) 获取 sqlSession</span></span><br><span class="line">      <span class="comment">//    不存在则通过 sqlSessionFactory.openSession 创建新的 sqlSession 对象，并保存到 spring 中</span></span><br><span class="line">      </span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> getSqlSession(SqlSessionTemplate.<span class="built_in">this</span>.sqlSessionFactory,</span><br><span class="line">          SqlSessionTemplate.<span class="built_in">this</span>.executorType, SqlSessionTemplate.<span class="built_in">this</span>.exceptionTranslator);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 sqlSession 执行对应方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(sqlSession, args);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="comment">// unwrapThrowable</span></span><br><span class="line">        <span class="comment">// SqlSessionUtils.closeSqlSession</span></span><br><span class="line">        <span class="keyword">throw</span> unwrapped;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//  如果是 spring 管理的则 release（引用数量-1）， 不是则 close</span></span><br><span class="line">        <span class="comment">// SqlSessionUtils.closeSqlSession</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="获取-Mapper-对象">获取 Mapper 对象</h2><p>前面我们提到，将扫描到的Mapper接口将其 beanDefinition.beanClass 修改为 <code>MapperFactoryBean</code>。 所以在后续 spring 将 mapper bean初始化时，会通过调用 <code>MapperFactoryBean#getObject</code> 获取其对象注入到Spring容器中。</p><p>最终的调用链就是</p><p><code>MapperFactoryBean#getObject</code>-&gt;<code>SqlSessionTemplate#getMapper</code>-&gt;<code>configuration#getMapper</code>-&gt;<code>MybatisMapperRegistry#getMapper</code> -&gt;<code>MybatisMapperProxyFactory#newInstance</code></p><p>前面解析 mapper 时提到了 <code>MybatisMapperRegistry</code> 提供了一个 getMapper 方法用来获取 mapper 代理对象。</p><p>在这个 getMapper 方法中之前注册的代理工厂 <code>MybatisMapperProxyFactory</code> 使用 通过 <code>MybatisMapperProxy</code> 生成了 mapper 的代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sqlSessionTempalte</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getConfiguration().getMapper(type, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MybatisConfiguration </span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mybatisMapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MybatisMapperRegistry </span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="comment">// knownMappers 为前面解析 mapper 后注册的 mapper 代理工厂对象</span></span><br><span class="line">    <span class="keyword">final</span> MybatisMapperProxyFactory&lt;T&gt; mapperProxyFactory = (MybatisMapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">    <span class="keyword">if</span> (mapperProxyFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known to the MybatisPlusMapperRegistry.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 传入 sqlSession 创建代理对象</span></span><br><span class="line">        <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MybatisMapperProxyFactory</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> MybatisMapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MybatisMapperProxy</span>&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现InvocationHandler接口的invoke方法，用于代理方法的调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> method 被代理的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Object 返回方法调用结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果调用的是Object类的方法，直接调用被代理对象的对应方法</span></span><br><span class="line">        <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则缓存获取方法调用器，使用方法调用器调用方法</span></span><br><span class="line">            <span class="keyword">return</span> cachedInvoker(method).invoke(proxy, method, args, sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>mybatisPlus 的整个加载过程概括如下：</p><ol><li><code>MapperScannerConfigurer</code> 扫描 mapper 接口，并在 spring 中注册 beanDefinition，类型为 <code>MapperFactoryBean</code></li><li><code>SqlSessionFactory</code> 解析 mapper.xml 和 mapper 接口 中的 sql 语句保存到 Configuration 中，同时加入 MybatisPlus 提供的动态 sql。 最后在 Configuration 注册 mapper 的 <code>MybatisMapperProxyFactory</code>。</li><li><code>SqlSessionTemplate</code> 使用 <code>SqlSessionInterceptor</code> 代理实现一个线程安全的 spring 管理的 SqlSession，并最终通过 <code>MybatisMapperProxyFactory</code> 获取 mapper 的代理对象 <code>MybatisMapperProxy</code>.</li></ol>]]></content>
    
    
    <summary type="html">MyBatisPlus原理解析</summary>
    
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="MyBatisPlus" scheme="https://wuwawawa.github.io/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>MyBatisPlus</title>
    <link href="https://wuwawawa.github.io/posts/8086094.html"/>
    <id>https://wuwawawa.github.io/posts/8086094.html</id>
    <published>2023-06-01T00:52:30.000Z</published>
    <updated>2023-06-01T15:02:03.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus简介">MyBatisPlus简介</h2><p>MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><div class="tabs" id="b9764d6e-cd05-4c3b-ae17-8b448107dcb9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b9764d6e-cd05-4c3b-ae17-8b448107dcb9-1"><i class="fas fa-seedling"></i>特性</button></li><li class="tab"><button type="button" data-href="#b9764d6e-cd05-4c3b-ae17-8b448107dcb9-2"><i class="fas fa-leaf"></i>支持数据库</button></li><li class="tab"><button type="button" data-href="#b9764d6e-cd05-4c3b-ae17-8b448107dcb9-3"><i class="fab fa-apple"></i>框架结构</button></li><li class="tab"><button type="button" data-href="#b9764d6e-cd05-4c3b-ae17-8b448107dcb9-4"><i class="fas fa-tree"></i>代码及文档地址</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b9764d6e-cd05-4c3b-ae17-8b448107dcb9-1"><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9764d6e-cd05-4c3b-ae17-8b448107dcb9-2"><p>任何能使用MyBatis进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下</p><p>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9764d6e-cd05-4c3b-ae17-8b448107dcb9-3"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230601091718513.png" alt="image-20230601091718513" style="zoom: 50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9764d6e-cd05-4c3b-ae17-8b448107dcb9-4"><p>官方地址:<a href="http://mp.baomidou.com">http://mp.baomidou.com</a></p><p>代码发布地址:Github: <a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a></p><p>Gitee: <a href="https://gitee.com/baomidou/mybatis-plus">https://gitee.com/baomidou/mybatis-plus</a></p><p>文档发布地址:<a href="https://baomidou.com/pages/24112f">https://baomidou.com/pages/24112f</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="入门案例">入门案例</h2><p>以SpringBoot整合MyBatisPlus为例</p><div class="tabs" id="ed892188-277b-4746-87a0-c2638332eeb0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-1"><i class="fas fa-seedling"></i>创建数据库及表</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-2"><i class="fas fa-leaf"></i>添加依赖</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-3"><i class="fab fa-apple"></i>配置文件</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-4"><i class="fas fa-tree"></i>启动类</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-5"><i class="fas fa-heartbeat"></i>添加实体</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-6"><i class="fas fa-cookie-bite"></i>添加mapper</button></li><li class="tab"><button type="button" data-href="#ed892188-277b-4746-87a0-c2638332eeb0-7"><i class="fas fa-bug"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ed892188-277b-4746-87a0-c2638332eeb0-1"><p><mark class="hl-label blue">创建表</mark></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus;</span><br><span class="line">use mybatis_plus;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  email <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p><mark class="hl-label green">添加数据</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO <span class="title function_">user</span> <span class="params">(id, name, age, email)</span> VALUES</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok用于简化实体类开发--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-3"><p>配置application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置数据源信息</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 配置数据源类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="comment"># 配置连接数据库的各个信息</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://8.130.68.59:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment"># 配置MyBatis日志</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><p>1、驱动类driver-class-name</p><p>spring boot 2.0（内置jdbc5驱动），驱动类使用：<code>driver-class-name: com.mysql.jdbc.Driver</code></p><p>spring boot 2.1及以上（内置jdbc8驱动），驱动类使用：<code>driver-class-name: com.mysql.cj.jdbc.Driver</code></p><p>否则运行测试用例的时候会有 WARN 信息</p><p>2、连接地址url</p><p>MySQL5.7版本的url：jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</p><p>MySQL8.0版本的url：jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false</p><p>否则运行测试用例报告如下错误：java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized orrepresents more</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisplusApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-6"><p>BaseMapper是MyBatis-Plus提供的模板mapper，其中包含了基本的CRUD方法，泛型为操作的实体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ed892188-277b-4746-87a0-c2638332eeb0-7"><p>IDEA在 userMapper 处报错，因为找不到注入的对象，因为类是动态创建的，但是程序可以正确的执行。为了避免报错，可以在mapper接口上添加 @Repository 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="基本CRUD">基本CRUD</h2><h3 id="BaseMapper">BaseMapper</h3><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，我们可以直接使用，接口如下：</p><p>通过观察BaseMapper中的方法，大多方法中都有Wrapper类型的形参，此为条件构造器，可针对于SQL语句设置不同的条件，若没有条件，则可以为该形参赋值null，即查询（删除/修改）所有数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseMapper</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入一条记录</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 ID 删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据实体(ID)删除</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteById</span><span class="params">(T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 columnMap 条件，删除记录</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 entity 条件，删除记录</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除（根据ID或实体 批量删除）</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;?&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 ID 修改</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 whereEntity 条件，更新记录</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 ID 查询</span></span><br><span class="line">    T <span class="title function_">selectById</span><span class="params">(Serializable id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询（根据ID 批量查询）</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询（根据 columnMap 条件）</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 entity 条件，查询一条记录</span></span><br><span class="line">    <span class="keyword">default</span> T <span class="title function_">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        List&lt;T&gt; ts = <span class="built_in">this</span>.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(ts)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ts.size() != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ExceptionUtils.mpe(<span class="string">&quot;One record is expected, but the query result is multiple records&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ts.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 Wrapper 条件，判断是否存在记录</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="built_in">this</span>.selectCount(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> != count &amp;&amp; count &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 Wrapper 条件，查询总记录数</span></span><br><span class="line">    Long <span class="title function_">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 entity 条件，查询全部记录</span></span><br><span class="line">    List&lt;T&gt; <span class="title function_">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">selectMaps</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;T&gt;&gt; P <span class="title function_">selectPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">    &lt;P <span class="keyword">extends</span> <span class="title class_">IPage</span>&lt;Map&lt;String, Object&gt;&gt;&gt; P <span class="title function_">selectMapsPage</span><span class="params">(P page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="插入">插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//实现新增用户信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>,<span class="string">&quot;zhangsan@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行的结果，所获取的id为1475754982694199298</p><p>这是因为，我们没有给数据库id字段设置自增，并且MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id。</p><p>在MyBatisPlus向数据库表中插入数据的时候</p><p>如果主键为id,并且在数据库的表中已经设置了id为自增列，如果在java实体的对应属性上面已经写了<code>@Tableld(value=“id”,type=IdType.Auto)</code>注解，那么插入数据的时候可以不写id的值，程序会按照自增规则给id补一个值插入数据库。</p><p>但是如果没在java实体的id属性上写上注解<code>@TableId(value=“id”,type=IdType.Auto)</code>，那么插入的时候虽然也会给id补一个值，但是却不是按照自增的规则而是按照雪花算法的规则。</p><hr><h3 id="删除">删除</h3><div class="tabs" id="90690d89-b991-4c45-804d-9388f76e105c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#90690d89-b991-4c45-804d-9388f76e105c-1"><i class="fas fa-cat"></i>通过id删除记录</button></li><li class="tab"><button type="button" data-href="#90690d89-b991-4c45-804d-9388f76e105c-2"><i class="fas fa-horse"></i>通过id批量删除记录</button></li><li class="tab"><button type="button" data-href="#90690d89-b991-4c45-804d-9388f76e105c-3"><i class="fas fa-dove"></i>通过map条件删除记录</button></li><li class="tab"><button type="button" data-href="#90690d89-b991-4c45-804d-9388f76e105c-4"><i class="fas fa-heartbeat"></i>通过warpper删除</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="90690d89-b991-4c45-804d-9388f76e105c-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">4L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="90690d89-b991-4c45-804d-9388f76e105c-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIdList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    List&lt;Long&gt; list = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteBatchIds(list);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="90690d89-b991-4c45-804d-9388f76e105c-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIdMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="90690d89-b991-4c45-804d-9388f76e105c-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//DELETE FROM user WHERE (age = ?)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;删除的行数 = &quot;</span> + delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="修改">修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//UPDATE user SET name=?, age=? WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5L</span>, <span class="string">&quot;李四&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;lisi@atguigu.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="查询">查询</h3><div class="tabs" id="71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-1"><i class="fas fa-award"></i>根据id查询用户信息</button></li><li class="tab"><button type="button" data-href="#71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-2"><i class="fas fa-baseball-ball"></i>根据多个id查询多个用户信息</button></li><li class="tab"><button type="button" data-href="#71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-3"><i class="fas fa-bone"></i>通过map条件查询用户信息</button></li><li class="tab"><button type="button" data-href="#71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-4"><i class="fas fa-heartbeat"></i>通过Wrapper查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE id=?</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">4L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByIdList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span></span><br><span class="line">    List&lt;Long&gt; list = Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(list);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE name = ? AND age = ?</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="71b80dc8-57b7-4ca8-981a-08ffa2a2f1d3-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//SELECT id,name,age,email FROM user WHERE (age = ?)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);</span><br><span class="line">    userList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="通用Service">通用Service</h2><p>说明:</p><ul><li>通用 Service CRUD 封装IService接口，进一步封装 CRUD 采用 get 查询单行 remove 删除 list 查询集合 page 分页 前缀命名方式区分 Mapper 层避免混淆</li><li>泛型 T 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 IBaseService 继承Mybatis-Plus 提供的基类</li><li>官网地址：<a href="https://baomidou.com/pages/49cc81/#service-crud-%E6%8E%A5%E5%8F%A3">https://baomidou.com/pages/49cc81/#service-crud-接口</a></li></ul><p>MyBatis-Plus中有一个接口 IService和其实现类 ServiceImpl，封装了常见的业务层逻辑详情查看源码IService和ServiceImpl</p><div class="tabs" id="17c1b30e-9733-4d48-afeb-7ab700f6184c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#17c1b30e-9733-4d48-afeb-7ab700f6184c-1"><i class="fas fa-cat"></i>创建Service接口和实现类</button></li><li class="tab"><button type="button" data-href="#17c1b30e-9733-4d48-afeb-7ab700f6184c-2"><i class="fas fa-horse"></i>测试查询记录数</button></li><li class="tab"><button type="button" data-href="#17c1b30e-9733-4d48-afeb-7ab700f6184c-3"><i class="fas fa-dove"></i>测试批量插入</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="17c1b30e-9733-4d48-afeb-7ab700f6184c-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="17c1b30e-9733-4d48-afeb-7ab700f6184c-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> userService.count();</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="17c1b30e-9733-4d48-afeb-7ab700f6184c-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveBatch</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// SQL长度有限制，海量数据插入单条SQL无法实行，</span></span><br><span class="line">    <span class="comment">// 因此MP将批量插入放在了通用Service中实现，而不是通用Mapper</span></span><br><span class="line">    ArrayList&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;ybc&quot;</span> + i);</span><br><span class="line">        user.setAge(<span class="number">20</span> + i);</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SQL:INSERT INTO t_user ( username, age ) VALUES ( ?, ? )</span></span><br><span class="line">    userService.saveBatch(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="常用注解">常用注解</h2><h3 id="TableName">@TableName</h3><p>经过上面的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表。</p><p>由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致</p><blockquote><p>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</p></blockquote><p>我们将表user更名为t_user，测试查询功能程序抛出异常，Table ‘mybatis_plus.user’ doesn’t exist，因为现在的表名为t_user，而默认操作的表名和实体类型的类名一致，即user表</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230601163952677.png" alt="image-20230601163952677" style="zoom:67%;" /><mark class="hl-label green">解决方法</mark> <p>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</p><p>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如<code>t_</code>或<code>tbl_</code>此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 设置MyBatis-Plus的全局配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><hr><h3 id="TableId">@TableId</h3><p>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</p><blockquote><p>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？我们实体类中的属性id改为uid，将表中的字段id也改为uid，测试添加功能</p></blockquote><p>程序抛出异常，Field ‘uid’ doesn’t have a default value，说明MyBatis-Plus没有将uid作为主键赋值</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230601164651390.png" alt="image-20230601164651390" style="zoom:67%;" /><mark class="hl-label green">解决方法</mark> <p>在实体类中uid属性上通过@TableId将其标识为主键，即可成功执行SQL语句</p><blockquote><p>@TableId的value属性</p></blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常Unknown column ‘id’ in ‘field list’，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，@TableId(“uid”)或@TableId(value=“uid”)</p><blockquote><p>TableId的type属性</p></blockquote><p>type属性用来定义主键策略</p><p>常用的主键策略：</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>IdType.ASSIGN_ID</code>(默认)</td><td>基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td><code>IdType.AUTO</code></td><td>使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，否则无效</td></tr></tbody></table><hr><h3 id="TableField">@TableField</h3><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p><blockquote><p>情况1:若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p></blockquote><p>例如实体类属性userName，表中字段user_name</p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格，相当于在MyBatis中配置。</p><blockquote><p>情况2:若实体类中的属性和表中的字段不满足情况1</p></blockquote><p>例如实体类属性name，表中字段username此时需要在实体类属性上使用@TableField(“username”)设置属性所对应的字段名</p><hr><h3 id="TableLogic">@TableLogic</h3><ul><li>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</li><li>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</li><li>使用场景：可以进行数据恢复</li></ul><mark class="hl-label blue">实现逻辑删除</mark> <div class="tabs" id="8a4fc660-7590-48f8-a6a6-81eb410561e6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8a4fc660-7590-48f8-a6a6-81eb410561e6-1"><i class="fas fa-seedling"></i>step1</button></li><li class="tab"><button type="button" data-href="#8a4fc660-7590-48f8-a6a6-81eb410561e6-2"><i class="fas fa-leaf"></i>step2</button></li><li class="tab"><button type="button" data-href="#8a4fc660-7590-48f8-a6a6-81eb410561e6-3"><i class="fab fa-apple"></i>step3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8a4fc660-7590-48f8-a6a6-81eb410561e6-1"><p>数据库中创建逻辑删除状态列，设置默认值为0</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8a4fc660-7590-48f8-a6a6-81eb410561e6-2"><p>实体类中添加逻辑删除属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8a4fc660-7590-48f8-a6a6-81eb410561e6-3"><p>测试删除功能，真正执行的是修改</p><p><code>UPDATE t_user SET is_deleted=1 WHERE id=? AND is_deleted=0</code></p><p>测试查询功能，被逻辑删除的数据默认不会被查询</p><p><code>SELECT id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="条件构造器Wrapper">条件构造器Wrapper</h2><h3 id="wrapper介绍">wrapper介绍</h3><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230601170956747.png" alt="image-20230601170956747"></p><p>Wrapper ： 条件构造抽象类，最顶端父类</p><ul><li>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件<ul><li>QueryWrapper ： 查询条件封装</li><li>UpdateWrapper ： Update 条件封装</li><li>AbstractLambdaWrapper ： 使用Lambda 语法<ul><li>LambdaQueryWrapper ：用于Lambda语法使用的查询Wrapper</li><li>LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li></ul></li></ul></li></ul><hr><h3 id="QueryWrapper">QueryWrapper</h3><div class="tabs" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-1"><i class="fas fa-atom"></i>组装查询条件</button></li><li class="tab"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-2"><i class="far fa-sun"></i>组装排序条件</button></li><li class="tab"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-3"><i class="fas fa-wind"></i>组装删除条件</button></li><li class="tab"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-4"><i class="fas fa-cookie-bite"></i>条件的优先级</button></li><li class="tab"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-5"><i class="fas fa-fire-alt"></i>组装select子句</button></li><li class="tab"><button type="button" data-href="#a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-6"><i class="fas fa-heartbeat"></i>实现子查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperSelect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询用户名包含o，年龄在20到30之间，并且邮箱不为null的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email,is_deleted FROM user WHERE is_deleted=0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperOrder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//按年龄降序查询用户，如果年龄相同则按id升序排列</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper</span><br><span class="line">            .orderByDesc(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">            .orderByAsc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//删除email为空的用户</span></span><br><span class="line">    <span class="comment">//DELETE FROM t_user WHERE (email IS NULL)</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.isNull(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.delete(queryWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-4"><blockquote><p>将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>)</span><br><span class="line">        .or()</span><br><span class="line">        .isNull(<span class="string">&quot;email&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</p></blockquote><p>可以使用lambda表达式，其内部的逻辑优先运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper</span><br><span class="line">        .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">        .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperSelects</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询用户信息的username和age字段</span></span><br><span class="line">    <span class="comment">//SELECT username,age FROM t_user</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.select(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="comment">//selectMaps()返回Map集合列表，通常配合select()使用，避免User对象中没有被查询到的列值为null</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a76fa2b7-22ae-4dc0-b6e7-d6fc03245680-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperSubquery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//查询id小于等于3的用户信息</span></span><br><span class="line">    <span class="comment">//SELECT id,name,age,email,is_deleted FROM t_user WHERE (id IN(select id from t_user where id &lt;= 3))</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt;= 3&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(queryWrapper);</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="UpdateWrapper">UpdateWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//将（年龄大于20或邮箱为null）并且用户名中包含有a的用户信息修改</span></span><br><span class="line">    <span class="comment">//组装set子句以及修改条件</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//lambda表达式内的逻辑优先运算</span></span><br><span class="line">    updateWrapper</span><br><span class="line">            .set(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>)</span><br><span class="line">            .set(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">            .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(i -&gt; i.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>).or().isNull(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, updateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="condition">condition</h3><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果。</p><div class="tabs" id="f81f127f-6787-48b2-8375-870545f157a2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f81f127f-6787-48b2-8375-870545f157a2-1"><i class="fas fa-seedling"></i>思路一</button></li><li class="tab"><button type="button" data-href="#f81f127f-6787-48b2-8375-870545f157a2-2"><i class="fas fa-leaf"></i>思路二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f81f127f-6787-48b2-8375-870545f157a2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入或未选择）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//StringUtils.isNotBlank()判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</span><br><span class="line">        queryWrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ageBegin != <span class="literal">null</span>) &#123;</span><br><span class="line">        queryWrapper.ge(<span class="string">&quot;age&quot;</span>, ageBegin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ageEnd != <span class="literal">null</span>) &#123;</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//SELECT id,name,age,email,is_deleted FROM t_user WHERE (age &gt;=?AND age &lt;= ?)</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f81f127f-6787-48b2-8375-870545f157a2-2"><p>但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">UseCondition</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入或未选择）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//StringUtils.isNotBlank()判断某字符串是否不为空且长度不为0且不由空白符(whitespace)构成</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(StringUtils.isNotBlank(name), <span class="string">&quot;name&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .ge(ageBegin != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageBegin)</span><br><span class="line">            .le(ageEnd != <span class="literal">null</span>, <span class="string">&quot;age&quot;</span>, ageEnd);</span><br><span class="line">    <span class="comment">//SELECT id,name,age,email,is_deleted FROM t_user WHERE (age &gt;=? AND age &lt;= ?)</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="LambdaQueryWrapper">LambdaQueryWrapper</h3><p>字段名很容易写错，这时候我们就可以使用LambdaQueryWrapper和LambdaUpdateWrapper。</p><p>这时候指定字段名就不是字符串，而是一个函数式接口。</p><p>例如：User::getName获取字段名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//定义查询条件，有可能为null（用户未输入）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageBegin</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">ageEnd</span> <span class="operator">=</span> <span class="number">24</span>;</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//避免使用字符串表示字段，防止运行时错误</span></span><br><span class="line">    queryWrapper</span><br><span class="line">            .like(StringUtils.isNotBlank(name), User::getName, name)</span><br><span class="line">            .ge(ageBegin != <span class="literal">null</span>, User::getAge, ageBegin)</span><br><span class="line">            .le(ageEnd != <span class="literal">null</span>, User::getAge, ageEnd);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="LambdaUpdateWrapper">LambdaUpdateWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//组装set子句</span></span><br><span class="line">    LambdaUpdateWrapper&lt;User&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">    updateWrapper</span><br><span class="line">            .set(User::getAge, <span class="number">18</span>)</span><br><span class="line">            .set(User::getEmail, <span class="string">&quot;user@atguigu.com&quot;</span>)</span><br><span class="line">            .like(User::getName, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">            .and(i -&gt; i.lt(User::getAge, <span class="number">24</span>).or().isNull(User::getEmail)); <span class="comment">//lambda</span></span><br><span class="line">    <span class="comment">//表达式内的逻辑优先运算</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.update(user, updateWrapper);</span><br><span class="line">    System.out.println(<span class="string">&quot;受影响的行数：&quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="插件">插件</h2><h3 id="分页插件">分页插件</h3><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p><div class="tabs" id="bbec77b7-5802-49d0-8357-81d3f0e1be85"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bbec77b7-5802-49d0-8357-81d3f0e1be85-1"><i class="fas fa-atom"></i>添加配置类</button></li><li class="tab"><button type="button" data-href="#bbec77b7-5802-49d0-8357-81d3f0e1be85-2"><i class="far fa-sun"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bbec77b7-5802-49d0-8357-81d3f0e1be85-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bbec77b7-5802-49d0-8357-81d3f0e1be85-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//获取分页数据</span></span><br><span class="line">    List&lt;User&gt; list = page.getRecords();</span><br><span class="line">    list.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页：&quot;</span>+page.getCurrent());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页显示的条数：&quot;</span>+page.getSize());</span><br><span class="line">    System.out.println(<span class="string">&quot;总记录数：&quot;</span>+page.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数：&quot;</span>+page.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有上一页：&quot;</span>+page.hasPrevious());</span><br><span class="line">    System.out.println(<span class="string">&quot;是否有下一页：&quot;</span>+page.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p>User(id=1, name=Jone, age=18, <a href="mailto:email=test1@baomidou.com">email=test1@baomidou.com</a>, isDeleted=0)</p><p>User(id=2,name=Jack, age=20, <a href="mailto:email=test2@baomidou.com">email=test2@baomidou.com</a>, isDeleted=0)</p><p>User(id=3, name=Tom,age=28, <a href="mailto:email=test3@baomidou.com">email=test3@baomidou.com</a>, isDeleted=0)</p><p>User(id=4, name=Sandy, <a href="mailto:age=21,email=test4@baomidou.com">age=21,email=test4@baomidou.com</a>, isDeleted=0)</p><p>User(id=5, name=Billie, age=24, <a href="mailto:email=test5@baomidou.com">email=test5@baomidou.com</a>, isDeleted=0)</p><p>当前页：1 每页显示的条数：5 总记录数：17 总页数：4 是否有上一页：false 是否有下一页：true</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="乐观锁">乐观锁</h3><p>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</p><p>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</p><blockquote><p>模拟修改冲突</p></blockquote><div class="tabs" id="05b62ba5-c9a9-4180-adde-e16cf31d3a46"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#05b62ba5-c9a9-4180-adde-e16cf31d3a46-1"><i class="fas fa-bug"></i>增加商品表</button></li><li class="tab"><button type="button" data-href="#05b62ba5-c9a9-4180-adde-e16cf31d3a46-2"><i class="fas fa-cannabis"></i>添加实体</button></li><li class="tab"><button type="button" data-href="#05b62ba5-c9a9-4180-adde-e16cf31d3a46-3"><i class="fas fa-candy-cane"></i>添加mapper</button></li><li class="tab"><button type="button" data-href="#05b62ba5-c9a9-4180-adde-e16cf31d3a46-4"><i class="fas fa-child"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="05b62ba5-c9a9-4180-adde-e16cf31d3a46-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product</span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_product (id, NAME, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;外星人笔记本&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="05b62ba5-c9a9-4180-adde-e16cf31d3a46-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="05b62ba5-c9a9-4180-adde-e16cf31d3a46-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="05b62ba5-c9a9-4180-adde-e16cf31d3a46-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProduct01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//小李查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLi</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小李查询的商品价格：&quot;</span>+productLi.getPrice());</span><br><span class="line">    <span class="comment">//小王查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productWang</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;小王查询的商品价格：&quot;</span>+productWang.getPrice());</span><br><span class="line">    <span class="comment">//小李将商品价格+50</span></span><br><span class="line">    productLi.setPrice(productLi.getPrice()+<span class="number">50</span>);</span><br><span class="line">    productMapper.updateById(productLi);</span><br><span class="line">    <span class="comment">//小王将商品价格-30</span></span><br><span class="line">    productWang.setPrice(productWang.getPrice()-<span class="number">30</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.updateById(productWang);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//操作失败，重试</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productNew</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        productNew.setPrice(productNew.getPrice()-<span class="number">30</span>);</span><br><span class="line">        productMapper.updateById(productNew);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//老板查询商品价格</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">productLaoban</span> <span class="operator">=</span> productMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;老板查询的商品价格：&quot;</span>+productLaoban.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>乐观锁实现流程</p></blockquote><p>数据库中添加version字段</p><p>取出记录时，获取当前version</p><p><code>SELECT id,name,price,version FROM product WHERE id=1</code></p><p>更新时，version + 1，如果where语句中的version版本不对，则更新失败</p><p><code>UPDATE product SET price=price+50, version=version + 1 WHERE id=1 AND version=1</code></p><blockquote><p>Mybatis-Plus实现乐观锁</p></blockquote><div class="tabs" id="d89e1f27-24b2-4fda-99e4-69df0c77eed2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d89e1f27-24b2-4fda-99e4-69df0c77eed2-1"><i class="fas fa-atom"></i>修改实体类</button></li><li class="tab"><button type="button" data-href="#d89e1f27-24b2-4fda-99e4-69df0c77eed2-2"><i class="far fa-sun"></i>添加乐观锁插件配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d89e1f27-24b2-4fda-99e4-69df0c77eed2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d89e1f27-24b2-4fda-99e4-69df0c77eed2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描mapper接口所在的包</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatisplus.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//添加分页插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="comment">//添加乐观锁插件</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="通用枚举">通用枚举</h2><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p><div class="tabs" id="7d54946f-06ea-43b0-abbc-a36de518424a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7d54946f-06ea-43b0-abbc-a36de518424a-1"><i class="fas fa-cat"></i>创建通用枚举类型</button></li><li class="tab"><button type="button" data-href="#7d54946f-06ea-43b0-abbc-a36de518424a-2"><i class="fas fa-horse"></i>配置扫描通用枚举</button></li><li class="tab"><button type="button" data-href="#7d54946f-06ea-43b0-abbc-a36de518424a-3"><i class="fas fa-dove"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7d54946f-06ea-43b0-abbc-a36de518424a-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SexEnum</span> &#123;</span><br><span class="line">    MALE(<span class="number">1</span>, <span class="string">&quot;男&quot;</span>),</span><br><span class="line">    FEMALE(<span class="number">2</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValue</span> <span class="comment">//将注解所标识的属性的值存储到数据库中</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> String sexName;</span><br><span class="line"></span><br><span class="line">    SexEnum(Integer sex, String sexName) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.sexName = sexName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d54946f-06ea-43b0-abbc-a36de518424a-2"><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="comment"># 设置MyBatis-Plus的全局配置</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 设置实体类所对应的表的统一前缀</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br><span class="line">      <span class="comment"># 设置统一的主键生成策略</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># 配置类型别名所对应的包</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.mybatisplus.pojo</span></span><br><span class="line">  <span class="comment"># 扫描通用枚举的包</span></span><br><span class="line">  <span class="attr">type-enums-package:</span> <span class="string">com.atguigu.mybatisplus.enums</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7d54946f-06ea-43b0-abbc-a36de518424a-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">33</span>);</span><br><span class="line">    user.setSex(SexEnum.MALE);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="多数据源">多数据源</h2><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p><p>目前我们就来模拟一个纯粹多库的一个场景，其他场景类似</p><p>场景说明：</p><p>我们创建两个库，分别为：mybatis_plus（以前的库不动）与mybatis_plus_1（新建），将mybatis_plus库的product表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><div class="tabs" id="029b1c3d-8fd6-406d-8594-e613dc66d952"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#029b1c3d-8fd6-406d-8594-e613dc66d952-1"><i class="fas fa-bug"></i>创建数据库及表</button></li><li class="tab"><button type="button" data-href="#029b1c3d-8fd6-406d-8594-e613dc66d952-2"><i class="fas fa-cannabis"></i>引入依赖</button></li><li class="tab"><button type="button" data-href="#029b1c3d-8fd6-406d-8594-e613dc66d952-3"><i class="fas fa-candy-cane"></i>配置多数据源</button></li><li class="tab"><button type="button" data-href="#029b1c3d-8fd6-406d-8594-e613dc66d952-4"><i class="fas fa-child"></i>创建Serviceservice</button></li><li class="tab"><button type="button" data-href="#029b1c3d-8fd6-406d-8594-e613dc66d952-5"><i class="fas fa-cat"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="029b1c3d-8fd6-406d-8594-e613dc66d952-1"><blockquote><p>创建数据库mybatis_plus_1和表product</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis_plus_1` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span>;</span><br><span class="line">use `mybatis_plus_1`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product</span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">price <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">version <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;乐观锁版本号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>添加测试数据</p></blockquote><p><code>INSERT INTO product (id, NAME, price) VALUES (1, '外星人笔记本', 100);</code></p><blockquote><p>删除mybatis_plus库product表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mybatis_plus;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> product;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="029b1c3d-8fd6-406d-8594-e613dc66d952-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="029b1c3d-8fd6-406d-8594-e613dc66d952-3"><p>说明：注释掉之前的数据库连接，添加新配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # 配置数据源信息</span><br><span class="line">  datasource:</span><br><span class="line">    dynamic:</span><br><span class="line">      # 设置默认的数据源或者数据源组,默认值即为master</span><br><span class="line">      primary: master</span><br><span class="line">      # 严格匹配数据源,默认<span class="literal">false</span>.<span class="literal">true</span>未匹配到指定数据源时抛异常,<span class="literal">false</span>使用默认数据源</span><br><span class="line">      strict: <span class="literal">false</span></span><br><span class="line">      datasource:</span><br><span class="line">        master:</span><br><span class="line">          url: jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">          username: root</span><br><span class="line">          password: <span class="number">123456</span></span><br><span class="line">        slave_1:</span><br><span class="line">          url: jdbc:mysql:<span class="comment">//localhost:3306/mybatis_plus_1?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">          driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">          username: root</span><br><span class="line">          password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="029b1c3d-8fd6-406d-8594-e613dc66d952-4"><blockquote><p>创建用户service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@DS(&quot;master&quot;)</span> <span class="comment">//指定所操作的数据源</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建商品service</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DS(&quot;slave_1&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt; <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="029b1c3d-8fd6-406d-8594-e613dc66d952-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductService productService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(userService.getById(<span class="number">1L</span>));</span><br><span class="line">    System.out.println(productService.getById(<span class="number">1L</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>1、都能顺利获取对象，则测试成功</p><p>2、如果我们实现读写分离，将写操作方法加上主库数据源，读操作方法加上从库数据源，自动切换，是不是就能实现读写分离？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="MyBatisX">MyBatisX</h2><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。<span class='p green'>MyBatisX插件可以根据方法名生成映射文件里的SQL语句。</span></p><p>MyBatisX插件用法：<a href="https://baomidou.com/pages/ba5b24/">https://baomidou.com/pages/ba5b24/</a></p><p>功能</p><div class="tabs" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-1"><i class="fas fa-cat"></i>xml跳转</button></li><li class="tab"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-2"><i class="fas fa-horse"></i>生成代码</button></li><li class="tab"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-3"><i class="fas fa-dove"></i>生成新增</button></li><li class="tab"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-4"><i class="fas fa-dragon"></i>生成查询</button></li><li class="tab"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-5"><i class="fas fa-heartbeat"></i>生成修改</button></li><li class="tab"><button type="button" data-href="#0e604186-f6b6-4d7c-86c8-e16f914a3c48-6"><i class="fas fa-cookie-bite"></i>生成删除</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-1"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-jump.gif" alt="跳转"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-2"><p><strong>(需先在 idea 配置 Database 配置数据源)</strong></p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-generate.gif" alt="生成代码"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-3"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-tip-insert.gif" alt="生成新增"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-4"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-tip-select.gif" alt="生成查询"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-5"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-tip-update.gif" alt="生成修改"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e604186-f6b6-4d7c-86c8-e16f914a3c48-6"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/mybatisx-tip-delete.gif" alt="生成删除"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">MyBatisPlus使用</summary>
    
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="MyBatisPlus" scheme="https://wuwawawa.github.io/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://wuwawawa.github.io/posts/7b510e10.html"/>
    <id>https://wuwawawa.github.io/posts/7b510e10.html</id>
    <published>2023-05-26T05:25:16.000Z</published>
    <updated>2023-05-31T06:50:25.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为<code>静态代理</code>和<code>动态代理</code>。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有<code>JDK代理</code>和<code>CGLib代理</code>两种。</p><p>相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。</p><p>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</p><p>说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。</p><p>动态代理在我们日常开发中使用的相对较少，但是在框架中的几乎是必用的一门技术。学会了动态代理之后，对于我们理解和学习各种框架的原理也非常有帮助。</p><p>就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。</p><hr><hr><h2 id="结构">结构</h2><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><hr><hr><h2 id="静态代理">静态代理</h2><p>静态代理中，我们对目标对象的每个方法的增强都是手动完成的，非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类）。实际应用场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>上面我们是从实现和应用角度来说的静态代理，从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。</p><p>静态代理实现步骤:</p><ul><li><p>定义一个接口及其实现类；</p></li><li><p>创建一个代理类同样实现这个接口</p></li><li><p>将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。</p></li></ul><p>我们通过案例来感受一下静态代理。</p><p>【例】火车站卖票</p><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86.png" alt="静态代理" style="zoom:80%;" /><div class="tabs" id="859270a0-7fac-4da2-8445-fb689759324d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#859270a0-7fac-4da2-8445-fb689759324d-1"><i class="fas fa-seedling"></i>卖票接口</button></li><li class="tab"><button type="button" data-href="#859270a0-7fac-4da2-8445-fb689759324d-2"><i class="fas fa-leaf"></i>火车站</button></li><li class="tab"><button type="button" data-href="#859270a0-7fac-4da2-8445-fb689759324d-3"><i class="fab fa-apple"></i>代售点</button></li><li class="tab"><button type="button" data-href="#859270a0-7fac-4da2-8445-fb689759324d-4"><i class="fas fa-tree"></i>Client</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="859270a0-7fac-4da2-8445-fb689759324d-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="859270a0-7fac-4da2-8445-fb689759324d-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="859270a0-7fac-4da2-8445-fb689759324d-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPoint</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class="line">        station.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="859270a0-7fac-4da2-8445-fb689759324d-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProxyPoint</span> <span class="variable">pp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyPoint</span>();</span><br><span class="line">        pp.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。</p><hr><hr><h2 id="JDK动态代理">JDK动态代理</h2><p>接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><p>java动态代理机制中有两个重要的类和接口：<code>InvocationHandler</code>和<code>Proxy</code>，这一个类Proxy和接口InvocationHandler是我们实现动态代理的核心</p><hr><h3 id="InvocationHandler">InvocationHandler</h3><p>每一个动态代理类的调用处理程序都必须实现<code>InvocationHandler接口</code>，并且每个代理类的实例都关联到了实现该接口的动态代理类调用处理程序中，当我们通过动态代理对象调用一个方法时候，这个方法的调用就会被转发到实现InvocationHandler接口类的invoke方法来调用，看如下invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * proxy:代理类代理的真实代理对象com.sun.proxy.$Proxy0</span></span><br><span class="line"><span class="comment">     * method:我们所要调用某个对象真实的方法的Method对象</span></span><br><span class="line"><span class="comment">     * args:指代代理对象方法传递的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">            <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Proxy">Proxy</h3><p>Proxy类就是用来创建一个代理对象的类，它提供了很多方法，但是我们最常用的是newProxyInstance方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, </span></span><br><span class="line"><span class="params">                                        Class&lt;?&gt;[] interfaces, </span></span><br><span class="line"><span class="params">                                        InvocationHandler h)</span></span><br></pre></td></tr></table></figure><p>这个方法的作用就是创建一个代理类对象，它接收三个参数，我们来看下几个参数的含义：</p><ul><li>loader：一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载</li><li>interfaces：一个interface对象数组，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。</li><li>h：一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。</li></ul><blockquote><p>newProxyInstance方法（省略版）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                       Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                       InvocationHandler h)</span> &#123;</span><br><span class="line">     <span class="comment">//检查h参数是否为空，如果为空，则抛出NullPointerException异常。</span></span><br><span class="line">     Objects.requireNonNull(h);</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//创建一个interfaces数组的克隆副本，并将其赋值给intfs。</span></span><br><span class="line">     <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//调用getProxyClass0方法，根据类加载器（loader）和接口数组（intfs）生成或查找指定的代理类，并将其赋值给cl。</span></span><br><span class="line">     Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取代理类cl的构造函数，并将其赋值给cons。将InvocationHandler h赋值给 ih。</span></span><br><span class="line">     <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams =</span><br><span class="line">             &#123; InvocationHandler.class &#125;;</span><br><span class="line">     <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">     <span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">ih</span> <span class="operator">=</span> h;</span><br><span class="line">     <span class="comment">//如果代理类cl不是公开的，通过AccessController.doPrivileged方法将代理类的构造函数设置为可访问。</span></span><br><span class="line">     <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">         AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">             <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                 cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                 <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//通过构造函数cons创建代理类的实例，并将调用处理器h作为参数传递。返回创建的代理实例。</span></span><br><span class="line">     <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;h&#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="示例">示例</h3><div class="tabs" id="f86f9d87-0b24-463f-9fbb-851a7622ccba"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f86f9d87-0b24-463f-9fbb-851a7622ccba-1"><i class="fas fa-cat"></i>卖票接口</button></li><li class="tab"><button type="button" data-href="#f86f9d87-0b24-463f-9fbb-851a7622ccba-2"><i class="fas fa-horse"></i>火车站</button></li><li class="tab"><button type="button" data-href="#f86f9d87-0b24-463f-9fbb-851a7622ccba-3"><i class="fas fa-dove"></i>代理工厂</button></li><li class="tab"><button type="button" data-href="#f86f9d87-0b24-463f-9fbb-851a7622ccba-4"><i class="fas fa-dragon"></i>Client</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f86f9d87-0b24-463f-9fbb-851a7622ccba-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f86f9d87-0b24-463f-9fbb-851a7622ccba-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f86f9d87-0b24-463f-9fbb-851a7622ccba-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理工厂，用来创建代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用Proxy获取station代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            newProxyInstance()方法参数说明：</span></span><br><span class="line"><span class="comment">                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口</span></span><br><span class="line"><span class="comment">                InvocationHandler h ： 代理对象的调用处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">sellTickets</span> <span class="operator">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        InvocationHandler中invoke方法参数说明：</span></span><br><span class="line"><span class="comment">                            proxy ： 代理对象</span></span><br><span class="line"><span class="comment">                            method ： 对应于在代理对象上调用的接口方法的 Method 实例</span></span><br><span class="line"><span class="comment">                            args ： 代理对象调用接口方法时传递的实际参数</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f86f9d87-0b24-463f-9fbb-851a7622ccba-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><div class="tabs" id="0f0ce109-dfef-40d9-ba15-7d5dff81d5fb"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0f0ce109-dfef-40d9-ba15-7d5dff81d5fb-1"><i class="fas fa-atom"></i>重点部分</button></li><li class="tab"><button type="button" data-href="#0f0ce109-dfef-40d9-ba15-7d5dff81d5fb-2"><i class="far fa-sun"></i>代理类完整代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0f0ce109-dfef-40d9-ba15-7d5dff81d5fb-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序运行过程中动态生成的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java提供的动态代理相关类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"><span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0f0ce109-dfef-40d9-ba15-7d5dff81d5fb-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>从上面的类中，我们可以看到以下几个信息：</p><ul><li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象（InvocationHandler h）传递给了父类。</li></ul><p>执行流程如下：</p><ol><li>在Client类中通过代理对象调用sell()方法</li><li>根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法</li><li>代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法</li><li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</li></ol><hr><hr><h2 id="CGLIB动态代理">CGLIB动态代理</h2><ol><li><p>静态代理和 JDK 代理模式都要求目标对象是实现一个接口,但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候可使用目标对象子类来实现代理-这就是Cglib代理</p></li><li><p>Cglib代理也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能扩展, 有些书也将Cglib代理归属到动态代理。</p></li><li><p>Cglib 是一个强大的高性能的代码生成包,它可以在运行期扩展 java 类与实现 java 接口.它广泛的被许多 AOP 的 框架使用,例如 Spring AOP，实现方法拦截</p></li><li><p>在 AOP 编程中如何选择代理模式：</p><ul><li><p>目标对象需要实现接口，用 JDK 代理</p></li><li><p>目标对象不需要实现接口，用 Cglib 代理</p></li></ul></li><li><p>Cglib 包的底层是通过使用字节码处理框架 ASM 来转换字节码并生成新的类</p></li><li><p>需要引入 cglib 的 jar 文件，在内存中动态构建子类，注意代理的类不能为 final，否则报错，目标对象的方法如果为 final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.</p></li><li><p>CGLIB也要求代理对象必须要实现<code>MethodInterceptor</code>接口，并重写其唯一的方法<code>intercept</code>。</p></li></ol><hr><h3 id="MethodInterceptor">MethodInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">    Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj：动态生成的代理对象</p><p>method:实际调用的方法</p><p>args：调用方法入参</p><p>MethodProxy：java Method类的代理类，可以实现委托类对象的方法的调用；常用方法：methodProxy.invokeSuper(proxy, args)；在拦截方法内可以调用多次。</p><hr><h3 id="示例-2">示例</h3><p>同样是上面的案例，我们再次使用CGLIB代理实现。</p><p>如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。</p><div class="tabs" id="259db4f6-6212-454f-8612-62e6d5e96892"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#259db4f6-6212-454f-8612-62e6d5e96892-1"><i class="fas fa-bug"></i>引入依赖</button></li><li class="tab"><button type="button" data-href="#259db4f6-6212-454f-8612-62e6d5e96892-2"><i class="fas fa-cannabis"></i>火车站</button></li><li class="tab"><button type="button" data-href="#259db4f6-6212-454f-8612-62e6d5e96892-3"><i class="fas fa-candy-cane"></i>代理工厂</button></li><li class="tab"><button type="button" data-href="#259db4f6-6212-454f-8612-62e6d5e96892-4"><i class="fas fa-child"></i>Client</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="259db4f6-6212-454f-8612-62e6d5e96892-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="259db4f6-6212-454f-8612-62e6d5e96892-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="259db4f6-6212-454f-8612-62e6d5e96892-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">obj</span> <span class="operator">=</span> (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        intercept方法参数说明：</span></span><br><span class="line"><span class="comment">            o ： 代理对象</span></span><br><span class="line"><span class="comment">            method ： 真实对象中的方法的Method实例</span></span><br><span class="line"><span class="comment">            args ： 实际参数</span></span><br><span class="line"><span class="comment">            methodProxy ：代理对象中的方法的method实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">result</span> <span class="operator">=</span> (TrainStation) methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="259db4f6-6212-454f-8612-62e6d5e96892-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建代理工厂对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line"></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="三种代理模式对比">三种代理模式对比</h2><blockquote><p>JDK代理和CGLIB代理</p></blockquote><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代理，如果没有接口使用CGLIB代理。</p><p>JDK动态代理：需要被代理对象的类实现了某些接口（没有实现类也能代理），生成的代理类也会实现相应的接口</p><p>CGLIB动态代理：不需要被代理对象的类实现了某些接口，生成的代理类为目标对象的类的子类</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/14eb2dd78bac59281c7c84f291bdfb1b.png" alt="动态代理——JDK动态代理原理&amp;示例解析（图文并茂）"></p><blockquote><p>动态代理和静态代理</p></blockquote><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p><blockquote><p>优缺点</p></blockquote><p><strong>优点：</strong></p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p><strong>缺点：</strong></p><ul><li>增加了系统的复杂度；</li></ul><hr><hr><h2 id="JDK动态代理补充">JDK动态代理补充</h2><p>JDK代理，代理的是接口，既然代理的是接口，那如果没有实现类怎么办，能不能代理。答案是可以的，Mybatis就是这样的。</p><p>Mybatis使用JDK动态代理来实现Mapper接口，事先保存好Mapper接口，和接口声明的方法，返回值，参数类型，然后代理类的方法调用的时候使用MapperMethod这个事先放入方法缓存里的对象来真实调用功能。</p><blockquote><p>例子</p></blockquote><div class="tabs" id="c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-1"><i class="fas fa-cat"></i>被代理的接口</button></li><li class="tab"><button type="button" data-href="#c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-2"><i class="fas fa-horse"></i>代理对象</button></li><li class="tab"><button type="button" data-href="#c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-3"><i class="fas fa-dove"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-1"><p>这个接口可以看成是Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-2"><p>这个代理类使用了泛型，说明这个代理类可以代理所有的mapper接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxyFactory</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; proxyInterface;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; proxyInterface)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.proxyInterface = proxyInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;selectById&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//获取参数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> (<span class="type">int</span>) args[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//假装进行了查询</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, <span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="number">11</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;test@qq.com&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;selectById调用成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(proxyInterface.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;proxyInterface&#125;,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c5d0f5d3-10a8-409d-b70f-b260ae6e9bb1-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    MapperProxyFactory&lt;UserMapper&gt; mapperFactory = <span class="keyword">new</span> <span class="title class_">MapperProxyFactory</span>&lt;&gt;(UserMapper.class);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> mapperFactory.getProxy();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">selectById调用成功</span><br><span class="line">User&#123;<span class="built_in">id</span>=1, username=<span class="string">&#x27;111&#x27;</span>, password=<span class="string">&#x27;222&#x27;</span>, age=11, sex=<span class="string">&#x27;男&#x27;</span>, email=<span class="string">&#x27;test@qq.com&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>使用阿尔萨斯生成Mapper接口的代理对象</p></blockquote><div class="tabs" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-1"><i class="fas fa-cat"></i>Mapper接口</button></li><li class="tab"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-2"><i class="fas fa-horse"></i>代理对象（省略版）</button></li><li class="tab"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-3"><i class="fas fa-dove"></i>代理对象（完整版）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy7</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">Proxy</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> User <span class="title function_">getUserById</span><span class="params">(Integer n)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> (User) <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;n&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy7(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>).getMethod(<span class="string">&quot;getUserById&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy7</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Proxy</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> User <span class="title function_">getUserById</span><span class="params">(Integer n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (User)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;n&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy7(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>).getMethod(<span class="string">&quot;getUserById&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>));</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>Java中InvocationHandler接口中第一个参数proxy详解</p><p><a href="https://blog.csdn.net/yaomingyang/article/details/81040390">https://blog.csdn.net/yaomingyang/article/details/81040390</a></p>]]></content>
    
    
    <summary type="html">静态代理、动态代理、cglib代理、原理解析</summary>
    
    
    
    <category term="设计模式" scheme="https://wuwawawa.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://wuwawawa.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis源码解析</title>
    <link href="https://wuwawawa.github.io/posts/acfac54a.html"/>
    <id>https://wuwawawa.github.io/posts/acfac54a.html</id>
    <published>2023-05-25T03:27:31.000Z</published>
    <updated>2023-05-31T14:38:52.356Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">包名</th><th style="text-align:left">包作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>annotations</code></td><td style="text-align:left">在mapper接口中使用的所有注解</td></tr><tr><td style="text-align:left"><code>binding</code></td><td style="text-align:left">将mapper接口和映射语句进行关联</td></tr><tr><td style="text-align:left"><code>builder</code></td><td style="text-align:left">配置构建包，通过xml和注解构建configuration</td></tr><tr><td style="text-align:left"><code>cache</code></td><td style="text-align:left">一级缓存和二级缓存处理</td></tr><tr><td style="text-align:left"><code>cursor</code></td><td style="text-align:left">游标处理相关，可以处理处理百万级别的数据</td></tr><tr><td style="text-align:left"><code>datasource</code></td><td style="text-align:left">数据源相关</td></tr><tr><td style="text-align:left"><code>exceptions</code></td><td style="text-align:left">异常机制</td></tr><tr><td style="text-align:left"><code>io</code></td><td style="text-align:left">读取数据源的IO工具类</td></tr><tr><td style="text-align:left"><code>jdbc</code></td><td style="text-align:left">JDBC的工具类</td></tr><tr><td style="text-align:left"><code>logging</code></td><td style="text-align:left">日志相关</td></tr><tr><td style="text-align:left"><code>mapping</code></td><td style="text-align:left">映射相关</td></tr><tr><td style="text-align:left"><code>parsing</code></td><td style="text-align:left">解析配置相关</td></tr><tr><td style="text-align:left"><code>plugin</code></td><td style="text-align:left">插件相关</td></tr><tr><td style="text-align:left"><code>reflection</code></td><td style="text-align:left">反射相关</td></tr><tr><td style="text-align:left"><code>session</code></td><td style="text-align:left">会话相关</td></tr><tr><td style="text-align:left"><code>transaction</code></td><td style="text-align:left">事物相关</td></tr></tbody></table><h2 id="MyBatis核心组件">MyBatis核心组件</h2><p>在解读源码之前，我们很有必要先了解 MyBatis 七大核心组件，知道他们都是做什么用的。</p><p>核心组件有：Configuration、SqlSession、Executor、StatementHandler、ParameterHandler、TypeHandler、ResultSethandler。</p><p>下面简单介绍一下他们：</p><div class="tabs" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-4"><i class="fas fa-tree"></i>4</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-5"><i class="fas fa-cat"></i>5</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-6"><i class="fas fa-horse"></i>6</button></li><li class="tab"><button type="button" data-href="#5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-7"><i class="fas fa-dove"></i>7</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-1"><p><mark class="hl-label blue">SqlSession</mark></p><p>它包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。</p><p>SqlSession是MyBatis提供的面向用户的API，表示和数据库交互时的会话对象，用于完成数据库的增删改查功能。SqlSession是Executor组件的外观，目的是对外提供易于理解和使用的数据库操作接口。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-2"><p><mark class="hl-label green">Configuration</mark></p><p>用于描述 MyBatis 主配置文件信息，MyBatis 框架在启动时会加载主配置文件，将配置信息转换为 Configuration 对象。</p><p>除此之外，MyBatis在应用启动时，将Mapper配置信息、类型别名、TypeHandler等注册到Configuration组件中，其他组件需要这些信息时，也可以从Configuration对象中获取。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-3"><p><mark class="hl-label blue">Executor</mark></p><p>SQL 执行器，用于和数据库交互。SqlSession 可以理解为 Executor 组件的外观（外观模式），真正执行 SQL 的是 Executor 组件。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1617638902287-25c47fa7-93ad-4e39-84e2-2905756c61e5.png" alt="image.png" style="zoom: 50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-4"><p><mark class="hl-label green">StatementHandler</mark></p><p>StatementHandler组件封装了对JDBC Statement的操作，例如设置Statement对象的fetchSize属性、设置查询超时时间、调用JDBC Statement与数据库交互等。</p><p>下面是StatementHandler的三个实现类</p><p>SimpleStatementHandler ：封装了JDBC的 Statement 对象</p><p>PreparedStatementHandler：封装了JDBC的 PreparedStatement 对象 （可添加sql参数）</p><p>CallableStatementHandler：封装了JDBC的 CallableStatement 对象</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-5"><p><mark class="hl-label blue">ParameterHandler</mark></p><p>用于处理 SQL 中的参数占位符，为参数占位符设置值。</p><p>当MyBatis框架使用的Statement类型为CallableStatement和PreparedStatement时，ParameterHandler用于为Statement对象参数占位符设置值。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-6"><p><mark class="hl-label green">TypeHandler</mark></p><p>类型处理器，用于 Java 类型与 JDBC 类型之间的转换。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a861bcc-7dc7-4511-b5f3-5ebcfe19c8be-7"><p><mark class="hl-label blue">ResultSetHandler</mark></p><p>封装了对 ResultSet 对象的处理逻辑，将结果集转换为 Java 实体对象。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>SqlSession组件，它是用户层面的API。用户可利用 SqlSession 获取想要的 Mapper 对象（MapperProxy 代理对象）；当执行 Mapper 的方法，MapperProxy 会创建对应的 MapperMetohd，然后 MapperMethod 底层其实是利用 SqlSession 来执行 SQL。</p><p>但是真正执行 SQL 操作的应该是 Executor组件，Executor 可以理解为 SQL执行器，它会使用 StatementHandler 组件对 JDBC 的 Statement 对象进行操作。当 Statement 类型为 CallableStatement 和 PreparedStatement 时，会通过 ParameterHandler 组件为参数占位符赋值。</p><p>ParameterHandler 组件中会根据 Java 类型找到对应的 TypeHandler 对象，TypeHandler 中会通过 Statement 对象提供的 setXXX() 方法（例如setString()方法）为 Statement 对象中的参数占位符设置值。</p><p>StatementHandler 组件使用 JDBC 中的 Statement 对象与数据库完成交互后，当 SQL 语句类型为 SELECT 时，MyBatis 通过 ResultSetHandler 组件从 Statement 对象中获取 ResultSet 对象，然后将 ResultSet 对象转换为 Java 对象。</p><p>我们可以用一幅图来描述上面各个核心组件之间的关系：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1617635030060-035d7ee6-b901-4e3f-9797-5397c7453508.png" alt="image.png" style="zoom:67%;" /><hr><hr><h2 id="MyBatis启动代码">MyBatis启动代码</h2><p>使用mybatis的部分代码，包括七步。每步虽然都是一行代码，但是隐藏了很多细节。接下来我们将围绕这七步展开了解。</p><div class="tabs" id="81ce6ac1-b903-44eb-a267-8101c100e87c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#81ce6ac1-b903-44eb-a267-8101c100e87c-1"><i class="fas fa-seedling"></i>启动代码</button></li><li class="tab"><button type="button" data-href="#81ce6ac1-b903-44eb-a267-8101c100e87c-2"><i class="fas fa-leaf"></i>mybatis-config.xml</button></li><li class="tab"><button type="button" data-href="#81ce6ac1-b903-44eb-a267-8101c100e87c-3"><i class="fab fa-apple"></i>UserMapper</button></li><li class="tab"><button type="button" data-href="#81ce6ac1-b903-44eb-a267-8101c100e87c-4"><i class="fas fa-tree"></i>UserMapper.xml</button></li><li class="tab"><button type="button" data-href="#81ce6ac1-b903-44eb-a267-8101c100e87c-5"><i class="fas fa-heartbeat"></i>User</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="81ce6ac1-b903-44eb-a267-8101c100e87c-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 读取配置</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2. 创建SqlSessionFactory工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">// 3. 获取sqlSession</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4. 获取Mapper</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 5. 执行接口方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">userInfo</span> <span class="operator">=</span> userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(userInfo);</span><br><span class="line">        <span class="comment">// 6. 提交事物</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 7. 关闭资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="81ce6ac1-b903-44eb-a267-8101c100e87c-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="81ce6ac1-b903-44eb-a267-8101c100e87c-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="81ce6ac1-b903-44eb-a267-8101c100e87c-4"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, username, password, age, sex, email</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) Integer id);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        from t_user</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="81ce6ac1-b903-44eb-a267-8101c100e87c-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="1-读取配置">1.读取配置</h2><p><code>InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);</code></p><p>在<code>mybatis-config.xml</code>中我们配置了属性，环境，映射文件路径等，其实不仅可以配置以上内容，还可以配置插件，反射工厂，类型处理器等等其它内容。在启动流程中的第一步我们就需要读取这个配置文件，并获取一个输入流为下一步解析配置文件作准备。</p><hr><hr><h2 id="2-创建SqlSessionFactory工厂">2.创建SqlSessionFactory工厂</h2><p><code>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</code></p><p>在 Mybatis 中，每一个应用都是基于<code>SqlSessionFactory</code>为核心。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1624267923708-cfabfb25-50a2-4da9-8342-205800c8afc3.png" alt="image.png" style="zoom: 60%;" /><hr><h3 id="SqlSessionFactory和SqlSession">SqlSessionFactory和SqlSession</h3><p>SqlSessionFactory工厂是为了创建一个对象而生的，其产出的对象就是SqlSession对象。</p><p>SqlSessionFactoryBuilder的build()方法使用建造者模式创建了SqlSessionFactory接口对象。<span class='p green'>SqlSessionFactory接口的默认实现是DefaultSqlSessionFactory。</span><span class='p blue'>SqlSession接口的默认实现则是DefaultSqlSession。</span>SqlSessionFactory使用实例工厂模式来创建SqlSession对象。</p><p>SqlSession是高级接口，类似于JDBC操作的connection对象，它包装了数据库连接，通过这个接口我们可以实现增删改查，提交/回滚事物，关闭连接，获取代理类等操作。SqlSession是线程不安全的，每个线程都会有自己唯一的SqlSession，不同线程间调用同一个SqlSession会出现问题，因此在使用完后需要close掉。</p><p>下面列出了SqlSessionFactory和SqlSession的主要方法，一些重载的方法就过滤掉了。</p><div class="tabs" id="e3b840d3-52a0-4f80-b193-eb707bc2dada"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e3b840d3-52a0-4f80-b193-eb707bc2dada-1"><i class="fas fa-cat"></i>SqlSessionFactory</button></li><li class="tab"><button type="button" data-href="#e3b840d3-52a0-4f80-b193-eb707bc2dada-2"><i class="fas fa-horse"></i>SqlSession</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e3b840d3-52a0-4f80-b193-eb707bc2dada-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSessionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(TransactionIsolationLevel level)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, <span class="type">boolean</span> autoCommit)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span>;</span><br><span class="line"></span><br><span class="line">  SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">  Configuration <span class="title function_">getConfiguration</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e3b840d3-52a0-4f80-b193-eb707bc2dada-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSession</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询一个结果对象</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询一个结果集合</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询一个map</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询游标</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span>;</span><br><span class="line">  </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 插入</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 修改</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 删除</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 提交事物</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 回滚事物</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line"></span><br><span class="line">  List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  Configuration <span class="title function_">getConfiguration</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取映射代理类</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取数据库连接</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  Connection <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="核心源码⭐️">核心源码⭐️</h3><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230531101220358.png" alt="image-20230531101220358" style="zoom:67%;" /><p>通过源码，我们可以看到SqlSessionFactoryBuilder通过XMLConfigBuilder去解析我们传入的mybatis的配置文件，构造出Configuration，最终返回new DefaultSqlSessionFactory(config)的SqlSessionFactory实例。</p><div class="tabs" id="9842058c-f078-42b2-a3be-991f253c7169"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#9842058c-f078-42b2-a3be-991f253c7169-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#9842058c-f078-42b2-a3be-991f253c7169-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#9842058c-f078-42b2-a3be-991f253c7169-3"><i class="fas fa-wind"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="9842058c-f078-42b2-a3be-991f253c7169-1"><p><mark class="hl-label blue">SqlSessionFactoryBuilder#build</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> &#123;</span><br><span class="line">    <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(inputStream, environment, properties);</span><br><span class="line">    <span class="keyword">return</span> build(parser.parse());<span class="comment">//跳转2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Configuration config)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9842058c-f078-42b2-a3be-991f253c7169-2"><p><mark class="hl-label green">XMLConfigBuilder#parse</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Configuration <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (parsed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Each XMLConfigBuilder can only be used once.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  parsed = <span class="literal">true</span>;</span><br><span class="line">  parseConfiguration(parser.evalNode(<span class="string">&quot;/configuration&quot;</span>));<span class="comment">//跳转3</span></span><br><span class="line">  <span class="keyword">return</span> configuration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="9842058c-f078-42b2-a3be-991f253c7169-3"><p><mark class="hl-label blue">XMLConfigBuilder#parseConfiguration</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConfiguration</span><span class="params">(XNode root)</span> &#123;</span><br><span class="line">    propertiesElement(root.evalNode(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">settings</span> <span class="operator">=</span> settingsAsProperties(root.evalNode(<span class="string">&quot;settings&quot;</span>));</span><br><span class="line">    loadCustomVfs(settings);</span><br><span class="line">    loadCustomLogImpl(settings);</span><br><span class="line">    typeAliasesElement(root.evalNode(<span class="string">&quot;typeAliases&quot;</span>));</span><br><span class="line">    pluginElement(root.evalNode(<span class="string">&quot;plugins&quot;</span>));</span><br><span class="line">    objectFactoryElement(root.evalNode(<span class="string">&quot;objectFactory&quot;</span>));</span><br><span class="line">    objectWrapperFactoryElement(root.evalNode(<span class="string">&quot;objectWrapperFactory&quot;</span>));</span><br><span class="line">    reflectorFactoryElement(root.evalNode(<span class="string">&quot;reflectorFactory&quot;</span>));</span><br><span class="line">    settingsElement(settings);</span><br><span class="line">    environmentsElement(root.evalNode(<span class="string">&quot;environments&quot;</span>));</span><br><span class="line">    databaseIdProviderElement(root.evalNode(<span class="string">&quot;databaseIdProvider&quot;</span>));</span><br><span class="line">    typeHandlerElement(root.evalNode(<span class="string">&quot;typeHandlers&quot;</span>));</span><br><span class="line">    <span class="comment">//解析mappers 主要的crud操作都是在mappers中定义的</span></span><br><span class="line">    mapperElement(root.evalNode(<span class="string">&quot;mappers&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出可以配置10个子节点， 分别为：properties、settings、typeAliases、plugins、objectFactory、objectWrapperFactory、environments、databaseIdProvider、typeHandlers、mappers。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="Configuration">Configuration</h3><p>XMLConfigBuilder调用parse()方法解析Mybatis配置文件，生成Configuration对象。</p><p>Configuration类主要是用来存储对Mybatis的配置文件及mapper文件解析后的数据，Configuration对象会贯穿整个Mybatis的执行流程，为Mybatis的执行过程提供必要的配置信息。</p><p>我们先贴出一个包含了所有属性的mybatis-Config.xml实例，再对照看一看Configuration类的主要成员变量</p><div class="tabs" id="0a864dc3-6239-422f-8f7b-e73cf7167fda"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0a864dc3-6239-422f-8f7b-e73cf7167fda-1"><i class="fas fa-bug"></i>Configuration</button></li><li class="tab"><button type="button" data-href="#0a864dc3-6239-422f-8f7b-e73cf7167fda-2"><i class="fas fa-cannabis"></i>mybatis-config.xml</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0a864dc3-6239-422f-8f7b-e73cf7167fda-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中,</span></span><br><span class="line"><span class="comment">     * 比如设置不同的开发、测试、线上配置，在每个配置中可以配置事务管理器和数据源对象.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Environment environment;</span><br><span class="line">    <span class="comment">//是否开启自动驼峰命名规则（camel case）映射</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">mapUnderscoreToCamelCase</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//配置全局性的cache开关</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">cacheEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//指定 MyBatis 所用日志的具体实现，未指定时将自动查找</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Log</span>&gt; logImpl;</span><br><span class="line">    <span class="comment">//MyBatis 利用本地缓存机制</span></span><br><span class="line">    <span class="type">LocalCacheScope</span> <span class="variable">localCacheScope</span> <span class="operator">=</span> LocalCacheScope.SESSION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置超时时间，它决定驱动等待数据库响应的秒数。</span></span><br><span class="line">    Integer defaultStatementTimeout;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置默认的执行器。</span></span><br><span class="line"><span class="comment">     * SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）</span></span><br><span class="line"><span class="comment">     * BATCH 执行器将重用语句并执行批量更新。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ExecutorType</span> <span class="variable">defaultExecutorType</span> <span class="operator">=</span> ExecutorType.SIMPLE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象创建工厂，默认的实现类DefaultObjectFactory，用来创建对象，比如传入List.class，利用反射返回ArrayList的实例</span></span><br><span class="line">    <span class="type">ObjectFactory</span> <span class="variable">objectFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultObjectFactory</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象包装工厂，默认实现类是DefaultObjectWrapperFactory，包装Object实例</span></span><br><span class="line">    <span class="type">ObjectWrapperFactory</span> <span class="variable">objectWrapperFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultObjectWrapperFactory</span>();</span><br><span class="line">    <span class="comment">//注册Mapper</span></span><br><span class="line">    <span class="type">MapperRegistry</span> <span class="variable">mapperRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperRegistry</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器链</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">InterceptorChain</span> <span class="variable">interceptorChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterceptorChain</span>();</span><br><span class="line">    <span class="comment">//TypeHandler注册</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeHandlerRegistry</span>();</span><br><span class="line">    <span class="comment">//别名和具体类注册</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TypeAliasRegistry</span> <span class="variable">typeAliasRegistry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeAliasRegistry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对应Mapper.xml里配置的Statement</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, MappedStatement&gt; mappedStatements = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;MappedStatement&gt;(<span class="string">&quot;Mapped Statements collection&quot;</span>);</span><br><span class="line">    <span class="comment">//对应Mapper.xml里配置的cache</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, Cache&gt; caches = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;Cache&gt;(<span class="string">&quot;Caches collection&quot;</span>);</span><br><span class="line">    <span class="comment">//对应Mapper.xml里的ResultMap</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, ResultMap&gt; resultMaps = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;ResultMap&gt;(<span class="string">&quot;Result Maps collection&quot;</span>);</span><br><span class="line">    <span class="comment">//对应Mapper.xml里的ParameterMap</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, ParameterMap&gt; parameterMaps = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;ParameterMap&gt;(<span class="string">&quot;Parameter Maps collection&quot;</span>);</span><br><span class="line">    <span class="comment">//主键生成器</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, KeyGenerator&gt; keyGenerators = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;KeyGenerator&gt;(<span class="string">&quot;Key Generators collection&quot;</span>);</span><br><span class="line">    <span class="comment">//存储已经加载过的mapper.xml资源，见MapperAnnotationBuilder#loadXmlResource</span></span><br><span class="line">    <span class="keyword">final</span> Set&lt;String&gt; loadedResources = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">    <span class="comment">//存储已经解析过的mapper对应的xml节点</span></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, XNode&gt; sqlFragments = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;XNode&gt;(<span class="string">&quot;XML fragments parsed from previous mappers&quot;</span>);</span><br><span class="line">    <span class="comment">//存储所有未处理的</span></span><br><span class="line">    <span class="keyword">final</span> Collection&lt;XMLStatementBuilder&gt; incompleteStatements = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;XMLStatementBuilder&gt;();</span><br><span class="line">    <span class="comment">//存储所有未处理的缓存信息</span></span><br><span class="line">    <span class="keyword">final</span> Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;CacheRefResolver&gt;();</span><br><span class="line">    <span class="comment">//存储所有未处理ResultMap的映射信息</span></span><br><span class="line">    <span class="keyword">final</span> Collection&lt;ResultMapResolver&gt; incompleteResultMaps = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ResultMapResolver&gt;();</span><br><span class="line">    <span class="keyword">final</span> Collection&lt;MethodResolver&gt; incompleteMethods = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;MethodResolver&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0a864dc3-6239-422f-8f7b-e73cf7167fda-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/apache/ibatis/databases/blog/blog-derby.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.domain.blog.Author&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.domain.blog.Blog&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">javaType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.builder.CustomStringTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.builder.ExampleObjectFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectFactoryProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;org.apache.ibatis.builder.ExamplePlugin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pluginProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/apache/ibatis/builder/AuthorMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/apache/ibatis/builder/BlogMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="解析mapper-xml⭐️">解析mapper.xml⭐️</h3><p>由核心源码3中我们可知，解析mapper文件是从<code>mapperElement(root.evalNode(&quot;mappers&quot;));</code> 开始处理的。</p><div class="tabs" id="c58fa038-9a9a-4df6-af2c-b602640abac1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-2"><i class="fas fa-leaf"></i>2</button></li><li class="tab"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-4"><i class="fas fa-tree"></i>4</button></li><li class="tab"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-5"><i class="fas fa-cat"></i>5</button></li><li class="tab"><button type="button" data-href="#c58fa038-9a9a-4df6-af2c-b602640abac1-6"><i class="fas fa-horse"></i>6</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c58fa038-9a9a-4df6-af2c-b602640abac1-1"><p><mark class="hl-label blue">XMLConfigBuilder#mapperElement()</mark></p><p>从代码来看，主要是将标签分为<code>&lt;package&gt;</code>和<code>&lt;mapper&gt;</code>来解析，而再细一点可以分为两种解析情况：一种是指定了Mapper接口的 XML 文件，而另外一种是指定了 Mapper接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mapperElement</span><span class="params">(XNode parent)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (XNode child : parent.getChildren()) &#123;</span><br><span class="line">            <span class="comment">// 通过&lt;package&gt;标签指定包名</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;package&quot;</span>.equals(child.getName())) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">mapperPackage</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                configuration.addMappers(mapperPackage);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">mapperClass</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">// 通过resource属性指定XML文件路径</span></span><br><span class="line">                <span class="keyword">if</span> (resource != <span class="literal">null</span> &amp;&amp; url == <span class="literal">null</span> &amp;&amp; mapperClass == <span class="literal">null</span>) &#123;</span><br><span class="line">                    ErrorContext.instance().resource(resource);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">                    <span class="type">XMLMapperBuilder</span> <span class="variable">mapperParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(inputStream, configuration, resource, configuration.getSqlFragments());</span><br><span class="line">                    mapperParser.parse();<span class="comment">//-&gt;2</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resource == <span class="literal">null</span> &amp;&amp; url != <span class="literal">null</span> &amp;&amp; mapperClass == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过url属性指定XML文件路径</span></span><br><span class="line">                    ErrorContext.instance().resource(url);</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getUrlAsStream(url);</span><br><span class="line">                    <span class="type">XMLMapperBuilder</span> <span class="variable">mapperParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLMapperBuilder</span>(inputStream, configuration, url, configuration.getSqlFragments());</span><br><span class="line">                    mapperParser.parse();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resource == <span class="literal">null</span> &amp;&amp; url == <span class="literal">null</span> &amp;&amp; mapperClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 通过class属性指定接口的完全限定名</span></span><br><span class="line">                    Class&lt;?&gt; mapperInterface = Resources.classForName(mapperClass);</span><br><span class="line">                    configuration.addMapper(mapperInterface);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c58fa038-9a9a-4df6-af2c-b602640abac1-2"><p><mark class="hl-label green">XMLMapperBuilder#parse()</mark></p><p>我们可以先看看指定 XML 文件是如何解析与加载 Mapper 的。Mapper 接口的 XML 文件的解析当然也是利用 XPathParser，但此时不再是 XMLConfigBuilder 来负责了，而是需要创建一个 XMLMapperBuilder 对象，而 XMLMapperBuilder 需要传入 XML 文件的文件输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;</span><br><span class="line">      <span class="comment">// 调用XPathParser的evalNode（）方法获取根节点对应的XNode对象</span></span><br><span class="line">      configurationElement(parser.evalNode(<span class="string">&quot;/mapper&quot;</span>));<span class="comment">//-&gt;3</span></span><br><span class="line">      <span class="comment">// 將资源路径添加到Configuration对象中</span></span><br><span class="line">      configuration.addLoadedResource(resource);</span><br><span class="line">      bindMapperForNamespace();<span class="comment">//-&gt;注册mapper接口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 继续解析之前解析出现异常的ResultMap对象</span></span><br><span class="line">    parsePendingResultMaps();</span><br><span class="line">    <span class="comment">// 继续解析之前解析出现异常的CacheRef对象</span></span><br><span class="line">    parsePendingCacheRefs();</span><br><span class="line">    <span class="comment">// 继续解析之前解析出现异常&lt;select|update|delete|insert&gt;标签配置</span></span><br><span class="line">    parsePendingStatements();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析前，会先判断 Configuratin 是否已经加载这个 XML 资源，如果不存在，则调用<code>configurationElement() 方法</code>；在方法里面会解析所有的<code>&lt;cache-ref&gt;</code>、<code>&lt;cache&gt;</code>、<code>&lt;parameterMap&gt;</code>、<code>&lt;resultMap&gt;</code>、<code>&lt;sql&gt;</code> 和 <code>&lt;select|insert|update|delete&gt;</code> 标签。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c58fa038-9a9a-4df6-af2c-b602640abac1-3"><p><mark class="hl-label blue">XMLMapperBuilder#configuratinElement()</mark></p><p>我们将所有注意力集中在 buildStatementFromContext 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configurationElement</span><span class="params">(XNode context)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取命名空间</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">namespace</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;namespace&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (namespace == <span class="literal">null</span> || namespace.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Mapper&#x27;s namespace cannot be empty&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 设置当前正在解析的Mapper配置的命名空间</span></span><br><span class="line">      builderAssistant.setCurrentNamespace(namespace);</span><br><span class="line">      <span class="comment">// 解析&lt;cache-ref&gt;标签</span></span><br><span class="line">      cacheRefElement(context.evalNode(<span class="string">&quot;cache-ref&quot;</span>));</span><br><span class="line">      <span class="comment">// 解析&lt;cache&gt;标签</span></span><br><span class="line">      cacheElement(context.evalNode(<span class="string">&quot;cache&quot;</span>));</span><br><span class="line">      <span class="comment">// 解析所有的&lt;parameterMap&gt;标签</span></span><br><span class="line">      parameterMapElement(context.evalNodes(<span class="string">&quot;/mapper/parameterMap&quot;</span>));</span><br><span class="line">      <span class="comment">// 解析所有的&lt;resultMap&gt;标签</span></span><br><span class="line">      resultMapElements(context.evalNodes(<span class="string">&quot;/mapper/resultMap&quot;</span>));</span><br><span class="line">      <span class="comment">// 解析所有的&lt;sql&gt;标签</span></span><br><span class="line">      sqlElement(context.evalNodes(<span class="string">&quot;/mapper/sql&quot;</span>));</span><br><span class="line">      <span class="comment">// 解析所有的&lt;select|insert|update|delete&gt;标签</span></span><br><span class="line">      buildStatementFromContext(context.evalNodes(<span class="string">&quot;select|insert|update|delete&quot;</span>));<span class="comment">//-&gt;4</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BuilderException</span>(<span class="string">&quot;Error parsing Mapper XML. The XML location is &#x27;&quot;</span> + resource + <span class="string">&quot;&#x27;. Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c58fa038-9a9a-4df6-af2c-b602640abac1-4"><p><mark class="hl-label green">XMLMapperBuilder#buildStatementFromContext()</mark></p><p>在这个方法里面，会调用重载的 buildStatementFromContext 方法；但是这里还不是真正解析的地方，而是遍历所有标签，然后创建一个 XMLStatementBuilder 对象，对标签进行解析。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildStatementFromContext</span><span class="params">(List&lt;XNode&gt; list, String requiredDatabaseId)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (XNode context : list) &#123;</span><br><span class="line">    <span class="comment">// 通过XMLStatementBuilder对象，对&lt;select|update|insert|delete&gt;标签进行解析</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">XMLStatementBuilder</span> <span class="variable">statementParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLStatementBuilder</span>(configuration, builderAssistant, context, requiredDatabaseId);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 调用parseStatementNode（）方法解析</span></span><br><span class="line">      statementParser.parseStatementNode();<span class="comment">//-&gt;5</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncompleteElementException e) &#123;</span><br><span class="line">      configuration.addIncompleteStatement(statementParser);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c58fa038-9a9a-4df6-af2c-b602640abac1-5"><p><mark class="hl-label blue">XMLStatementBuilder#parseStatementNode()</mark></p><p>从代码可得，首先会解析标签里的所有属性；然后创建 LanguageDriver 来解析标签里面的 SQL 配置，并生成对应的 SqlSource 对象；最后，利用工具类 MapperBuilderAssistant 来将上面解析的内容组装成 MappedStatement 对象，并且注册到 Configuration 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseStatementNode</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">databaseId</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;databaseId&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!databaseIdMatchesCurrent(id, databaseId, <span class="built_in">this</span>.requiredDatabaseId)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解析&lt;select|update|delete|insert&gt;标签属性</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">fetchSize</span> <span class="operator">=</span> context.getIntAttribute(<span class="string">&quot;fetchSize&quot;</span>);</span><br><span class="line">  <span class="type">Integer</span> <span class="variable">timeout</span> <span class="operator">=</span> context.getIntAttribute(<span class="string">&quot;timeout&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">parameterMap</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;parameterMap&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">parameterType</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;parameterType&quot;</span>);</span><br><span class="line">  Class&lt;?&gt; parameterTypeClass = resolveClass(parameterType);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultMap</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;resultMap&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultType</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;resultType&quot;</span>);</span><br><span class="line">  <span class="comment">// 获取LanguageDriver对象</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">lang</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;lang&quot;</span>);</span><br><span class="line">  <span class="type">LanguageDriver</span> <span class="variable">langDriver</span> <span class="operator">=</span> getLanguageDriver(lang);</span><br><span class="line">  <span class="comment">// 获取Mapper返回结果类型Class对象</span></span><br><span class="line">  Class&lt;?&gt; resultTypeClass = resolveClass(resultType);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultSetType</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;resultSetType&quot;</span>);</span><br><span class="line">  <span class="comment">// 默认Statement类型为PREPARED</span></span><br><span class="line">  <span class="type">StatementType</span> <span class="variable">statementType</span> <span class="operator">=</span> StatementType.valueOf(context.getStringAttribute(<span class="string">&quot;statementType&quot;</span>,</span><br><span class="line">          StatementType.PREPARED.toString()));</span><br><span class="line">  <span class="type">ResultSetType</span> <span class="variable">resultSetTypeEnum</span> <span class="operator">=</span> resolveResultSetType(resultSetType);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> context.getNode().getNodeName();</span><br><span class="line">  <span class="type">SqlCommandType</span> <span class="variable">sqlCommandType</span> <span class="operator">=</span> SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">isSelect</span> <span class="operator">=</span> sqlCommandType == SqlCommandType.SELECT;</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">flushCache</span> <span class="operator">=</span> context.getBooleanAttribute(<span class="string">&quot;flushCache&quot;</span>, !isSelect);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">useCache</span> <span class="operator">=</span> context.getBooleanAttribute(<span class="string">&quot;useCache&quot;</span>, isSelect);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">resultOrdered</span> <span class="operator">=</span> context.getBooleanAttribute(<span class="string">&quot;resultOrdered&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 將&lt;include&gt;标签内容，替换为&lt;sql&gt;标签定义的SQL片段</span></span><br><span class="line">  <span class="type">XMLIncludeTransformer</span> <span class="variable">includeParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLIncludeTransformer</span>(configuration, builderAssistant);</span><br><span class="line">  includeParser.applyIncludes(context.getNode());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析&lt;selectKey&gt;标签</span></span><br><span class="line">  processSelectKeyNodes(id, parameterTypeClass, langDriver);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 通过LanguageDriver解析SQL内容，生成SqlSource对象</span></span><br><span class="line">  <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> langDriver.createSqlSource(configuration, context, parameterTypeClass);</span><br><span class="line">  <span class="type">String</span> <span class="variable">resultSets</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;resultSets&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">keyProperty</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;keyProperty&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">keyColumn</span> <span class="operator">=</span> context.getStringAttribute(<span class="string">&quot;keyColumn&quot;</span>);</span><br><span class="line">  KeyGenerator keyGenerator;</span><br><span class="line">  <span class="type">String</span> <span class="variable">keyStatementId</span> <span class="operator">=</span> id + SelectKeyGenerator.SELECT_KEY_SUFFIX;</span><br><span class="line">  keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 获取主键生成策略</span></span><br><span class="line">  <span class="keyword">if</span> (configuration.hasKeyGenerator(keyStatementId)) &#123;</span><br><span class="line">    keyGenerator = configuration.getKeyGenerator(keyStatementId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    keyGenerator = context.getBooleanAttribute(<span class="string">&quot;useGeneratedKeys&quot;</span>,</span><br><span class="line">        configuration.isUseGeneratedKeys() &amp;&amp; SqlCommandType.INSERT.equals(sqlCommandType))</span><br><span class="line">        ? Jdbc3KeyGenerator.INSTANCE : NoKeyGenerator.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,</span><br><span class="line">      fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span><br><span class="line">      resultSetTypeEnum, flushCache, useCache, resultOrdered, </span><br><span class="line">      keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);<span class="comment">//-&gt;6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c58fa038-9a9a-4df6-af2c-b602640abac1-6"><p><mark class="hl-label green">XMLStatementBuilder#addMappedStatement</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MappedStatement <span class="title function_">addMappedStatement</span><span class="params">(String id, SqlSource sqlSource, StatementType statementType,</span></span><br><span class="line"><span class="params">                                          SqlCommandType sqlCommandType, Integer fetchSize, Integer timeout,</span></span><br><span class="line"><span class="params">                                          String parameterMap, Class&lt;?&gt; parameterType, String resultMap,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt; resultType, ResultSetType resultSetType, <span class="type">boolean</span> flushCache,</span></span><br><span class="line"><span class="params">                                          <span class="type">boolean</span> useCache, <span class="type">boolean</span> resultOrdered, KeyGenerator keyGenerator,</span></span><br><span class="line"><span class="params">                                          String keyProperty, String keyColumn, String databaseId, LanguageDriver lang, String resultSets)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unresolvedCacheRef) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteElementException</span>(<span class="string">&quot;Cache-ref not yet resolved&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    id = applyCurrentNamespace(id, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSelect</span> <span class="operator">=</span> sqlCommandType == SqlCommandType.SELECT;</span><br><span class="line"></span><br><span class="line">    MappedStatement.<span class="type">Builder</span> <span class="variable">statementBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedStatement</span>.Builder(configuration, id, sqlSource, sqlCommandType).resource(resource).fetchSize(fetchSize)</span><br><span class="line">            .timeout(timeout).statementType(statementType).keyGenerator(keyGenerator).keyProperty(keyProperty).keyColumn(keyColumn)</span><br><span class="line">            .databaseId(databaseId).lang(lang).resultOrdered(resultOrdered).resultSets(resultSets).resultMaps(getStatementResultMaps(resultMap, resultType, id))</span><br><span class="line">            .resultSetType(resultSetType).flushCacheRequired(valueOrDefault(flushCache, !isSelect)).useCache(valueOrDefault(useCache, isSelect)).cache(currentCache);</span><br><span class="line">    <span class="type">ParameterMap</span> <span class="variable">statementParameterMap</span> <span class="operator">=</span> getStatementParameterMap(parameterMap, parameterType, id);</span><br><span class="line">    <span class="keyword">if</span> (statementParameterMap != <span class="literal">null</span>) &#123;</span><br><span class="line">        statementBuilder.parameterMap(statementParameterMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">MappedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> statementBuilder.build();</span><br><span class="line">    configuration.addMappedStatement(statement);</span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="注册mapper接口">注册mapper接口</h3><div class="tabs" id="a8613243-570f-4ac3-ad1f-5c6f485f58ba"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a8613243-570f-4ac3-ad1f-5c6f485f58ba-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#a8613243-570f-4ac3-ad1f-5c6f485f58ba-2"><i class="fas fa-horse"></i>2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a8613243-570f-4ac3-ad1f-5c6f485f58ba-1"><p><mark class="hl-label blue">XMLMapperBuilder#bindMapperForNameSpace()</mark></p><p>重新回到 XMLMapperBuilder#parse() 方法中。解析mapper.xml中tab2</p><p>接着里面的 configurationElement() 方法继续往下走。</p><p>我们可以看到，先调用 Configuration#hasMapper() 方法来判断 Mapper 接口是否注册过了，如果没注册过就调用 Configuration#addMapper() 方法来注册 Mapper 接口，所以说，生成动态代理类的重点在这个方法里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bindMapperForNamespace</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">namespace</span> <span class="operator">=</span> builderAssistant.getCurrentNamespace();</span><br><span class="line">  <span class="keyword">if</span> (namespace != <span class="literal">null</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; boundType = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      boundType = Resources.classForName(namespace);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      <span class="comment">//ignore, bound type is not required</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (boundType != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!configuration.hasMapper(boundType)) &#123;</span><br><span class="line">        configuration.addLoadedResource(<span class="string">&quot;namespace:&quot;</span> + namespace);</span><br><span class="line">        configuration.addMapper(boundType);<span class="comment">//-&gt;2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8613243-570f-4ac3-ad1f-5c6f485f58ba-2"><p><mark class="hl-label green">MapperRegistr#addMapper</mark></p><p>我们可以看到方法里面会调用 Configuration中mapperRegistry中 knownMappers 的 put 方法，将 key 为 Mapper接口对应 Class对象，value 为 Mapper 接口的代理工厂类 MapperProxyFactory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (type.isInterface()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasMapper(type)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is already known to the MapperRegistry.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loadCompleted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      knownMappers.put(type, <span class="keyword">new</span> <span class="title class_">MapperProxyFactory</span>&lt;T&gt;(type));</span><br><span class="line">      <span class="type">MapperAnnotationBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperAnnotationBuilder</span>(config, type);</span><br><span class="line">      parser.parse();</span><br><span class="line">      loadCompleted = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">        knownMappers.remove(type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：当执行 Mapper 时，MapperProxyFactory会根据 SqlSession 为 Mapper 接口创建一个 MapperProxy 代理实例。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>至此，关于指定 XML 文件解析和加载 Mapper 接口的整个流程已经完毕。在这里总结一下流程。</p><ol><li>根据 XML 文件的输入流创建 XMLMapperBuilder 对象，调用 parse() 方法作为解析<code>&lt;mapper&gt;</code>标签的入口。</li><li>XMLMapperBuilder#configurationElement() 方法解析<code>&lt;cache-ref&gt;</code>、<code>&lt;cache&gt;</code>、<code>&lt;parameterMap&gt;</code>、<code>&lt;resultMap&gt;</code>、<code>&lt;sql&gt; </code>和 <code>&lt;select|insert|update|delete&gt; </code>等所有标签，而 <code>&lt;select|insert|update|delete&gt; </code>标签的解析入口为 XMLMapperBuilder#buildStatementFromContext() 方法。</li><li>XMLMapperBuilder#buildStatementFromContext() 方法中会遍历所有 <code>&lt;select|insert|update|delete&gt; </code>标签，然后创建对应的 XMLStatementBuilder 对象，进行标签解析。</li><li>XMLStatementBuilder#parseStatementNode() 方法里面首先会解析<code>&lt;select|insert|update|delete&gt;</code>标签里的所有属性，然后利用 LanguageDriver 来解析 SQL 配置，将 SQL 的所有片段（包括静态SQL和动态SQL）解析成对应的 SqlNode 对象，然后使用 MixedSqlNode 来保存起来，最后根据是否为动态 SQL 来创建 DynamicSqlSource 对象或者 RawSqlSource 对象。</li><li>当 <code>&lt;select|insert|update|delete&gt; </code>标签解析完后，会利用工具类 MapperBuilderAssistant 的 addMappedStatement() 方法来将解析的所有信息封装为对应的 MappedStatement 对象，然后注册到 Configuration 中。</li><li>XML 文件解析完后，XMLMapperBuilder#parse() 方法会调用 Configuration#addLoadedResource() 方法将 XML 文件的资源路径注册到Configuration 中。</li><li>最后，在 XMLMapperBuilder#parse() 方法中还会调用 XMLMapperBuilder#bindMapperForNamespace() 方法，将 Mapper 接口注册到 Configuration 中。接口注册底层是使用 MapperRegistry 类，这个类会保存着所有 Mapper 接口的注册信息。在注册时，会为 Mapper 接口创建对应的 MapperFactoryBean；当执行 Mapper 时，可以根据当前 SqlSession 创建 Mapper 接口对应的 MapperProxy 代理实例。</li><li>XMLMapperBuilder#bindMapperForNamespace() 方法在 Mapper 接口注册后，还会创建 MapperAnnotationBuilder 对象来解析 Mapper 接口带 SQL 注解方法，也是生成对应的 MappedStatement 然后注册到 Configuration 中。</li></ol><hr><hr><h2 id="3-获取sqlSession">3.获取sqlSession</h2><p><code>SqlSession sqlSession = sqlSessionFactory.openSession();</code></p><p>sqlSession是操作数据库的高级接口，我们操作数据库都是通过这个接口操作的。获取sqlSession有两种方式，一种是从数据源中获取的，还有一种是从连接中获取。 获取到的都是DefaultSqlSession对象，也就是sqlSession的默认实现。</p><p>DefaultSqlSessionFactory中openSession是有两种方法实现</p><p>一种是openSessionFromDataSource，另一种是openSessionFromConnection。</p><p>这两种是什么区别呢？从字面意义上将，一种是从数据源中获取SqlSession对象，一种是由已有连接获取SqlSession。SqlSession实际是对数据库连接的一层包装，数据库连接是个珍贵的资源，如果频繁的创建销毁将会影响吞吐量，因此使用数据库连接池化技术就可以复用数据库连接了。因此openSessionFromDataSource会从数据库连接池中获取一个连接，然后包装成一个SqlSession对像。openSessionFromConnection则是直接包装已有的连接并返回SqlSession对象。</p><p>openSessionFromDataSource 主要经历了以下几步：</p><ol><li>从获取configuration中获取Environment对象，Environment包含了数据库配置</li><li>从Environment获取DataSource数据源</li><li>从DataSource数据源中获取Connection连接对象</li><li>从DataSource数据源中获取TransactionFactory事物工厂</li><li>从TransactionFactory中创建事物Transaction对象</li><li>创建Executor对象</li><li>包装configuration和Executor对象成DefaultSqlSession对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">  <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">    tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="4-获取mapper代理类">4.获取mapper代理类</h2><p><code>UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</code></p><p>在创建SqlSessionFactory工厂，将mapper接口注册到MapperRegistry中。</p><p>DefaultSqlSession的getMapper方法，就是通过MapperRegistry对象获得Mapper实例。</p><div class="tabs" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#af74caa2-0e72-4103-b522-80bb5ac3bd3b-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#af74caa2-0e72-4103-b522-80bb5ac3bd3b-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#af74caa2-0e72-4103-b522-80bb5ac3bd3b-3"><i class="fas fa-candy-cane"></i>3</button></li><li class="tab"><button type="button" data-href="#af74caa2-0e72-4103-b522-80bb5ac3bd3b-4"><i class="fas fa-child"></i>4</button></li><li class="tab"><button type="button" data-href="#af74caa2-0e72-4103-b522-80bb5ac3bd3b-5"><i class="fas fa-heartbeat"></i>MapperProxy</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b-1"><p><mark class="hl-label blue">DefaultSqlSession#getMapper</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> configuration.getMapper(type, <span class="built_in">this</span>);<span class="comment">//-&gt;2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b-2"><p><mark class="hl-label green">Configuration#getMapper</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);<span class="comment">//-&gt;3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b-3"><p><mark class="hl-label blue">mapperRegistry#getMapper</mark></p><p><code>MapperRegistry</code> 中有个getMapper方法，实际上是从成员变量<code>knownMappers</code>中获取的，这个<code>knownMappers</code>是个key-value形式的缓存，key是mapper接口的class对象，value是<code>MapperProxyFactory</code>代理工厂，这个工厂就是用来创建MapperProxy代理类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is not known to the MapperRegistry.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);<span class="comment">//-&gt;4</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(SqlSession sqlSession)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个Mapperxy对象，这个对象实现了JDK动态代理中的InvocationHandler接口</span></span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> <span class="title class_">MapperProxy</span>&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> T <span class="title function_">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;</span><br><span class="line">    <span class="comment">//方法被调用时会被mapperProxy拦截,也就是执行mapperProxy.invoke()方法  </span></span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;mapperInterface&#125;, mapperProxy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af74caa2-0e72-4103-b522-80bb5ac3bd3b-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapperProxy</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6424540398559729838L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSession;</span><br><span class="line">    <span class="comment">//Mapper接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Mapper接口中的每个方法都会生成一个MapperMethod对象, methodCache维护着他们的对应关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MapperProxy</span><span class="params">(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSession = sqlSession;</span><br><span class="line">        <span class="built_in">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">        <span class="built_in">this</span>.methodCache = methodCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里会拦截Mapper接口的所有方法</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//如果是Object中定义的方法，直接执行。如toString(),hashCode()等</span></span><br><span class="line">        <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);<span class="comment">//</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//其他Mapper接口定义的方法交由mapperMethod来执行</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MapperMethod</span> <span class="variable">mapperMethod</span> <span class="operator">=</span> cachedMapperMethod(method);</span><br><span class="line">        <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MapperMethod <span class="title function_">cachedMapperMethod</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        <span class="type">MapperMethod</span> <span class="variable">mapperMethod</span> <span class="operator">=</span> methodCache.get(method);</span><br><span class="line">        <span class="keyword">if</span> (mapperMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">            mapperMethod = <span class="keyword">new</span> <span class="title class_">MapperMethod</span>(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">            methodCache.put(method, mapperMethod);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapperMethod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>下面是使用阿尔萨斯查看反编译生成的代理类对象</p></blockquote><div class="tabs" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-1"><i class="fas fa-cat"></i>Mapper接口</button></li><li class="tab"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-2"><i class="fas fa-horse"></i>代理对象（省略版）</button></li><li class="tab"><button type="button" data-href="#6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-3"><i class="fas fa-dove"></i>代理对象（完整版）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy7</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">Proxy</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> User <span class="title function_">getUserById</span><span class="params">(Integer n)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (User) <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;n&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy7(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>).getMethod(<span class="string">&quot;getUserById&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6f4aa4a4-1ec9-4df4-8bd7-254808a5e2b4-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy7</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Proxy</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> User <span class="title function_">getUserById</span><span class="params">(Integer n)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (User)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;n&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy7(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>).getMethod(<span class="string">&quot;getUserById&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Integer&quot;</span>));</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="5-执行mapper接口方法">5.执行mapper接口方法</h2><p><code>User userInfo = userMapper.getUserById(1);</code></p><p>getUserById是UserMapper接口中定义的一个方法，但是我们没有编写UserMapper接口的的实现类，那么Mybatis是怎么帮我们执行的呢？</p><p>前面讲到，获取mapper对象时，是会获取到一个MapperProxyFactory工厂类，并创建一个MapperProxy代理类，在执行Mapper接口的方法时，会调用MapperProxy的invoke方法。</p><p>这段代码判断正在被调用的方法是否是声明在Object类中或其父类/接口中的方法。如果是，则执行if语句块内的代码来处理该方法的调用，否则执行if语句块后面的代码来处理MapperMethod接口中的方法调用。</p><p>这是动态代理中常见的模式，invoke()方法负责处理代理对象上的方法调用。if语句允许代理对象以不同的方式处理某些特定的方法，例如将某些方法调用转发到代理对象的目标实现中。</p><p>当mapper方法被调用的时候对应的MapperProxy会生成相应的MapperMethod并且会缓存起来，这样当多次调用同一个mapper方法时候只会生成一个MapperMethod，提高了时间和内存效率。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1624267900596-1e05c90c-380e-439c-be2c-1c505ae5f283.png" alt="image.png"  /><h3 id="执行流程">执行流程</h3><div class="tabs" id="956d2f31-c54d-4609-88c6-5a7931978471"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#956d2f31-c54d-4609-88c6-5a7931978471-1"><i class="fas fa-bug"></i>MapperProxy#invoke</button></li><li class="tab"><button type="button" data-href="#956d2f31-c54d-4609-88c6-5a7931978471-2"><i class="fas fa-cannabis"></i>MapperMethod#execute</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="956d2f31-c54d-4609-88c6-5a7931978471-1"><p><mark class="hl-label green">MapperProxy#invoke</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里会拦截Mapper接口的所有方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//如果是Object中定义的方法，直接执行。如toString(),hashCode()等</span></span><br><span class="line">    <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回缓存的MapperMethodInvoker对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">MapperMethod</span> <span class="variable">mapperMethod</span> <span class="operator">=</span> cachedMapperMethod(method);</span><br><span class="line">    <span class="comment">//其他Mapper接口定义的方法交由mapperMethod来执行</span></span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MapperMethod <span class="title function_">cachedMapperMethod</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">    <span class="type">MapperMethod</span> <span class="variable">mapperMethod</span> <span class="operator">=</span> methodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (mapperMethod == <span class="literal">null</span>) &#123;</span><br><span class="line">        mapperMethod = <span class="keyword">new</span> <span class="title class_">MapperMethod</span>(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">        methodCache.put(method, mapperMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapperMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="956d2f31-c54d-4609-88c6-5a7931978471-2"><p><mark class="hl-label green">MapperMethod#execute</mark></p><p>而当执行MapperMethod的execute方法的时候，根据当前MapperMethod对应的mapper配置会执行Session的insert, update, delete, select, selectList, selectMap, selectCursor, selectOne或flushStatements方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> &#123;</span><br><span class="line">  Object result;</span><br><span class="line">  <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SELECT:</span><br><span class="line">      <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">        executeWithResultHandler(sqlSession, args);</span><br><span class="line">        result = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">        result = executeForMany(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">        result = executeForMap(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">        result = executeForCursor(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">param</span> <span class="operator">=</span> method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        <span class="keyword">if</span> (method.returnsOptional()</span><br><span class="line">            &amp;&amp; (result == <span class="literal">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">          result = Optional.ofNullable(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLUSH:</span><br><span class="line">      result = sqlSession.flushStatements();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Unknown execution method for: &quot;</span> + command.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="literal">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BindingException</span>(<span class="string">&quot;Mapper method &#x27;&quot;</span> + command.getName()</span><br><span class="line">        + <span class="string">&quot; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="string">&quot;).&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Executor">Executor</h3><p>我们来看DefaultSqlSession一个具体的实现方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(statement);</span><br><span class="line">      List&lt;E&gt; result = executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error querying database.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>真正执行的代码主体在Executor对象里面。</p><p>Mybatis对外统一提供了一个操作接口类Executor，提供的接口方法有update、query、flushStatements、commit、rollback等接口函数，源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ResultHandler</span> <span class="variable">NO_RESULT_HANDLER</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事物提交</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事物回滚</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建CacheKey</span></span><br><span class="line">    CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启缓存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清除本地缓存</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clearLocalCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//延迟加载</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取事物管理器</span></span><br><span class="line">    Transaction <span class="title function_">getTransaction</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">boolean</span> forceRollback)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Executor是否关闭</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setExecutorWrapper</span><span class="params">(Executor executor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现类有抽象类BaseExecutor、实现类CachingExecutor、实现类BatchExecutor、实现类ReuseExecutor和实现类SimpleExecutor。</p><p>具体选用哪个子类SimpleExecutor、ReuseExecutor和BatchExecutor实现，可以在Mybatis的配置文件中进行配，配置如下：</p><p>不配置默认使用SimpleExecutor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;REUSE&quot;</span>/&gt;</span> <span class="comment">&lt;!--SIMPLE、REUSE、BATCH--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p>Executor分成两大类，一类是CacheExecutor，另一类是普通Executor。</p><p>普通类又分为：</p><p>ExecutorType.SIMPLE: 这个执行器类型不做特殊的事情。它为每个语句的执行创建一个新的预处理语句。<br>ExecutorType.REUSE: 这个执行器类型会复用预处理语句。<br>ExecutorType.BATCH: 这个执行器会批量执行所有更新语句,如果 SELECT 在它们中间执行还会标定它们是 必须的,来保证一个简单并易于理解的行为。</p><p>分别对应SimpleExecutor，ReuseExecutor，BatchExecutor，他们都继承于BaseExecutor，BatchExecutor专门用于执行批量sql操作，ReuseExecutor会重用statement执行sql操作，SimpleExecutor只是简单执行sql没有什么特别的。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1617638902287-25c47fa7-93ad-4e39-84e2-2905756c61e5.png" alt="image.png" style="zoom: 50%;" /><p>CacheExecutor有一个重要属性delegate，它保存的是某类普通的Executor，值在构造时传入。执行数据库update操作时，它直接调用delegate的update方法，执行query方法时先尝试从cache中取值，取不到再调用delegate的查询方法，并将查询结果存入cache中。</p><hr><h3 id="StatementHandler">StatementHandler</h3><p>这4个Excecutor执行sql操作的最终都调用了StatementHandler 来执行，我们以SimpleExecutor为例</p><div class="tabs" id="da133ce1-5f38-4a60-a5c9-2a6b72921f73"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#da133ce1-5f38-4a60-a5c9-2a6b72921f73-1"><i class="fas fa-seedling"></i>1</button></li><li class="tab"><button type="button" data-href="#da133ce1-5f38-4a60-a5c9-2a6b72921f73-2"><i class="fas fa-leaf"></i>statementHandler接口</button></li><li class="tab"><button type="button" data-href="#da133ce1-5f38-4a60-a5c9-2a6b72921f73-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#da133ce1-5f38-4a60-a5c9-2a6b72921f73-4"><i class="fas fa-tree"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="da133ce1-5f38-4a60-a5c9-2a6b72921f73-1"><p><mark class="hl-label blue">SimpleExecutor#doQuery</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">    <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());<span class="comment">//-&gt;3</span></span><br><span class="line">    <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="da133ce1-5f38-4a60-a5c9-2a6b72921f73-2"><p>可以看出，Executor本质上也是个中介，具体的事情原来是StatementHandler来完成的。在它这里会使用parameterHandler和ResultHandler对象为我们绑定SQL参数和组装最后的结果返回。</p><p>来看看statementHandler接口的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatementHandler</span> &#123;</span><br><span class="line">    <span class="comment">//获取Statement</span></span><br><span class="line">    Statement <span class="title function_">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span>;</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span>;</span><br><span class="line">    <span class="comment">//批处理</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span>;</span><br><span class="line">    <span class="comment">//更新处理</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span>;</span><br><span class="line">    <span class="comment">//查找处理</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span>;</span><br><span class="line">    &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span>;</span><br><span class="line">    <span class="comment">//获得BoundSql</span></span><br><span class="line">    BoundSql <span class="title function_">getBoundSql</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//获得ParameterHandler</span></span><br><span class="line">    ParameterHandler <span class="title function_">getParameterHandler</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MyBatis实现了StatementHandler 的有四个类：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1515111-20190803171258049-449567015.png" alt="img" style="zoom: 33%;" /><p>有没有感觉和 <code>Executor</code> 的继承体系很相似呢？</p><p>分别有两个实现类 <code>BaseStatementHandler</code> 和 <code>RoutingStatementHandler</code>，BaseStatementHandler 有三个实现类, 他们分别是 SimpleStatementHandler、PreparedStatementHandler 和 CallableStatementHandler。</p><p>RoutingStatementHandler: RoutingStatementHandler 并没有对 Statement 对象进行使用，只是根据StatementType 来创建一个代理，代理的就是对应Handler的三种实现类。在MyBatis工作时,使用的StatementHandler 接口对象实际上就是 RoutingStatementHandler 对象.我们可以理解为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StatementHandler</span> <span class="variable">statmentHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RountingStatementHandler</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 statementType 创建对应的 Statement 对象</span></span><br><span class="line">  <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">SimpleStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PREPARED:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">PreparedStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CALLABLE:</span><br><span class="line">      delegate = <span class="keyword">new</span> <span class="title class_">CallableStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Unknown statement type: &quot;</span> + ms.getStatementType());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseStatementHandler: 是 StatementHandler 接口的另一个实现类.本身是一个抽象类.用于简化StatementHandler 接口实现的难度,属于适配器设计模式体现，它主要有三个实现类</p><ul><li>SimpleStatementHandler: 管理 Statement 对象并向数据库中推送不需要预编译的SQL语句</li><li>PreparedStatementHandler: 管理 Statement 对象并向数据中推送需要预编译的SQL语句，</li><li>CallableStatementHandler：管理 Statement 对象并调用数据库中的存储过程</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="da133ce1-5f38-4a60-a5c9-2a6b72921f73-3"><p><mark class="hl-label green">SimpleExecutor#prepareStatement</mark></p><p>prepare方法里面预编译了SQL。那么我们这个时候希望设置参数。</p><p>在Statement中我们是使用parameterize方法进行设置参数的。让我们看看PreparedStatementHandler中的parameterize方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Statement <span class="title function_">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(statementLog);</span><br><span class="line">  stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">  handler.parameterize(stmt);<span class="comment">//-&gt;4</span></span><br><span class="line">  <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="da133ce1-5f38-4a60-a5c9-2a6b72921f73-4"><p><mark class="hl-label blue">PreparedStatementHandler#parameterize</mark></p><p>parametersize 方法也是经由执行器来管理 parametersize 的方法调用，这次还想以SimpleStatementHandler 为例但是却不行了？为什么呢？因为 SimpleStatementHandler 是个空实现了，为什么是null呢？因为 SimpleStatementHandler 只负责处理简单SQL，能够直接查询得到结果的SQL，例如:</p><p><code>select studenname from Student</code></p><p>而 SimpleStatementHandler 又不涉及到参数的赋值问题，那么参数赋值该在哪里进行呢？实际上为参数赋值这步操作是在 <code>PreparedStatementHandler</code> 中进行的，因此我们的主要关注点在 PreparedStatementHandler 中的parameterize 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  parameterHandler.setParameters((PreparedStatement) statement);<span class="comment">//-&gt;5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，为参数赋值的工作是由一个叫做 parameterHandler 对象完成的，那么这个 parameterHandler 到底是什么呢？这也就是我们执行器的第三个组件。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/1515111-20190803171333257-1822082319.png" alt="img" style="zoom:50%;" /><p>简单描述一下update 方法的执行过程：</p><ol><li>MyBatis 接收到 update 请求后会先找到 CachingExecutor 缓存执行器查询是否需要刷新缓存，然后找到BaseExecutor 执行 update 方法；</li><li>BaseExecutor 基础执行器会清空一级缓存，然后交给再根据执行器的类型找到对应的执行器，继续执行 update 方法；</li><li>具体的执行器会先创建 Configuration 对象，根据 Configuration 对象调用 newStatementHandler 方法，返回 statementHandler 的句柄；</li><li>具体的执行器会调用 prepareStatement 方法，找到本类的 prepareStatement 方法后，再有prepareStatement 方法调用 StatementHandler 的子类 BaseStatementHandler 中的 prepare 方法</li><li>BaseStatementHandler 中的 prepare 方法会调用 instantiateStatement 实例化具体的 Statement 对象并返回给具体的执行器对象</li><li>由具体的执行器对象调用 parameterize 方法给参数进行赋值。</li></ol><p>续上上面的 <code>parameter</code>方法，具体交给 <code>ParameterHandler</code> 进行进一步的赋值处理</p><hr><h3 id="ParameterHandler">ParameterHandler</h3><p>ParameterHandler 译为参数处理器，负责为 PreparedStatement 的 sql 语句参数动态赋值，这个接口很简单只有两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParameterHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  Object <span class="title function_">getParameterObject</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ParameterHandler 只有一个实现类 <code>DefaultParameterHandler</code> ， 它实现了这两个方法。</p><ul><li>getParameterObject： 用于读取参数</li><li>setParameters: 用于对 PreparedStatement 的参数赋值</li></ul><p>参数处理器对象是在创建 StatementHandler 对象的同时被创建的，由 Configuration 对象负责创建。</p><p>创建 ParameterHandler 时，需要传入SQL的mappedStatement 对象，读取的参数和SQL语句</p><blockquote><p>注意：一个 BoundSql 对象，就代表了一次sql语句的实际执行，而 SqlSource 对象的责任，就是根据传入的参数对象，动态计算这个 BoundSql， 也就是 Mapper 文件中节点的计算，是由 SqlSource 完成的，SqlSource 最常用的实现类是 DynamicSqlSource</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(PreparedStatement ps)</span> &#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">&quot;setting parameters&quot;</span>).object(mappedStatement.getParameterMap().getId());</span><br><span class="line">  <span class="comment">// parameterMappings 就是对 #&#123;&#125; 或者 $&#123;&#125; 里面参数的封装</span></span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  <span class="keyword">if</span> (parameterMappings != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果是参数化的SQL，便需要循环取出并设置参数的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line">      <span class="type">ParameterMapping</span> <span class="variable">parameterMapping</span> <span class="operator">=</span> parameterMappings.get(i);</span><br><span class="line">      <span class="comment">// 如果参数类型不是 OUT ，这个类型与 CallableStatementHandler 有关</span></span><br><span class="line">      <span class="comment">// 因为存储过程不存在输出参数，所以参数不是输出参数的时候，就需要设置。</span></span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        <span class="comment">// 得到#&#123;&#125;  中的属性名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">        <span class="comment">// 如果 propertyName 是 Map 中的key</span></span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="comment">// issue #448 ask first for additional params</span></span><br><span class="line">          <span class="comment">// 通过key 来得到 additionalParameter 中的value值</span></span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不是 additionalParameters 中的key，而且传入参数是 null， 则value 就是null</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">          value = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 typeHandlerRegistry 中已经注册了这个参数的 Class对象，即它是Primitive 或者是String 的话</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 否则就是 Map</span></span><br><span class="line">          <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在通过SqlSource 的parse 方法得到parameterMappings 的具体实现中，我们会得到parameterMappings的typeHandler</span></span><br><span class="line">        <span class="type">TypeHandler</span> <span class="variable">typeHandler</span> <span class="operator">=</span> parameterMapping.getTypeHandler();</span><br><span class="line">        <span class="comment">// 获取typeHandler 的jdbc type</span></span><br><span class="line">        <span class="type">JdbcType</span> <span class="variable">jdbcType</span> <span class="operator">=</span> parameterMapping.getJdbcType();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span> &amp;&amp; jdbcType == <span class="literal">null</span>) &#123;</span><br><span class="line">          jdbcType = configuration.getJdbcTypeForNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          typeHandler.setParameter(ps, i + <span class="number">1</span>, value, jdbcType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TypeException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeException</span>(<span class="string">&quot;Could not set parameters for mapping: &quot;</span> + parameterMapping + <span class="string">&quot;. Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeException</span>(<span class="string">&quot;Could not set parameters for mapping: &quot;</span> + parameterMapping + <span class="string">&quot;. Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="ResultSetHandler">ResultSetHandler</h3><p>回想一下，一条 SQL 的请求过程会经过哪几个步骤？ 首先会经过 Executor 执行器，它主要负责管理创建 StatementHandler 对象，然后由 StatementHandler 对象做数据库的连接以及生成 Statement 对象，并解析 SQL 参数，由 ParameterHandler 对象负责把 Mapper 方法中的参数映射到 XML 中的 SQL 语句中，那么是不是还少了一个步骤，就能完成一个完整的 SQL 请求了？没错，这最后一步就是 SQL 结果集的处理工作，也就是 <code>ResultSetHandler</code> 的主要工作</p><p>要了解 ResultSetHandler 之前，首先需要了解 ResultSetHandler的继承关系以及基本方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResultSetHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理结果集</span></span><br><span class="line">  &lt;E&gt; List&lt;E&gt; <span class="title function_">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 批量处理结果集</span></span><br><span class="line">  &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">handleCursorResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理存储过程的结果集</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">handleOutputParameters</span><span class="params">(CallableStatement cs)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResultSetHandler 是在处理查询请求的时候由 Configuration 对象负责创建。</p><p>回想一下，我们在进行传统crud操作的时候，哪些方法是需要返回值的？当然我们说的返回值指的是从数据库中查询出来的值，而不是标识符，应该只有查询方法吧？所以 MyBatis 只针对 query 方法做了返回值的映射。</p><p>MyBatis 只有一个默认的实现类就是 <code>DefaultResultSetHandler</code>，ResultSetHandler 主要负责处理两件事</p><ol><li>处理 Statement 执行后产生的结果集，生成结果列表</li><li>处理存储过程执行后的输出参数</li></ol><p>按照 Mapper 文件中配置的 ResultType 或 ResultMap 来封装成对应的对象，最后将封装的对象返回即可。</p><p>来看一下主要的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">&quot;handling results&quot;</span>).object(mappedStatement.getId());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> List&lt;Object&gt; multipleResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">resultSetCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 获取第一个结果集</span></span><br><span class="line">  <span class="type">ResultSetWrapper</span> <span class="variable">rsw</span> <span class="operator">=</span> getFirstResultSet(stmt);</span><br><span class="line">  <span class="comment">// 获取结果映射</span></span><br><span class="line">  List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();</span><br><span class="line">  <span class="comment">// 结果映射的大小</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">resultMapCount</span> <span class="operator">=</span> resultMaps.size();</span><br><span class="line">  <span class="comment">// 校验结果映射的数量</span></span><br><span class="line">  validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line">  <span class="comment">// 如果ResultSet 包装器不是null， 并且 resultmap 的数量  &gt;  resultSet 的数量的话</span></span><br><span class="line">  <span class="comment">// 因为 resultSetCount 第一次肯定是0，所以直接判断 ResultSetWrapper 是否为 0 即可</span></span><br><span class="line">  <span class="keyword">while</span> (rsw != <span class="literal">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">    <span class="comment">// 从 resultMap 中取出 resultSet 数量</span></span><br><span class="line">    <span class="type">ResultMap</span> <span class="variable">resultMap</span> <span class="operator">=</span> resultMaps.get(resultSetCount);</span><br><span class="line">    <span class="comment">// 处理结果集, 关闭结果集</span></span><br><span class="line">    handleResultSet(rsw, resultMap, multipleResults, <span class="literal">null</span>);</span><br><span class="line">    rsw = getNextResultSet(stmt);</span><br><span class="line">    cleanUpAfterHandlingResultSet();</span><br><span class="line">    resultSetCount++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从 mappedStatement 取出结果集</span></span><br><span class="line">  String[] resultSets = mappedStatement.getResultSets();</span><br><span class="line">  <span class="keyword">if</span> (resultSets != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (rsw != <span class="literal">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">      <span class="type">ResultMapping</span> <span class="variable">parentMapping</span> <span class="operator">=</span> nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">      <span class="keyword">if</span> (parentMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">nestedResultMapId</span> <span class="operator">=</span> parentMapping.getNestedResultMapId();</span><br><span class="line">        <span class="type">ResultMap</span> <span class="variable">resultMap</span> <span class="operator">=</span> configuration.getResultMap(nestedResultMapId);</span><br><span class="line">        handleResultSet(rsw, resultMap, <span class="literal">null</span>, parentMapping);</span><br><span class="line">      &#125;</span><br><span class="line">      rsw = getNextResultSet(stmt);</span><br><span class="line">      cleanUpAfterHandlingResultSet();</span><br><span class="line">      resultSetCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> collapseSingleResultList(multipleResults);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6-提交事物">6.提交事物</h2><p><code>sqlSession.commit();</code></p><p>事物就是将若干数据库操作看成一个单元，要么全部成功，要么全部失败，如果失败了，则会执行执行回滚操作，恢复到开始执行的数据库状态。</p><hr><hr><h2 id="7-关闭资源">7.关闭资源</h2><p><code>sqlSession.close();</code></p><p>sqlSession是种共用资源，用完了要返回到池子中，以供其它地方使用。</p><hr><hr><h2 id="BoundSql">BoundSql</h2><p>从启动流程到<code>SqlSession</code>再到<code>Executor</code>执行器，以及在执行数据库操作的时候都会通过<code>StatementHandler</code>进行<code>Statement</code>处理，并且会用到<code>BoundSql</code>，这个<code>BoundSql</code>到底是何作用。</p><p><code>BoundSql </code>中就是对解析后的sql描述，包括对动态标签的解析，并且将 <strong>#{}</strong> 解析为占位符 <strong>?</strong> ，还包含参数的描述信息。这个类没有什么复杂操作，可以看作是解析后的sql描述对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoundSql</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最终解析的sql，Mybatis将#&#123;&#125;和$&#123;&#125;解析后的sql，其中#&#123;&#125;会被解析为?</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line">  <span class="comment">// 参数映射</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ParameterMapping&gt; parameterMappings;</span><br><span class="line">  <span class="comment">// 参数对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object parameterObject;</span><br><span class="line">  <span class="comment">// 额外的参数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; additionalParameters;</span><br><span class="line">  <span class="comment">// 元数据参数</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MetaObject metaParameters;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BoundSql</span><span class="params">(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.sql = sql;</span><br><span class="line">    <span class="built_in">this</span>.parameterMappings = parameterMappings;</span><br><span class="line">    <span class="built_in">this</span>.parameterObject = parameterObject;</span><br><span class="line">    <span class="built_in">this</span>.additionalParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.metaParameters = configuration.newMetaObject(additionalParameters);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getSql</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sql;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;ParameterMapping&gt; <span class="title function_">getParameterMappings</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parameterMappings;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getParameterObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parameterObject;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAdditionalParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">paramName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(name).getName();</span><br><span class="line">    <span class="keyword">return</span> additionalParameters.containsKey(paramName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdditionalParameter</span><span class="params">(String name, Object value)</span> &#123;</span><br><span class="line">    metaParameters.setValue(name, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getAdditionalParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> metaParameters.getValue(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建流程">创建流程</h3><p><code>BaseExecutor</code>的query方法为例，首先会从<code>MappedStatement</code>对象中获取<code>BoundSql</code>对象，而<code>MappedStatement</code>对象其实是sql标签的描述，<code>BoundSql</code>就是解析后的sql语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseExecutor 的query()方法</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">   <span class="comment">// 从MappedStatement对象中获取BoundSql对象</span></span><br><span class="line">   <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> ms.getBoundSql(parameter);</span><br><span class="line">   <span class="type">CacheKey</span> <span class="variable">key</span> <span class="operator">=</span> createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">   <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>获取<code>BoundSql</code>对象其实是从<code>MappedStatement</code>的成员变量<code>sqlSource</code>中获取的。 而<code>SqlSource</code>作为一个接口，它只有一个作用就是获取<code>BoundSql</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MappedStatement 的 getBoundSql() 方法</span></span><br><span class="line"><span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">(Object parameterObject)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取BoundSql对象，BoundSql对象是对动态sql的解析</span></span><br><span class="line">    <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> sqlSource.getBoundSql(parameterObject);</span><br><span class="line">    <span class="comment">// 获取参数映射</span></span><br><span class="line">    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">    <span class="keyword">if</span> (parameterMappings == <span class="literal">null</span> || parameterMappings.isEmpty()) &#123;</span><br><span class="line">      boundSql = <span class="keyword">new</span> <span class="title class_">BoundSql</span>(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check for nested result maps in parameter mappings (issue #30)</span></span><br><span class="line">    <span class="keyword">for</span> (ParameterMapping pm : boundSql.getParameterMappings()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">rmId</span> <span class="operator">=</span> pm.getResultMapId();</span><br><span class="line">      <span class="keyword">if</span> (rmId != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ResultMap</span> <span class="variable">rm</span> <span class="operator">=</span> configuration.getResultMap(rmId);</span><br><span class="line">        <span class="keyword">if</span> (rm != <span class="literal">null</span>) &#123;</span><br><span class="line">          hasNestedResultMaps |= rm.hasNestedResultMaps();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> boundSql;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>SqlSource</code> 接口只有一个方法，就是获取<code>BoundSql</code>对象，<code>SqlSource</code>接口的设计满足单一职责原则。<code>SqlSource</code>有五个实现类：<code>ProviderSqlSource</code>，<code>DynamicSqlSource</code>，<code>RawSqlSource</code>，<code>StaticSqlSource</code>，<code>StaticSqlSource </code>其中比较常用的就是<code>DynamicSqlSource</code>，<code>RawSqlSource</code>和<code>StaticSqlSource</code>。</p><p>如果sql中只包含#{}参数，不包含${}或者其它动态标签，那么创建<code>SqlSource</code>对象时则会创建<code>RawSqlSource</code>，否则创建<code>DynamicSqlSource</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Represents the content of a mapped statement read from an XML file or an annotation.</span></span><br><span class="line"><span class="comment"> * It creates the SQL that will be passed to the database out of the input parameter received from the user.</span></span><br><span class="line"><span class="comment"> * 表示一个从xml文件和注解中读取的一个映射语句</span></span><br><span class="line"><span class="comment"> * 可以创建一个包含用户输入的参数的，并可以发送到数据库sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSource</span> &#123;</span><br><span class="line"></span><br><span class="line">  BoundSql <span class="title function_">getBoundSql</span><span class="params">(Object parameterObject)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamicSqlSource会优先解析${}标签，然后解析#{}标签。其中${}会被解析为参数内容，不会加上双引号，而#{}会被解析为?，并且参数会加上双引号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSqlSource</span> <span class="keyword">implements</span> <span class="title class_">SqlSource</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlNode rootSqlNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">DynamicSqlSource</span><span class="params">(Configuration configuration, SqlNode rootSqlNode)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.configuration = configuration;</span><br><span class="line">    <span class="built_in">this</span>.rootSqlNode = rootSqlNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">(Object parameterObject)</span> &#123;</span><br><span class="line">    <span class="comment">// 优先解析$&#123;&#125;标签</span></span><br><span class="line">    <span class="type">DynamicContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicContext</span>(configuration, parameterObject);</span><br><span class="line">    rootSqlNode.apply(context);</span><br><span class="line">    <span class="comment">// 创建sqlSource对象，并且解析#&#123;&#125;为?</span></span><br><span class="line">    <span class="type">SqlSourceBuilder</span> <span class="variable">sqlSourceParser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSourceBuilder</span>(configuration);</span><br><span class="line">    Class&lt;?&gt; parameterType = parameterObject == <span class="literal">null</span> ? Object.class : parameterObject.getClass();</span><br><span class="line">    <span class="type">SqlSource</span> <span class="variable">sqlSource</span> <span class="operator">=</span> sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());</span><br><span class="line">    <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> sqlSource.getBoundSql(parameterObject);</span><br><span class="line">    context.getBindings().forEach(boundSql::setAdditionalParameter);</span><br><span class="line">    <span class="keyword">return</span> boundSql;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="自定义插件">自定义插件</h2><p>MyBatis的一个重要的特点就是插件机制，使得MyBatis的具备较强的扩展性，我们可以根据MyBatis的插件机制实现自己的个性化业务需求。</p><hr><h3 id="初识插件">初识插件</h3><p>我们在执行查询的时候，如果sql没有加上分页条件，数据量过大的话会造成内存溢出，因此我们可以通过MyBatis提供的插件机制来拦截sql，并进行sql改写。MyBatis的插件是通过动态代理来实现的，并且会形成一个插件链。原理类似于拦截器，拦截我们需要处理的对象，进行自定义逻辑后，返回一个代理对象，进行下一个拦截器的处理。</p><p>我们先来看下一个简单插件的模板，首先要实现一个Interceptor接口，并实现三个方法。并加上@Intercepts注解。接下来我们以分页插件为例将对每个细节进行讲解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PagePlugin</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="拦截对象">拦截对象</h3><p>在进行插件创建的时候，需要指定拦截对象。<code>@Intercepts</code>注解指定需要拦截的方法签名，内容是个<code>Signature</code>类型的数组，而<code>Signature</code>就是对拦截对象的描述。</p><p>在MyBatis中，我们只能对以下四种类型的对象进行拦截</p><ul><li><code>ParameterHandler </code>: 对sql参数进行处理</li><li><code>ResultSetHandler</code> : 对结果集对象进行处理</li><li><code>StatementHandler</code> : 对sql语句进行处理</li><li><code>Executor</code> : 执行器，执行增删改查</li></ul><p>现在我们需要对sql进行改写，因此可以需要拦截Executor的query方法进行拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;@Signature(type = Executor.class, </span></span><br><span class="line"><span class="meta">                        method = &quot;query&quot;, </span></span><br><span class="line"><span class="meta">                        args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)</span></span><br></pre></td></tr></table></figure><hr><h3 id="拦截实现">拦截实现</h3><p>每个插件除了指定拦截的方法后，还需要实现Interceptor接口。Interceptor接口有以下三个方法。其中intercept是我们必须要实现的方法，在这里面我们需要实现自定义逻辑。其它两个方法给出了默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;@Signature(type = Executor.class,</span></span><br><span class="line"><span class="meta">        method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">        args = &#123;MappedStatement.class, Object.class, RowBounds.class , ResultHandler.class&#125;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PagePlugin</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = invocation.getArgs();</span><br><span class="line">        <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> (RowBounds)args[<span class="number">2</span>];</span><br><span class="line">        log.info(<span class="string">&quot;执行前， rowBounds = [&#123;&#125;]&quot;</span>, JSONUtil.toJsonStr(rowBounds));</span><br><span class="line">        <span class="keyword">if</span>(rowBounds != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rowBounds.getLimit() &gt; <span class="number">1000</span>)&#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> rowBounds.getClass().getDeclaredField(<span class="string">&quot;limit&quot;</span>);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                field.set(rowBounds, <span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            rowBounds = <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">0</span> ,<span class="number">100</span>);</span><br><span class="line">            args[<span class="number">2</span>] = rowBounds;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;执行后， rowBounds = [&#123;&#125;]&quot;</span>, JSONUtil.toJsonStr(rowBounds));</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="配置插件">配置插件</h3><p>以上我们已经实现了一个简单的插件，在执行查询的时候对query方法进行拦截，并且修改分页参数。但是我们现在还没有进行插件配置，只有配置了插件，MyBatis才能启动过程中加载插件。</p><p>在mybatis-config.xml中添加plugins标签，并且配置我们上面实现的plugin.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.example.demo.mybatis.PagePlugin&quot;</span></span></span><br><span class="line"><span class="tag">     &lt;/<span class="attr">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>XMLConfigBuilder</code>这个解析器中的<code>parse()</code>方法就会读取plugins标签下的插件，并加载<code>Configuration</code>中的<code>InterceptorChain</code>中。</p><hr><h3 id="创建插件对象">创建插件对象</h3><p>以Executor为例，在创建Executor对象的时候，会有以下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Configuration</span></span><br><span class="line"><span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> &#123;</span><br><span class="line">  executorType = executorType == <span class="literal">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">  executorType = executorType == <span class="literal">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">  Executor executor;</span><br><span class="line">  <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> <span class="title class_">CachingExecutor</span>(executor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建插件对象</span></span><br><span class="line">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">  <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完Executor对象后，就会调用<code>interceptorChain.pluginAll()</code>方法，实际调用的是每个<code>Interceptor</code>的plugin()方法。plugin()就是对目标对象的一个代理，并且生成一个代理对象返回。而Plugin.wrap()就是进行包装的操作。</p><hr><hr><h2 id="缓存">缓存</h2><p>MyBatis提供的缓存功能包含一级缓存和二级缓存，</p><p>一级缓存是默认开启的，二级缓存默认关闭。它们的作用范围也是不同的。</p><p>MyBatis的缓存是基于cache接口的。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Cache.png" alt="Cache"></p><p>cache作为顶层接口，定义了缓存的基本操作，比如设置缓存，获取缓存的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唯一标示缓存</span></span><br><span class="line">    String <span class="title function_">getId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以key value形式设置缓存</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取缓存</span></span><br><span class="line">    Object <span class="title function_">getObject</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除缓存</span></span><br><span class="line">    Object <span class="title function_">removeObject</span><span class="params">(Object key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空缓存实例</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存中元素的数量</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读写锁</span></span><br><span class="line">    <span class="keyword">default</span> ReadWriteLock <span class="title function_">getReadWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PerpetualCache</code> 是cache的默认实现，也是最简单的实现，它以<code>HashMap</code>作为缓存容器，存储缓存。其它类型的缓存是对<code>PerpetualCache</code>的包装。</p><div class="tabs" id="95c31993-a5b9-4f38-a759-a47c52f6c008"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#95c31993-a5b9-4f38-a759-a47c52f6c008-1"><i class="fas fa-award"></i>PerpetualCache</button></li><li class="tab"><button type="button" data-href="#95c31993-a5b9-4f38-a759-a47c52f6c008-2"><i class="fas fa-baseball-ball"></i>LruCache</button></li><li class="tab"><button type="button" data-href="#95c31993-a5b9-4f38-a759-a47c52f6c008-3"><i class="fas fa-bone"></i>FifoCache</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="95c31993-a5b9-4f38-a759-a47c52f6c008-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PerpetualCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PerpetualCache</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cache.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">    cache.put(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cache.get(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cache.remove(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    cache.clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheException</span>(<span class="string">&quot;Cache instances require an ID.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Cache)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Cache</span> <span class="variable">otherCache</span> <span class="operator">=</span> (Cache) o;</span><br><span class="line">    <span class="keyword">return</span> getId().equals(otherCache.getId());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheException</span>(<span class="string">&quot;Cache instances require an ID.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getId().hashCode();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="95c31993-a5b9-4f38-a759-a47c52f6c008-2"><p>当使用 <code>LinkedHashMap</code> 的时候，默认情况下元素的顺序是按照插入顺序来维护的。但如果在创建 <code>LinkedHashMap</code> 时设置了 <code>accessOrder</code> 为 <code>true</code>，那么在调用 <code>get</code> 方法时，会将访问到的元素移动到链表的队尾，这样链表中的元素顺序就会按照访问顺序来维护。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被代理的对象，一般来说PerpetualCache</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//keyMap实现LRU的关键</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; keyMap;</span><br><span class="line">    <span class="comment">//最老的key</span></span><br><span class="line">    <span class="keyword">private</span> Object eldestKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化，注意，这构造方法的参数可不是一个String，而是一个Cache，专门用于包装Cache的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruCache</span><span class="params">(Cache delegate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delegate = delegate;</span><br><span class="line">        <span class="comment">//默认大小为1024</span></span><br><span class="line">        setSize(<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取id，其实就是NameSpace</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 还是将操作委托给delegate</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置大小，LRU算法是用LinkedHashMap来实现的，注意构造方法的最后一个参数，accessOrder为true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        keyMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Object, Object&gt;(size, <span class="number">.75F</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4267176411845948333L</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这个方法返回为true，就会将头结点剔除出去。</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;Object, Object&gt; eldest)</span> &#123;</span><br><span class="line">                <span class="comment">// 是否超过了限制</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">tooBig</span> <span class="operator">=</span> size() &gt; size;</span><br><span class="line">                <span class="keyword">if</span> (tooBig) &#123;</span><br><span class="line">                    <span class="comment">// eldest就是LinkHahsMap的头节点</span></span><br><span class="line">                    eldestKey = eldest.getKey();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> tooBig;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//put的时候直接放，注意在cycleKeyList里面也有操作，等会看看</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        delegate.putObject(key, value);</span><br><span class="line">        cycleKeyList(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 思考一下，这里为什么要get一下， 却没有赋值操作，</span></span><br><span class="line">        <span class="comment">// 因为get操作要保持数据的新。具体看看linkHashMap实现LRU的分析把</span></span><br><span class="line">        keyMap.get(key);</span><br><span class="line">        <span class="keyword">return</span> delegate.getObject(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        delegate.clear();</span><br><span class="line">        keyMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看这个方法，这个方法在putObject的时候调用，主要是从delegate里面移除掉最老的key。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cycleKeyList</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        keyMap.put(key, key);</span><br><span class="line">        <span class="keyword">if</span> (eldestKey != <span class="literal">null</span>) &#123;</span><br><span class="line">            delegate.removeObject(eldestKey);</span><br><span class="line">            eldestKey = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="95c31993-a5b9-4f38-a759-a47c52f6c008-3"><p>FifoCache的实现比较简单，利用队列来实现FIFO，限制的大小默认是1024，只有在put的时候才会有操作队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FifoCache</span> <span class="keyword">implements</span> <span class="title class_">Cache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line">    <span class="comment">// 利用队列来实现FIFO</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; keyList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FifoCache</span><span class="params">(Cache delegate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delegate = delegate;</span><br><span class="line">        <span class="built_in">this</span>.keyList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object key, Object value)</span> &#123;</span><br><span class="line">        cycleKeyList(key);</span><br><span class="line">        delegate.putObject(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getObject(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">removeObject</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        delegate.clear();</span><br><span class="line">        keyList.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重点是这个方法，将元素添加到队列里面，判断队列的大小是否超过规定的size，如果超过大小，就从队列中获取头节点，然后移除掉。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cycleKeyList</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        keyList.addLast(key);</span><br><span class="line">        <span class="keyword">if</span> (keyList.size() &gt; size) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">oldestKey</span> <span class="operator">=</span> keyList.removeFirst();</span><br><span class="line">            delegate.removeObject(oldestKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="一级缓存">一级缓存</h3><h4 id="一级缓存开启">一级缓存开启</h4><p><code>MyBatis</code>一级缓存是默认开启的，并且它的作用范围是<code>SqlSession</code>级别的。我么知道<code>SqlSession</code>是顶层的接口，最终的数据库操作都是交由给执行器进行操作的。了解前面的<code>Executor</code>的同学可知，缓存就是在执行Executor中进行维护的，其中<code>localCache</code>成员变量就是一级缓存对象，其类型就是<code>PerpetualCache</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseExecutor</span> <span class="keyword">implements</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(BaseExecutor.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> Transaction transaction;</span><br><span class="line">  <span class="keyword">protected</span> Executor wrapper;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;</span><br><span class="line">  <span class="keyword">protected</span> PerpetualCache localCache;</span><br><span class="line">  <span class="keyword">protected</span> PerpetualCache localOutputParameterCache;</span><br><span class="line">  <span class="keyword">protected</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> queryStack;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> closed;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">BaseExecutor</span><span class="params">(Configuration configuration, Transaction transaction)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.transaction = transaction;</span><br><span class="line">    <span class="built_in">this</span>.deferredLoads = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.localCache = <span class="keyword">new</span> <span class="title class_">PerpetualCache</span>(<span class="string">&quot;LocalCache&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.localOutputParameterCache = <span class="keyword">new</span> <span class="title class_">PerpetualCache</span>(<span class="string">&quot;LocalOutputParameterCache&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.closed = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.configuration = configuration;</span><br><span class="line">    <span class="built_in">this</span>.wrapper = <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一级缓存是默认开启的，<code>Configuration</code>的成员变量<code>localCacheScope</code>的默认就是<code>Sesssion</code>级别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Configuration类</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">LocalCacheScope</span> <span class="variable">localCacheScope</span> <span class="operator">=</span> LocalCacheScope.SESSION;</span><br></pre></td></tr></table></figure><p>如果要关闭，我们可以在mybatis-config.xml中的settings标签中将这个配置设置成Statement类型的</p><p><code>&lt;setting name=&quot;localCacheScope&quot; value=&quot;STATEMENT&quot;/&gt;</code></p><p>如果某个select标签查询不需要缓存，在select标签加上<code>flushCache=&quot;true&quot;</code>也可以设置单个查询关闭缓存</p><hr><h4 id="一级缓存存取">一级缓存存取</h4><p>缓存在查询中才会用到，例如我们用同一个sql语句反复去查询数据库，并且在此期间没有进行过数据修改操作，预期是返回相同的结果。如果没有缓存，我们将每次都要访问数据库返回结果，这个过程无疑是浪费资源和消耗性能的。因此我们可以将第一次查询的结果缓存在内存中，第二次用相同的sql语句查询的时候，先去缓存中查询，如果命中则直接返回，否则去数据库查询并放到缓存中返回。我们接下来看看BaseExecutor的query方法是怎么做的吧。</p><div class="tabs" id="dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-1"><i class="fas fa-cat"></i>query</button></li><li class="tab"><button type="button" data-href="#dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-2"><i class="fas fa-horse"></i>queryFromDatabase</button></li><li class="tab"><button type="button" data-href="#dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-3"><i class="fas fa-dove"></i>createCacheKey</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-1"><p><mark class="hl-label blue">BaseExecutor#query</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> ms.getBoundSql(parameter);</span><br><span class="line">  <span class="type">CacheKey</span> <span class="variable">key</span> <span class="operator">=</span> createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">&quot;executing a query&quot;</span>).object(ms.getId());</span><br><span class="line">    <span class="comment">// Executor是否关闭</span></span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// select标签是否配置了flushCache=true</span></span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">        <span class="comment">// 清除一级缓存</span></span><br><span class="line">        clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        queryStack++;</span><br><span class="line">        <span class="comment">// 查询一级缓存</span></span><br><span class="line">        list = resultHandler == <span class="literal">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 处理缓存的结果</span></span><br><span class="line">            handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 缓存中没有则查询数据库</span></span><br><span class="line">            list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        queryStack--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">            deferredLoad.load();</span><br><span class="line">        &#125;</span><br><span class="line">        deferredLoads.clear();</span><br><span class="line">        <span class="comment">// 如果关闭了一级缓存，查询完后清除一级缓存</span></span><br><span class="line">        <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">            clearLocalCache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-2"><p><mark class="hl-label green">BaseExecutor#queryFromDatabase</mark></p><p>第一次查询肯定从缓存中查询不到东西，于是走向了<code>queryFromDatabase</code>分支，这个方法就直接从数据库中去查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    <span class="comment">// 添加占位符，标示正在执行</span></span><br><span class="line">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 调用子类的查询方法获取结果</span></span><br><span class="line">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将查询结果放到缓存中</span></span><br><span class="line">    localCache.putObject(key, list);</span><br><span class="line">    <span class="comment">// 如果是存储过程则需要处理输出参数</span></span><br><span class="line">    <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">      localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dcb515a9-d9d3-4ec5-82fa-dd016f8cf49f-3"><p><mark class="hl-label blue">BaseExecutor#createCacheKey</mark></p><p>注意这个缓存真的是查询sql完全一样，这个一样还包括参数的一致，才会从缓存中获取到结果，那么如何判断两个查询sql是否一样呢。<code>createCacheKey</code>就帮忙解答了这个疑惑，它会给每个sql都生成一个key，如果两个生成的key一致，那就表明不管是sql还是参数都是一致的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">CacheKey</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheKey</span>();</span><br><span class="line">   cacheKey.update(ms.getId());</span><br><span class="line">   cacheKey.update(rowBounds.getOffset());</span><br><span class="line">   cacheKey.update(rowBounds.getLimit());</span><br><span class="line">   cacheKey.update(boundSql.getSql());</span><br><span class="line">   List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">   <span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">   <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">   <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">     <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">       Object value;</span><br><span class="line">       <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line">       <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">         value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">         value = <span class="literal">null</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">         value = parameterObject;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> configuration.newMetaObject(parameterObject);</span><br><span class="line">         value = metaObject.getValue(propertyName);</span><br><span class="line">       &#125;</span><br><span class="line">       cacheKey.update(value);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (configuration.getEnvironment() != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="comment">// issue #176</span></span><br><span class="line">     cacheKey.update(configuration.getEnvironment().getId());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> cacheKey;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="一级缓存清除">一级缓存清除</h4><p>在执行update，commit，或者rollback操作的时候都会进行清除缓存操作，所有的缓存都将失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">&quot;executing an update&quot;</span>).object(ms.getId());</span><br><span class="line">  <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 清除一级缓存</span></span><br><span class="line">  clearLocalCache();</span><br><span class="line">  <span class="keyword">return</span> doUpdate(ms, parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二级缓存">二级缓存</h3><h4 id="二级缓存开启">二级缓存开启</h4><p>一级缓存的作用范围是<code>SqlSession</code>级别的，但是<code>SqlSession</code>是单线程的，不同线程间的操作会有一些脏数据的问题。</p><p>二级缓存的作用范围是<code>SqlSessionFactory</code>级别，通过同一个<code>SqlSessionFactory</code>创建的<code>SqlSession</code>查询的结果会被缓存。</p><p>二级缓存开启的条件：</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnabled=“true”，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol><p>需要进行开启二级缓存的mapper中新增cache配置，cache配置有很多属性。</p><p><strong>type</strong> : 缓存实现类，默认是PerpetualCache，也可以是第三方缓存的实现</p><p><strong>size</strong>：最多缓存对象的个数</p><p><strong>eviction</strong>：缓存回收策略，默认是LRU LRU：最近最少使用策略，回收最长时间不被使用的缓存 FIFO：先进先出策略，回收最新进入的缓存 SOFT - 软引用：移除基于垃圾回收器状态和软引用规则的对象 WEAK - 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象</p><p><strong>flushInterval</strong>：缓存刷新的间隔时间，默认是不刷新的</p><p><strong>readOnly</strong> ： 是否只读，true 只会进行读取操作，修改操作交由用户处理 false 可以进行读取操作，也可以进行修改操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache type=<span class="string">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span><br><span class="line">       size=<span class="string">&quot;1024&quot;</span></span><br><span class="line">       eviction=<span class="string">&quot;LRU&quot;</span></span><br><span class="line">       flushInterval=<span class="string">&quot;120000&quot;</span></span><br><span class="line">       readOnly=<span class="string">&quot;false&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>可以对单个Statement标签进行关闭和开启操作，通过配置<code>useCache=&quot;true&quot;</code>来开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectByPrimaryKey&quot;</span> parameterType=<span class="string">&quot;java.lang.Long&quot;</span></span><br><span class="line">        resultMap=<span class="string">&quot;BaseResultMap&quot;</span> useCache=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">  select </span><br><span class="line">  &lt;include refid=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span><br><span class="line">  from t_test_user</span><br><span class="line">  <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="二级缓存存取">二级缓存存取</h4><p>二级缓存是<code>SqlSessionFactory</code>级别的缓存，因此<code>SqlSession</code>是不可以管理的，我们再把目光转向<code>Executor</code>，<code>Executor</code>在介绍的时候涉及到了<code>CachingExecutor</code>，在<code>Configuration</code>创建<code>Executor</code>的时候，如果开启了二级缓存，就使用到了<code>CachingExecutor</code>进行了包装。</p><div class="tabs" id="f2d9f129-8771-4134-a2a9-380761fd0eff"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f2d9f129-8771-4134-a2a9-380761fd0eff-1"><i class="fas fa-bug"></i>Configuration#newExecutor</button></li><li class="tab"><button type="button" data-href="#f2d9f129-8771-4134-a2a9-380761fd0eff-2"><i class="fas fa-cannabis"></i>CachingExecutor</button></li><li class="tab"><button type="button" data-href="#f2d9f129-8771-4134-a2a9-380761fd0eff-3"><i class="fas fa-candy-cane"></i>CachingExecutor#query</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f2d9f129-8771-4134-a2a9-380761fd0eff-1"><p><mark class="hl-label blue">Configuration#newExecutor</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> &#123;</span><br><span class="line">    executorType = executorType == <span class="literal">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">    executorType = executorType == <span class="literal">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">    Executor executor;</span><br><span class="line">    <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否开启了二级缓存</span></span><br><span class="line">    <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">CachingExecutor</span>(executor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建插件对象</span></span><br><span class="line">    executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f2d9f129-8771-4134-a2a9-380761fd0eff-2"><p><code>CachingExecutor</code> 中只有两个成员变量，其中一个就是<code>TransactionalCacheManager</code>用来管理缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 委托执行器，也就是被包装的三种执行器的中的一种</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Executor delegate;</span><br><span class="line"> <span class="comment">// 2. 缓存管理类，用来管理TransactionalCache</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">TransactionalCacheManager</span> <span class="variable">tcm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionalCacheManager</span>();</span><br></pre></td></tr></table></figure><p><code>TransactionalCacheManager</code> 结构也比较简单，内部也维护着一个HashMap缓存，其中<code>TransactionalCache</code>实现了Cache接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionalCacheManager</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存，TransactionalCache实现了Cache接口</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">(Cache cache)</span> &#123;</span><br><span class="line">    getTransactionalCache(cache).clear();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(Cache cache, CacheKey key)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getTransactionalCache(cache).getObject(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Cache cache, CacheKey key, Object value)</span> &#123;</span><br><span class="line">    getTransactionalCache(cache).putObject(key, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.commit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 回滚</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;</span><br><span class="line">      txCache.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取缓存</span></span><br><span class="line">  <span class="keyword">private</span> TransactionalCache <span class="title function_">getTransactionalCache</span><span class="params">(Cache cache)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> transactionalCaches.computeIfAbsent(cache, TransactionalCache::<span class="keyword">new</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f2d9f129-8771-4134-a2a9-380761fd0eff-3"><p><mark class="hl-label blue">CachingExecutor#query</mark></p><p>二级缓存的的存取过程是怎么样的呢，我们可以看看<code>CachingExecutor</code>的query方法。如果Statement标签配置了开启缓存，则从缓存中去取，否则执行执行一级缓存的查询逻辑。如果开启了缓存，则先从二级缓存中查找，如果命中直接返回，否则执行一级缓存的逻辑。因此当二级缓存开启时，优先从二级缓存中查找，再去从一级缓存中查找，最后从数据库查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span><br><span class="line">           <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">       <span class="comment">// 获取二级缓存配置标签</span></span><br><span class="line">       <span class="type">Cache</span> <span class="variable">cache</span> <span class="operator">=</span> ms.getCache();</span><br><span class="line">       <span class="keyword">if</span> (cache != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">// select标签是否配置了flushCache属性</span></span><br><span class="line">           flushCacheIfRequired(ms);</span><br><span class="line">           <span class="comment">// 如果select标签配置了useCache属性</span></span><br><span class="line">           <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">// 二级缓存不能缓存输出类型的参数</span></span><br><span class="line">               ensureNoOutParams(ms, boundSql);</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">               <span class="comment">// 获取二级缓存  </span></span><br><span class="line">               List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">               <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// 如果二级缓存为空，则再去查询一级缓存，如果一级缓存也没命中，则查询数据库放到缓存中</span></span><br><span class="line">                   list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">                   <span class="comment">// 二级缓存存储时先保存在临时属性中，等事务提交再保存到真实的二级缓存</span></span><br><span class="line">                   <span class="comment">// 缓存在一个中间变量</span></span><br><span class="line">                   tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> list;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 没开启缓存</span></span><br><span class="line">       <span class="keyword">return</span> delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="二级缓存清除">二级缓存清除</h4><p>清空缓存也是在执行更新操作的时候进行删除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">  <span class="comment">// 清空缓存</span></span><br><span class="line">  flushCacheIfRequired(ms);</span><br><span class="line">  <span class="comment">// 调用实际执行器的update方法</span></span><br><span class="line">  <span class="keyword">return</span> delegate.update(ms, parameterObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="总结">总结</h3><p>MyBatis 中包含一级缓存和二级缓存，一级缓存的作用范围是SqlSession级别的，二级缓存是SqlSessionFactory级别的。</p><p>MyBatis 中的一级缓存和二级缓存都是默认开启的，不过二级缓存还要额外在mapper和statement中配置缓存属性</p><p>一级缓存和二级缓存适用于读多写少的场景，如果频繁的更新数据，将降低查询性能。</p><hr><hr><h2 id="事务管理">事务管理</h2><h3 id="事务概述">事务概述</h3><p>数据库事务的定义就是将多个执行单元看作一个整体，要么全部执行成功，要么执行失败。事务具有ACID属性，事务的隔离级别有读未提交，读提交，可重复读，串行等等，这些涉及到数据库的知识我们在此不做展开，希望同学们有这方面的基础。</p><p>MyBatis 事务管理的接口是<code>Transaction</code>，它其实包装的就是一个数据库连接，处理这个连接的生命周期，它的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//包装一个数据库连接，处理一个数据库连接的生命周期，包括创建，准备，提交，回滚，关闭</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transaction</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内部的数据库连接</span></span><br><span class="line">    Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取超时时间</span></span><br><span class="line">    Integer <span class="title function_">getTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Transaction</code>有两个实现<code>JdbcTransaction</code>和<code>ManagedTransaction</code>，提供的这两种管理机制来管理事务</p><ul><li><code>JdbcTransaction</code>：使用Jdbc中的java.sql.Connection来管理事务，包括提交回滚</li><li><code>ManagedTransaction</code>：在这种机制下，MyBatis不会管理事务，而是交由程序的运行容器(weblogic，tomcat)来进行管理。</li></ul><hr><h3 id="创建事务">创建事务</h3><p>在mybatis-config.xml中可以配置事务管理的类型，其中transactionManager的类型配置为JDBC，将会以JdbcTransaction管理机制来管理事务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://xxxx:3306/xxxx?useUnicode=true&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxxx&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxxx&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>XMLConfigBuilder</code> 中的<code>environmentsElement</code>会解析<code>transactionManager</code>类型，并且会创建一个<code>TransactionFactory</code>类型的事务工厂，这个工厂的作用就是来创建Transaction事务对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XMLConfigBuilder</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">environmentsElement</span><span class="params">(XNode context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (environment == <span class="literal">null</span>) &#123;</span><br><span class="line">        environment = context.getStringAttribute(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (XNode child : context.getChildren()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> child.getStringAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isSpecifiedEnvironment(id)) &#123;</span><br><span class="line">          <span class="type">TransactionFactory</span> <span class="variable">txFactory</span> <span class="operator">=</span> transactionManagerElement(child.evalNode(<span class="string">&quot;transactionManager&quot;</span>));</span><br><span class="line">          <span class="type">DataSourceFactory</span> <span class="variable">dsFactory</span> <span class="operator">=</span> dataSourceElement(child.evalNode(<span class="string">&quot;dataSource&quot;</span>));</span><br><span class="line">          <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dsFactory.getDataSource();</span><br><span class="line">          Environment.<span class="type">Builder</span> <span class="variable">environmentBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>.Builder(id)</span><br><span class="line">              .transactionFactory(txFactory)</span><br><span class="line">              .dataSource(dataSource);</span><br><span class="line">          configuration.setEnvironment(environmentBuilder.build());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TransactionFactory</code> 作为对象工厂，其功能就是创建一个<code>Transaction</code>对象。创建方式有两种</p><ul><li>从已有的连接中创建Transaction对象</li><li>根据数据源，数据库隔离级别，自动提交创建Transaction对象</li></ul><p><code>TransactionFactory</code> 有两个实现，一个是<code>JdbcTransactionFactory</code>，另一个是<code>ManagedTransactionFactory</code>，他们分别创建出来的就是<code>JdbcTransaction</code>和<code>ManagedTransaction</code>对象。以<code>JdbcTransactionFactory</code>为例，其实现也是很简单的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTransactionFactory</span> <span class="keyword">implements</span> <span class="title class_">TransactionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Transaction <span class="title function_">newTransaction</span><span class="params">(Connection conn)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(conn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Transaction <span class="title function_">newTransaction</span><span class="params">(DataSource ds, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTransaction</span>(ds, level, autoCommit);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面创建完<code>TransactionFactory</code>后，就会被Environment引用。接下来在获取SqlSession的时候，会根据事务工厂创建一个<code>Transaction</code>事务对象，根据这个对象，再创建具体的<code>Executor</code>，最终创建出创建SqlSession对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultSqlSessionFactory</span></span><br><span class="line"><span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">        <span class="comment">// 获取事务工厂</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">        <span class="comment">// 创建事务对象</span></span><br><span class="line">        tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">        <span class="comment">// 创建执行器</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MyBatis源码解析</summary>
    
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="MyBatis" scheme="https://wuwawawa.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>docker配置容器</title>
    <link href="https://wuwawawa.github.io/posts/9a884145.html"/>
    <id>https://wuwawawa.github.io/posts/9a884145.html</id>
    <published>2023-05-24T05:52:16.000Z</published>
    <updated>2023-05-24T07:02:03.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL">MySQL</h2><div class="tabs" id="4943f5c8-2100-494b-94ef-04f8b7b0491d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#4943f5c8-2100-494b-94ef-04f8b7b0491d-1"><i class="fas fa-seedling"></i>拉取镜像</button></li><li class="tab"><button type="button" data-href="#4943f5c8-2100-494b-94ef-04f8b7b0491d-2"><i class="fas fa-leaf"></i>配置文件</button></li><li class="tab"><button type="button" data-href="#4943f5c8-2100-494b-94ef-04f8b7b0491d-3"><i class="fab fa-apple"></i>容器启动命令</button></li><li class="tab"><button type="button" data-href="#4943f5c8-2100-494b-94ef-04f8b7b0491d-4"><i class="fas fa-tree"></i>远程连接配置</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="4943f5c8-2100-494b-94ef-04f8b7b0491d-1"><p>安装mysql5.7.25</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.25</span><br></pre></td></tr></table></figure><p>安装mysql8.0.27</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0.27</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4943f5c8-2100-494b-94ef-04f8b7b0491d-2"><p>创建要挂载的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/mysql8/conf/</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/mysql8/logs/</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/mysql8/data/</span><br></pre></td></tr></table></figure><p>为了拷贝一份配置文件，先随便启动一个镜像</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p <span class="number">3306</span>:<span class="number">3306</span> --name mysql8 -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span>  -d mysql:<span class="number">8.0</span><span class="number">.27</span></span><br></pre></td></tr></table></figure><p>启动成功后，运行下面命令拷贝配置文件，到宿主主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span>  mysql8:/etc/mysql /opt/docker/mysql8/conf</span><br></pre></td></tr></table></figure><p>删除刚才的容器，重新创建容器，先停止容器，再删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop mysql8</span><br><span class="line">docker <span class="built_in">rm</span> mysql8</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4943f5c8-2100-494b-94ef-04f8b7b0491d-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--name mysql8 \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">-v /opt/docker/mysql8/conf/mysql:/etc/mysql \</span><br><span class="line">-v /opt/docker/mysql8/logs:/logs \</span><br><span class="line">-v /opt/docker/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:8.0.27</span><br></pre></td></tr></table></figure><p>命令解释</p><p>-p 端口映射<br>–name 容器名字，自定义<br>–privileged=true 挂载文件权限设置<br>–restart unless-stopped 设置 开机后自动重启容器<br>-v /opt/docker/mysql8/conf/mysql:/etc/mysql 挂载配置文件<br>-v /opt/docker/mysql8/logs:/logs \ 挂载日志<br>-v /opt/docker/mysql8/data:/var/lib/mysql \ 挂载数据文件 持久化到主机，<br>-v /etc/localtime:/etc/localtime 容器时间与宿主机同步<br>-e MYSQL_ROOT_PASSWORD=123456 设置密码<br>-d mysql:8.0.27 后台启动,mysql</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="4943f5c8-2100-494b-94ef-04f8b7b0491d-4"><p>如果已经能远程连接，以下可忽略</p><p>进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql8 bash</span><br></pre></td></tr></table></figure><p>登录mysql，-p后面跟你自己设置的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="Redis">Redis</h2><div class="tabs" id="bddd351f-baa7-4f08-80d1-edddd01c219d"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bddd351f-baa7-4f08-80d1-edddd01c219d-1"><i class="fas fa-cat"></i>拉取镜像</button></li><li class="tab"><button type="button" data-href="#bddd351f-baa7-4f08-80d1-edddd01c219d-2"><i class="fas fa-horse"></i>配置文件</button></li><li class="tab"><button type="button" data-href="#bddd351f-baa7-4f08-80d1-edddd01c219d-3"><i class="fas fa-dove"></i>启动命令</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bddd351f-baa7-4f08-80d1-edddd01c219d-1"><p>没有指定版本，默认为最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bddd351f-baa7-4f08-80d1-edddd01c219d-2"><p>创建要挂载的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/redis/data</span><br><span class="line">vim /opt/docker/redis/redis.conf</span><br></pre></td></tr></table></figure><p>redis.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1</span></span><br><span class="line"><span class="comment">#bind 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">protected-mode</span> <span class="string">no</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="attr">tcp-backlog</span> <span class="string">511</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">000415</span></span><br><span class="line"><span class="attr">timeout</span> <span class="string">0</span></span><br><span class="line"><span class="attr">tcp-keepalive</span> <span class="string">300</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">no</span></span><br><span class="line"><span class="attr">supervised</span> <span class="string">no</span></span><br><span class="line"><span class="attr">pidfile</span> <span class="string">/var/run/redis_6379.pid</span></span><br><span class="line"><span class="attr">loglevel</span> <span class="string">notice</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">30</span></span><br><span class="line"><span class="attr">always-show-logo</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">save</span> <span class="string">900 1</span></span><br><span class="line"><span class="attr">save</span> <span class="string">300 10</span></span><br><span class="line"><span class="attr">save</span> <span class="string">60 10000</span></span><br><span class="line"><span class="attr">stop-writes-on-bgsave-error</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">rdbcompression</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">rdbchecksum</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./</span></span><br><span class="line"><span class="attr">replica-serve-stale-data</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">replica-read-only</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">repl-diskless-sync</span> <span class="string">no</span></span><br><span class="line"><span class="attr">repl-disable-tcp-nodelay</span> <span class="string">no</span></span><br><span class="line"><span class="attr">replica-priority</span> <span class="string">100</span></span><br><span class="line"><span class="attr">lazyfree-lazy-eviction</span> <span class="string">no</span></span><br><span class="line"><span class="attr">lazyfree-lazy-expire</span> <span class="string">no</span></span><br><span class="line"><span class="attr">lazyfree-lazy-server-del</span> <span class="string">no</span></span><br><span class="line"><span class="attr">replica-lazy-flush</span> <span class="string">no</span></span><br><span class="line"><span class="attr">appendonly</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">appendfilename</span> <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"><span class="attr">no-appendfsync-on-rewrite</span> <span class="string">no</span></span><br><span class="line"><span class="attr">auto-aof-rewrite-percentage</span> <span class="string">100</span></span><br><span class="line"><span class="attr">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br><span class="line"><span class="attr">aof-load-truncated</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">aof-use-rdb-preamble</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">lua-time-limit</span> <span class="string">5000</span></span><br><span class="line"><span class="attr">slowlog-max-len</span> <span class="string">128</span></span><br><span class="line"><span class="attr">notify-keyspace-events</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">hash-max-ziplist-entries</span> <span class="string">512</span></span><br><span class="line"><span class="attr">hash-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"><span class="attr">list-max-ziplist-size</span> <span class="string">-2</span></span><br><span class="line"><span class="attr">list-compress-depth</span> <span class="string">0</span></span><br><span class="line"><span class="attr">set-max-intset-entries</span> <span class="string">512</span></span><br><span class="line"><span class="attr">zset-max-ziplist-entries</span> <span class="string">128</span></span><br><span class="line"><span class="attr">zset-max-ziplist-value</span> <span class="string">64</span></span><br><span class="line"><span class="attr">hll-sparse-max-bytes</span> <span class="string">3000</span></span><br><span class="line"><span class="attr">stream-node-max-bytes</span> <span class="string">4096</span></span><br><span class="line"><span class="attr">stream-node-max-entries</span> <span class="string">100</span></span><br><span class="line"><span class="attr">activerehashing</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">hz</span> <span class="string">10</span></span><br><span class="line"><span class="attr">dynamic-hz</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">aof-rewrite-incremental-fsync</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">rdb-save-incremental-fsync</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bddd351f-baa7-4f08-80d1-edddd01c219d-3"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always --log-opt max-size=100m --log-opt max-file=2 -p 6379:6379 --name redis -v /opt/docker/redis/redis.conf:/etc/redis/redis.conf -v /opt/docker/redis/data:/data -d redis redis-server /etc/redis/redis.conf  --appendonly <span class="built_in">yes</span>  --requirepass root123</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h2 id="Nacos">Nacos</h2><div class="tabs" id="557326db-5293-404d-a832-cca071d104ca"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#557326db-5293-404d-a832-cca071d104ca-1"><i class="fas fa-atom"></i>拉取镜像</button></li><li class="tab"><button type="button" data-href="#557326db-5293-404d-a832-cca071d104ca-2"><i class="far fa-sun"></i>创建数据库</button></li><li class="tab"><button type="button" data-href="#557326db-5293-404d-a832-cca071d104ca-3"><i class="fas fa-wind"></i>配置文件</button></li><li class="tab"><button type="button" data-href="#557326db-5293-404d-a832-cca071d104ca-4"><i class="fas fa-fire-alt"></i>启动命令</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="557326db-5293-404d-a832-cca071d104ca-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="557326db-5293-404d-a832-cca071d104ca-2"><p><a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql</a></p><p>mysql新建nacos的数据库,，并执行下面的SQL脚本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nacos;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;2010-05-05 00:00:00&#x27;</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">enabled <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> roles (</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">constraint</span> uk_username_role <span class="keyword">UNIQUE</span> (username,role)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> permissions (</span><br><span class="line">    role <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    resource <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    action <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">constraint</span> uk_role_permission <span class="keyword">UNIQUE</span> (role,resource,action)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="557326db-5293-404d-a832-cca071d104ca-3"><p>创建挂载目录，用于映射到容器，目录按自己的情况创建</p><p>新建logs目录</p><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nacos/logs/                      </span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker/nacos/init.d/         </span><br><span class="line">vim /opt/docker/nacos/init.d/custom.properties       </span><br></pre></td></tr></table></figure><p>修改配置文件custom.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">/nacos</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8848</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://8.130.68.59:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">nacos.cmdb.dumpTaskInterval</span>=<span class="string">3600</span></span><br><span class="line"><span class="attr">nacos.cmdb.eventTaskInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">nacos.cmdb.labelTaskInterval</span>=<span class="string">300</span></span><br><span class="line"><span class="attr">nacos.cmdb.loadDataAtStart</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i</span></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">nacos.naming.distro.taskDispatchPeriod</span>=<span class="string">200</span></span><br><span class="line"><span class="attr">nacos.naming.distro.batchSyncKeyCount</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">nacos.naming.distro.initDataRatio</span>=<span class="string">0.9</span></span><br><span class="line"><span class="attr">nacos.naming.distro.syncRetryDelay</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">nacos.naming.data.warmup</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">nacos.naming.expireInstance</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="557326db-5293-404d-a832-cca071d104ca-4"><p>启动后可访问</p><p><a href="http://8.130.68.59:8848/nacos/index.html">http://8.130.68.59:8848/nacos/index.html</a></p><p>用户名：nacos</p><p>密码：nacos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker  run \</span><br><span class="line">--name nacos -d \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--restart=always \</span><br><span class="line">-e JVM_XMS=256m \</span><br><span class="line">-e JVM_XMX=256m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-e PREFER_HOST_MODE=hostname \</span><br><span class="line">-v /mydata/nacos/logs:/home/nacos/logs \</span><br><span class="line">-v /mydata/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \</span><br><span class="line">nacos/nacos-server</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> ]]></content>
    
    
    <summary type="html">docker启动各容器的命令、操作汇总</summary>
    
    
    
    <category term="演示" scheme="https://wuwawawa.github.io/categories/%E6%BC%94%E7%A4%BA/"/>
    
    
    <category term="docker" scheme="https://wuwawawa.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis使用</title>
    <link href="https://wuwawawa.github.io/posts/da3e1361.html"/>
    <id>https://wuwawawa.github.io/posts/da3e1361.html</id>
    <published>2023-05-24T04:02:50.000Z</published>
    <updated>2023-06-01T00:41:43.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis简介">MyBatis简介</h2><p><a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old JavaObjects，普通的Java对象）映射成数据库中的记录</p><p>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><blockquote><p>和其它持久化层技术对比JDBC</p></blockquote><p>JDBC</p><ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul><p>Hibernate 和 JPA</p><ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul><p>MyBatis</p><ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul><hr><hr><h2 id="搭建MyBatis">搭建MyBatis</h2><div class="tabs" id="b9589100-ad1b-43b1-ac50-49e9663afe48"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-1"><i class="fas fa-seedling"></i>引入依赖</button></li><li class="tab"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-2"><i class="fas fa-leaf"></i>创建配置文件</button></li><li class="tab"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-3"><i class="fab fa-apple"></i>创建mapper接口</button></li><li class="tab"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-4"><i class="fas fa-tree"></i>创建映射文件</button></li><li class="tab"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-5"><i class="fas fa-cookie-bite"></i>加入日志功能</button></li><li class="tab"><button type="button" data-href="#b9589100-ad1b-43b1-ac50-49e9663afe48-6"><i class="fas fa-heartbeat"></i>测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b9589100-ad1b-43b1-ac50-49e9663afe48-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9589100-ad1b-43b1-ac50-49e9663afe48-2"><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息。核心配置文件存放的位置是src/main/resources目录下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span><span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9589100-ad1b-43b1-ac50-49e9663afe48-3"><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要提供实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9589100-ad1b-43b1-ac50-49e9663afe48-4"><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。</p><p>对象：Java的实体类对象</p><p>关系：关系型数据库</p><p>映射：二者之间的对应关系</p><table><thead><tr><th style="text-align:left">Java概念</th><th style="text-align:left">数据库概念</th></tr></thead><tbody><tr><td style="text-align:left">类</td><td style="text-align:left">表</td></tr><tr><td style="text-align:left">属性</td><td style="text-align:left">字段/列</td></tr><tr><td style="text-align:left">对象</td><td style="text-align:left">记录/行</td></tr></tbody></table><p>1、映射文件的命名规则：</p><p>表所对应的实体类的类名+Mapper.xml</p><p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p><p>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p><p>2、MyBatis中可以面向接口操作数据，要保证两个一致：</p><p><span class='p red'>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</span></p><p><span class='p green'>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9589100-ad1b-43b1-ac50-49e9663afe48-5"><p>log4j的配置文件名为log4j.xml，存放的位置是src/main/resources目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m  (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b9589100-ad1b-43b1-ac50-49e9663afe48-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br></pre></td></tr></table></figure><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话)</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="MyBatis的增删改查">MyBatis的增删改查</h2><div class="tabs" id="af4343a3-125d-40b3-be51-03e956cfc71b"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#af4343a3-125d-40b3-be51-03e956cfc71b-1"><i class="fas fa-dragon"></i>查询</button></li><li class="tab"><button type="button" data-href="#af4343a3-125d-40b3-be51-03e956cfc71b-2"><i class="fas fa-cat"></i>添加</button></li><li class="tab"><button type="button" data-href="#af4343a3-125d-40b3-be51-03e956cfc71b-3"><i class="fas fa-horse"></i>删除</button></li><li class="tab"><button type="button" data-href="#af4343a3-125d-40b3-be51-03e956cfc71b-4"><i class="fas fa-dove"></i>修改</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="af4343a3-125d-40b3-be51-03e956cfc71b-1"><p>查询一个实体类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span>s</span><br></pre></td></tr></table></figure><p>查询集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射关系</p><p>resultType：自动映射，用于属性名和表中字段名一致的情况</p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p><p>2、当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合，否则会抛出异常TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af4343a3-125d-40b3-be51-03e956cfc71b-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af4343a3-125d-40b3-be51-03e956cfc71b-3"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id = 5</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="af4343a3-125d-40b3-be51-03e956cfc71b-4"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set username = &#x27;张三&#x27; where id = 4</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="配置文件详解">配置文件详解</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        MyBatis核心配置文件中，标签的顺序：</span></span><br><span class="line"><span class="comment">        properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="line"><span class="comment">        objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class="line"><span class="comment">        plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">                alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名即类名,且不区分大小写</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        environments：配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">            属性：</span></span><br><span class="line"><span class="comment">                id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">                    JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">                    MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                dataSource：配置数据源</span></span><br><span class="line"><span class="comment">                属性：</span></span><br><span class="line"><span class="comment">                    type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                    type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">                    POOLED：表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                    JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">            要求：</span></span><br><span class="line"><span class="comment">            1、mapper接口所在的包要和映射文件所在的包一致</span></span><br><span class="line"><span class="comment">            2、mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="动态参数⭐️">动态参数⭐️</h2><p>MyBatis获取参数值的两种方式：<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code></p><p><code>$&#123;&#125;</code>的本质就是字符串拼接，<code>#&#123;&#125;</code>的本质就是占位符赋值</p><p>字符串拼接的方式可能会出现SQL注入，尽量使用占位符赋值的方式。</p><p><code>$&#123;&#125;</code>使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引号</p><p><code>#&#123;&#125;</code>使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，会自动添加单引号</p><div class="tabs" id="fc2038e7-e664-461d-97bb-e12bfd7ea027"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fc2038e7-e664-461d-97bb-e12bfd7ea027-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#fc2038e7-e664-461d-97bb-e12bfd7ea027-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#fc2038e7-e664-461d-97bb-e12bfd7ea027-3"><i class="fas fa-wind"></i>3</button></li><li class="tab"><button type="button" data-href="#fc2038e7-e664-461d-97bb-e12bfd7ea027-4"><i class="fas fa-fire-alt"></i>4⭐️</button></li><li class="tab"><button type="button" data-href="#fc2038e7-e664-461d-97bb-e12bfd7ea027-5"><i class="fas fa-cookie-bite"></i>5⭐️</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fc2038e7-e664-461d-97bb-e12bfd7ea027-1"><blockquote><p>Mapper接口方法的参数为单个字面量类型的参数</p></blockquote><p>若mapper接口中的方法参数为单个的字面量类型此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserByUsername(String username);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;username&#125;--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;username&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fc2038e7-e664-461d-97bb-e12bfd7ea027-2"><blockquote><p>Mapper接口方法的参数为多个字面量类型的参数</p></blockquote><p>若mapper接口中的方法参数为多个时此时MyBatis会自动将这些参数放在一个map集合中，会以两种方式存储数据</p><ul><li><p>以arg0,arg1…为键，以参数为值；</p></li><li><p>以param1,param2…为键，以参数为值；</p></li></ul><p>因此只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLogin</span><span class="params">(String username, String password)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLogin(String username, String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLogin&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125;--&gt;</span></span><br><span class="line">    select * from t_user where username = &#x27;$&#123;param1&#125;&#x27; and password = &#x27;$&#123;param2&#125;&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fc2038e7-e664-461d-97bb-e12bfd7ea027-3"><blockquote><p>Mapper接口方法的参数为map集合类型的参数</p></blockquote><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登录（参数为map）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLoginByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByMap(Map&lt;String, Object&gt; map);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fc2038e7-e664-461d-97bb-e12bfd7ea027-4"><blockquote><p>Mapper接口方法的参数为实体类类型的参数</p></blockquote><p>若mapper接口中的方法参数为实体类对象时此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><p><mark class="hl-label red">注意：</mark> 这个属性看的是get和set方法，取值找get，赋值找set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fc2038e7-e664-461d-97bb-e12bfd7ea027-5"><blockquote><p>可以通过@Param注解标识mapper接口中的方法参数</p></blockquote><p>此时，会将这些参数放在map集合中</p><ul><li>以@Param注解的value属性值为键，以参数为值</li><li>以param1,param2…为键，以参数为值</li></ul><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证登录（使用<span class="doctag">@Param</span>）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">User <span class="title function_">checkLoginByParam</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User checkLoginByParam(@Param(&quot;username&quot;) String username, @Param(&quot;password&quot;) String password);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;checkLoginByParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="各种查询功能">各种查询功能</h2><ul><li>若查询出的数据只有一条<ul><li>可以通过实体类对象接收</li><li>可以通过list集合接收</li><li>可以通过map集合接收</li></ul></li><li>若查询出的数据有多条<ul><li>可以通过list集合接收</li><li>可以通过map集合的list集合接收</li><li>可以在mapper接口的方法上添加@MapKey注解，此时就可以将每条数据转换的map集合作为值，以某个字段的值作为键，放在同一个map集合中</li><li>一定不能通过实体类对象接收，此时会抛异常TooManyResultsException</li></ul></li></ul><div class="tabs" id="053b5256-67aa-48af-84e8-ebdd472e1c46"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#053b5256-67aa-48af-84e8-ebdd472e1c46-1"><i class="fas fa-award"></i>1</button></li><li class="tab"><button type="button" data-href="#053b5256-67aa-48af-84e8-ebdd472e1c46-2"><i class="fas fa-baseball-ball"></i>2</button></li><li class="tab"><button type="button" data-href="#053b5256-67aa-48af-84e8-ebdd472e1c46-3"><i class="fas fa-bone"></i>3</button></li><li class="tab"><button type="button" data-href="#053b5256-67aa-48af-84e8-ebdd472e1c46-4"><i class="fas fa-anchor"></i>4</button></li><li class="tab"><button type="button" data-href="#053b5256-67aa-48af-84e8-ebdd472e1c46-5"><i class="fas fa-heartbeat"></i>5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="053b5256-67aa-48af-84e8-ebdd472e1c46-1"><blockquote><p>查询一个实体类对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="053b5256-67aa-48af-84e8-ebdd472e1c46-2"><blockquote><p>查询一个list集合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="053b5256-67aa-48af-84e8-ebdd472e1c46-3"><blockquote><p>查询单个数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如：java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如：int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如：Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--<span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;--&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;getCount&quot;</span> resultType=<span class="string">&quot;_integer&quot;</span>&gt;</span><br><span class="line">    select <span class="title function_">count</span><span class="params">(id)</span> from t_user</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="053b5256-67aa-48af-84e8-ebdd472e1c46-4"><p>查询一条数据为map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果：&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;--&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="053b5256-67aa-48af-84e8-ebdd472e1c46-5"><blockquote><p>查询多条数据为map集合</p></blockquote><p>方式一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">结果：</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><hr><hr><h2 id="特殊SQL执行">特殊SQL执行</h2><p>之前提到MyBatis获取参数值的两种方式：<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code>。</p><p><code>$&#123;&#125;</code>的本质就是字符串拼接，<code>#&#123;&#125;</code>的本质就是占位符赋值。</p><p>因此<code>#&#123;&#125;</code>是会自动加单引号的，而<code>$&#123;&#125;</code>是不会是不会自动加单引号的。</p><p>建议使用<code>#&#123;&#125;</code>，但对于一些特殊的SQL来说，使用<code>#&#123;&#125;</code>是会出现一些问题的。比如说模糊查询，批量删除和动态设置表名。</p><div class="tabs" id="399fa9cd-2a35-4f43-b528-872ffca8ebf9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#399fa9cd-2a35-4f43-b528-872ffca8ebf9-1"><i class="fas fa-bug"></i>模糊查询</button></li><li class="tab"><button type="button" data-href="#399fa9cd-2a35-4f43-b528-872ffca8ebf9-2"><i class="fas fa-cannabis"></i>批量删除</button></li><li class="tab"><button type="button" data-href="#399fa9cd-2a35-4f43-b528-872ffca8ebf9-3"><i class="fas fa-candy-cane"></i>动态设置表名</button></li><li class="tab"><button type="button" data-href="#399fa9cd-2a35-4f43-b528-872ffca8ebf9-4"><i class="fas fa-child"></i>添加功能获取自增的主键</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="399fa9cd-2a35-4f43-b528-872ffca8ebf9-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试模糊查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%#&#123;mohu&#125;%&#x27; 会报错 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">    select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="399fa9cd-2a35-4f43-b528-872ffca8ebf9-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">    delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<code>#{ids}</code>会自动添加单引号，不会删除成功</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="399fa9cd-2a35-4f43-b528-872ffca8ebf9-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表名不可以加单引号，同理不能使用<code>#{}</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="399fa9cd-2a35-4f43-b528-872ffca8ebf9-4"><p>t_clazz(clazz_id,clazz_name)</p><p>t_student(student_id,student_name,clazz_id)</p><p>1、添加班级信息</p><p>2、获取新添加的班级的id</p><p>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参</span></span><br><span class="line"><span class="comment">数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="自定义映射resultMap">自定义映射resultMap</h2><h3 id="自定义映射关系">自定义映射关系</h3><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">resultMap：设置自定义映射</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：表示自定义映射的唯一标识</span></span><br><span class="line"><span class="comment">type：查询的数据要映射的实体类的类型</span></span><br><span class="line"><span class="comment">子标签：</span></span><br><span class="line"><span class="comment">id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">collection：设置一对多的映射关系</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">property：设置映射关系中实体类中的属性名</span></span><br><span class="line"><span class="comment">column：设置映射关系中表中的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">    select id,user_name,password,age,sex from t_user where user_name like</span><br><span class="line">    concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性名符合Java的规则（使用驼峰）</p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为userName</p><hr><h3 id="多对一映射处理">多对一映射处理</h3><p>表和表是存在关系的，那么对应的实体类也是存在关系的。</p><p>查询员工信息以及员工所对应的部门信息</p><p>先在员工类中添加dept成员变量。</p><div class="tabs" id="50cb64ca-1de1-474a-82fc-ee3111c8ccd9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#50cb64ca-1de1-474a-82fc-ee3111c8ccd9-1"><i class="fas fa-cat"></i>级联方式处理映射关系</button></li><li class="tab"><button type="button" data-href="#50cb64ca-1de1-474a-82fc-ee3111c8ccd9-2"><i class="fas fa-horse"></i>association处理映射关系</button></li><li class="tab"><button type="button" data-href="#50cb64ca-1de1-474a-82fc-ee3111c8ccd9-3"><i class="fas fa-dove"></i>分步查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="50cb64ca-1de1-474a-82fc-ee3111c8ccd9-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">    select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">                                                                dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="50cb64ca-1de1-474a-82fc-ee3111c8ccd9-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">    select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =</span><br><span class="line">                                                                dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="50cb64ca-1de1-474a-82fc-ee3111c8ccd9-3"><p>1）查询员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> eid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Emp <span class="title function_">getEmpByStep</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> <span class="type">int</span> eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptStepMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span></span><br><span class="line"><span class="comment">        column：将sql以及查询结果中的某个字段设置为分步查询的条件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpByStep(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptStepMap&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）根据员工所对应的部门id查询部门信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询的第二步：根据员工所对应的did查询部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getEmpDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getEmpDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpDeptByStep&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="一对多映射处理">一对多映射处理</h3><p>现在dept类中添加<code>List&lt;Emp&gt; list</code>成员变量</p><div class="tabs" id="6ac153d5-2917-47eb-97e8-32bcdd9d9ea8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6ac153d5-2917-47eb-97e8-32bcdd9d9ea8-1"><i class="fas fa-award"></i>collection</button></li><li class="tab"><button type="button" data-href="#6ac153d5-2917-47eb-97e8-32bcdd9d9ea8-2"><i class="fas fa-baseball-ball"></i>分步查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6ac153d5-2917-47eb-97e8-32bcdd9d9ea8-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    * 根据部门id查新部门以及部门中的员工信息</span></span><br><span class="line"><span class="comment">    * @param did</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);</span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        ofType：设置collection标签所处理的集合属性中存储数据的类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptEmpByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpMap&quot;</span>&gt;</span></span><br><span class="line">        select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did =</span><br><span class="line">                                                              emp.did where dept.did = #&#123;did&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6ac153d5-2917-47eb-97e8-32bcdd9d9ea8-2"><p>1）查询部门信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询部门和部门中的员工</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpStep&quot;</span>&gt;</span></span><br><span class="line">    select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）根据部门id查询部门中的所有员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据部门id查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpListByDid</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：</p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。</p><p>此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，fetchType=“lazy(延迟加载)|eager(立即加载)”</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="动态SQL">动态SQL</h2><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决拼接SQL语句字符串时的痛点问题。</p><div class="tabs" id="5e89583b-2796-482c-a04f-c19391cfd02c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-1"><i class="fas fa-seedling"></i>if</button></li><li class="tab"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-2"><i class="fas fa-leaf"></i>where</button></li><li class="tab"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-3"><i class="fab fa-apple"></i>trim</button></li><li class="tab"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-4"><i class="fas fa-tree"></i>foreach</button></li><li class="tab"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-5"><i class="fas fa-heartbeat"></i>SQL片段</button></li><li class="tab"><button type="button" data-href="#5e89583b-2796-482c-a04f-c19391cfd02c-6"><i class="fas fa-cookie-bite"></i>choose、when、otherwise</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5e89583b-2796-482c-a04f-c19391cfd02c-1"><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中的内容不会执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByMoreTJ(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">        and ename = #&#123;ename&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">        and age = #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">        and sex = #&#123;sex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5e89583b-2796-482c-a04f-c19391cfd02c-2"><p>where和if一般结合使用：</p><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</p><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的and去掉</p><p>注意：where标签不能将其中内容后面多余的and或or去掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">            ename = #&#123;ename&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">            and age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">            and sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5e89583b-2796-482c-a04f-c19391cfd02c-3"><p>trim用于去掉或添加标签中的内容</p><p>常用属性：</p><p>prefix：在trim标签中的内容的前面添加某些内容</p><p>prefixOverrides：在trim标签中的内容的前面去掉某些内容</p><p>suffix：在trim标签中的内容的后面添加某些内容</p><p>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">            ename = #&#123;ename&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">            age = #&#123;age&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5e89583b-2796-482c-a04f-c19391cfd02c-4"><p>属性：</p><p>collection：设置要循环的数组或集合</p><p>item：表示集合或数组中的每一个数据s</p><p>eparator：设置循环体之间的分隔符</p><p>open：设置foreach标签中的内容的开始符</p><p>close：设置foreach标签中的内容的结束符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">    insert into t_emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">    delete from t_emp where</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">        eid = #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">    delete from t_emp where eid in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5e89583b-2796-482c-a04f-c19391cfd02c-5"><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">    eid,ename,age,sex,did</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5e89583b-2796-482c-a04f-c19391cfd02c-6"><p>choose、when、otherwise相当于if…else if…else</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByChoose(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">                ename = #&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">                age = #&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">                sex = #&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != &#x27;&#x27; and email != null&quot;</span>&gt;</span></span><br><span class="line">                email = #&#123;email&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="MyBatis缓存">MyBatis缓存</h2><h3 id="一级缓存">一级缓存</h3><p>一级缓存是默认开启的。</p><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问。</p><p>使一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><hr><h3 id="二级缓存">二级缓存</h3><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取。</p><p>二级缓存开启的条件：</p><ol><li>在核心配置文件中，设置全局配置属性cacheEnabled=“true”，默认为true，不需要设置</li><li>在映射文件中设置标签<code>&lt;cache /&gt;</code></li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ol><p>使二级缓存失效的情况：两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><blockquote><p>二级缓存的相关配置</p></blockquote><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><ul><li><p>eviction属性：缓存回收策略</p><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。默认的是 LRU。</p></li><li><p>flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p></li><li><p>size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p></li><li><p>readOnly属性：只读，true/false</p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。</p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p></li></ul><hr><h3 id="缓存查询顺序">缓存查询顺序</h3><ul><li>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</li><li>如果二级缓存没有命中，再查询一级缓存</li><li>如果一级缓存也没有命中，则查询数据库</li><li>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</li></ul><hr><h3 id="整合EHCache">整合EHCache</h3><div class="tabs" id="b0ff2a19-b6cd-4cca-9fae-871cdee52976"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b0ff2a19-b6cd-4cca-9fae-871cdee52976-1"><i class="fas fa-cat"></i>添加依赖</button></li><li class="tab"><button type="button" data-href="#b0ff2a19-b6cd-4cca-9fae-871cdee52976-2"><i class="fas fa-horse"></i>配置文件</button></li><li class="tab"><button type="button" data-href="#b0ff2a19-b6cd-4cca-9fae-871cdee52976-3"><i class="fas fa-dragon"></i>配置文件说明</button></li><li class="tab"><button type="button" data-href="#b0ff2a19-b6cd-4cca-9fae-871cdee52976-4"><i class="fas fa-dove"></i>加入logback日志</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b0ff2a19-b6cd-4cca-9fae-871cdee52976-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>各jar包功能</p><table><thead><tr><th>jar包名称</th><th>作用</th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b0ff2a19-b6cd-4cca-9fae-871cdee52976-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置二级缓存的类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b0ff2a19-b6cd-4cca-9fae-871cdee52976-3"><table><thead><tr><th style="text-align:left">属性名</th><th>是否必须</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">maxElementsInMemory</td><td>是</td><td style="text-align:left">在内存中缓存的element的最大数目</td></tr><tr><td style="text-align:left">maxElementsOnDisk</td><td>是</td><td style="text-align:left">在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td style="text-align:left">eternal</td><td>是</td><td style="text-align:left">设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td style="text-align:left">overflowToDisk</td><td>是</td><td style="text-align:left">设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td style="text-align:left">timeToIdleSeconds</td><td>否</td><td style="text-align:left">当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td style="text-align:left">timeToLiveSeconds</td><td>否</td><td style="text-align:left">缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td style="text-align:left">diskSpoolBufferSizeMB</td><td>否</td><td style="text-align:left">DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td style="text-align:left">diskPersistent</td><td>否</td><td style="text-align:left">在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td style="text-align:left">diskExpiryThreadIntervalSeconds</td><td>否</td><td style="text-align:left">磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td style="text-align:left">memoryStoreEvictionPolicy</td><td>否</td><td style="text-align:left">当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b0ff2a19-b6cd-4cca-9fae-871cdee52976-4"><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。创建logback的配置文件logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="MyBatis逆向工程">MyBatis逆向工程</h2><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。Hibernate是支持正向工程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul><blockquote><p>创建逆向工程的步骤</p></blockquote><div class="tabs" id="8d5e3e9c-1181-4513-8549-1a47848e7cee"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#8d5e3e9c-1181-4513-8549-1a47848e7cee-1"><i class="fas fa-award"></i>添加依赖和插件</button></li><li class="tab"><button type="button" data-href="#8d5e3e9c-1181-4513-8549-1a47848e7cee-2"><i class="fas fa-baseball-ball"></i>创建配置文件</button></li><li class="tab"><button type="button" data-href="#8d5e3e9c-1181-4513-8549-1a47848e7cee-3"><i class="fas fa-bone"></i>执行MBG插件的generate目标</button></li><li class="tab"><button type="button" data-href="#8d5e3e9c-1181-4513-8549-1a47848e7cee-4"><i class="fas fa-anchor"></i>效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="8d5e3e9c-1181-4513-8549-1a47848e7cee-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8d5e3e9c-1181-4513-8549-1a47848e7cee-2"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3Simple&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.bean&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8d5e3e9c-1181-4513-8549-1a47848e7cee-3"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230527193554700.png" alt="image-20230527193554700"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="8d5e3e9c-1181-4513-8549-1a47848e7cee-4"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230527193608791.png" alt="image-20230527193608791"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="分页插件">分页插件</h2><div class="tabs" id="1fa9541b-3576-4dc5-82b6-976a1c503bd6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1fa9541b-3576-4dc5-82b6-976a1c503bd6-1"><i class="fas fa-seedling"></i>添加依赖</button></li><li class="tab"><button type="button" data-href="#1fa9541b-3576-4dc5-82b6-976a1c503bd6-2"><i class="fas fa-leaf"></i>配置分页插件</button></li><li class="tab"><button type="button" data-href="#1fa9541b-3576-4dc5-82b6-976a1c503bd6-3"><i class="fab fa-apple"></i>分页插件的使用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1fa9541b-3576-4dc5-82b6-976a1c503bd6-1"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1fa9541b-3576-4dc5-82b6-976a1c503bd6-2"><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1fa9541b-3576-4dc5-82b6-976a1c503bd6-3"><blockquote><p>在查询功能之前使用<code>PageHelper.startPage(int pageNum, int pageSize)</code>开启分页功能</p></blockquote><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><blockquote><p>在查询获取list集合之后，使用<code>PageInfo&lt;T&gt; pageInfo = new PageInfo&lt;&gt;(List&lt;T&gt; list, intnavigatePages)</code>获取分页相关数据</p></blockquote><p>list：分页之后的数据</p><p>navigatePages：导航分页的页码数</p><blockquote><p>常用数据</p></blockquote><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage/isLastPage：是否为第一页/最后一页</p><p>hasPreviousPage/hasNextPage：是否存在上一页/下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]更</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">MyBatis使用</summary>
    
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="中间件" scheme="https://wuwawawa.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="MyBatis" scheme="https://wuwawawa.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>HashMap和TreeMap</title>
    <link href="https://wuwawawa.github.io/posts/9a196584.html"/>
    <id>https://wuwawawa.github.io/posts/9a196584.html</id>
    <published>2023-05-22T09:47:10.000Z</published>
    <updated>2023-05-22T14:49:55.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap继承体系">HashMap继承体系</h2><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522184524368.png" alt="image-20230522184524368"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><p>HashMap是Map里面的一个实现类。</p><p>没有额外需要学习的特有方法，直接使用Map里面的方法就可以了。</p><p>特点都是由键决定的：无序、不重复、无索引</p><p>HashMap跟HashSet底层原理是一模一样的，都是哈希表结构</p><h2 id="HashMap底层原理">HashMap底层原理</h2><div class="tabs" id="d8861ef8-b02e-43e2-925f-acf859a71222"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#d8861ef8-b02e-43e2-925f-acf859a71222-1"><i class="fas fa-atom"></i>1</button></li><li class="tab"><button type="button" data-href="#d8861ef8-b02e-43e2-925f-acf859a71222-2"><i class="far fa-sun"></i>2</button></li><li class="tab"><button type="button" data-href="#d8861ef8-b02e-43e2-925f-acf859a71222-3"><i class="fas fa-wind"></i>3</button></li><li class="tab"><button type="button" data-href="#d8861ef8-b02e-43e2-925f-acf859a71222-4"><i class="fas fa-fire-alt"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="d8861ef8-b02e-43e2-925f-acf859a71222-1"><p>当创建一个HashMap对象的时候，在底层创建了一个长度为16，负载因子为0.75的<code>Node&lt;K,V&gt;[] table</code>数组。</p><p>在利用put方法就可以添加数据了，put方法的底层会创建一个Entry对象，Entry对象记录的就是要添加的键和值。</p><p><span class='p red'>再利用键计算出键的Hash值，只要键的Hash值，和值无关。</span></p><p>然后再计算出数组中该存入的索引4，如果该位置为null，就直接添加进去。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522195854184.png" alt="image-20230522195854184" style="zoom:50%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522200359353.png" alt="image-20230522200359353" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8861ef8-b02e-43e2-925f-acf859a71222-2"><p>再添加一个Entry对象，计算出来的索引还是4，那此时4索引处就不是null了。</p><p>调用equals方法比较键的属性值，只比较键的属性值，</p><p>如果键里面的数据是一样的，那么它就会覆盖原有的Entry对象。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522200427206.png" alt="image-20230522200427206" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522200447565.png" alt="image-20230522200447565" style="zoom: 67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8861ef8-b02e-43e2-925f-acf859a71222-3"><p>如果equal比较完后，发现键不一样，就会添加新的Entry对象</p><p>在JDK8以前，新元素添加到数组当中，旧元素挂在下面，形成一条链表</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522200715009.png" alt="image-20230522200715009" style="zoom:67%;" /><p>在JDK8以后就没有那么复杂了</p><p>新的元素直接挂在老元素的下面，形成一条链表</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522200803368.png" alt="image-20230522200803368" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="d8861ef8-b02e-43e2-925f-acf859a71222-4"><p>额外的，在JDK8的时候，为了提升性能，当链表的长度超过8且数组的长度大于等于64的时候，链表就会自动转成红黑树。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522201115466.png" alt="image-20230522201115466" style="zoom:67%;" /><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522201131434.png" alt="image-20230522201131434" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <blockquote><p>总结</p></blockquote><ol><li><p>HashMap底层是哈希表结构的</p></li><li><p>依赖hashCode方法和equals方法保证<span class='p red'>键的唯一</span></p></li><li><p>如果键存储的是自定义对象，需要重写hashCode和equals方法</p></li><li><p>如果值存储自定义对象，不需要重写hashCode和equals方法</p></li></ol><hr><hr><h2 id="HashMap关键字段分析">HashMap关键字段分析</h2><div class="tabs" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-3"><i class="fas fa-candy-cane"></i>3</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-4"><i class="fas fa-child"></i>4</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-5"><i class="fas fa-seedling"></i>5</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-6"><i class="fas fa-leaf"></i>6</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-7"><i class="fab fa-apple"></i>7</button></li><li class="tab"><button type="button" data-href="#77fc3bbe-ef4c-40d7-8b63-40523f4490a0-8"><i class="fas fa-tree"></i>8</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-1"><p>这个字段表示默认的哈希表的长度，也就是<code>HashMap</code>底层使用数组的默认长度，在<code>HashMap</code>当中底层所使用的的数组的长度必须是<code>2</code>的整数次幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-2"><p>这个字段表示哈希表当中数组的最大长度，<code>HashMap</code>底层使用的数组长度不能超过这个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment"> * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-3"><p>字段<code>DEFAULT_LOAD_FACTOR</code>的作用表示在<code>HashMap</code>当中默认的负载因子的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>在实际情况当中我们并不是当<code>HashMap</code>当中的数组完全被使用完之后才进行扩容，因为如果数组快被使用完之后，再加入数据产生哈希冲突的可能性就会很大，因此我们通常会设置一个负载因子<code>(load factor)</code>，当数组的使用率超过这个值的时候就进行扩容，即当(数组长度为<code>L</code>，数组当中数据个数为<code>S</code>，负载因子为<code>F</code>)：</p><p>S&gt;=L*F</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-4"><p><code>TREEIFY_THRESHOLD</code> 这个字段主要表示将链表（在<code>JDK</code>当中是采用链地址法去解决哈希冲突的问题）变成一个红黑树的条件，在<code>JDK1.8</code>之后<code>JDK</code>中实现<code>HashMap</code>不仅采用链地址法去解决哈希冲突，而且链表满足一定条件之后会将链表变成一颗红黑树。而将链表变成一颗红黑树的<code>必要条件</code>是链表当中数据的个数要大于等于<code>TREEIFY_THRESHOLD</code>，请大家注意是<code>必要条件</code>不是<code>充分条件</code>，也就是说满足这个条件还不行，它还需要满足另外一个条件，就是哈希表中数组的长度要大于等于<code>MIN_TREEIFY_CAPACITY</code>，<code>MIN_TREEIFY_CAPACITY</code>在<code>JDK</code>当中的默认值是64。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment"> * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment"> * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment"> * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-5"><p><code>UNTREEIFY_THRESHOLD</code>表示当在进行<code>resize</code>操作的过程当中，红黑树当中的节点个数小于<code>UNTREEIFY_THRESHOLD</code>时，就需要将一颗红黑树重新恢复成链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment"> * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment"> * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-6"><p><code>table</code>数组对象就是<code>HashMap</code>底层当中真正用于存储数据的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-7"><p><code>size</code>表示哈希表中存储的<code>key-value</code>对象的个数，也就是放入了多少个键值对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="77fc3bbe-ef4c-40d7-8b63-40523f4490a0-8"><p><code>threshold</code>表示容器当中能够存储的数据个数的阈值，当<code>HashMap</code>当中存储的数据的个数超过这个值的时候，<code>HashMap</code>底层使用的数组就需要进行扩容。下列公式中<code>Capacity</code>表示底层数组的长度（<code>2</code>的整数次幂，注意与<code>size</code>进行区分）。</p><p>threshold = LoadFactor * Capacity</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>HashMap底层节点类</p></blockquote><p><code>Node&lt;K,V&gt;[] table</code>底层当中真正用于存储数据的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="HashMap主要方法分析">HashMap主要方法分析</h2><h3 id="构造方法">构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 指定初始容量的构造函数</span></span><br><span class="line">    <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                initialCapacity);</span><br><span class="line">    <span class="comment">// 如果大于允许的最大容量，就将数组的长度这是为最大容量</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//因为我们需要底层使用的数组table的长度是2的整数次幂，而我们之后在初始化函数当中会允许用户输入一个数组长度的大小</span></span><br><span class="line">    <span class="comment">//但是用户输入的数字可能不是2的整数次幂，因此我们需要将用户输入的数据变成2的整数次幂</span></span><br><span class="line">    <span class="comment">//tableSizeFor方法可以将用户输入的数据变成大于等于这个数的最小的2的整数次幂。</span></span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="put">put</h3><div class="tabs" id="e79f4da6-a38b-4729-ab7b-06e2c986f535"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e79f4da6-a38b-4729-ab7b-06e2c986f535-1"><i class="fas fa-bug"></i>put</button></li><li class="tab"><button type="button" data-href="#e79f4da6-a38b-4729-ab7b-06e2c986f535-2"><i class="fas fa-cannabis"></i>putVal</button></li><li class="tab"><button type="button" data-href="#e79f4da6-a38b-4729-ab7b-06e2c986f535-3"><i class="fas fa-candy-cane"></i>resize</button></li><li class="tab"><button type="button" data-href="#e79f4da6-a38b-4729-ab7b-06e2c986f535-4"><i class="fas fa-child"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e79f4da6-a38b-4729-ab7b-06e2c986f535-1"><p>在<code>put</code>函数当中首先计算参数<code>key</code>的哈希值，然后调用<code>putVal</code>函数真正的将输入插入到数据当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数一：键</span></span><br><span class="line"><span class="comment">//参数二：值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值：被覆盖元素的值，如果没有覆盖，返回null</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用键计算出对应的哈希值，再把哈希值进行一些额外的处理</span></span><br><span class="line"><span class="comment">//简单理解：返回值就是返回键的哈希值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark class="hl-label green">整体流程</mark></p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220712235514945-220342780.png" alt="img" style="zoom:60%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e79f4da6-a38b-4729-ab7b-06e2c986f535-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数一：键的哈希值</span></span><br><span class="line">    <span class="comment">//参数二：键</span></span><br><span class="line">    <span class="comment">//参数三：值</span></span><br><span class="line">    <span class="comment">//参数四：如果键重复了是否保留</span></span><br><span class="line">    <span class="comment">//   true，表示老元素的值保留，不会覆盖</span></span><br><span class="line">    <span class="comment">//   false，表示老元素的值不保留，会进行覆盖</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个局部变量，用来记录哈希表中数组的地址值。</span></span><br><span class="line">        Node&lt;K, V&gt;[] tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//临时的第三方变量，用来记录键值对对象的地址值</span></span><br><span class="line">        Node&lt;K, V&gt; p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示当前数组的长度</span></span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示索引</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把哈希表中数组的地址值，赋值给局部变量tab</span></span><br><span class="line">        tab = table;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//1.如果当前是第一次添加数据，底层会创建一个默认长度为16，加载因子为0.75的数组</span></span><br><span class="line">            <span class="comment">//2.如果不是第一次添加数据，会看数组中的元素是否达到了扩容的条件</span></span><br><span class="line">            <span class="comment">//如果没有达到扩容条件，底层不会做任何操作</span></span><br><span class="line">            <span class="comment">//如果达到了扩容条件，底层会把数组扩容为原先的两倍，并把数据全部转移到新的哈希表中</span></span><br><span class="line">            tab = resize();</span><br><span class="line">            <span class="comment">//表示把当前数组的长度赋值给n</span></span><br><span class="line">            n = tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿着数组的长度跟键的哈希值进行计算，计算出当前键值对对象，在数组中应存入的位置</span></span><br><span class="line">        i = (n - <span class="number">1</span>) &amp; hash;<span class="comment">//index</span></span><br><span class="line">        <span class="comment">//获取数组中对应元素的数据</span></span><br><span class="line">        p = tab[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//底层会创建一个键值对对象，直接放到数组当中</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K, V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等号的左边：数组中键值对的哈希值</span></span><br><span class="line">            <span class="comment">//等号的右边：当前要添加键值对的哈希值</span></span><br><span class="line">            <span class="comment">//如果键不一样，此时返回false</span></span><br><span class="line">            <span class="comment">//如果键一样，返回true</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> p.hash == hash;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b1 &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                e = p;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;</span><br><span class="line">                <span class="comment">//判断数组中获取出来的键值对是不是红黑树中的节点</span></span><br><span class="line">                <span class="comment">//如果是，则调用方法putTreeVal，把当前的节点按照红黑树的规则添加到树当中。</span></span><br><span class="line">                e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果从数组中获取出来的键值对不是红黑树中的节点</span></span><br><span class="line">                <span class="comment">//表示此时下面挂的是链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//此时就会创建一个新的节点，挂在下面形成链表</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//判断当前链表长度是否超过8，如果超过8，就会调用方法treeifyBin</span></span><br><span class="line">                        <span class="comment">//treeifyBin方法的底层还会继续判断</span></span><br><span class="line">                        <span class="comment">//判断数组的长度是否大于等于64</span></span><br><span class="line">                        <span class="comment">//如果同时满足这两个条件，就会把这个链表转成红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//e：  0x0044  ddd  444</span></span><br><span class="line">                    <span class="comment">//要添加的元素： 0x0055   ddd   555</span></span><br><span class="line">                    <span class="comment">//如果哈希值一样，就会调用equals方法比较内部的属性值是否相同</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果e为null，表示当前不需要覆盖任何元素</span></span><br><span class="line">            <span class="comment">//如果e不为null，表示当前的键是一样的，值会被覆盖</span></span><br><span class="line">            <span class="comment">//e:0x0044  ddd  555</span></span><br><span class="line">            <span class="comment">//要添加的元素： 0x0055   ddd   555</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//等号的右边：当前要添加的值</span></span><br><span class="line">                    <span class="comment">//等号的左边：0x0044的值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                &#125;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//threshold：记录的就是数组的长度 * 0.75，哈希表的扩容时机  16 * 0.75 = 12</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold) &#123;</span><br><span class="line">            resize();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示当前没有覆盖任何元素，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e79f4da6-a38b-4729-ab7b-06e2c986f535-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 旧数组的数组长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 旧的扩容的阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 上面的代码主要是计算得到新的阈值 newThr 和数组长度 newCap</span></span><br><span class="line">    </span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// 开辟新的数组空间</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 现在需要将旧数组当中的数据加入到新数组</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// e.next == null 表示只有一个数据，并没有形成 2 个</span></span><br><span class="line">                <span class="comment">// 数据以上的链表，因此可以直接加入到心得数组 当中</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 如果节点是红黑树节点，则在将红黑树当中的节点加入到新数组当中</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 链表的代码比较复杂，大家可以看下面的分析</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e79f4da6-a38b-4729-ab7b-06e2c986f535-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="remove">remove</h3><p>整个函数分成一下两个步骤：</p><ul><li>先找到要删除的节点。</li><li>删除找到的节点。</li></ul><div class="tabs" id="893ebc87-56df-4723-a233-b33f7144b79e"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#893ebc87-56df-4723-a233-b33f7144b79e-1"><i class="fas fa-seedling"></i>remove</button></li><li class="tab"><button type="button" data-href="#893ebc87-56df-4723-a233-b33f7144b79e-2"><i class="fas fa-leaf"></i>removeNode</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="893ebc87-56df-4723-a233-b33f7144b79e-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="893ebc87-56df-4723-a233-b33f7144b79e-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    <span class="comment">// matchValue 这个参数如果为 true 表示传入的参数 value</span></span><br><span class="line">    <span class="comment">// 和查找到的数据的 value 相等才进行删除</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="comment">// 先找到节点</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="LinkedHashMap">LinkedHashMap</h2><p>LinkedHashMap是HashMap的子类，与LinkedHashMap类似</p><ul><li><p>由键决定：<span class='p red'>有序</span>、不重复、无索引。</p></li><li><p>这里的有序指的是保证存储和取出的元素顺序一致</p></li><li><p>原理：底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序。</p></li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230521133546661.png" alt="image-20230521133546661"></p><div class="tag link"><a class="link-card" title="LinkedHashSet" href="/posts/edc5fe5c.html#LinkedHashSet"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">LinkedHashSet</p><p class="url">/posts/edc5fe5c.html#LinkedHashSet</p></div></a></div><hr><hr><h2 id="TreeMap">TreeMap</h2><ul><li><p>TreeMap跟TreeSet底层原理一样，都是红黑树结构的。</p></li><li><p>由键决定特性：不重复、无索引、可排序</p></li><li><p>可排序：<span class='p red'>对键进行排序</span>。</p></li><li><p>注意：默认按照键的从小到大进行排序，也可以自己规定键的排序规则</p></li></ul><blockquote><p>比较规则</p></blockquote><ul><li><p>实现Comparable接口，指定比较规则。</p></li><li><p>创建集合时传递Comparator比较器对象，指定比较规则。</p></li></ul><blockquote><p>TreeMap添加元素的时候，键是否需要重写hashCode和equals方法？</p></blockquote><p>此时是不需要重写的</p><p>在Java中，<code>TreeMap</code> 是基于红黑树实现的，它的元素排序是根据 key 的自然顺序或者根据提供的比较器（<code>Comparator</code>）来实现的。所以在使用 <code>TreeMap</code> 时，无需重写 key 的 <code>hashCode</code> 和 <code>equals</code> 方法。相反，你需要确保 key 类实现了 <code>Comparable</code> 接口或者向 <code>TreeMap</code> 提供一个 <code>Comparator</code> 实例。</p><hr><h3 id="基本使用">基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建集合对象</span></span><br><span class="line">TreeMap&lt;Integer, String&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(((o1, o2) -&gt; o2 - o1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">treeMap.put(<span class="number">1</span>,<span class="string">&quot;奥利奥&quot;</span>);</span><br><span class="line">treeMap.put(<span class="number">2</span>,<span class="string">&quot;雪碧&quot;</span>);</span><br><span class="line">treeMap.put(<span class="number">3</span>,<span class="string">&quot;六个核桃&quot;</span>);</span><br><span class="line">treeMap.put(<span class="number">4</span>,<span class="string">&quot;康师傅&quot;</span>);</span><br><span class="line">treeMap.put(<span class="number">5</span>,<span class="string">&quot;可口可乐&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.遍历元素</span></span><br><span class="line">treeMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">    System.out.println(k+<span class="string">&quot;=&quot;</span>+v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>输出：</p><p>5=可口可乐<br>4=康师傅<br>3=六个核桃<br>2=雪碧<br>1=奥利奥</p><hr><h3 id="底层原理">底层原理</h3><blockquote><p>TreeMap中每一个节点的内部属性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">K key;<span class="comment">//键</span></span><br><span class="line">V value;<span class="comment">//值</span></span><br><span class="line">Entry&lt;K,V&gt; left;<span class="comment">//左子节点</span></span><br><span class="line">Entry&lt;K,V&gt; right;<span class="comment">//右子节点</span></span><br><span class="line">Entry&lt;K,V&gt; parent;<span class="comment">//父节点</span></span><br><span class="line"><span class="type">boolean</span> color;<span class="comment">//节点的颜色</span></span><br></pre></td></tr></table></figure><blockquote><p>TreeMap类中中要知道的一些成员变量和方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合的长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造就是没有传递比较器对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造就是传递了比较器对象。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> put(key, value, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">添加元素过程</mark> <div class="tabs" id="5bf345b5-27ff-4798-bc80-e63b974c626f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5bf345b5-27ff-4798-bc80-e63b974c626f-1"><i class="fas fa-seedling"></i>put</button></li><li class="tab"><button type="button" data-href="#5bf345b5-27ff-4798-bc80-e63b974c626f-2"><i class="fas fa-leaf"></i>put</button></li><li class="tab"><button type="button" data-href="#5bf345b5-27ff-4798-bc80-e63b974c626f-3"><i class="fab fa-apple"></i>addEntry</button></li><li class="tab"><button type="button" data-href="#5bf345b5-27ff-4798-bc80-e63b974c626f-4"><i class="fas fa-tree"></i>fixAfterInsertion</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5bf345b5-27ff-4798-bc80-e63b974c626f-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> put(key, value, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5bf345b5-27ff-4798-bc80-e63b974c626f-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> V <span class="title function_">put</span><span class="params">(K key, V value, <span class="type">boolean</span> replaceOld)</span> &#123;</span><br><span class="line">    <span class="comment">//获取根节点的地址值，赋值给局部变量t</span></span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="comment">//判断根节点是否为null</span></span><br><span class="line">    <span class="comment">//如果为null，表示当前是第一次添加，会把当前要添加的元素，当做根节点</span></span><br><span class="line">    <span class="comment">//如果不为null，表示当前不是第一次添加，跳过这个判断继续执行下面的代码</span></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//方法的底层，会创建一个Entry对象，把他当做根节点</span></span><br><span class="line">        addEntryToEmptyMap(key, value);</span><br><span class="line">        <span class="comment">//表示此时没有覆盖任何的元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示两个元素的键比较之后的结果</span></span><br><span class="line">    <span class="type">int</span> cmp;</span><br><span class="line">    <span class="comment">//表示当前要添加节点的父节点</span></span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示当前的比较规则</span></span><br><span class="line">    <span class="comment">//如果我们是采取默认的自然排序，那么此时comparator记录的是null，cpr记录的也是null</span></span><br><span class="line">    <span class="comment">//如果我们是采取比较去排序方式，那么此时comparator记录的是就是比较器</span></span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="comment">//表示判断当前是否有比较器对象</span></span><br><span class="line">    <span class="comment">//如果传递了比较器对象，就执行if里面的代码，此时以比较器的规则为准</span></span><br><span class="line">    <span class="comment">//如果没有传递比较器对象，就执行else里面的代码，此时以自然排序的规则为准</span></span><br><span class="line">    <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> t.value;</span><br><span class="line">                <span class="keyword">if</span> (replaceOld || oldValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                    t.value = value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//把键进行强转，强转成Comparable类型的</span></span><br><span class="line">        <span class="comment">//要求：键必须要实现Comparable接口，如果没有实现这个接口</span></span><br><span class="line">        <span class="comment">//此时在强转的时候，就会报错。</span></span><br><span class="line">        Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//把根节点当做当前节点的父节点</span></span><br><span class="line">            parent = t;</span><br><span class="line">            <span class="comment">//调用compareTo方法，比较根节点和当前要添加节点的大小关系</span></span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果比较的结果为负数</span></span><br><span class="line">                <span class="comment">//那么继续到根节点的左边去找</span></span><br><span class="line">                t = t.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果比较的结果为正数</span></span><br><span class="line">                <span class="comment">//那么继续到根节点的右边去找</span></span><br><span class="line">                t = t.right;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果比较的结果为0，会覆盖</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> t.value;</span><br><span class="line">                <span class="keyword">if</span> (replaceOld || oldValue == <span class="literal">null</span>) &#123;</span><br><span class="line">                    t.value = value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//就会把当前节点按照指定的规则进行添加</span></span><br><span class="line">    addEntry(key, value, parent, cmp &lt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5bf345b5-27ff-4798-bc80-e63b974c626f-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(K key, V value, Entry&lt;K, V&gt; parent, <span class="type">boolean</span> addToLeft)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">    <span class="keyword">if</span> (addToLeft)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        parent.right = e;</span><br><span class="line">    <span class="comment">//添加完毕之后，需要按照红黑树的规则进行调整</span></span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5bf345b5-27ff-4798-bc80-e63b974c626f-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">    <span class="comment">//因为红黑树的节点默认就是红色的</span></span><br><span class="line">    x.color = RED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照红黑规则进行调整</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//parentOf:获取x的父节点</span></span><br><span class="line">    <span class="comment">//parentOf(parentOf(x)):获取x的爷爷节点</span></span><br><span class="line">    <span class="comment">//leftOf:获取左子节点</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前节点的父节点是爷爷节点的左子节点还是右子节点</span></span><br><span class="line">        <span class="comment">//目的：为了获取当前节点的叔叔节点</span></span><br><span class="line">        <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">            <span class="comment">//表示当前节点的父节点是爷爷节点的左子节点</span></span><br><span class="line">            <span class="comment">//那么下面就可以用rightOf获取到当前节点的叔叔节点</span></span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                <span class="comment">//叔叔节点为红色的处理方案</span></span><br><span class="line">                <span class="comment">//把父节点设置为黑色</span></span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                <span class="comment">//把叔叔节点设置为黑色</span></span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                <span class="comment">//把爷爷节点设置为红色</span></span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                <span class="comment">//把爷爷节点设置为当前节点</span></span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//叔叔节点为黑色的处理方案</span></span><br><span class="line">                <span class="comment">//表示判断当前节点是否为父节点的右子节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//表示当前节点是父节点的右子节点</span></span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    <span class="comment">//左旋</span></span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateRight(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//表示当前节点的父节点是爷爷节点的右子节点</span></span><br><span class="line">            <span class="comment">//那么下面就可以用leftOf获取到当前节点的叔叔节点</span></span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">            <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把根节点设置为黑色</span></span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="思考题">思考题</h3><blockquote><p>TreeMap添加元素的时候，键是否需要重写hashCode和equals方法？</p></blockquote><p>此时是不需要重写的</p><p>在Java中，<code>TreeMap</code> 是基于红黑树实现的，它的元素排序是根据 key 的自然顺序或者根据提供的比较器（<code>Comparator</code>）来实现的。所以在使用 <code>TreeMap</code> 时，无需重写 key 的 <code>hashCode</code> 和 <code>equals</code> 方法。相反，你需要确保 key 类实现了 <code>Comparable</code> 接口或者向 <code>TreeMap</code> 提供一个 <code>Comparator</code> 实例。</p><blockquote><p>HashMap是哈希表结构的，JDK8开始由数组，链表，红黑树组成的，既然有红黑树，HashMap的键是否需要实现Compareable接口或者传递比较器对象呢？</p></blockquote><p>不需要的。</p><p>因为在HashMap的底层，默认是利用哈希值的大小关系来创建红黑树的</p><blockquote><p>TreeMap和HashMap谁的效率更高？</p></blockquote><p>如果是最坏情况，添加了8个元素，这8个元素形成了链表，此时TreeMap的效率要更高</p><p>但是这种情况出现的几率非常的少。</p><p>一般而言，还是HashMap的效率要更高。</p><blockquote><p>你觉得在Map集合中，java会提供一个如果键重复了，不会覆盖的put方法呢？</p></blockquote><p>putIfAbsent</p><p>传递一个思想：</p><p>​    代码中的逻辑都有两面性，如果我们只知道了其中的A面，而且代码中还发现了有变量可以控制两面性的发生。</p><p>​    那么该逻辑一定会有B面。</p><p>​    习惯：</p><p>​        boolean类型的变量控制，一般只有AB两面，因为boolean只有两个值</p><p>​        int类型的变量控制，一般至少有三面，因为int可以取多个值。</p><p>​</p><blockquote><p>三种双列集合，以后如何选择？</p></blockquote><p>​    HashMap LinkedHashMap TreeMap</p><p>​    默认：HashMap（效率最高）</p><p>​    如果要保证存取有序：LinkedHashMap</p><p>​    如果要进行排序：TreeMap</p>]]></content>
    
    
    <summary type="html">HashMap、TreeMap解析</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>双列集合接口Map</title>
    <link href="https://wuwawawa.github.io/posts/eee6e16.html"/>
    <id>https://wuwawawa.github.io/posts/eee6e16.html</id>
    <published>2023-05-22T08:08:46.000Z</published>
    <updated>2023-05-22T09:56:58.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map继承体系">Map继承体系</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522164255312.png" alt="image-20230522164255312" style="zoom:67%;" /><p>双列集合的特点</p><p>① 双列集合一次需要存一对数据，分别为键和值</p><p>② 键不能重复，值可以重复</p><p>③ 键和值是一一对应的，每一个键只能找到自己对应的值</p><p>④ 键+值这个整体我们称之为“键值对”或者“键值对对象”，在Java中叫做 “Entry对象”</p><hr><hr><h2 id="Map接口常见方法">Map接口常见方法</h2><p>Map是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</p><p>往Map集合中添加key已经存在的新键值对，会覆盖原来的键值对。</p><table><thead><tr><th style="text-align:left">方法名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>V put(K key, V value)</code></td><td style="text-align:left">添加元素</td></tr><tr><td style="text-align:left"><code>V remove(Object key)</code></td><td style="text-align:left">根据键删除键值对元素</td></tr><tr><td style="text-align:left"><code>V get(Object key)</code></td><td style="text-align:left">根据key获取value</td></tr><tr><td style="text-align:left"><code>V getOrDefault(Object key, V defaultValue)</code></td><td style="text-align:left">根据key获取value，带默认值</td></tr><tr><td style="text-align:left"><code>void clear()</code></td><td style="text-align:left">移除所有的键值对元素</td></tr><tr><td style="text-align:left"><code>boolean containsKey(Object key)</code></td><td style="text-align:left">判断集合是否包含指定的键</td></tr><tr><td style="text-align:left"><code>boolean containsValue(Object value)</code></td><td style="text-align:left">判断集合是否包含指定的值</td></tr><tr><td style="text-align:left"><code>boolean isEmpty()</code></td><td style="text-align:left">判断集合是否为空</td></tr><tr><td style="text-align:left"><code>int size()</code></td><td style="text-align:left">集合的长度，也就是集合中键值对的个数</td></tr><tr><td style="text-align:left"><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code></td><td style="text-align:left">添加多个键值对</td></tr><tr><td style="text-align:left"><code>Set&lt;K&gt; keySet()</code></td><td style="text-align:left">返回一个包含所有key元素的Set集合</td></tr><tr><td style="text-align:left"><code>Collection&lt;V&gt; values()</code></td><td style="text-align:left">返回一个包含所有value元素的Collection集合</td></tr><tr><td style="text-align:left"><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code></td><td style="text-align:left">返回Map集合中所有键值对的一个Set集合</td></tr><tr><td style="text-align:left"><code>void forEach(BiConsumer&lt;? super K, ? super V&gt; action)</code></td><td style="text-align:left">结合lambda遍历集合</td></tr></tbody></table><blockquote><p>添加元素V put(K key, V value)</p></blockquote><p>在添加数据的时候，如果键不存在，那么直按把键值对对象添加到map集合当中，方法返回null。</p><p>在添加数据的时候，如果健是存在的，那么会把原有的键值对对象覆盖。会把被覆盖的值进行返回。</p><hr><hr><h2 id="Map遍历方式">Map遍历方式</h2><div class="tabs" id="cc6a501f-d013-469f-bffd-54511506df74"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#cc6a501f-d013-469f-bffd-54511506df74-1"><i class="fas fa-cat"></i>键找值</button></li><li class="tab"><button type="button" data-href="#cc6a501f-d013-469f-bffd-54511506df74-2"><i class="fas fa-horse"></i>键值对</button></li><li class="tab"><button type="button" data-href="#cc6a501f-d013-469f-bffd-54511506df74-3"><i class="fas fa-dove"></i>Lambda表达式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="cc6a501f-d013-469f-bffd-54511506df74-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Map集合的对象</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过键找值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.1获取所有的键</span></span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="comment">//3.2遍历单列集合，获取value</span></span><br><span class="line"><span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    System.out.println(<span class="string">&quot;key = &quot;</span> + key);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>key = 1<br>value = 1<br>key = 2<br>value = 22<br>key = 3<br>value = 333</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc6a501f-d013-469f-bffd-54511506df74-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Map集合的对象</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.1获取所有的键值对</span></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="comment">//3.2遍历单列集合，获取key和value</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : entrySet) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;key = &quot;</span> + key);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="cc6a501f-d013-469f-bffd-54511506df74-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Map集合的对象</span></span><br><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;333&quot;</span>);</span><br><span class="line"></span><br><span class="line">map.forEach((key,value)-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;key = &quot;</span> + key);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="Map-Entry说明">Map.Entry说明</h2><p>Map是java中的接口，<code>Map.Entry</code>是Map的一个内部接口。点进Map中，在源码375行的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Entry</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">        K <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        V <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map提供了一些常用方法，如<code>keySet()</code>、<code>entrySet()</code>等方法，<code>keySet()</code>方法返回值是Map中key值的集合；<code>entrySet()</code>的返回值也是返回一个Set集合，此集合的类型为<code>Map.Entry</code>。</p><p><code>Map.Entry</code>是Map声明的一个内部接口，此接口为泛型接口，定义为<code>Entry&lt;K,V&gt;</code>。它表示Map中的一个实体（一个key-value对）。接口中有getKey(),getValue方法。</p><blockquote><p>Map.Entry使用</p></blockquote><p>通常是遍历时会使用它，Map并没用继承Collection接口，并不能使用迭代器遍历。</p><p>以前，我们便利一个Map集合时，需要获取key的值，然后再获取value的值，稍微有亿点点麻烦，麻烦还是次要的，主要是从Map中取得关键字之后，我们必须每次重复返回到Map中取得相对的值，这是很繁琐和费时的。幸运的是，这里有一个更加简单的途径。Map类提供了一个称为entrySet()的方法，这个方法返回一个<code>Set&lt;Map.Entry&lt;K, V&gt;&gt;</code>。接着，<code>Map.Entry</code>类提供了一个<code>getKey()</code>方法和一个<code>getValue()</code>方法，因此，上面的代码可以被组织得更符合逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">map.put(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">map.put(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; next : entrySet) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> next.getKey();</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> next.getValue();</span><br><span class="line">    System.out.println(<span class="string">&quot;key = &quot;</span> + key);</span><br><span class="line">    System.out.println(<span class="string">&quot;value = &quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Map继承体系、接口方法、遍历方式</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>堆PriorityQueue和ArrayDeque</title>
    <link href="https://wuwawawa.github.io/posts/c320ea51.html"/>
    <id>https://wuwawawa.github.io/posts/c320ea51.html</id>
    <published>2023-05-22T00:21:06.000Z</published>
    <updated>2023-05-23T12:27:33.433Z</updated>
    
    <content type="html"><![CDATA[<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230521200611562.png" alt="image-20230521200611562" style="zoom: 50%;" /><h2 id="PriorityQueue">PriorityQueue</h2><h3 id="数据结构-堆">数据结构-堆</h3><p>前面介绍过队列，队列是一种先进先出(FIFO)的数据结构，但有些情况下，操作的数据可能带有优先级，一般出队列时，可能需要优先级高的元素先出队列，该场景下，使用队列显然不合适。在这种情况下，数据结构应该提供两个最基本的操作，一个是返回最高优先级对象，一个是添加新的对象。这种数据结构就是优先级队列(Priority Queue)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">queue.offer(<span class="number">50</span>);</span><br><span class="line">queue.offer(<span class="number">60</span>);</span><br><span class="line">queue.offer(<span class="number">30</span>);</span><br><span class="line">queue.offer(<span class="number">25</span>);</span><br><span class="line">queue.offer(<span class="number">70</span>);</span><br><span class="line">queue.offer(<span class="number">20</span>);</span><br><span class="line">queue.offer(<span class="number">10</span>);</span><br><span class="line">queue.offer(<span class="number">40</span>);</span><br><span class="line">System.out.println(queue);</span><br><span class="line"><span class="comment">//输出：[10, 30, 20, 40, 70, 50, 25, 60]</span></span><br></pre></td></tr></table></figure><blockquote><p>观察一下元素打印顺序有没有什么特点呢？能不能用已知的某种的数据结构来描述PriorityQueue这样的集合呢？</p></blockquote><p>首先，我们可以发现这些元素并不是按添加顺序打印的，排除了线性表、链表、队列这三种的可能性。</p><p>其次，打印的顺序并不是按照元素的升序或降序排列的，所以也就排除了有序数组、二叉排序树的可能性。</p><p>那么剩下的就只剩下哈希表和<span class='p green'>堆</span>了。</p><blockquote><mark class="hl-label green">堆的性质</mark> </blockquote><p>堆是一种<span class='p blue'>特殊的树</span>。</p><p>只要满足以下两点，它就是一个堆：</p><ul><li>堆是一个<span class='p green'>完全二叉树</span></li><li>堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值</li></ul><p>第一点，堆必须是一个完全二叉树。完全二叉树要求，除了最后一层，其他层的节点个数都是满的，最后一层的节点都靠左排列，自然堆也具有完全二叉树的所有性质</p><p>第二点，堆中的每个节点的值必须大于等于（或者小于等于）其子树中每个节点的值。实际上，我们还可以换一种说法，堆中每个节点的值都大于等于（或者小于等于）其左右子节点的值。这两种表述是等价的。</p><p>对于每个节点的值都大于等于子树中每个节点值的堆，我们叫做<code>大顶堆</code>。</p><p>对于每个节点的值都小于等于子树中每个节点值的堆，我们叫做<code>小顶堆</code>。</p><p>如果要获得有序的特性， 逐个出队(poll) ：行! 用迭代器：不行!</p><hr><h3 id="源码实现">源码实现</h3><blockquote><p>存储方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认数组大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="comment">//存储元素的数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] queue;</span><br><span class="line"><span class="comment">//队列中元素的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果comparator为null，则队列按照元素自然顺序进行排序，否则按照comparator指定的顺序进行排序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> E&gt; comparator;</span><br><span class="line"><span class="comment">//队列被修改的次数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>堆底层是用数组实现，其中queue[n]的两个子节点为queue[2n+1]和queue[2(n+1)]。</p><hr><h4 id="堆的插入">堆的插入</h4><p>offer函数有两个要点：</p><ul><li><p>如果堆为空，则无需扩容，也无需调整</p></li><li><p>否则：</p><p>1、判断数组是否需要扩容，如需要调用grow方法<br>2、插入元素后，有可能破坏了堆的平衡，调用siftUp(上滤)方法调整堆至平衡</p></li></ul><div class="tabs" id="eddc6051-32c1-445c-8877-50ed82a70a46"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#eddc6051-32c1-445c-8877-50ed82a70a46-1"><i class="fas fa-cat"></i>offer函数</button></li><li class="tab"><button type="button" data-href="#eddc6051-32c1-445c-8877-50ed82a70a46-2"><i class="fas fa-horse"></i>grow函数</button></li><li class="tab"><button type="button" data-href="#eddc6051-32c1-445c-8877-50ed82a70a46-3"><i class="fas fa-dove"></i>siftUp函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="eddc6051-32c1-445c-8877-50ed82a70a46-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= queue.length)</span><br><span class="line">        grow(i + <span class="number">1</span>);</span><br><span class="line">    size = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        queue[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUp(i, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="eddc6051-32c1-445c-8877-50ed82a70a46-2"><p>堆的扩容与ArrayList相似：</p><ul><li>若数组容量小于64，扩大为原来容量的2倍+2</li><li>若数组容量大于等于64，扩大为原来的1.5倍</li><li>将原来的数组拷贝到新的数组，并丢弃原来的数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> queue.length;</span><br><span class="line">    <span class="comment">// Double size if small; else grow by 50%</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((oldCapacity &lt; <span class="number">64</span>) ?</span><br><span class="line">                                     (oldCapacity + <span class="number">2</span>) :</span><br><span class="line">                                     (oldCapacity &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    queue = Arrays.copyOf(queue, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="eddc6051-32c1-445c-8877-50ed82a70a46-3"><p>以小根堆为例：</p><p>自底向上，不断比较、交换</p><p>假设插入元素E,把E插入到堆的末尾,假设在数组queue的k位置插入元素key</p><ul><li><p>不断的比较key与k的父节点e（即queue[(k-1)/2]) 的关系</p><p>1、若key&lt;e，则queue[k]=e，k回溯至e<br>2、若key&gt;=e或者k已经到达根节点，则结束循环</p></li><li><p>queue[k]=E</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftUpUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">e</span> <span class="operator">=</span> queue[parent];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = e;</span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">插入示意图</mark> <div class="tabs" id="2c1a2338-21d1-4774-a1a4-409ddc8ad324"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2c1a2338-21d1-4774-a1a4-409ddc8ad324-1"><i class="fas fa-cat"></i>1</button></li><li class="tab"><button type="button" data-href="#2c1a2338-21d1-4774-a1a4-409ddc8ad324-2"><i class="fas fa-horse"></i>2</button></li><li class="tab"><button type="button" data-href="#2c1a2338-21d1-4774-a1a4-409ddc8ad324-3"><i class="fas fa-dove"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2c1a2338-21d1-4774-a1a4-409ddc8ad324-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522095612801.png" alt="image-20230522095612801" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2c1a2338-21d1-4774-a1a4-409ddc8ad324-2"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522095647563.png" alt="image-20230522095647563" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2c1a2338-21d1-4774-a1a4-409ddc8ad324-3"><p>此时已经符合小根堆的要求</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522095717386.png" alt="image-20230522095717386" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h4 id="堆的删除">堆的删除</h4><p>调用poll方法，会删除堆顶元素</p><p>删除之后，把末尾元素直接放到堆顶，则破坏了堆的平衡</p><p>调用siftDown（下坠）函数使堆重新恢复平衡</p><p>siftDown与siftUp类似，只不过是自顶向下</p><p>被删除的元素用堆底元素替代，然后让该元素不断“下坠”，直到无法下坠为止</p><blockquote><p>siftDown原理</p></blockquote><p>以小根堆为例：</p><p>自顶向下，选择较小的子节点，不断比较、交换直到：</p><p>1、下标越界<br>2、节点的值同时小于等于左孩子和右孩子</p><p>假设数组queue最后一个元素的值为key，下标k从0（堆顶）开始当k存在左孩子时，执行以下循环：</p><p>若k有右孩子，则比较左孩子和右孩子的大小，并选出较小孩子child 比较key与c=queuelchila]的大小：</p><p>1、 若key&lt;=c，结束循环<br>2、若key&gt;c，则queue[k]=c,k=child，继续循环</p><p>最后queue[k]=key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="堆的建立">堆的建立</h4><p>当构造函数传入一个集合的时候，会调用 heapify方法进行堆的调整</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initFromCollection</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    initElementsFromCollection(c);</span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">演示</mark> <p>调整为最小堆</p><p>i = (size &gt;&gt;&gt; 1) - 1找到第一个非叶子节点进行调整</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230522101817238.png" alt="image-20230522101817238" style="zoom:67%;" /><hr><h3 id="堆排序">堆排序</h3><p>给定无序数组array，长度为n，将数组排成有序序列</p><p>要求时间复杂度为O(NlogN)，空间复杂度为O(1）</p><div class="tabs" id="c4068611-0241-463f-bdf4-6d2e574df7e0"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c4068611-0241-463f-bdf4-6d2e574df7e0-1"><i class="fas fa-award"></i>方案一</button></li><li class="tab"><button type="button" data-href="#c4068611-0241-463f-bdf4-6d2e574df7e0-2"><i class="fas fa-baseball-ball"></i>方案二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c4068611-0241-463f-bdf4-6d2e574df7e0-1"><p>利用PriorityQueue</p><p>1、新建另外一个最小堆<br>2、调用N次offer方法，将元素依次插入最小堆T1 (N)=O(NlogN)，S1(N)=O(N)<br>3、执行n次poll，把堆顶元素依次复制进原数组，T2(N)=O(NlogN)，S(N)=0(1)</p><p>总时间复杂度T(N)=O(NlogN)+O(NlogN)=O(NlogN)</p><p>总空间复杂度S(N)=O(N)+0(1)+O(N)</p><p>面试官可能会问你</p><p>可否把空间复杂度优化为O(1)？</p><p>那就需要用到方案二</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c4068611-0241-463f-bdf4-6d2e574df7e0-2"><p>堆排序，HeapSort</p><p>将数组本身看成最大堆，借助heapify函数，将数组构造成最大堆</p><p>1、利用heapify函数思路，构建<span class='p green'>最大堆</span><br>2、移除堆顶元素，交换到数组的末尾，<span class='p red'>并让堆的大小减少1</span>，再调用siftDown<br>3、不断执行2，直到堆的大小为1，排序完毕</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="大顶堆小顶堆">大顶堆小顶堆</h3><p>以存储Integer为例</p><div class="tabs" id="e0dd0eb7-e5ae-435c-8a2e-e0c5133de091"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e0dd0eb7-e5ae-435c-8a2e-e0c5133de091-1"><i class="fas fa-cat"></i>大顶堆的实现</button></li><li class="tab"><button type="button" data-href="#e0dd0eb7-e5ae-435c-8a2e-e0c5133de091-2"><i class="fas fa-horse"></i>小顶堆的实现</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e0dd0eb7-e5ae-435c-8a2e-e0c5133de091-1"><p><code>大顶堆</code>：对于每个节点的值都<span class='p red'>大于</span>等于子树中每个节点值的堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">        ((o1, o2) -&gt; o2-o1)</span><br><span class="line">);</span><br><span class="line">queue.offer(<span class="number">50</span>);</span><br><span class="line">queue.offer(<span class="number">60</span>);</span><br><span class="line">queue.offer(<span class="number">30</span>);</span><br><span class="line">queue.offer(<span class="number">25</span>);</span><br><span class="line">queue.offer(<span class="number">70</span>);</span><br><span class="line">queue.offer(<span class="number">20</span>);</span><br><span class="line">queue.offer(<span class="number">10</span>);</span><br><span class="line">queue.offer(<span class="number">40</span>);</span><br><span class="line">System.out.println(queue);</span><br><span class="line"><span class="comment">//输出：[70, 60, 30, 40, 50, 20, 10, 25]</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0dd0eb7-e5ae-435c-8a2e-e0c5133de091-2"><p><code>小顶堆</code>：对于每个节点的值都<span class='p green'>小于</span>等于子树中每个节点值的堆</p><p>默认的PriorityQueue就是一个小顶堆</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="ArrayDeque">ArrayDeque</h2><p>这里主要跟介绍<code>JDK</code>给我们提供的一种用数组实现的<span class='p green'>双端队列</span>，在之前的文章我们已经介绍了一种<strong>双端队列</strong>，不过与<code>ArrayDeque</code>不同的是，<code>LinkedList</code>的双端队列使用双向链表实现的。</p><div class="tag link"><a class="link-card" title="LinkedList继承体系" href="/posts/7ec37ec5.html#LinkedList继承体系"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">LinkedList继承体系</p><p class="url">/posts/7ec37ec5.html#LinkedList继承体系</p></div></a></div><blockquote><p>整体分析</p></blockquote><p>我们通常所谈论到的队列都是一端进一端出，而双端队列的两端则都是可进可出。</p><p><code>ArrayDeque</code>底层是使用数组实现的，而且数组的长度必须是<code>2</code>的整数次幂，这么操作的原因是为了后面位运算好操作。在<code>ArrayDeque</code>当中有两个整形变量<code>head</code>和<code>tail</code>，分别指向右侧的第一个进入队列的数据和左侧第一个进行队列的数据，整个内存布局如下图所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715010318405-150064473.png" alt="img" style="zoom: 67%;" /><p>其中<code>tail</code>指的位置没有数据，<code>head</code>指的位置存在数据。</p><div class="tabs" id="6960b700-7eac-4d0a-babe-81852ff7156c"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6960b700-7eac-4d0a-babe-81852ff7156c-1"><i class="fas fa-award"></i>1</button></li><li class="tab"><button type="button" data-href="#6960b700-7eac-4d0a-babe-81852ff7156c-2"><i class="fas fa-baseball-ball"></i>2</button></li><li class="tab"><button type="button" data-href="#6960b700-7eac-4d0a-babe-81852ff7156c-3"><i class="fas fa-bone"></i>3</button></li><li class="tab"><button type="button" data-href="#6960b700-7eac-4d0a-babe-81852ff7156c-4"><i class="fas fa-anchor"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6960b700-7eac-4d0a-babe-81852ff7156c-1"><p>向队列尾部添加数据，内存当中数据变化情况如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715010328930-112988730.png" alt="img" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6960b700-7eac-4d0a-babe-81852ff7156c-2"><p>队列头部添加数据，内存当中数据变化情况如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715010339150-1082019999.png" alt="img" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6960b700-7eac-4d0a-babe-81852ff7156c-3"><p>队尾元素删除，内存当中数据变化情况如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715010352215-1154696099.png" alt="img" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6960b700-7eac-4d0a-babe-81852ff7156c-4"><p>队首元素删除</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715010402157-1785624671.png" alt="img" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="源码分析">源码分析</h3><h4 id="关键字段">关键字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 底层用于存储具体数据的数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elements;</span><br><span class="line"><span class="comment">// 这就是前面谈到的 head</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> head;</span><br><span class="line"><span class="comment">// 与上文谈到的 tail 含义一样</span></span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> tail;</span><br><span class="line"><span class="comment">// MIN_INITIAL_CAPACITY 表示数组 elements 的最短长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="构造函数">构造函数</h4><ul><li>默认构造函数，数组默认申请的长度为<code>16</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayDeque</span><span class="params">()</span> &#123;</span><br><span class="line">    elements = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">16</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="关键函数">关键函数</h4><div class="tabs" id="e0ae5b59-a787-48a2-b770-38f92dae3c98"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-1"><i class="fas fa-seedling"></i>addLast</button></li><li class="tab"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-2"><i class="fas fa-leaf"></i>addFirst</button></li><li class="tab"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-3"><i class="fab fa-apple"></i>doubleCapacity</button></li><li class="tab"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-4"><i class="fas fa-tree"></i>扩容图示</button></li><li class="tab"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-5"><i class="fas fa-heartbeat"></i>pollFirst</button></li><li class="tab"><button type="button" data-href="#e0ae5b59-a787-48a2-b770-38f92dae3c98-6"><i class="fas fa-cookie-bite"></i>pollLast</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tail 的初始值为 0 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    elements[tail] = e;</span><br><span class="line">    <span class="comment">// 这里进行的 &amp; 位运算 相当于取余数操作</span></span><br><span class="line">    <span class="comment">// (tail + 1) &amp; (elements.length - 1) == (tail + 1) % elements.length</span></span><br><span class="line">    <span class="comment">// 这个操作主要是用于判断数组是否满了，如果满了则需要扩容</span></span><br><span class="line">    <span class="comment">// 同时这个操作将 tail + 1，即 tail = tail + 1</span></span><br><span class="line">    <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</span><br><span class="line">        doubleCapacity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// head 的初始值为 0 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">// 若此时数组长度elements.length = 16</span></span><br><span class="line">    <span class="comment">// 那么下面代码执行过后 head = 15</span></span><br><span class="line">    <span class="comment">// 下面代码的操作结果和下面两行代码含义一致</span></span><br><span class="line">    <span class="comment">// elements[(head - 1 + elements.length) % elements.length] = e</span></span><br><span class="line">    <span class="comment">// head = (head - 1 + elements.length) % elements.length</span></span><br><span class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</span><br><span class="line">    <span class="keyword">if</span> (head == tail)</span><br><span class="line">        doubleCapacity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doubleCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span> head == tail;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> elements.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> n - p; <span class="comment">// number of elements to the right of p</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Sorry, deque too big&quot;</span>);</span><br><span class="line">    Object[] a = <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">    <span class="comment">// 上面是函数 System.arraycopy 的函数参数列表</span></span><br><span class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);</span><br><span class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);</span><br><span class="line">    elements = a;</span><br><span class="line">    head = <span class="number">0</span>;</span><br><span class="line">    tail = n;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-4"><p>扩容之后将原来数组的数据拷贝到了新数组当中，虽然数据在旧数组和新数组当中的顺序发生变化了，但是他们的相对顺序却没有发生变化，他们的逻辑顺序也是一样的，这里的逻辑可能有点绕，大家在这里可以好好思考一下。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220715185849697-121038371.png" alt="img" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> (E) elements[h];</span><br><span class="line">    <span class="comment">// Element is null if deque empty</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    elements[h] = <span class="literal">null</span>;     <span class="comment">// Must null out slot</span></span><br><span class="line">    head = (h + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="e0ae5b59-a787-48a2-b770-38f92dae3c98-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 计算出待删除的数据的下标</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> (E) elements[t];</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 将需要删除的数据的下标值设置为 null 这样这块内存就</span></span><br><span class="line">    <span class="comment">// 可以被回收了</span></span><br><span class="line">    elements[t] = <span class="literal">null</span>;</span><br><span class="line">    tail = t;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">堆：PriorityQueue、ArrayDeque和LinkedList</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>队列接口Queue</title>
    <link href="https://wuwawawa.github.io/posts/54307854.html"/>
    <id>https://wuwawawa.github.io/posts/54307854.html</id>
    <published>2023-05-21T11:58:41.000Z</published>
    <updated>2023-05-21T14:14:35.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Queue体系架构">Queue体系架构</h2><p>Queue接口提供了队列数据结构的功能。它继承了Collection接口， 用于保存将要按FIFO(先进先出)顺序处理的元素。</p><p>它是一个有序的对象列表，其用途仅限于在列表末尾插入元素和从列表开头删除元素。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230521200611562.png" alt="image-20230521200611562" style="zoom: 50%;" /><hr><hr><h2 id="Queue接口的方法">Queue接口的方法</h2><p>Queue接口包括Collection接口的所有方法。</p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">来源</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>boolean add(E e)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">将指定的元素插入到队列尾部，并在成功时返回true。</td></tr><tr><td style="text-align:left"><code>boolean addAll(Collection&lt;? extends E&gt; c)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">添加多个元素至队列尾部</td></tr><tr><td style="text-align:left"><code>int size()</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">返回集合的长度</td></tr><tr><td style="text-align:left"><code>boolean isEmpty()</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">判断集合是否为空</td></tr><tr><td style="text-align:left"><code>boolean remove(Object o)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">移除指定的元素</td></tr><tr><td style="text-align:left"><code>boolean removeIf(Predicate&lt;? super E&gt; filter)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">根据条件进行移除</td></tr><tr><td style="text-align:left"><code>boolean removeAll(Collection&lt;?&gt; c)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">移除多个元素</td></tr><tr><td style="text-align:left"><code>void clear()</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">清空集合中的元素</td></tr><tr><td style="text-align:left"><code>boolean contains(Object o)</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">判断集合中是否存在指定的元素</td></tr><tr><td style="text-align:left"><code>Iterator&lt; E &gt; iterator()</code></td><td style="text-align:left"><span class='p blue'>Collection</span></td><td style="text-align:left">返回迭代器对象</td></tr><tr><td style="text-align:left"><code>boolean offer(E e)</code></td><td style="text-align:left"><span class='p green'>Queue</span></td><td style="text-align:left">添加到队列尾部</td></tr><tr><td style="text-align:left"><code>E remove()</code></td><td style="text-align:left"><span class='p green'>Queue</span></td><td style="text-align:left">删除并返回该队列的头部元素,如果队列为空,则引发异常</td></tr><tr><td style="text-align:left"><code>E poll()</code></td><td style="text-align:left"><span class='p green'>Queue</span></td><td style="text-align:left">返回并删除该队列的头部元素, 如果队列为空,则返回null</td></tr><tr><td style="text-align:left"><code>E peek()</code></td><td style="text-align:left"><span class='p green'>Queue</span></td><td style="text-align:left">返回队列头部元素，如果队列为空，则返回null</td></tr><tr><td style="text-align:left"><code>E element()</code></td><td style="text-align:left"><span class='p green'>Queue</span></td><td style="text-align:left">返回队列头部元素，如果队列为空，则引发异常</td></tr></tbody></table><mark class="hl-label blue">分类</mark> <div class="tabs" id="30fb45ed-f2eb-4ed0-8f0f-7555fff212e1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-1"><i class="fas fa-cat"></i>压入元素(添加)</button></li><li class="tab"><button type="button" data-href="#30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-2"><i class="fas fa-horse"></i>弹出元素(删除)</button></li><li class="tab"><button type="button" data-href="#30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-3"><i class="fas fa-dove"></i>获取队头元素(不删除)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-1"><blockquote><p><strong>add()、offer()</strong></p></blockquote><ul><li>相同：未超出容量，从队尾压入元素，返回压入的那个元素。</li><li>区别：在超出容量时，add()方法会对抛出异常，offer()返回false</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-2"><blockquote><p><strong>remove()、poll()</strong></p></blockquote><ul><li>相同：容量大于0的时候，删除并返回队头被删除的那个元素。</li><li>区别：在容量为0的时候，remove()会抛出异常，poll()返回false</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="30fb45ed-f2eb-4ed0-8f0f-7555fff212e1-3"><blockquote><p><strong>element()、peek()</strong></p></blockquote><ul><li>相同：容量大于0的时候，都返回队头元素。但是不删除。</li><li>区别：容量为0的时候，element()会抛出异常，peek()返回null。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="Deque接口的方法">Deque接口的方法</h2><p>Deque接口提供了双端队列(Deque)的功能。它继承了Queue接口，包括Collection和Queue接口的所有方法。</p><p>Deque是一个线性collection，支持在两端插入和移除元素。Deque的实现类是LinkedList、ArrayDeque、LinkedBlockingDeque，其中LinkedList是最常用的。</p><p>除了Queue接口中可用的方法之外，Deque还包括以下方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>void addFirst(E e)</code></td><td style="text-align:left">在双端队列的开头添加指定的元素。如果双端队列已满，则引发异常</td></tr><tr><td style="text-align:left"><code>void addLast(E e)</code></td><td style="text-align:left">在双端队列的末尾添加指定的元素。如果双端队列已满，则引发异常</td></tr><tr><td style="text-align:left"><code>boolean offerFirst(E e)</code></td><td style="text-align:left">在双端队列的开头添加指定的元素。如果双端队列已满，则返回false</td></tr><tr><td style="text-align:left"><code>boolean offerLast(E e)</code></td><td style="text-align:left">在双端队列的末尾添加指定的元素。如果双端队列已满，则返回false</td></tr><tr><td style="text-align:left"><code>E removeFirst()</code></td><td style="text-align:left">返回并删除双端队列的第一个元素。如果双端队列为空，则引发异常</td></tr><tr><td style="text-align:left"><code>E removeLast()</code></td><td style="text-align:left">返回并删除双端队列的最后一个元素。如果双端队列为空，则引发异常</td></tr><tr><td style="text-align:left"><code>E pollFirst()</code></td><td style="text-align:left">返回并删除双端队列的第一个元素。如果双端队列为空，则返回null</td></tr><tr><td style="text-align:left"><code>E pollLast()</code></td><td style="text-align:left">返回并删除双端队列的最后一个元素。如果双端队列为空，则返回null</td></tr><tr><td style="text-align:left"><code>E getFirst()</code></td><td style="text-align:left">返回双端队列的第一个元素。如果双端队列为空，则引发异常</td></tr><tr><td style="text-align:left"><code>E getLast()</code></td><td style="text-align:left">返回双端队列的最后一个元素。如果双端队列为空，则引发异常</td></tr><tr><td style="text-align:left"><code>E peekFirst()</code></td><td style="text-align:left">返回双端队列的第一个元素。如果双端队列为空，则返回null</td></tr><tr><td style="text-align:left"><code>E peekLast()</code></td><td style="text-align:left">返回双端队列的最后一个元素。如果双端队列为空，则返回null</td></tr><tr><td style="text-align:left"><code>boolean removeFirstOccurrence(Object o)</code></td><td style="text-align:left">删除第一次出现的指定元素,不存在时返回false</td></tr><tr><td style="text-align:left"><code>boolean removeLastOccurrence(Object o)</code></td><td style="text-align:left">删除最后一次出现的指定元素,不存在时返回false</td></tr></tbody></table><hr><p>Java堆栈Stack类已经过时，Java官方推荐使用Deque替代Stack使用。</p><p>以下是Deque接口提供的用于实现栈的方法：</p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>void push(E e)</code></td><td style="text-align:left">在双端队列的开头添加元素</td></tr><tr><td style="text-align:left"><code>E pop()</code></td><td style="text-align:left">从双端队列的开头删除元素</td></tr><tr><td style="text-align:left"><code>E peek()</code></td><td style="text-align:left">返回队列头部元素，如果队列为空，则返回null</td></tr></tbody></table><p>push = addFirst</p><p>pop = removeFirst</p><p>只是使用了不同的方法名体现队列表示栈结构时的特点</p><p>当我们把Deque作为Stack使用时，注意只调用push()/pop()/peek()方法，不要调用addFirst()/removeFirst()/peekFirst()方法，这样代码更加清晰。</p><hr><p>当 peek() poll() peek() remove()这些操作不带First时，默认是first，操作对象是队首</p><p>add()和offer()默认是队尾</p><table><thead><tr><th style="text-align:left">Queue方法</th><th style="text-align:left">等效Deque方法</th></tr></thead><tbody><tr><td style="text-align:left"><code>add(e)</code></td><td style="text-align:left"><code>addLast(e)</code></td></tr><tr><td style="text-align:left"><code>offer(e)</code></td><td style="text-align:left"><code>offerLast(e)</code></td></tr><tr><td style="text-align:left"><code>remove()</code></td><td style="text-align:left"><code>removeFirst()</code></td></tr><tr><td style="text-align:left"><code>poll()</code></td><td style="text-align:left"><code>pollFirst()</code></td></tr><tr><td style="text-align:left"><code>element()</code></td><td style="text-align:left"><code>getFirst()</code></td></tr><tr><td style="text-align:left"><code>peek()</code></td><td style="text-align:left"><code>peekFirst()</code></td></tr></tbody></table><hr><hr><h2 id="Queue遍历方式">Queue遍历方式</h2><p>Queue遍历方法上基本上与Collection的一致。</p><ol><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式</li></ol><div class="tag link"><a class="link-card" title="Collection集合的遍历方式" href="/posts/71c14870.html#Collection遍历方式"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">Collection集合的遍历方式</p><p class="url">/posts/71c14870.html#Collection遍历方式</p></div></a></div>]]></content>
    
    
    <summary type="html">Queue体系架构、Queue接口方法、Deque接口方法</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>HashSet和TreeSet</title>
    <link href="https://wuwawawa.github.io/posts/edc5fe5c.html"/>
    <id>https://wuwawawa.github.io/posts/edc5fe5c.html</id>
    <published>2023-05-20T03:29:18.000Z</published>
    <updated>2023-05-24T01:28:09.820Z</updated>
    
    <content type="html"><![CDATA[<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Set%E4%BD%93%E7%B3%BB%E5%9B%BE1.jpg" alt="Set体系图1" style="zoom:50%;" /><h2 id="HashSet">HashSet</h2><p>HashSet集合底层采取哈希表(HashMap)存储数据,<s>身在Collection心在 Map</s></p><p>哈希表是一种对于增删改查数据性能都较好的结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="哈希表组成">哈希表组成</h3><p>JDK8之前：数组+链表</p><p>JDK8开始：数组+链表+红黑树</p><p>在哈希表中，有一个很重要的值叫做哈希值，是哈希表的灵魂所在。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230520194828555.png" alt="image-20230520194828555" style="zoom:67%;" /><p>如果已经重写hashcode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230520195353131.png" alt="image-20230520195353131" style="zoom:75%;" /><p>在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。（<span class='p red'>哈希碰撞</span>）</p><hr><h3 id="底层原理">底层原理</h3><div class="tabs" id="515cce44-45a3-4097-8f7e-6ad0a4ce246a"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#515cce44-45a3-4097-8f7e-6ad0a4ce246a-1"><i class="fas fa-cat"></i>HashSetJDK8以前底层原理</button></li><li class="tab"><button type="button" data-href="#515cce44-45a3-4097-8f7e-6ad0a4ce246a-2"><i class="fas fa-horse"></i>HashSetJDK8底层原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="515cce44-45a3-4097-8f7e-6ad0a4ce246a-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/14_JKD8%E4%BB%A5%E5%89%8D%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="14_JKD8以前哈希表"  /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="515cce44-45a3-4097-8f7e-6ad0a4ce246a-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/15_JKD8%E4%BB%A5%E5%90%8E%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt="15_JKD8以后哈希表"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol><li><p><code>HashSet&lt;String&gt; hm = new HashSet&lt;&gt;();</code></p></li><li><p><code>int index = (数组长度-1) &amp; 哈希值;</code></p></li><li><p>一样：不存</p><p>不一样：存入数组，形成链表</p><ul><li><p>JDK8以前：新数组存入数组，老元素挂在新元素下面</p></li><li><p>JDK8以后：新元素直接挂在老元素下面</p></li></ul></li></ol><p>扩容时机：</p><ul><li>当数组中存了16*0.75=12个元素的时候，那么数组就会扩容成原先的两倍。</li><li>JDK8以后，当联表长度<span class='p red'>超过8</span>，且数组长度<span class='p red'>大于等于64</span>，那么当前的链表就会自动转成红黑树。</li></ul><blockquote><p>注意</p></blockquote><p>如果集合中存储的是自定义对象，必须要重写<span class='p red'>hashCode</span>和<span class='p red'>equals</span>方法</p><hr><h3 id="HashSet的三个问题">HashSet的三个问题</h3><div class="tabs" id="eddb45d3-b9a7-4d4c-8827-37b9acb7a487"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#eddb45d3-b9a7-4d4c-8827-37b9acb7a487-1"><i class="fas fa-cat"></i>问题1</button></li><li class="tab"><button type="button" data-href="#eddb45d3-b9a7-4d4c-8827-37b9acb7a487-2"><i class="fas fa-horse"></i>问题2</button></li><li class="tab"><button type="button" data-href="#eddb45d3-b9a7-4d4c-8827-37b9acb7a487-3"><i class="fas fa-dove"></i>问题3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="eddb45d3-b9a7-4d4c-8827-37b9acb7a487-1"><blockquote><p>问题1：HashSet为什么存和取的顺序不一样？</p></blockquote><p>HashSet 遍历元素的顺序是基于哈希表中元素的存储位置来进行的，从数组的0索引开始，一条链表一条链表这样遍历的。，而哈希表中元素的存储位置是由哈希值决定的，因此，元素的遍历顺序与元素添加的顺序无关。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230520212602484.png" alt="image-20230520212602484" style="zoom:67%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="eddb45d3-b9a7-4d4c-8827-37b9acb7a487-2"><blockquote><p>问题2：HashSet为什么没有索引？</p></blockquote><p>索引没有意义</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="eddb45d3-b9a7-4d4c-8827-37b9acb7a487-3"><blockquote><p>HashSet是利用什么机制保证数据去重的？</p></blockquote><p>HashCode方法+equals方法</p><p>利用HashCode方法得到Hash值，得到Hash值后就可以知道当前元素是添加到数组中的哪个位置。</p><p>如果该位置已经存在元素，HashSet会equals方法比较该元素与已存在元素的值否相等，如果相等则不进行操作，如果不相等则将该元素加入 HashSet 中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="案例演示">案例演示</h3><div class="tabs" id="b39c48bf-8146-47ec-b2a0-8db90e8ab7c8"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-1"><i class="fas fa-bug"></i>1</button></li><li class="tab"><button type="button" data-href="#b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-2"><i class="fas fa-cannabis"></i>2</button></li><li class="tab"><button type="button" data-href="#b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-3"><i class="fas fa-candy-cane"></i>3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-1"><p>此时并没有重写equals和Hashcode方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建三个学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建集合添加元素</span></span><br><span class="line">HashSet&lt;Student&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.添加元素</span></span><br><span class="line">System.out.println(hs.add(s1));</span><br><span class="line">System.out.println(hs.add(s2));</span><br><span class="line">System.out.println(hs.add(s3));</span><br><span class="line">System.out.println(hs.add(s4));</span><br><span class="line"><span class="comment">//4.打印集合</span></span><br><span class="line">System.out.println(hs);</span><br></pre></td></tr></table></figure><p>true<br>true<br>true<br>true<br>[Student(name=zhangsan, age=23), Student(name=lisi, age=24), Student(name=zhangsan, age=23), Student(name=wangwu, age=25)]</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b39c48bf-8146-47ec-b2a0-8db90e8ab7c8-3"><p>在Student类添加上@EqualsAndHashCode后输出：</p><p>true<br>false<br>true<br>true<br>[Student(name=zhangsan, age=23), Student(name=lisi, age=24), Student(name=wangwu, age=25)]</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="LinkedHashSet">LinkedHashSet</h2><p>LinkedHashSet继承于HashSet，方法与HashSet一致。</p><p>LinkedHashSet底层是一个 LinkedHashMap，底层维护了一个<span class='p green'>数组+双向链表</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><span class='p red'>有序</span>、不重复、无索引。</li><li>这里的有序指的是保证存储和取出的元素顺序一致。</li><li><span class='p red'>原理</span>：底层数据结构是依然哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序。</li></ul><p>例子</p><ul><li>第一个元素根据Hash值得到数组中该存入的位置为8，该位置没有元素为null，直接添加进去，于此同时底层还多了双向链表，头结点就为刚刚添加的元素</li><li>继续添加第二个元素，计算出第二个元素该存入的索引为3索引，没有元素直接添加，第一个元素第二个元素直接形成双向链表</li><li>继续添加第三个元素，根据Hash值计算出第三个元素该存入的索引为3索引，存在元素，根据equals方法，比较两个对象属性值是否相等，不一样，根据JDK8以后的规则，新的元素挂在下面，于此同时，第二个元素和第三个元素还要再形成双向链表</li><li>继续添加第四个元素，计算出第二个元素该存入的索引为0索引，与第三个元素形成双向链表</li><li>添加完成，此时头结点就为8元素，尾节点为0元素</li></ul><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230521133546661.png" alt="image-20230521133546661"></p><p>在遍历的时候就和HashSet不一样了（从数组的0索引开始一条链表一条链表遍历），在LinkedHashSet中，从头结点开始以此遍历，直至尾节点。</p><p>这时候获得的数据，就和添加元素的顺序一样了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建三个学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建集合添加元素</span></span><br><span class="line">LinkedHashSet&lt;Student&gt; lhs = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.添加元素</span></span><br><span class="line">System.out.println(lhs.add(s1));</span><br><span class="line">System.out.println(lhs.add(s2));</span><br><span class="line">System.out.println(lhs.add(s3));</span><br><span class="line">System.out.println(lhs.add(s4));</span><br><span class="line"><span class="comment">//4.打印集合</span></span><br><span class="line">System.out.println(lhs);</span><br></pre></td></tr></table></figure><p>输出：</p><p>true<br>false<br>true<br>true<br>[Student(name=zhangsan, age=23), Student(name=lisi, age=24), Student(name=wangwu, age=25)]</p><hr><hr><h2 id="TreeSet">TreeSet</h2><h3 id="特点">特点</h3><p>延续了Set集合两个特点：不重复、无索引</p><p>但是TreeSet多了一个特点：<span class='p red'>可排序</span></p><p>可排序：按照元素的默认规则（有小到大）排序。</p><p>TreeSet集合底层是基于<span class='p red'>红黑树</span>的数据结构实现排序的，增删改查性能都较好。</p><p>不依赖Hashcode和equals方法</p><hr><h3 id="方法">方法</h3><p>TreeSet实现了NavigableSet，NavigableSet是一个接口，继承自SortedSet接口，用于实现可导航的Set。它具有SortedSet所拥有的一些功能，比如能够自动进行排序、去重等，同时还具备一些额外的功能，比如顺序遍历元素、获取特定区间内的元素等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">来源</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>E first()</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">获取当前集合的首元素</td></tr><tr><td style="text-align:left"><code>E last()</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">获取当前集合的尾元素</td></tr><tr><td style="text-align:left"><code>SortedSet&lt;E&gt; headSet(E toElement)</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">返回值小于的toElement子集</td></tr><tr><td style="text-align:left"><code>SortedSet&lt;E&gt; tailSet(E fromElement)</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">返回值大于或等于fromElement的子集</td></tr><tr><td style="text-align:left"><code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">返回值范围为[fromElement,toElement)范围的子集</td></tr><tr><td style="text-align:left"><code>Iterator&lt;E&gt; iterator()</code></td><td style="text-align:left"><code>SortedSet</code></td><td style="text-align:left">返回迭代器</td></tr><tr><td style="text-align:left"><code>E lower(E e)</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回小于指定元素的那些元素中最大的元素</td></tr><tr><td style="text-align:left"><code>E floor(E e)</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">回小于或等于指定元素的那些元素中最大的元素</td></tr><tr><td style="text-align:left"><code>E ceiling(E e)</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回大于或等于指定元素的那些元素中的最小元素</td></tr><tr><td style="text-align:left"><code>E higher(E e)</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回大于指定元素的那些元素中的最小元素</td></tr><tr><td style="text-align:left"><code>E pollFirst()</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回并从集合中删除第一个元素</td></tr><tr><td style="text-align:left"><code>E pollLast()</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回并从集合中删除最后一个元素</td></tr><tr><td style="text-align:left"><code>Iterator&lt;E&gt; descendingIterator()</code></td><td style="text-align:left"><code>NavigableSet</code></td><td style="text-align:left">返回可用于以相反顺序迭代集合的迭代器</td></tr></tbody></table><hr><h3 id="默认排序规则">默认排序规则</h3><ul><li><p>对于数值类型：Integer，Double，默认按照从小到大的顺序进行排序。</p></li><li><p>对于字符、字符串类型：按照字符在ASCI码表中的数字升序进行排序。</p></li><li><p>如果要使用自定义的排序规则来排序元素，可以在创建TreeSet时传入一个Comparator对象，实现自定义的比较逻辑。在这种情况下，TreeSet会根据Comparator对象的比较结果来排序元素。</p></li></ul><hr><h3 id="案例演示-2">案例演示</h3><p>需求：创建TreeSet集合，并添加3个学生对象</p><p>学生对象属性：姓名，年龄。</p><p>要求按照学生的年龄进行排序，同年龄按照姓名字母排列（暂不考虑中文） 同姓名，同年龄认为是同一个人</p><div class="tabs" id="876ca747-d446-48f5-8a59-9b81d6730fb3"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#876ca747-d446-48f5-8a59-9b81d6730fb3-1"><i class="fas fa-cat"></i>Student类</button></li><li class="tab"><button type="button" data-href="#876ca747-d446-48f5-8a59-9b81d6730fb3-2"><i class="fas fa-dove"></i>比较器排序</button></li><li class="tab"><button type="button" data-href="#876ca747-d446-48f5-8a59-9b81d6730fb3-3"><i class="fas fa-horse"></i>bean类实现Comparable接口指定比较规则</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="876ca747-d446-48f5-8a59-9b81d6730fb3-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="876ca747-d446-48f5-8a59-9b81d6730fb3-2"><p>创建TreeSet对象时候，传递比较器Comparator指定规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建三个学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">24</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建集合添加元素</span></span><br><span class="line">TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((stu1,stu2)-&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (stu1.getAge()==stu2.getAge())&#123;</span><br><span class="line">        <span class="keyword">return</span> stu1.getName().compareTo(stu2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stu1.getAge()-stu2.getAge();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.添加元素</span></span><br><span class="line">ts.add(s1);</span><br><span class="line">ts.add(s2);</span><br><span class="line">ts.add(s3);</span><br><span class="line"><span class="comment">//4.打印集合</span></span><br><span class="line">System.out.println(ts);</span><br></pre></td></tr></table></figure><p>输出</p><p>[Student(name=zhangsan, age=23), Student(name=zhangsan, age=24), Student(name=wangwu, age=25)]</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="876ca747-d446-48f5-8a59-9b81d6730fb3-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getAge()==o.getAge())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getName().compareTo(o.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge()-o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：[Student(name=zhangsan, age=23), Student(name=zhangsan, age=24), Student(name=wangwu, age=25)]</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><span class='p red'>注意</span><p>如果两种方式都存在，优先选择传入的比较器</p><hr><h3 id="总结">总结</h3><blockquote><p>Tree Set集合的特点是怎么样的？</p></blockquote><p>可排序、不重复、无索引</p><p>底层基于红黑树实现排序，增删改查性能较好</p><blockquote><p>TreeSet集合自定义排序规则有几种方式</p></blockquote><p>方式一：Javabean类实现Comparable接口，指定比较规则</p><p>方式二：创建集合时，自定义Comparator比较器对象，指定比较规则</p><blockquote><p>方法返回值的特点</p></blockquote><p>负数：表示当前要添加的元素是小的，存左边</p><p>正数：表示当前要添加的元素是大的，存右边</p><p>0：表示当前要添加的元素已经存在，舍弃</p><hr><hr><h2 id="总结-2">总结</h2><ol><li><p>如果想要集合中的元素可重复</p><ul><li>用ArrayList集合，基于数组的。<span class='p red'>（用的最多）</span></li></ul></li><li><p>如果想要集合中的元素可重复，而且当前的<span class='p red'>增删操作明显多于查询</span></p><ul><li>用LinkedList集合，基于链表的。</li></ul></li><li><p>如果想对集合中的元素去重</p><ul><li>用HashSet集合，基于哈希表的。<span class='p red'>（用的最多）</span></li></ul></li><li><p>如果想对集合中的元素去重，而且<span class='p red'>保证存取顺序</span></p><ul><li>用LinkedHashSet集合，基于哈希表和双链表，效率低于HashSet。</li></ul></li><li><p>如果想对集合中的元素进行<span class='p red'>排序</span></p><ul><li>用TreeSet集合，基于红黑树。后续也可以用List集合实现排序。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">HashSet、LinkedHashSet和TreeSet解析</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>无序集合接口Set</title>
    <link href="https://wuwawawa.github.io/posts/c6185e82.html"/>
    <id>https://wuwawawa.github.io/posts/c6185e82.html</id>
    <published>2023-05-20T02:36:16.000Z</published>
    <updated>2023-05-20T03:30:16.226Z</updated>
    
    <content type="html"><![CDATA[<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/Set%E4%BD%93%E7%B3%BB%E5%9B%BE1.jpg" alt="Set体系图1" style="zoom:50%;" /><h2 id="Set集合的概述和特点">Set集合的概述和特点</h2><blockquote><p>Set集合的概述</p></blockquote><ul><li>无序集合,这里的无序指的是存取顺序</li><li>用户不可以精确控制列表中每个元素的插入位置</li><li>与List集合不同,列表不允许重复的元素</li></ul><blockquote><p>Set集合的特点</p></blockquote><ul><li>无序： 存和取的元素顺序不一致</li><li>无索引： 没有带索引的方法，所以不能使用普通for循环遍历，也不能通过索引来获取元素</li><li>不重复： 可以去除重复</li></ul><blockquote><p>Set集合的实现类</p></blockquote><ul><li>HashSet：无序、不重复、无索引</li><li>LinkedHashSet：<span class='p blue'>有序</span>、不重复、无索引</li><li>TreeSet：<span class='p green'>可排序</span>、不重复、无索引</li></ul><h2 id="Set集合方法">Set集合方法</h2><p>Set接口中的方法上基本上与Collection的API一致。</p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">boolean add(E e)</td><td style="text-align:left">添加元素</td></tr><tr><td style="text-align:left">boolean addAll(Collection&lt;? extends E&gt; c)</td><td style="text-align:left">添加多个元素</td></tr><tr><td style="text-align:left">boolean remove(Object o)</td><td style="text-align:left">移除指定的元素</td></tr><tr><td style="text-align:left">boolean removeIf(Predicate&lt;? super E&gt; filter)</td><td style="text-align:left">根据条件进行移除</td></tr><tr><td style="text-align:left">boolean removeAll(Collection&lt;?&gt; c);</td><td style="text-align:left">移除多个元素</td></tr><tr><td style="text-align:left">void clear()</td><td style="text-align:left">清空集合中的元素</td></tr><tr><td style="text-align:left">boolean contains(Object o)</td><td style="text-align:left">判断集合中是否存在指定的元素</td></tr><tr><td style="text-align:left">boolean isEmpty()</td><td style="text-align:left">判断集合是否为空</td></tr><tr><td style="text-align:left">int size()</td><td style="text-align:left">集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h2 id="Set遍历方式">Set遍历方式</h2><p>Set遍历方法上基本上与Collection的一致。</p><ol><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式</li></ol><div class="tag link"><a class="link-card" title="Collection集合的遍历方式" href="/posts/71c14870.html#Collection遍历方式"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/favicon.png"/></div><div class="right"><p class="text">Collection集合的遍历方式</p><p class="url">/posts/71c14870.html#Collection遍历方式</p></div></a></div>]]></content>
    
    
    <summary type="html">Set中常见的方法和遍历方式</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList和LinkedList</title>
    <link href="https://wuwawawa.github.io/posts/7ec37ec5.html"/>
    <id>https://wuwawawa.github.io/posts/7ec37ec5.html</id>
    <published>2023-05-16T13:40:28.000Z</published>
    <updated>2023-05-24T00:23:13.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList继承体系分析">ArrayList继承体系分析</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231107149-2112590708.png" alt="img" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><div class="tabs" id="41484376-eb71-4843-b44f-05f3c2bd6ccd"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#41484376-eb71-4843-b44f-05f3c2bd6ccd-1"><i class="fas fa-cookie-bite"></i>AbstractList</button></li><li class="tab"><button type="button" data-href="#41484376-eb71-4843-b44f-05f3c2bd6ccd-2"><i class="fas fa-dragon"></i>List</button></li><li class="tab"><button type="button" data-href="#41484376-eb71-4843-b44f-05f3c2bd6ccd-3"><i class="fas fa-cat"></i>RandomAccess</button></li><li class="tab"><button type="button" data-href="#41484376-eb71-4843-b44f-05f3c2bd6ccd-4"><i class="fas fa-dove"></i>Cloneable</button></li><li class="tab"><button type="button" data-href="#41484376-eb71-4843-b44f-05f3c2bd6ccd-5"><i class="fas fa-horse"></i>Serializable</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="41484376-eb71-4843-b44f-05f3c2bd6ccd-1"><p>这个抽象类也实现了<code>List</code>接口里面的方法，并且为其提供了默认代码实现，比如说<code>AbstractList</code>中对<code>indexOf</code>的实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法的作用就是返回对象 o 在容器当中的下标</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过迭代器去遍历数据</span></span><br><span class="line">    ListIterator&lt;E&gt; it = listIterator();</span><br><span class="line">    <span class="keyword">if</span> (o==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (it.next()==<span class="literal">null</span>)</span><br><span class="line">                <span class="comment">// 返回数据 o 的下标</span></span><br><span class="line">                <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                <span class="comment">// 返回数据 o 的下标</span></span><br><span class="line">                <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="41484376-eb71-4843-b44f-05f3c2bd6ccd-2"><p>这个接口主要定义了一些list集合常用的方法让<code>ArrayList</code>进行实现，</p><p>比如<code>add</code>，<code>addAll</code>，<code>contains</code>，<code>remove</code>，<code>set</code>，<code>get</code>，<code>size</code>，<code>indexOf</code>，<code>listIterator</code>等等方法。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="41484376-eb71-4843-b44f-05f3c2bd6ccd-3"><p>标记接口，内部并没有抽象方法。</p><p>这个接口的含义表示可以随机访问<code>ArrayList</code>当中的数据，拿什么是随机访问呢？随机访问就是表示我们可以在常量时间复杂度内访问数据，也就是时间复杂度是<code>O(1)</code>。因为在<code>ArrayList</code>当中我们使用的最基本的数据类型是<code>数组</code>，而数组是可以随机访问的。</p><p>而链表是不可以随机访问的，比如说我们想通过下标访问链表当中的某个数据，需要从头结点或者尾节点开始遍历，直到遍历到下标对应的数据，比如下图中的单链表找到第3个数据，需要从头开始遍历，而这个时间复杂度为<code>O(n)</code>。</p><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231535445-1718441250.png" alt="img"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="41484376-eb71-4843-b44f-05f3c2bd6ccd-4"><p>实现<code>Cloneable</code>接口那么实现<code>Cloneable</code>的类就能够调用<code>clone</code>这个方法，如果没有实现<code>Cloneable</code>接口就调用方法，则会抛出异常<code>java.lang.CloneNotSupportedException</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="41484376-eb71-4843-b44f-05f3c2bd6ccd-5"><p>Serializable接口主要用于序列化，所谓序列化就是能将对象写入磁盘，反序列化就是能够将对象从磁盘当中读取出来，如果想序列化和反序列化<code>ArrayList</code>的实例对象就必须实现这个接口，如果没有实现这个接口，在实例化的时候程序执行会报错。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="ArrayList关键字段分析">ArrayList关键字段分析</h2><p>在<code>ArrayList</code>当中主要有以下这些字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList当中默认初始化容量,使用无参构造器，则elementData[]初始容量为0,第一次添加元素扩容为10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 存放具体数据的数组 ArrayList 底层就是使用数组进行存储的</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="comment">// size 表示容器当中数据的个数 注意和容器的长度区分开来</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="comment">// 当容器当中没有元素的时候将 elementData 赋值为以下数据（不同情况不一样）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两个函数是 ArrayList 的构造函数，从下面两个函数当中</span></span><br><span class="line"><span class="comment">// 我们可以看出 EMPTY_ELEMENTDATA 和 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 使用区别</span></span><br><span class="line"><span class="comment">// EMPTY_ELEMENTDATA 是容器容量为0时使用，DEFAULTCAPACITY_EMPTY_ELEMENTDATA是默认构造的时候使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ArrayList 对象时，如果使用无参构造器，则 elementData[] 初始容量为 0</span></span><br><span class="line">    <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="ArrayList主要方法分析">ArrayList主要方法分析</h2><h3 id="add">add</h3><p><code>add</code>方法，这个方法用于往容器的末尾增加数据，也是<code>ArrayList</code>当中最核心的方法。主要工作流程如下图所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231130867-1867898666.png" alt="img" style="zoom:67%;" /><p>首先调用函数<code>ensureCapacityInternal</code>确保<code>ArrayList</code>当中的数组长度能够满足需求，不然数组会报数组下标越界异常，<code>add</code>函数调用过程当中所涉及到的函数如下。</p><div class="tabs" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-1">add</button></li><li class="tab"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-2">ensureCapacityInternal</button></li><li class="tab"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-3">calculateCapacity</button></li><li class="tab"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-4">ensureExplicitCapacity</button></li><li class="tab"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-5">grow⭐️</button></li><li class="tab"><button type="button" data-href="#6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-6">hugeCapacity</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数的主要目的是确保 elementData 的容量有 size + 1 ，否则存储数据的时候数组就会越界</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// size 表示容器当中数据的个数 注意和容器的长度区分开来</span></span><br><span class="line">    <span class="comment">// 加入数据之后 容器当中数据的个数也要 + 1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// minCapacity 表示 ArrayList 中的数组最小的长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    ensureExplicitCapacity(</span><br><span class="line">        <span class="comment">// 这个函数计算数组的最小长度</span></span><br><span class="line">        calculateCapacity(elementData, minCapacity)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是无参构造的话，取默认长度和需求长度 minCapacity 中比较大的值</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 这个表示容器发生改变的次数，我们在后续分析迭代器的时候进行分析</span></span><br><span class="line">    modCount++;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 如果最小的需求容量 minCapacity 大于现在容器当中数组的长度，则需要进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">// 新数组的长度为原数组的长度的1.5倍，右移一位相当于除以2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 如果新数组的长度，小于需要的最小的容量，则更新数组的长度为 minCapacity</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 这个函数的主要目的是判断整数是否发生溢出</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="6a318352-1ba6-4cb9-9bbe-84d380a0a3cf-6"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>上述代码的调用流程如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231142437-124193873.png" alt="img" style="zoom: 50%;" /><hr><hr><h3 id="get和set">get和set</h3><div class="tabs" id="c18f7a24-21a8-44ee-ae7e-1a8287cc5f76"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c18f7a24-21a8-44ee-ae7e-1a8287cc5f76-1"><i class="fas fa-atom"></i>get</button></li><li class="tab"><button type="button" data-href="#c18f7a24-21a8-44ee-ae7e-1a8287cc5f76-2"><i class="far fa-sun"></i>set</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c18f7a24-21a8-44ee-ae7e-1a8287cc5f76-1"><p>获取对应下标的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 进行数组下标的检查，如果下标超过 ArrayList 中数据的个数，则抛出异常</span></span><br><span class="line">    <span class="comment">// 注意这里是容器当中数据的个数 不是数组的长度</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回对应下标的数据</span></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c18f7a24-21a8-44ee-ae7e-1a8287cc5f76-2"><p>这个方法主要是用于设置指定下标的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="remove">remove</h3><p>删除<code>ArrayList</code>当中的数据</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231154448-1597746352.png" alt="img" style="zoom:80%;" /><div class="tabs" id="7a56d341-394e-4470-add8-6e8a906bebcf"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#7a56d341-394e-4470-add8-6e8a906bebcf-1">remove(int index)</button></li><li class="tab"><button type="button" data-href="#7a56d341-394e-4470-add8-6e8a906bebcf-2">remove(Object o)</button></li><li class="tab"><button type="button" data-href="#7a56d341-394e-4470-add8-6e8a906bebcf-3">fastRemove(int index)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="7a56d341-394e-4470-add8-6e8a906bebcf-1"><p>通过下标删除数据，这个函数的意义是删除下标为 index 的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先检查下标是否合法，如果不合法，抛出下标越界异常</span></span><br><span class="line">    rangeCheck(index);</span><br><span class="line"> </span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">  <span class="comment">// 因为删除某个数据，需要将该数据后面的数据往数组前面移动</span></span><br><span class="line">    <span class="comment">// 这里需要计算需要移动的数据的个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 通过拷贝移动数据</span></span><br><span class="line">        <span class="comment">// 这个函数的意义是将 index + 1和其之后的数据整体移动到 index</span></span><br><span class="line">        <span class="comment">// 的位置</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">// 因为最后一个数据已经拷贝到前一个位置了，所以可以设置为 null</span></span><br><span class="line">    <span class="comment">// 可以做垃圾回收了</span></span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7a56d341-394e-4470-add8-6e8a906bebcf-2"><p>删除容器当中的第一个等于 o 的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="7a56d341-394e-4470-add8-6e8a906bebcf-3"><p>这个方法和第一个 remove 方法原理一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="toString">toString</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">// 输出结果：</span></span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p><code>toString</code>方法没有直接在<code>ArrayList</code>当中实现，而是在它继承的类<code>AbstractCollection</code>当中实现的，<code>toString</code>的源代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 得到 ArrayList 的迭代器 </span></span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="comment">// 如果容器当中没有数据则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="comment">// 将对象加入到 StringBuilder 当中，这里加入的也是一个对象</span></span><br><span class="line">        <span class="comment">// 但是在 append 源代码当中会同样会使用 String.ValueOf </span></span><br><span class="line">        <span class="comment">// 得到对象的 toString 方法的结果</span></span><br><span class="line">        sb.append(e == <span class="built_in">this</span> ? <span class="string">&quot;(this Collection)&quot;</span> : e);</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">            <span class="keyword">return</span> sb.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果容器当中没有数据，直接返回[]。</li><li>如果容器当中有数据的话，那么通过迭代每个数据，调用<code>StringBuilder</code>的<code>append</code>方法，将数据加入到输出的<code>StringBuilder</code>对象当中。在<code>append</code>方法中添加到<code>StringBuilder</code>当中的字符串仍然是<code>ArrayList</code>当中数据对象的<code>toString</code>方法返回的数据。</li></ul><hr><h3 id="equals">equals</h3><p>在<code>ArrayList</code>当中的<code>equals</code>方法和<code>toString</code>方法不一样，</p><p><code>equlas</code>方法是在类<code>AbstractList</code>当中实现的，其源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> List))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    ListIterator&lt;E&gt; e1 = listIterator();</span><br><span class="line">    ListIterator&lt;?&gt; e2 = ((List&lt;?&gt;) o).listIterator();</span><br><span class="line">    <span class="keyword">while</span> (e1.hasNext() &amp;&amp; e2.hasNext()) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">o1</span> <span class="operator">=</span> e1.next();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> e2.next();</span><br><span class="line">        <span class="keyword">if</span> (!(o1==<span class="literal">null</span> ? o2==<span class="literal">null</span> : o1.equals(o2)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !(e1.hasNext() || e2.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的主要流程：</p><ul><li>首先判断<code>o</code>和<code>this</code>是否是同一个对象</li><li>如果对象没有实现<code>List</code>接口返回<code>false</code>。</li><li>逐个判断迭代器里面的对象是否相等（调equals），如果两个链表当中节点数目一样而且都相等则返回<code>true</code>否则返回<code>false</code>。</li></ul><hr><h3 id="clone">clone</h3><p>集合的 <code>clone</code> 方法执行的是浅拷贝。这意味着，新创建的集合对象会包含原始集合中的同一组对象引用。如果原始集合中的对象是可变的，那么在新集合中对这些对象所做的更改也会反映在原始集合中。</p><p>如果需要执行深拷贝，可以通过使用序列化和反序列化技术或手动复制对象并创建新的对象引用来实现。例如，可以使用 Java 序列化 API 或第三方库（如 Apache Commons Lang 库）来执行深拷贝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="built_in">super</span>.clone();</span><br><span class="line">        v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">        v.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// this shouldn&#x27;t happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个拷贝过程如下如所示：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220707231203740-1128103203.png" alt="img" style="zoom:50%;" /><p>虽然发生了数组的拷贝，但是拷贝之后的数组中数据的指向并没有发生变化，也就是说两个数组指向的内容是一样的。</p><hr><hr><h2 id="ArrayList迭代器Iterator">ArrayList迭代器Iterator</h2><h3 id="Iterator字段分析">Iterator字段分析</h3><p><code>Itr</code>类是<code>ArrayList</code>的内部类，接下来我们仔细分析<code>Itr</code>类的实现。</p><p>在<code>Itr</code>类当中主要有以下几个字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下一个元素的下标 当我们 new 这个对象的时候这个值默认初始化为0</span></span><br><span class="line"><span class="type">int</span> cursor;       </span><br><span class="line"><span class="comment">// 上一个通过 next 方法返回的元素的下标  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; </span><br><span class="line"><span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount; </span><br></pre></td></tr></table></figure><p><code>modCount</code>表示数组当中数据改变的次数 ,是<code>ArrayList</code>当中的类变量。</p><p><code>expectedModCount </code>是<code>ArrayList内部类 Itr</code>中的类变量 然后将这个变量保存到 expectedModCount当中。使用 expectedModCount 主要用于 fast-fail 机制。</p><p><code>modCount</code>（英文全称为：modifications count，修改次数）这个字段。当<code>ArrayList</code>当中发生一次<strong>结构修改</strong>(<code>Structural modifications</code>)时，<code>modCount</code>就++。所谓<strong>结构修改</strong>就是那些让<code>ArrayList</code>当中数组的数据个数<code>size</code>发生变化的操作，比如说<code>add</code>、<code>remove</code>方法，因为这两个方法一个是增加数据，一个是删除数据，都会导致容器当中数据个数发生变化。而<code>set</code>方法就不会是的<code>modCount</code>发生变化，因为没有改变容器当中数据的个数。</p><hr><h3 id="next和hasnext">next和hasnext</h3><div class="tabs" id="b80a58c5-9f6c-45f6-ac2d-8de41ea96561"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#b80a58c5-9f6c-45f6-ac2d-8de41ea96561-1"><i class="fas fa-atom"></i>hasNext()</button></li><li class="tab"><button type="button" data-href="#b80a58c5-9f6c-45f6-ac2d-8de41ea96561-2"><i class="far fa-sun"></i>next()</button></li><li class="tab"><button type="button" data-href="#b80a58c5-9f6c-45f6-ac2d-8de41ea96561-3"><i class="fas fa-wind"></i>checkForComodification()</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="b80a58c5-9f6c-45f6-ac2d-8de41ea96561-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个 size 是外部类 ArrayList 当中的 size 表示的是 ArrayList当中数据元素的个数，</span></span><br><span class="line">    <span class="comment">// cursor 的初始值为 0 每调用一个 next cursor的值就+1，当等于 size 是容器当中的数据已经遍历完成了 hasNext 就返回 false 了</span></span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b80a58c5-9f6c-45f6-ac2d-8de41ea96561-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个方法主要是用于检测在数据迭代的过程当中 ArrayList 是否发生 结构修改</span></span><br><span class="line">    <span class="comment">// 如果发生结构修改就抛出 ConcurrentModificationException 异常</span></span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    <span class="comment">// 更改 cursor 的值 并将其设置为下一个返回元素的下标 这一点我们在</span></span><br><span class="line">    <span class="comment">// 字段分析的时候已经谈到过了</span></span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 返回数据 表达式 lastRet = i 的返回值为 i </span></span><br><span class="line">    <span class="comment">// 这个表达式不仅将 lastRet 的值赋值为 i 同时返回 i</span></span><br><span class="line">    <span class="comment">// 因此可以返回下标为 i 的数据</span></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="b80a58c5-9f6c-45f6-ac2d-8de41ea96561-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 如果发生 结构修改那么 modCount 的值会++ 那么就和 expectedModCount 不相等了</span></span><br><span class="line">    <span class="comment">// expectedModCount 初始化的时候令其等于 expectedModCount</span></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <p>为什么要抛出<code>ConcurrentModificationException</code>异常呢，我们先想想是什么导致<code>modCount</code>发生变化。肯定迭代器在进行遍历的同时，修改了<code>modCount</code>的值，通常这种现象的发生出现在并发的情况下，因此抛出<code>ConcurrentModificationException</code>异常。像这种通过迭代器遍历过程进行检查并且当发生不符合条件的情况下抛出异常的现象就称作<code>Fast-fail</code>。</p><hr><h3 id="remove-2">remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">    <span class="comment">// 进行合法性检查，看是否需要抛出异常</span></span><br><span class="line">    checkForComodification();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 ArrayList 的remove方法实现</span></span><br><span class="line">        ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 因为 remove 会改变 modCount 的值，因此需要将 expectedModCount 重新赋值</span></span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="ArrayList总结">ArrayList总结</h2><h3 id="时间复杂度分析">时间复杂度分析</h3><ul><li>因为<code>ArrayList</code>是随机存取的，因此我们通过下标查找数据的时间复杂度是<code>O(1)</code>。</li><li>插入数据的时间复杂度是<code>O(n)</code>。</li></ul><h3 id="扩容机制">扩容机制</h3><p>① 利用空参创建的集合，在底层创建一个默认长度为0的数组</p><p>② 添加第一个元素时，底层会创建一个新的长度为10的数组</p><p>③ 存满时，会扩容1.5倍</p><p>④ 如果一次添加多个元素，1.5倍还放不下，则新创建数组的长度以实际为准</p><blockquote><p>为什么是1.5倍</p></blockquote><p>假设我们在使用<code>ArrayList</code>的时候没有指定初始化的时候数组的长度，也就是说初始长度为<code>ArrayList</code>的默认长度也就是10。那么当我们不停地往容器当中增加数据，扩容导致的数组长度的变化如上图所示，横轴表示扩容次数，纵轴表示数组长度，蓝色的扩容为原数组长度的1.5倍，另外一条是2倍。我们很清晰的发现扩容为原来的<code>2倍</code>在后期的数组长度将会远大于扩容<code>1.5倍</code>。这很可能会导致我们会浪费很大的数组空间，比如说刚好加入最后一个数据的时候导致<code>ArrayList</code>进行扩容操作，这可能是<code>ArrayList</code>在设计时候的考量。</p><img src="https://img2022.cnblogs.com/blog/2519003/202207/2519003-20220707231216216-531592090.png" alt="img" style="zoom:67%;" /><p>1.5^8=25.6</p><p>2^8=256</p><hr><hr><h2 id="LinkedList继承体系">LinkedList继承体系</h2><p>首先先直观的看一下<code>LinedList</code>的继承体系和实现的接口</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220704233923694-1289934053.png" alt="img" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><ul><li>实现了<code>List</code>接口，这个接口定义了一些常见的容器的方法，比如<code>add</code>、<code>addAll</code>、<code>get</code>、<code>set</code>、<code>contains</code>、<code>sort</code>等等。</li><li>实现了<code>Deque</code>接口，这个接口你可以简单的认为是一个双端队列，两头都可以进可以出，它定义的方法有<code>getFirst</code>、<code>getLast</code>、<code>addFirst</code>、<code>addLast</code>、<code>removeFirst</code>、<code>removeLast</code>、<code>peekFirst</code>、<code>peekLast</code>等等。</li><li>实现<code>Cloneable</code>和<code>Serializable</code>接口主要是为了能够进行深拷贝和序列化。</li><li><code>AbstractSequentialList</code>主要是给一些接口方法提供默认实现。</li></ul><p>链表作为一个容器肯定需要将数据加入到容器当中，也需要从容器当中得到某个数据，判断数据是否存在容器当中，因此有<code>add</code>、<code>addAll</code>、<code>get</code>、<code>set</code>、<code>contains</code>、<code>sort</code>这些方法是很自然的。此外<code>LinedList</code>实现的是双向链表，我们很容易在链表的任意位置进行插入和删除，当我们在链表的头部和尾部进行插入和删除的时候就可以满足<code>Deque</code>的需求了（双端队列需要能够在队列的头和尾进行出队和入队，就相当于插入和删除），因此<code>LinedList</code>实现<code>getFirst</code>、<code>getLast</code>、<code>addFirst</code>、<code>addLast</code>、<code>removeFirst</code>、<code>removeLast</code>也就很容易理解了。</p><hr><hr><h2 id="LinkedList整体结构">LinkedList整体结构</h2><mark class="hl-label blue">主要字段</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 用于记录链表当中节点的个数，也就是有几个数据</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pointer to first node.</span></span><br><span class="line"><span class="comment">    * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">    *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">// 指向双向链表的头结点</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Pointer to last node.</span></span><br><span class="line"><span class="comment">    * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">    *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last; <span class="comment">// 指向双向链表的尾节点</span></span><br></pre></td></tr></table></figure><mark class="hl-label green">内部节点的形式</mark> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"> </span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的字段分析，<code>LinkedList</code>内部结构主要如下：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/2519003-20220704233936333-32626593.png" alt="img" style="zoom:67%;" /><p>链表当中有<code>first</code>和<code>last</code>字段主要指向链表当中第一个节点和最后一个节点，如果链表当中没有节点，那么他们都是<code>null</code>，如果链表当中有一个节点他们指向同一个节点，如果链表中节点个数大于2，他们分别指向第一个节点和最后一个节点。</p><hr><h2 id="LinkedList主要方法">LinkedList主要方法</h2><h3 id="add-2">add</h3><p><code>add</code>方法，这个方法主要是向链表尾部增加一个元素。</p><div class="tabs" id="f35b9d04-2acd-45e7-b0f1-fd07df6de800"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#f35b9d04-2acd-45e7-b0f1-fd07df6de800-1"><i class="fas fa-cat"></i>add</button></li><li class="tab"><button type="button" data-href="#f35b9d04-2acd-45e7-b0f1-fd07df6de800-2"><i class="fas fa-horse"></i>linkLast</button></li><li class="tab"><button type="button" data-href="#f35b9d04-2acd-45e7-b0f1-fd07df6de800-3"><i class="fas fa-heartbeat"></i>linkBefore</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="f35b9d04-2acd-45e7-b0f1-fd07df6de800-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="comment">// 这个方法主要是向链表尾部增加一个元素</span></span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f35b9d04-2acd-45e7-b0f1-fd07df6de800-2"><p>向链表尾部增加一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="f35b9d04-2acd-45e7-b0f1-fd07df6de800-3"><p><code>linkBefore</code>和<code>linkLast</code>的作用相反，是在某个节点前面插入数据<code>e</code>，大体和前面的<code>linkLast</code>方法一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="get和set-2">get和set</h3><div class="tabs" id="2ca762ce-3adb-46d9-b490-59bdef0bbc39"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2ca762ce-3adb-46d9-b490-59bdef0bbc39-1"><i class="fas fa-award"></i>get</button></li><li class="tab"><button type="button" data-href="#2ca762ce-3adb-46d9-b490-59bdef0bbc39-2"><i class="fas fa-baseball-ball"></i>set</button></li><li class="tab"><button type="button" data-href="#2ca762ce-3adb-46d9-b490-59bdef0bbc39-3"><i class="fas fa-bone"></i>node</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2ca762ce-3adb-46d9-b490-59bdef0bbc39-1"><p>通过下标获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    checkElementIndex(index); <span class="comment">// 判断下标是否合法</span></span><br><span class="line">    <span class="keyword">return</span> node(index).item; <span class="comment">// 取出对应的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2ca762ce-3adb-46d9-b490-59bdef0bbc39-2"><p>更新某个下标的数据<code>item</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">       checkElementIndex(index); <span class="comment">// 判断下标是否合法</span></span><br><span class="line">       Node&lt;E&gt; x = node(index);</span><br><span class="line">       <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">       x.item = element; <span class="comment">// 更新数据</span></span><br><span class="line">       <span class="keyword">return</span> oldVal; <span class="comment">// 返回旧数据</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2ca762ce-3adb-46d9-b490-59bdef0bbc39-3"><p>根据下标找到对应的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 找到第 index + 1 个元素</span></span><br><span class="line">    <span class="comment">// 判断对应位置的元素是离链表头部近还是离链表尾部近，哪头近就从哪头遍历</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="remove-3">remove</h3><div class="tabs" id="c97870d9-78a0-4bce-98ab-0dca438c346f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#c97870d9-78a0-4bce-98ab-0dca438c346f-1"><i class="fas fa-atom"></i>remove</button></li><li class="tab"><button type="button" data-href="#c97870d9-78a0-4bce-98ab-0dca438c346f-2"><i class="far fa-sun"></i>unlink</button></li><li class="tab"><button type="button" data-href="#c97870d9-78a0-4bce-98ab-0dca438c346f-3"><i class="fas fa-wind"></i>unlinkFirst</button></li><li class="tab"><button type="button" data-href="#c97870d9-78a0-4bce-98ab-0dca438c346f-4"><i class="fas fa-fire-alt"></i>unlinkLast</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="c97870d9-78a0-4bce-98ab-0dca438c346f-1"><p>删除链表当中的某个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果元素为 null，就删除链表当中第一个值为 null 的元素</span></span><br><span class="line">    <span class="comment">// 从这里也可以看出 LinkedList 支持值为 null 的对象</span></span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c97870d9-78a0-4bce-98ab-0dca438c346f-2"><p>删除某个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; x)</span> &#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果前一个节点为 null 说明被删除的就是首节点，因此需要跟新首节点为原来节点的下一个节点，也就是 next</span></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 同样的，如果 next 为 null ，那么被删除的节点就是为节点，因此需要更新 last 为被删除节点的上一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    x.item = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c97870d9-78a0-4bce-98ab-0dca438c346f-3"><p>删除链表当中第一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">    <span class="comment">// f 表示头结点，且 f 不等于 null</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="literal">null</span>;</span><br><span class="line">    f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next; <span class="comment">// 头结点变成f的下一个节点</span></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">        last = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="literal">null</span>;</span><br><span class="line">    size--; <span class="comment">// 删除一个节点链表当中数据少了一个，因此size--</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="c97870d9-78a0-4bce-98ab-0dca438c346f-4"><p>删除链表当中最后一个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> &#123;</span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="literal">null</span>;</span><br><span class="line">    l.prev = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="literal">null</span>)</span><br><span class="line">        first = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="clone-2">clone</h3><p>当我们想要克隆一个对象的时候我们通常会使用到这个方法，这个方法通常是将被克隆的对象复制一份，我们来看一下<code>LinkedList</code>的<code>clone</code>方法。</p><p>我们可以知道<code>LinkedList</code>的克隆方法创建了一个新的链表但是没有改变里面的数据，因此如果你修改克隆链表中的数据的话，原来的链表里面的数据也会改。</p><div class="tabs" id="ce746b79-24bb-4517-9916-86e9830c22b2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ce746b79-24bb-4517-9916-86e9830c22b2-1"><i class="fas fa-bug"></i>clone</button></li><li class="tab"><button type="button" data-href="#ce746b79-24bb-4517-9916-86e9830c22b2-2"><i class="fas fa-cannabis"></i>superClone</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ce746b79-24bb-4517-9916-86e9830c22b2-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkedList&lt;E&gt; clone = superClone();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Put clone into &quot;virgin&quot; state</span></span><br><span class="line">    clone.first = clone.last = <span class="literal">null</span>;</span><br><span class="line">    clone.size = <span class="number">0</span>;</span><br><span class="line">    clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize clone with our elements</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">        clone.add(x.item);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ce746b79-24bb-4517-9916-86e9830c22b2-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LinkedList&lt;E&gt; <span class="title function_">superClone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (LinkedList&lt;E&gt;) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">ArrayList和LinkedList设计分析</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>有序集合接口List</title>
    <link href="https://wuwawawa.github.io/posts/494ad091.html"/>
    <id>https://wuwawawa.github.io/posts/494ad091.html</id>
    <published>2023-05-16T11:22:46.000Z</published>
    <updated>2023-05-20T03:04:35.445Z</updated>
    
    <content type="html"><![CDATA[<img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/List%E4%BD%93%E7%B3%BB%E5%9B%BE1.jpg" alt="List体系图1" style="zoom:50%;" /><h2 id="List集合的概述和特点">List集合的概述和特点</h2><blockquote><p>List集合的概述</p></blockquote><ul><li>有序集合,这里的有序指的是存取顺序</li><li>用户可以精确控制列表中每个元素的插入位置,用户可以通过整数索引访问元素,并搜索列表中的元素</li><li>与Set集合不同,列表通常允许重复的元素</li></ul><blockquote><p>List集合的特点</p></blockquote><ul><li>有序： 存和取的元素顺序一致</li><li>有索引： 可以通过索引操作元素</li><li>可重复：存储的元素可以重复</li></ul><hr><hr><h2 id="List集合的特有方法">List集合的特有方法</h2><ul><li>Collection的方法List都继承了</li><li>List集合因为有索引，索引多了很多索引操作的方法</li></ul><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr><tr><td>int indexOf(Object o);</td><td>返回指定元素的索引</td></tr><tr><td>ListIterator&lt; E &gt; listIterator();</td><td>返回列表迭代器</td></tr></tbody></table><blockquote><p>List系列集合中两个增加的方法</p></blockquote><p>第一个Collection接口中方法 <code> boolean add(E e);</code>添加指定的元素,返回值表示当前元素是否添加成功</p><p>第二个List接口中方法 <code> void add(int index,E element)</code> 添加指定索引的元素，无返回值</p><blockquote><p>List系列集合中两个删除的方法</p></blockquote><p>第一个Collection接口中方法  <code> boolean remove(Object o)</code>删除指定的元素,返回值表示当前元素是否删除成功</p><p>第二个List接口中方法 <code> E remove(int index)</code> 删除指定索引的元素,返回值表示实际删除的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建集合并添加元素</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 删除元素</span></span><br><span class="line"><span class="comment">//请问：此时删除的是1这个元素，还是1索引上的元素 为什么</span></span><br><span class="line"><span class="comment">//在调用方法的时候，如果出现了重载现象</span></span><br><span class="line"><span class="comment">//优先调用，实参和形参类型一致的那个方法</span></span><br><span class="line">list.remove(<span class="number">1</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">//[1, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动装箱,手动把基本数据类型的1，变成Integer类型</span></span><br><span class="line"><span class="comment">// 此时删除的就是1这个元素</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">list.remove(i);</span><br><span class="line">System.out.println(list);</span><br><span class="line"><span class="comment">//[3]</span></span><br></pre></td></tr></table></figure><hr><h2 id="List集合的遍历方式">List集合的遍历方式</h2><p>List继承于Collection，三种遍历方式也都可以用</p><ul><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式遍历</li></ul><p>在此基础上，还有两种单独的遍历方式</p><ul><li>列表迭代器遍历</li><li>普通for循环（因为List集合存在索引）</li></ul><p>创建集合并添加元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建集合并添加元素</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;ccc&quot;</span>);</span><br></pre></td></tr></table></figure><div class="tabs" id="1c246663-c60c-42f3-ba8d-77e38f358527"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#1c246663-c60c-42f3-ba8d-77e38f358527-1"><i class="fas fa-child"></i>迭代器</button></li><li class="tab"><button type="button" data-href="#1c246663-c60c-42f3-ba8d-77e38f358527-2"><i class="fas fa-child"></i>增强for</button></li><li class="tab"><button type="button" data-href="#1c246663-c60c-42f3-ba8d-77e38f358527-3"><i class="fas fa-child"></i>Lambda表达式</button></li><li class="tab"><button type="button" data-href="#1c246663-c60c-42f3-ba8d-77e38f358527-4"><i class="fas fa-cookie-bite"></i>列表迭代器</button></li><li class="tab"><button type="button" data-href="#1c246663-c60c-42f3-ba8d-77e38f358527-5"><i class="fas fa-cookie-bite"></i>普通for</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="1c246663-c60c-42f3-ba8d-77e38f358527-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.迭代器</span></span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1c246663-c60c-42f3-ba8d-77e38f358527-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.增强for</span></span><br><span class="line"><span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1c246663-c60c-42f3-ba8d-77e38f358527-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.Lambda表达式</span></span><br><span class="line"> list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1c246663-c60c-42f3-ba8d-77e38f358527-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.列表迭代器</span></span><br><span class="line">ListIterator&lt;String&gt; stringListIterator = list.listIterator();</span><br><span class="line"><span class="keyword">while</span> (stringListIterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span>  stringListIterator.next();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="1c246663-c60c-42f3-ba8d-77e38f358527-5"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.普通for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><code>ListIterator</code>接口继承了<code>Iterator</code>接口</p><p><code>interface ListIterator&lt;E&gt; extends Iterator&lt;E&gt;</code></p><p><code>Iterator</code>原有方法<code>boolean hasNext()</code> 和 <code>E next()</code></p><p><code>ListIterator</code>新加了<code>boolean hasPrevious();</code>和<code>E previous()</code>向前遍历</p><p>和<code>void add(E e)</code>添加元素的方法</p><blockquote><p>五种遍历方式对比</p></blockquote><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516205838333.png" alt="image-20230516205838333" style="zoom:67%;" />]]></content>
    
    
    <summary type="html">List中常见的方法和五种遍历方式</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>顶层接口Collection</title>
    <link href="https://wuwawawa.github.io/posts/71c14870.html"/>
    <id>https://wuwawawa.github.io/posts/71c14870.html</id>
    <published>2023-05-16T06:05:20.000Z</published>
    <updated>2023-05-23T12:33:19.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合体系结构">集合体系结构</h2><p>Java的容器主要分为2个大类，即<code>Collection</code>和<code>Map</code>。</p><ul><li><span class='p red'>Collection 接口（单列集合）</span>：可以存放多个元素。每个元素可以是 Object<p>Collection 接口有两个重要子接口：List（有序集合）和 Set（无序集合）</p></li><li><span class='p blue'>Map 接口（双列集合）</span>：用于保存具有映射关系的数据：key - value（双列元素）<p>key 和 value 可以是任何类型的引用数据类型。其中 key 不能重复，value 可以重复</p><p>key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value</p></li></ul><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516142001202.png" alt="image-20230516142001202" style="zoom:67%;" /><hr><hr><h2 id="Collection继承体系">Collection继承体系</h2><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516142842394.png" alt="image-20230516142842394" style="zoom:67%;" /><p>根据图，首先提一下<code>List</code> <code>Queue</code> <code>Set</code> 这三个的区别。</p><p><code>List(对付顺序的好帮手)</code>: 添加的元素是有序、可重复、有索引的。<br><code>Set(注重独一无二的性质)</code>：添加的元素是无序的、不可重复、无索引的。<br><code>Queue(实现排队功能的叫号机)</code>:按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</p><hr><hr><h2 id="Collection接口方法">Collection接口方法</h2><p>Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</p><p>JDK不提供此接口的任何直接实现.它提供更具体的子接口(如Set和List)实现</p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">boolean add(E e)</td><td style="text-align:left">添加元素</td></tr><tr><td style="text-align:left">boolean addAll(Collection&lt;? extends E&gt; c)</td><td style="text-align:left">添加多个元素</td></tr><tr><td style="text-align:left">boolean remove(Object o)</td><td style="text-align:left">移除指定的元素</td></tr><tr><td style="text-align:left">boolean removeIf(Predicate&lt;? super E&gt; filter)</td><td style="text-align:left">根据条件进行移除</td></tr><tr><td style="text-align:left">boolean removeAll(Collection&lt;?&gt; c)</td><td style="text-align:left">移除多个元素</td></tr><tr><td style="text-align:left">void clear()</td><td style="text-align:left">清空集合中的元素</td></tr><tr><td style="text-align:left">boolean contains(Object o)</td><td style="text-align:left">判断集合中是否存在指定的元素</td></tr><tr><td style="text-align:left">boolean isEmpty()</td><td style="text-align:left">判断集合是否为空</td></tr><tr><td style="text-align:left">int size()</td><td style="text-align:left">集合的长度，也就是集合中元素的个数</td></tr></tbody></table><blockquote><p>添加元素 boolean add(E e)</p></blockquote><p>细节1：如果我们要往List系列集合添加数据，那么方法永远返回ture，因为List系列是允许元素重复的。</p><p>细节2：如果我们要往Set系列集合添加数据</p><p>如果当前要添加的元素不存在，方法返回true，表示添加成功。</p><p>如果当前要添加的元素存在，方法返回false，表示添加失败。</p><p>因为Set系列集合不允许重复。</p><blockquote><p>移除元素 boolean remove(Object o)</p></blockquote><p>细节1：根据元素的对象进行删除，不能通过索引删，因为Set系列是没有索引的，在Collection中定义的是共性的方法。</p><p>细节2：方法会有一个布尔类型的返回值，删除成功返回true，删除失败返回false。如果要删除的元素不存在，就会删除失败。</p><blockquote><p>判断元素是否包含 boolean contains(Object o)</p></blockquote><p>底层是依赖equals方法进行判断是否存在的。所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在自定义类中，一定要重写equals方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建集合的对象</span></span><br><span class="line">Collection&lt;Studebt&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建三个学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">23</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把学生对象添加到集合当中</span></span><br><span class="line">coll.add(s1);</span><br><span class="line">coll.add(s2);</span><br><span class="line">coll.add(s3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.判断集合中某一个学生对象是否包含，如果同姓名同年龄，就认为是</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">23</span>);</span><br><span class="line"><span class="comment">// 因为contains方法在底层依赖equals方法判断对象是否一致的。</span></span><br><span class="line"><span class="comment">// 如果存的是自定义对象，没有重写equals方法，那么默认使用Object类中的equals方法进行判断</span></span><br><span class="line"><span class="comment">// 而Object类中equals方法，依赖地址值就行判断。</span></span><br><span class="line"><span class="comment">// 所以，需要在自定义的类中，重写equals方法就可以了。</span></span><br><span class="line">System.out.println(coll.contains(s4));</span><br></pre></td></tr></table></figure><hr><hr><h2 id="Collection遍历方式">Collection遍历方式</h2><p>Collection通用遍历方式有三种：</p><ol><li>迭代器遍历</li><li>增强for遍历</li><li>Lambda表达式</li></ol><hr><h3 id="迭代器遍历">迭代器遍历</h3><p>迭代器在Java中的类是<span class='p red'>Iterator</span>，迭代器是集合专用的遍历方式。</p><mark class="hl-label blue">Collection集合获取迭代器</mark> <table><thead><tr><th style="text-align:left">方法名称</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Iterator&lt; E &gt; iterator()</td><td style="text-align:left">返回迭代器对象，默认指向当前集合的0索引</td></tr></tbody></table><mark class="hl-label green">iterator中的常用方法</mark> <table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td>判断当前位置是否有元素，有元素返回true，没有元素返回false</td></tr><tr><td>E next()</td><td>获取当前位置的元素，并将迭代器对象移向下一个位置</td></tr></tbody></table><div class="tabs" id="453454f2-6b5c-4dc3-a93a-77c2d76544de"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#453454f2-6b5c-4dc3-a93a-77c2d76544de-1"><i class="fas fa-cat"></i>开始情况</button></li><li class="tab"><button type="button" data-href="#453454f2-6b5c-4dc3-a93a-77c2d76544de-2"><i class="fas fa-horse"></i>结束情况</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="453454f2-6b5c-4dc3-a93a-77c2d76544de-1"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516170605737.png" alt="image-20230516170605737" style="zoom: 50%;" /><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="453454f2-6b5c-4dc3-a93a-77c2d76544de-2"><p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230516172114394.png" alt="image-20230516172114394"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label red">细节注意点</mark> <ol><li>当上面的循环结束后，迭代器指向集合的末尾，再强行调用next方法获取元素的话，就会报错NoSuchElementException</li><li>迭代器遍历完毕后，迭代器是不会复位的，如果要想重新遍历一次，可以重新获取迭代器对象</li><li>循环中只能使用一次next方法，因为在while判断条件中只判断了一次hasNext，hasNext和next要一一对应</li><li>迭代器遍历时，不能使用集合的方法进行增加或者删除(会导致expectedModCount和modCount不相等)，如果实在要删除，那么可以用迭代器提供的remove方法进行删除</li></ol><hr><h3 id="增强for遍历">增强for遍历</h3><p>增强for的底层就是迭代器，为了简化迭代器的代码书写的。</p><p>它是JDK5之后出现的，其内部原理就是一个Iterator迭代器</p><p>增强for循环可以用来遍历数组和实现了<code>Iterable</code>接口的集合对象。</p><p>在Java中，所有的单列集合都实现了<code>Iterable</code>接口，因此可以使用增强for循环遍历这些集合。</p><p>单列集合包括<code>List</code>、<code>Set</code>、<code>Queue</code>等，但不包括<code>Map</code>，因为<code>Map</code>是双列集合。</p><mark class="hl-label green">格式</mark> <p>idea 快速生成方式   <code>集合的名字.for</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">for</span>(元素数据类型 变量名 : 数组或者集合)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">for</span>(String s in coll)&#123;</span><br><span class="line">System<span class="selector-class">.out</span><span class="selector-class">.println</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">注意点</mark> <p>s其实就是一个第三方变量，在循环的过程中依次表示集合中的每一个数据</p><p>修改增强for中的变量，不会改变集合中原本的数据</p><hr><h3 id="Lambda表达式遍历">Lambda表达式遍历</h3><p>得益于JDK 8开始的新技术Lambda表达式，提供了一种更简单、更直接的遍历集合的方式。</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>defalut void forEach(Consumer&lt;? super T&gt; action)</td><td>结合lambda遍历集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类的形式</span></span><br><span class="line">coll.forEach(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">coll.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure><mark class="hl-label blue">底层原理</mark> <p>方法内部也会循环遍历集合，依次得到每一个元素，把得到的每一个元素，传递给accept方法消费</p><hr><hr><h2 id="Collection遍历规律">Collection遍历规律</h2><ol><li>遍历顺序与元素添加的顺序有关的集合：ArrayList、LinkedList、LinkedHashSet、ArrayDeque、LinkedList。</li><li>遍历顺序与Comparator有关的集合：PriorityQueue、TreeSet。</li></ol><p>PriorityQueue遍历并没有什么意义，因为PriorityQueue是一种基于堆的数据结构，堆顶元素永远是优先级最高的元素，而遍历PriorityQueue需要访问所有元素，因此会浪费很多时间访问那些优先级较低的元素。</p><p>PriorityQueue 使用数组存储，作为堆，你只能获得他的最大，最小值，可以存储重复的值。</p><p>TreeSet可以保证数据全部按照某个顺序排列，不允许重复，可获得其中的任意值，提供比优先队列更多的特性，但同样意味着需要进行更多的计算。</p>]]></content>
    
    
    <summary type="html">集合体系结构和顶层接口Collection</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
    <category term="容器" scheme="https://wuwawawa.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://wuwawawa.github.io/posts/397c083a.html"/>
    <id>https://wuwawawa.github.io/posts/397c083a.html</id>
    <published>2023-05-10T08:05:42.000Z</published>
    <updated>2023-05-29T01:22:01.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java8新特性的好处">Java8新特性的好处</h2><ol><li>速度更快</li><li>代码更少（Lambda简化代码书写）</li><li>强大的Stream API</li><li>便于并行</li><li>最大化减少空指针异常：Optional</li><li>Nashorn引擎，允许在JVM上运行JS应用</li></ol><hr><hr><h2 id="接口变化">接口变化</h2><p>在JDK 8 以前，接口中只有抽象方法和静态常量，会存在以下问题：在接口中新增方法，所有实现类都要重写该方法，不利于接口的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">静态常量（<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>）;</span><br><span class="line">抽象方法（<span class="keyword">public</span> <span class="keyword">abstract</span>）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDK 8 之后，接口中增加了default方法和static方法，分别使用 static 和 default 关键字修饰，这两种方法可以有方法体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">静态常量（<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>）;</span><br><span class="line">抽象方法（<span class="keyword">public</span> <span class="keyword">abstract</span>）;</span><br><span class="line">默认方法</span><br><span class="line">静态方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label blue">区别</mark> <ol><li>默认方法通过实例调用，静态方法通过接口名调用</li><li>默认方法可以被继承，实现类可以直接调用接口默认方法，也可以重写接口默认方法</li><li>静态方法不能被继承，实现类不能重写接口的静态方法，只能使用接口名调用</li></ol><hr><h3 id="默认方法">默认方法</h3><p>在JDK8以前接口中只能有抽象方法和静态常量，会存在以下的问题：<br>如果接口中新增抽象方法，那么实现类都必须要抽象这个抽象方法，非常不利于接口的扩展的。</p><div class="tabs" id="ca8a7413-161b-4f1e-a04b-8bf7f205b9aa"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-1"><i class="fas fa-cat"></i>语法</button></li><li class="tab"><button type="button" data-href="#ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-2"><i class="fas fa-horse"></i>使用</button></li><li class="tab"><button type="button" data-href="#ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-3"><i class="fas fa-dove"></i>样例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">修饰符 <span class="keyword">default</span> 返回值类型 方法名&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-2"><ol><li>实现类直接调用接口的默认方法</li><li>实现类重写接口的默认方法</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ca8a7413-161b-4f1e-a04b-8bf7f205b9aa-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在接口中新增方法，所有实现类都要重写该方法，不利于接口的扩展</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> String <span class="title function_">testDefaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接口中的默认方法执行了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h3 id="静态方法">静态方法</h3><p>JDK8中为接口新增了静态方法，作用也是为了接口的扩展<div class="tabs" id="2bbf712d-0e57-4b42-aaec-bfc43b69f6a5"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-1"><i class="fas fa-atom"></i>语法</button></li><li class="tab"><button type="button" data-href="#2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-2"><i class="far fa-sun"></i>使用</button></li><li class="tab"><button type="button" data-href="#2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-3"><i class="fas fa-wind"></i>样例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface 接口名&#123;</span><br><span class="line">    修饰符 <span class="keyword">static</span> 返回值类型 方法名&#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-2"><p>接口中的静态方法在实现类中是不能被重写的，调用的话只能通过接口类型来实现: 接口名.静态方法名();</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="2bbf712d-0e57-4b42-aaec-bfc43b69f6a5-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestInterA</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在接口中新增方法，所有实现类都要重写该方法，不利于接口的扩展</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAbstract01</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAbstract02</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStaticMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestInterA里面的静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">testDefaultMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TestInterA里面的默认方法testDefaultMethod&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><hr><hr><h2 id="Comparator接口">Comparator接口</h2><h3 id="底层原理分析">底层原理分析</h3><p>Comparator接口用来定义两个对象之间的比较方法，它有一个叫做<code>compare</code>的方法，函数签名如下：</p><p><code>int compare(T o1,T o2)</code></p><p>查看sort方法的相关源码：如果compare的返回值为正数，就交换进行比较的两个元素的位置。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/cbcf171cd6bc494abfe61be71508287a.png" alt="img" style="zoom:67%;" /><p>结论</p><ul><li>如果 o1 &gt; o2 时compare(o1,o2)返回正数，那么交换位置后大的元素在后，这就实现了升序排序；</li><li>如果 o1 &lt; o2 时compare(o1,o2)返回负数，那么交换位置后小的元素在后，这就实现了降序排序。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序。</span></span><br><span class="line"><span class="comment">// 若o1 - o2 &lt; 0，则o1小于o2，不用交换，即为升序。</span></span><br><span class="line"><span class="comment">// 若o1 - o2 &gt; 0，则o1大于o2，交换后小的在前，大的在后，即为升序。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> o1, <span class="type">int</span> o2)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> o1 -o2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序。</span></span><br><span class="line"><span class="comment">// 若o2 - o1 &lt; 0，则o2小于o1，不用交换，即降序。</span></span><br><span class="line"><span class="comment">// 若o2 - o1 &gt; 0，则o2大于o1，交换后大的在前，小的在后，即为降序。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> o1, <span class="type">int</span> o2)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> o2 -o1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较器的使用">比较器的使用</h3><p>为了对一个集合进行排序，我们将比较器(Comparator)实例传递给<code>Stream.sorted</code>、<code>Collections.sort</code>、<code>List.sort</code>和<code>Arrays.sort</code>方法。</p><p>比较器(Comparator)还可以控制<code>SortedSet</code>的顺序和<code>SortedMap</code>数据结构的键顺序。</p><h3 id="比较器的方法">比较器的方法</h3><p>在<code>Java 8</code>中，比较器接口引入了一些静态和默认的方法。</p><p>我们可以将比较器与<code>Stream.sorted</code>、<code>List.sort</code>、<code>Collections.sort</code>和<code>Arrays.sort</code>一起使用来对集合和<code>Map</code>进行排序。</p><div class="tabs" id="061c08cf-c9fe-4314-ae92-e318b541721f"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#061c08cf-c9fe-4314-ae92-e318b541721f-1"><i class="fas fa-seedling"></i>reversed</button></li><li class="tab"><button type="button" data-href="#061c08cf-c9fe-4314-ae92-e318b541721f-2"><i class="fas fa-leaf"></i>reverseOrder</button></li><li class="tab"><button type="button" data-href="#061c08cf-c9fe-4314-ae92-e318b541721f-3"><i class="fab fa-apple"></i>3</button></li><li class="tab"><button type="button" data-href="#061c08cf-c9fe-4314-ae92-e318b541721f-4"><i class="fas fa-tree"></i>4</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="061c08cf-c9fe-4314-ae92-e318b541721f-1"><p>reversed是Java比较器功能接口的默认方法。reversed返回一个比较器，该比较器强制执行反向排序。函数签名如下：</p><p><code>default Comparator&lt;T&gt; reversed() </code></p><p>要使用<code>reversed</code>方法，我们需要实例化我们的比较器并调用该方法。</p><p><code>reversed</code>将返回新的比较器实例，该实例将强加该比较器的反向排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Student&gt; nameComparator = (s1, s2) -&gt; s1.getName().compareTo(s2.getName());</span><br><span class="line">Collections.sort(list, nameComparator.reversed()); </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="061c08cf-c9fe-4314-ae92-e318b541721f-2"><p>reverseOrder是一个静态方法，返回比较器，对对象集合进行反向自然排序。</p><p>对于自然排序，一个类需要实现比较器并定义compareTo方法。</p><p>一个对象集合根据自然排序中的compareTo进行排序。</p><p>Comparator.reverseOrder反转了自然排序。</p><p>它在内部调用Collections.reverseOrder()并返回比较器实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; Comparator&lt;T&gt; <span class="title function_">reverseOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.reverseOrder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="061c08cf-c9fe-4314-ae92-e318b541721f-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="061c08cf-c9fe-4314-ae92-e318b541721f-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="并行流与串行流">并行流与串行流</h2><ul><li>并行流就是把一个内容分为多个数据块，并用不同的线程分别处理每个数据块的流，相比较于串行流，可以很大程度上提高程序的执行效率</li><li>Java8中将其进行了优化，我们可以很容易的对数据进行并行操作。</li><li>Stream API 可以声明性地通过parallel()和sequential()在并行流与顺序流之间进行切换</li></ul><hr><hr><h2 id="Lambda表达式">Lambda表达式</h2><ul><li>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。</li><li>使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，是Java的语言表达能力得到了提升</li></ul><blockquote><span class='p red'>lambda表达式使用前提</span></blockquote><p>必须有接口,接口中有且只能有一个抽象方法(函数式接口)</p><p>Lambda表达式是可推导可以省略的，Lambda表达式可以推导出来，省略就是重写唯一的抽象方法进而可以进一步对参数和返回值进行简化</p><ol><li><p>举例： (o1,o2) -&gt; Integer.compare(o1,o2);</p></li><li><p>格式：</p><ul><li><code>-&gt;：</code>lambda操作符或箭头操作符</li><li><code>-&gt;左边：</code>lambda形参列表（其实就是接口中的抽象方法的形参列表）</li><li><code>-&gt;右边：</code>lambda体（其实就是重写的抽象方法的方法体）</li></ul></li><li><p>Lambda表达式的使用：</p><ul><li><p>Lambda形参列表的参数类型可以省略</p></li><li><p>如果Lambda形参列表只有一个参数，其一对()也可以省略</p></li><li><p>Lambda体应该使用一对{}包裹</p></li><li><p>如果Lambda体只有一条执行语句(可能是return语句),可以省略这一对{}和return关键字</p></li></ul></li></ol><p>分为6种情况介绍</p><div class="tabs" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-1"><i class="fas fa-bug"></i>格式一</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-2"><i class="fas fa-cannabis"></i>格式二</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-3"><i class="fas fa-candy-cane"></i>格式三</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-4"><i class="fas fa-child"></i>格式四</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-5"><i class="fas fa-heartbeat"></i>格式五</button></li><li class="tab"><button type="button" data-href="#a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-6"><i class="fas fa-cookie-bite"></i>格式六</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-1"><p><code>语法格式一：</code>无参无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你 的 城 市 好 像 不 欢 迎 我&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    runnable01.run();</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">runnable02</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;所 以 我 只 好 转 身 离 开 了&quot;</span>);</span><br><span class="line">    runnable02.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-2"><p><code>语法格式二：</code>Lambda需要一个参数，但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;其实我存过你照片 也研究过你的星座&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = (String s) -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;你喜欢的歌我也会去听 你喜欢的事物我也会想去了解&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-3"><p><code>语法格式三：</code>数据类型可以省略，因为可由<code>类型推断</code>得出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;我远比表面上更喜欢你&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = (s) -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;但我没有说&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-4"><p><code>语法格式四：</code>Lambda若只需要一个参数，参数的小括号可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer01.accept(<span class="string">&quot;我远比表面上更喜欢你&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Consumer&lt;String&gt; consumer02 = s -&gt; &#123;System.out.println(s);&#125;;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;但我没有说&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-5"><p><code>语法格式五：</code>Lambda需要两个或以上参数，多条执行语句，并且有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">95</span>, <span class="number">27</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = (o1, o2) -&gt; &#123;</span><br><span class="line">        System.out.println(o1);</span><br><span class="line">        System.out.println(o2);</span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a8a76b8b-df65-4a0a-a2c4-660e9341c1fe-6"><p><code>语法格式六：</code>当Lambda体只有一条语句时，return与{}若有，则都可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">95</span>, <span class="number">27</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="函数式接口">函数式接口</h2><ul><li>Lambda表达式的本质：作为函数式接口的实例</li><li>如果在一个接口中，只声明了一个抽象方法，则此接口就被称为函数式接口，我们可以在一个接口上使用@FunctionalInterface注解来验证该接口是否为函数式接口（如果你在该接口中写了两个方法，则编译期就会报错）</li><li>正是因为抽象方法中只有一个方法，所以我们才可以省略@Override函数声明等内容</li><li>在<code>java.util.function</code>包下定义了Java 8 的丰富的函数式接口</li><li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着Python、Scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程）</li><li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口。</li><li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示。</li><li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写。</li></ul><blockquote><p>Java内置的函数式接口介绍及使用举例</p></blockquote><table><thead><tr><th style="text-align:center">函数式接口</th><th style="text-align:center">方法</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">Consumer 消费型接口</td><td style="text-align:center">void accept(T t)</td><td style="text-align:center">对类型为T的对象应用操作</td></tr><tr><td style="text-align:center">Supplier 供给型接口</td><td style="text-align:center">T get()</td><td style="text-align:center">返回类型为T的对象</td></tr><tr><td style="text-align:center">Function 函数型接口</td><td style="text-align:center">R apply(T t)</td><td style="text-align:center">对类型为T的对象应用操作返回结果</td></tr><tr><td style="text-align:center">Predicate 断定型接口</td><td style="text-align:center">boolean test(T t)</td><td style="text-align:center">确定类型为T的对象是否满足某约束</td></tr><tr><td style="text-align:center">BiConsumer</td><td style="text-align:center">void accept(T t,U u)</td><td style="text-align:center">对类型为T,U参数应用操作</td></tr><tr><td style="text-align:center">BiPredicate</td><td style="text-align:center">boolean</td><td style="text-align:center">包含方法为：boolean test(T t,U u)</td></tr><tr><td style="text-align:center">BiFunction</td><td style="text-align:center">R apply(T t,U u)</td><td style="text-align:center">对类型为T,U参数应用操作，返回R类型的结果</td></tr><tr><td style="text-align:center">UnaryOperator(Function子接口)</td><td style="text-align:center">T apply(T t)</td><td style="text-align:center">对类型为T的对象进行一元运算</td></tr><tr><td style="text-align:center">BinaryOperator(BiFunction子接口)</td><td style="text-align:center">T apply(T t1,T t2)</td><td style="text-align:center">对类型为T的对象进行二元运算</td></tr></tbody></table><div class="tabs" id="10d20ccf-24f3-4841-8532-22635d831135"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#10d20ccf-24f3-4841-8532-22635d831135-1"><i class="fas fa-cat"></i>消费型</button></li><li class="tab"><button type="button" data-href="#10d20ccf-24f3-4841-8532-22635d831135-2"><i class="fas fa-horse"></i>断定型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="10d20ccf-24f3-4841-8532-22635d831135-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyTime</span><span class="params">(<span class="type">double</span> money, Consumer&lt;Double&gt; consumer)</span> &#123;</span><br><span class="line">    consumer.accept(money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    happyTime(<span class="number">1241</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;突然想回一趟成都了，机票花费&quot;</span> + money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. Lambda表达式，将之前的6行代码压缩到了1行</span></span><br><span class="line">    happyTime(<span class="number">648</span>, money -&gt; System.out.println(<span class="string">&quot;学习太累了，奖励自己一发648，花费&quot;</span> + money));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">突然想回一趟成都了，机票花费1241.0</span></span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"><span class="comment">学习太累了，奖励自己一发648，花费648.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="10d20ccf-24f3-4841-8532-22635d831135-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据给定的规则，过滤集合中的字符串。此规则由Predicate的方法决定</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; strings, Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(string))</span><br><span class="line">            res.add(string);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;东京&quot;</span>, <span class="string">&quot;西京&quot;</span>, <span class="string">&quot;南京&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;中京&quot;</span>);</span><br><span class="line">    <span class="comment">//1. 以前的写法</span></span><br><span class="line">    List&lt;String&gt; list = filterString(string s, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 现在的写法，相比较之前的代码优雅了许多</span></span><br><span class="line">    List&lt;String&gt; res = filterString(string s, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[东京, 西京, 南京, 北京, 中京]</span></span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"><span class="comment">[东京, 西京, 南京, 北京, 中京]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="方法引用和构造器引用">方法引用和构造器引用</h2><ul><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</li><li>方法引用可以看做会Lambda表达式的深层次表达，换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖</li><li>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</li><li>格式：使用操作符<code>::</code>将类或对象与方法名分割开来</li><li>有如下三种使用情况<ol><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ol></li></ul><hr><h3 id="方法引用">方法引用</h3><p>方法引用的使用</p><ol><li>使用情境：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li><li>方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例。</li><li>使用格式： 类(或对象) :: 方法名</li><li>具体分为如下的三种情况：<ul><li>情况1：对象 :: 非静态方法</li><li>情况2：类 :: 静态方法</li><li>情况3：类 :: 非静态方法</li></ul></li><li>方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同！（针对于情况1和情况2）</li></ol><div class="tabs" id="5a1398c5-f32b-470b-81f3-16840cd41579"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-1"><i class="far fa-sun"></i>对象::非静态方法</button></li><li class="tab"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-2"><i class="fas fa-wind"></i>类::静态方法</button></li><li class="tab"><button type="button" data-href="#5a1398c5-f32b-470b-81f3-16840cd41579-3"><i class="fas fa-fire-alt"></i>类::实例方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="5a1398c5-f32b-470b-81f3-16840cd41579-1"><p>抽象方法的<code>形参列表</code>和<code>返回值类型</code>与<code>方法引用</code>的方法的<code>形参列表</code>和返回值类型相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line"><span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line"><span class="comment">//形参列表均为(T t)，返回值均为void，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test06</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Consumer&lt;String&gt; consumer01 = s -&gt; System.out.println(s);</span><br><span class="line">    consumer01.accept(<span class="string">&quot;她的手只有我的手四分之三那麼大&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> System.out;</span><br><span class="line">    Consumer&lt;String&gt; consumer02 = printStream::println;</span><br><span class="line">    consumer02.accept(<span class="string">&quot;可我還是沒能抓住&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 但貌似也可以这么写</span></span><br><span class="line">    Consumer&lt;String&gt; consumer03 = System.out::println;</span><br><span class="line">    consumer03.accept(<span class="string">&quot;花落下的时候没死 风捡起花 又丢下 花才死了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">她的手只有我的手四分之三那麼大</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">可我還是沒能抓住</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">花落下的时候没死 风捡起花 又丢下 花才死了</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a1398c5-f32b-470b-81f3-16840cd41579-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Comparator中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//Integer中的int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">//形参列表均为(T t1,T t2)，返回值均为int，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">20</span>, <span class="number">77</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = Integer::compare;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">94</span>, <span class="number">21</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">----------------------------</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line"><span class="comment">//返回值和参数列表为泛型，也可以匹配上，可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test08</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Function&lt;Double,Long&gt; function01 = aDouble -&gt; Math.round(aDouble);</span><br><span class="line">    System.out.println(function01.apply(<span class="number">3.141</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Function&lt;Double,Long&gt; function02 = Math::round;</span><br><span class="line">    System.out.println(function02.apply(<span class="number">2.717</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="5a1398c5-f32b-470b-81f3-16840cd41579-3"><p>一个参数作为调用者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparator中的int comapre(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String中的int t1.compareTo(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test09</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator01 = (o1, o2) -&gt; o1.compareTo(o2);</span><br><span class="line">    System.out.println(comparator01.compare(<span class="number">94</span>, <span class="number">21</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator02 = Integer::compareTo;</span><br><span class="line">    System.out.println(comparator02.compare(<span class="number">43</span>, <span class="number">96</span>));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line"><span class="comment">-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line"><span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    BiPredicate&lt;String,String&gt; biPredicate01 = (o1, o2) -&gt; o1.equals(o2);</span><br><span class="line">    System.out.println(biPredicate01.test(<span class="string">&quot;Kyle&quot;</span>, <span class="string">&quot;Kyle&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    BiPredicate&lt;String,String&gt; biPredicate02 = String::equals;</span><br><span class="line">    System.out.println(biPredicate02.test(<span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;Violet&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">----------------------------------</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function中的R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee中的String toString();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test11</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Stu</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stu</span>(<span class="string">&quot;Kyle&quot;</span>, <span class="number">9527</span>);</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    Function&lt;Stu,String&gt; function01 = stu -&gt; stu.toString();</span><br><span class="line">    System.out.println(function01.apply(student));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 方法引用</span></span><br><span class="line">    Function&lt;Stu,String&gt; function02 = Stu::toString;</span><br><span class="line">    System.out.println(function02.apply(student));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="构造器引用和数组引用">构造器引用和数组引用</h3><ul><li>与函数式接口相结合，自动与函数式接口中方法兼容。</li><li>可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。</li></ul><div class="tabs" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#a1dd04d3-232a-4861-a5b8-a514f0e242d6-1"><i class="fas fa-atom"></i>构造器引用</button></li><li class="tab"><button type="button" data-href="#a1dd04d3-232a-4861-a5b8-a514f0e242d6-2"><i class="far fa-sun"></i>数组引用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6-1"><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p><p>抽象方法的返回值类型即为构造器所属的类的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test12</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda</span></span><br><span class="line">    BiFunction&lt;String, Integer, Stu&gt; function01 = (string, integer) -&gt; <span class="keyword">new</span> <span class="title class_">Stu</span>(string, integer);</span><br><span class="line">    System.out.println(function01.apply(<span class="string">&quot;Kyle&quot;</span>, <span class="number">9527</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 构造器引用</span></span><br><span class="line">    BiFunction&lt;String, Integer, Stu&gt; function02 = Stu::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(function02.apply(<span class="string">&quot;Lucy&quot;</span>, <span class="number">9421</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Kyle&#x27;, id=9527&#125;</span></span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"><span class="comment">Stu&#123;name=&#x27;Lucy&#x27;, id=9421&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a1dd04d3-232a-4861-a5b8-a514f0e242d6-2"><p>可以把数组看做是一个特殊的类，则写法与构造器引用一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test13</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. Lambda 创建一个指定长度的string数组</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; function01 = (integer -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[integer]);</span><br><span class="line">    System.out.println(Arrays.toString(function01.apply(<span class="number">5</span>)));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 数组引用</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; function02 = String[]::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(Arrays.toString(function02.apply(<span class="number">7</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[null, null, null, null, null]</span></span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="comment">[null, null, null, null, null, null, null]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><hr><h2 id="强大的Stream-API⭐️">强大的Stream API⭐️</h2><h3 id="Stream-API概述">Stream API概述</h3><ul><li>Java8中有两个最为重要的改变，第一个就是Lambda表达式，另外一个则是Stream API</li><li>Stream API(java.util.stream)把真正的函数式编程风格引入到Java中，这是目前为止对Java类库最好的补充，因为Stream API可以极大地提高程序员生产力，让程序员写出高效、简介的代码</li><li>Stream是Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。</li><li>使用Stream API 对集合数据进行操作，就类似于使用SQL 执行的数据库查询，也可以使用Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式</li><li>为什么要使用Stream API<ul><li>实际开发中，项目中多数数据源都是来自MySQL、Oracle 等。但现在数据源可以更多了，有MongDB、Redis等，而这些NoSQL的数据就需要Java层面去处理。</li><li>Stream 和Collection集合的区别：Collection 是一种静态的内存数据结构，而Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向CPU，通过CPU 实现计算（这也就是为啥一旦执行终止操作之后，Stream 就不能被再次使用，得重新创建一个新的流才行）</li></ul></li></ul><blockquote><p>小结</p></blockquote><ol><li>Stream 关注的是对数据的运算，与CPU 打交道；<br>集合关注的是数据的存储，与内存打交道</li><li>Stream 自己不会存储数据；<br>Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream<br>Stream 操作是延迟执行的，这意味着他们会等到需要结果的时候才执行</li><li>Stream 执行流程<ul><li>Stream实例化</li><li>一系列中间操作（过滤、映射、…）</li><li>终止操作</li></ul></li><li>说明<ul><li>一系列中间操作连，对数据源的数据进行处理</li><li>一旦执行终止操作，就执行中间操作连，并产生结果，之后，不会再被使用</li></ul></li></ol><hr><h3 id="Stream的实例化">Stream的实例化</h3><div class="tabs" id="495d7dff-9394-4804-8bf5-e1083ed7e664"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-1"><i class="fas fa-baseball-ball"></i>方式一</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-2"><i class="fas fa-bone"></i>方式二</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-3"><i class="fas fa-heartbeat"></i>方式三</button></li><li class="tab"><button type="button" data-href="#495d7dff-9394-4804-8bf5-e1083ed7e664-4"><i class="fas fa-cookie-bite"></i>方式四</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="495d7dff-9394-4804-8bf5-e1083ed7e664-1"><p>通过集合创建Stream,使用 <code>Collection</code> 接口的 <code>stream()</code> 方法或 <code>parallelStream()</code> 方法创建流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = list.stream(); <span class="comment">// 创建串行流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">// 创建并行流</span></span><br></pre></td></tr></table></figure><p>注意</p><p>Map 接口是不继承 Collection 接口的，因此 Map 没有提供 stream() 方法用于生成流对象。</p><p>可以通过 Map 的 entrySet() 方法获取一个<code>Set&lt;Map.Entry&lt;K, V&gt;&gt;</code>对象，该对象包含了 Map 中的所有键值对。因为 Set 实现了 Collection 接口，因此可以通过该 Set 对象生成流对象。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-2"><p>通过数组创建String，使用 <code>Arrays</code> 类的 <code>stream(T[] array)</code> 方法创建流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr); <span class="comment">// 创建基本类型流</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-3"><p>通过自定义创建流：使用 <code>Stream</code> 接口提供的静态方法 <code>of()</code>、<code>iterate()</code>、<code>generate()</code> 创建流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>); <span class="comment">// 创建流，包含指定的元素</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">1</span>, n -&gt; n + <span class="number">1</span>).limit(<span class="number">5</span>); <span class="comment">// 创建流，包含 1 到 5 的整数</span></span><br><span class="line">Stream&lt;Double&gt; stream = Stream.generate(Math::random).limit(<span class="number">5</span>); <span class="comment">// 创建流，包含 5 个随机数</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="495d7dff-9394-4804-8bf5-e1083ed7e664-4"><p>通过数值范围创建流：使用 <code>IntStream</code>、<code>LongStream</code> 或 <code>DoubleStream</code> 接口提供的 <code>range()</code>、<code>rangeClosed()</code> 方法创建流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> IntStream.range(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// 创建范围流，包括 1 不包括 5</span></span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> IntStream.rangeClosed(<span class="number">1</span>, <span class="number">5</span>); <span class="comment">// 创建范围流，包括 1 和 5</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div> <hr><h3 id="Stream的中间操作">Stream的中间操作</h3><blockquote><mark class="hl-label blue">包装</mark> </blockquote><p><code>boxed()</code> 方法作用是将基本类型流转换成对应的包装类型流。例如，将 <code>IntStream</code> 转换成 <code>Stream&lt;Integer&gt;</code>，将 <code>DoubleStream</code> 转换成 <code>Stream&lt;Double&gt;</code> 等。</p><p>这通常是为了在流处理过程中使用某些不适用于基本类型的功能，例如将基本类型元素收集到某种集合中或需要使用对象引用时。</p><p>例如基本数据类型流的排序不能传入比较器，得使用包装类型流。</p><blockquote><mark class="hl-label blue">筛选与切片</mark> </blockquote><p>筛选与切片操作用于对流中的元素进行过滤和截取，常用的方法包括:</p><p><code>filter(Predicate&lt;T&gt; predicate)</code>：过滤流中不符合条件的元素，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>); <span class="comment">// 过滤偶数</span></span><br></pre></td></tr></table></figure><p><code>distinct()</code>：去除流中重复的元素，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().distinct(); <span class="comment">// 去重</span></span><br></pre></td></tr></table></figure><p><code>limit(long maxSize)</code>：截取流中的前 <code>maxSize</code> 个元素，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().limit(<span class="number">3</span>); <span class="comment">// 截取前三个元素</span></span><br></pre></td></tr></table></figure><p><code>skip(long n)</code>：跳过流中的前 <code>n</code> 个元素，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().skip(<span class="number">2</span>); <span class="comment">// 跳过前两个元素</span></span><br></pre></td></tr></table></figure><blockquote><mark class="hl-label blue">映射</mark> </blockquote><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">map(Function f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td style="text-align:center">mapToDouble(ToDoubleFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的DoubleStream。</td></tr><tr><td style="text-align:center">mapToInt(ToIntFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的IntStream。</td></tr><tr><td style="text-align:center">mapToLong(ToLongFunction f)</td><td style="text-align:center">接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的LongStream。</td></tr><tr><td style="text-align:center">flatMap(Function f)</td><td style="text-align:center">接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td></tr></tbody></table><p>映射操作用于对流中的元素进行转换和提取，常用的方法包括：</p><p><code>map(Function&lt;T, R&gt; mapper)</code>：将流中的每个元素都映射成另外一个元素，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().map(s -&gt; s.length()); <span class="comment">// 将字符串转换成长度</span></span><br></pre></td></tr></table></figure><p><code>flatMap(Function&lt;T, Stream&lt;R&gt;&gt; mapper)</code>：将流中的每个元素都映射成一个流，然后将这些流合并成一个流，返回一个新的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = Arrays.asList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>), Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().flatMap(Collection::stream); <span class="comment">// 将多个列表合并成一个流</span></span><br></pre></td></tr></table></figure><blockquote><mark class="hl-label blue">排序</mark> </blockquote><p><code>sorted()</code>：按自然顺序对流中的元素进行排序，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().sorted(); <span class="comment">// 对整数列表进行排序 增序</span></span><br></pre></td></tr></table></figure><p><code>sorted(Comparator&lt;T&gt; comparator)</code>：按指定的比较器对流中的元素进行排序，返回一个新的流。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>, <span class="string">&quot;pear&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = list.stream().sorted(Comparator.comparing(String::length)); <span class="comment">// 对字符串列表按长度进行排序</span></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line">Stream&lt;Integer&gt; stream = list.stream().sorted(Comparator.reverseOrder()); <span class="comment">// 对整数列表进行排序 降序</span></span><br></pre></td></tr></table></figure><p>需要注意的是，逆序比较器只对实现了 <code>Comparable</code> 接口的类型有效，对于其他类型的元素，需要提供自定义的比较器。</p><hr><h3 id="Stream的终止操作">Stream的终止操作</h3><p>流的终止操作用于触发流的计算，并产生一个最终的结果或副作用。常用的终止操作包括：</p><blockquote><mark class="hl-label blue">匹配与查找</mark> </blockquote><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">allMatch(Predicate p)</td><td style="text-align:center">检查是否匹配所有元素</td></tr><tr><td style="text-align:center">anyMatch(Predicate p)</td><td style="text-align:center">检查是否至少匹配一个元素</td></tr><tr><td style="text-align:center">noneMatch(Predicate p)</td><td style="text-align:center">检查是否没有匹配所有元素</td></tr><tr><td style="text-align:center">findFirst()</td><td style="text-align:center">返回第一个元素</td></tr><tr><td style="text-align:center">findAny()</td><td style="text-align:center">返回当前流中的任意元素</td></tr><tr><td style="text-align:center">count()</td><td style="text-align:center">返回流中元素总数</td></tr><tr><td style="text-align:center">max(Comparator c)</td><td style="text-align:center">返回流中最大值</td></tr><tr><td style="text-align:center">min(Comparator c)</td><td style="text-align:center">返回流中最小值</td></tr><tr><td style="text-align:center">forEach(Consumer c)</td><td style="text-align:center">内部迭代(使用Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line"><span class="comment">// allMatch(Predicate p)——检查是否匹配所有元素。</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否所有的员工的工资是否都大于5000：&quot;</span>+employees.stream().allMatch(employee -&gt; employee.getSalary() &gt; <span class="number">5000</span>));</span><br><span class="line"><span class="comment">// anyMatch(Predicate p)——检查是否至少匹配一个元素。</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否存在员工年龄小于15：&quot;</span>+employees.stream().anyMatch(employee -&gt; employee.getAge() &lt; <span class="number">15</span>));</span><br><span class="line"><span class="comment">// noneMatch(Predicate p)——检查是否没有匹配的元素。</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否不存在员工姓马：&quot;</span>+employees.stream().noneMatch(employee -&gt; employee.getName().startsWith(<span class="string">&quot;马&quot;</span>)));</span><br><span class="line"><span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回第一个元素：&quot;</span>+employees.stream().findFirst());</span><br><span class="line"><span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回当前流中的任意元素&quot;</span>+employees.stream().findAny());</span><br><span class="line"><span class="comment">//count——返回流中元素的总个数</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回元素总数：&quot;</span>+employees.stream().count());</span><br><span class="line"><span class="comment">//max(Comparator c)——返回流中最大值</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回最高工资：&quot;</span>+employees.stream().map(Employee::getSalary).max(Double::compare));</span><br><span class="line"><span class="comment">//min(Comparator c)——返回流中最小值</span></span><br><span class="line">System.out.println(<span class="string">&quot;返回最小年龄：&quot;</span>+employees.stream().map(Employee::getAge).min(Integer::compare));</span><br><span class="line"><span class="comment">//forEach(Consumer c)——内部迭代</span></span><br><span class="line">employees.stream().forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line"><span class="comment">////使用集合的遍历操作</span></span><br><span class="line">employees.forEach(System.out::println);</span><br></pre></td></tr></table></figure><blockquote><mark class="hl-label blue">归约</mark> </blockquote><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">reduce(T iden, BinaryOperator b)</td><td style="text-align:center">可以将流中元素反复结合起来，得到一个值。返回T</td></tr><tr><td style="text-align:center">reduce(BinaryOperator b)</td><td style="text-align:center">可以将流中元素反复结合起来，得到一个值。返回Optional</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test22</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; nums = Arrays.asList(<span class="number">13</span>, <span class="number">32</span>, <span class="number">23</span>, <span class="number">31</span>, <span class="number">94</span>, <span class="number">20</span>, <span class="number">77</span>, <span class="number">21</span>, <span class="number">17</span>);</span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">// reduce(T identity, BinaryOperator)——可以将流中元素反复结合起来，得到一个值。返回 T</span></span><br><span class="line">    <span class="comment">// 练习1：计算1-10的自然数的和</span></span><br><span class="line">    System.out.println(nums.stream().reduce(<span class="number">0</span>, Integer::sum));</span><br><span class="line">    <span class="comment">//reduce(BinaryOperator) ——可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</span></span><br><span class="line">    <span class="comment">// 练习2：计算公司所有员工工资总和</span></span><br><span class="line">    System.out.println(employees.stream().map(Employee::getSalary).reduce((o1, o2) -&gt; o1 + o2));</span><br><span class="line">    <span class="comment">// 别的写法，计算年龄总和</span></span><br><span class="line">    System.out.println(employees.stream().map(Employee::getAge).reduce(Integer::sum));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">328</span></span><br><span class="line"><span class="comment">Optional[48424.08]</span></span><br><span class="line"><span class="comment">Optional[273]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><mark class="hl-label blue">收集</mark> </blockquote><p><code>collect(Collector&lt;T, A, R&gt; collector)</code>：将流中的元素收集到一个集合中，返回一个最终的结果。</p><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到List、Set、Map)。</p><p>Collectors实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表</p><table>  <tbody>    <tr style="text-align:center">      <td bgcolor="3366ff" style="color:white">方法</td>      <td bgcolor="3366ff" style="color:white">返回类型</td>      <td bgcolor="3366ff" style="color:white">作用</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">toList</td>      <td bgcolor="3399ff" style="color:white">List&lt;T&gt;</td>      <td bgcolor="3399ff" style="color:white">把流中元素收集到List</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">List&lt;Employee&gt; emps= list.stream().collect(Collectors.toList());</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">toSet</td>      <td bgcolor="3399ff" style="color:white">List&lt;T&gt;</td>      <td bgcolor="3399ff" style="color:white">把流中元素收集到List</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">Set&lt;Employee&gt; emps= list.stream().collect(Collectors.toSet());</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">toCollection</td>      <td bgcolor="3399ff" style="color:white"> Collection&lt;T&gt;</td>      <td bgcolor="3399ff" style="color:white">把流中元素收集到创建的集合</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">Collection&lt;Employee&gt; emps =list.stream().collect(Collectors.toCollection(ArrayList::new));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">counting</td>      <td bgcolor="3399ff" style="color:white">Long</td>      <td bgcolor="3399ff" style="color:white">计算流中元素的个数</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">long count = list.stream().collect(Collectors.counting());</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">summinglnt</td>      <td bgcolor="3399ff" style="color:white">Integer</td>      <td bgcolor="3399ff" style="color:white">对流中元素的整数属性求和</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">int total=list.stream().collect(Collectors.summingInt(Employee::getSalary));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">averagingInt</td>      <td bgcolor="3399ff" style="color:white">Double</td>      <td bgcolor="3399ff" style="color:white">计算流中元素Integer属性的平均值</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">double avg = list.stream().collect(Collectors.averagingInt(Employee::getSalary));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">summarizinglnt</td>      <td bgcolor="3399ff" style="color:white">IntSummaryStatistics</td>      <td bgcolor="3399ff" style="color:white">收集流中Integer属性的统计值。如:平均值</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">int SummaryStatisticsiss=list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">joining</td>      <td bgcolor="3399ff" style="color:white">String</td>      <td bgcolor="3399ff" style="color:white">连接流中每个字符串</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">String str= list.stream().map(Employee::getName).collect(Collectors.joining());</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">maxBy</td>      <td bgcolor="3399ff" style="color:white">Optional&lt;T&gt;</td>      <td bgcolor="3399ff" style="color:white">根据比较器选择最大值</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">optional&lt;Emp&gt;max=list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">minBy</td>      <td bgcolor="3399ff" style="color:white">Optional&lt;T&gt;</td>      <td bgcolor="3399ff" style="color:white">根据比较器选择最小值</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">Optional&lt;Emp&gt;min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">reducing</td>      <td bgcolor="3399ff" style="color:white">归约产生的类型</td>      <td bgcolor="3399ff" style="color:white">从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">int total=list.stream().collect(Collectors.reducing(0, Employe::getSalar, Integer::sum));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">collectingAndThen</td>      <td bgcolor="3399ff" style="color:white">转换函数返回的类型</td>      <td bgcolor="3399ff" style="color:white">包裹另一个收集器，对其结果转换函数</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">int how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">groupingBy</td>      <td bgcolor="3399ff" style="color:white"> Map&lt;K, List&lt;T&gt;&gt;</td>      <td bgcolor="3399ff" style="color:white">根据某属性值对流分组，属性为K,结果为V</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">Map&lt;Emp.Status, List&lt;Emp&gt;&gt;map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</td>    </tr>    <tr style="text-align:center">      <td bgcolor="3399ff" style="color:white">partitioningBy</td>      <td bgcolor="3399ff" style="color:white">Map&lt;Boolean,List&lt;T&gt;&gt;</td>      <td bgcolor="3399ff" style="color:white">根据true或false进行分区</td>    </tr>    <tr style="text-align:center">      <td colspan="3" bgcolor="33ccff" style="color:white">Map&lt;Boolean,List&lt;Emp&gt;&gt;vd=list.stream().collect(Collectors.partitioningBy(Employee::getManage));</td>    </tr></tbody></table><hr><hr><h2 id="Stream的使用实例">Stream的使用实例</h2><blockquote><p>map中存储了各元素的出现次数。</p></blockquote><p>k = 2 ，v = 3</p><p>说明数字2 出现了3次</p><p>现在要将map中各元素的出现次数，从大到小排。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">List&lt;Map.Entry&lt;Integer, Integer&gt;&gt; mapList = map.entrySet().stream()</span><br><span class="line">            .sorted((c1, c2) -&gt; c2.getValue().compareTo(c1.getValue()))</span><br><span class="line">            .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><blockquote><p>获得差值序列</p></blockquote><p>nums[1, 7, 4, 9, 2, 5]   前项减去后项</p><p>差值 [6, -3, 5, -7, 3]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] array = IntStream.range(<span class="number">1</span>, nums.length) <span class="comment">// 创建 1到 nums.length 一共 nums.length-1 哥</span></span><br><span class="line">                .map(i -&gt; nums[i-<span class="number">1</span>] - nums[i])<span class="comment">// 映射</span></span><br><span class="line">                .toArray();</span><br></pre></td></tr></table></figure><blockquote><p>取得二维List的最后一个元素存储</p></blockquote><p>levels = [[3], [9, 20], [15, 7]]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; levels =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stream.of(levels)</span><br><span class="line">      .flatMap(List::stream)</span><br><span class="line">      .mapToInt(list -&gt; list.get(list.size() - <span class="number">1</span>))</span><br><span class="line">      .forEach(res::add);</span><br></pre></td></tr></table></figure><p>res = [3,20,7]</p><blockquote><p><code>List&lt;String&gt;</code>转化成String数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] res = IntStream.range(<span class="number">0</span>, length)</span><br><span class="line">        .mapToObj(i -&gt; map.get(score[i]))</span><br><span class="line">        .collect(Collectors.toList())</span><br><span class="line">        .toArray(<span class="keyword">new</span> <span class="title class_">String</span>[length]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Lambda表达式、函数式接口、Stream API</summary>
    
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://wuwawawa.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://wuwawawa.github.io/posts/e85d694a.html"/>
    <id>https://wuwawawa.github.io/posts/e85d694a.html</id>
    <published>2023-05-10T05:04:05.000Z</published>
    <updated>2023-05-12T00:53:14.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="翻转二叉树">翻转二叉树</h2><div class="tag link"><a class="link-card" title="226. 翻转二叉树" href="https://leetcode.cn/problems/invert-binary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">226. 翻转二叉树</p><p class="url">https://leetcode.cn/problems/invert-binary-tree/</p></div></a></div><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg" alt="img" style="zoom:67%;" /><p>递归三部曲</p><ol><li>确定递归函数的参数和返回值。</li><li>确定终止条件。当前节点为空的时候，就返回</li><li>确定单层递归的逻辑。因为是先前序遍历，所以先进行交换左右孩子节点，然后反转左子树，反转右子树。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//递归函数的终止条件，节点为空时返回</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面三句是将当前节点的左右子树交换</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> root.right;</span><br><span class="line">    root.right = root.left;</span><br><span class="line">    root.left = tmp;</span><br><span class="line">    <span class="comment">//递归交换当前节点的左子树</span></span><br><span class="line">    invertTree(root.left);</span><br><span class="line">    <span class="comment">//递归交换当前节点的 右子树</span></span><br><span class="line">    invertTree(root.right);</span><br><span class="line">    <span class="comment">//函数返回时就表示当前这个节点，以及它的左右子树</span></span><br><span class="line">    <span class="comment">//都已经交换完了</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="对称二叉树">对称二叉树</h2><div class="tag link"><a class="link-card" title="101. 对称二叉树" href="https://leetcode.cn/problems/symmetric-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">101. 对称二叉树</p><p class="url">https://leetcode.cn/problems/symmetric-tree/</p></div></a></div><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg" alt="img" style="zoom:67%;" /><p>递归三部曲</p><ol><li>确定递归函数的参数和返回值</li></ol><p>因为我们要比较的是根节点的两个子树是否是相互翻转的，进而判断这个树是不是对称树，所以要比较的是两个树，参数自然也是左子树节点和右子树节点。</p><p>返回值自然是bool类型。</p><ol start="2"><li>确定终止条件</li></ol><p>要比较两个节点数值相不相同，首先要把两个节点为空的情况弄清楚！否则后面比较数值的时候就会操作空指针了。</p><p>节点为空的情况有：（注意我们比较的其实不是左孩子和右孩子，所以如下我称之为左节点右节点）</p><ul><li>左节点为空，右节点不为空，不对称，return false</li><li>左不为空，右为空，不对称 return false</li><li>左右都为空，对称，返回true</li></ul><p>此时已经排除掉了节点为空的情况，那么剩下的就是左右节点不为空：</p><ul><li>左右都不为空，比较节点数值，不相同就return false</li></ul><p>此时左右节点不为空，且数值也不相同的情况我们也处理了。</p><ol start="3"><li>确定单层递归的逻辑</li></ol><p>此时才进入单层递归的逻辑，单层递归的逻辑就是处理 左右节点都不为空，且数值相同的情况。</p><ul><li>比较二叉树外侧是否对称：传入的是左节点的左孩子，右节点的右孩子。</li><li>比较内测是否对称，传入左节点的右孩子，右节点的左孩子。</li><li>如果左右都对称就返回true ，有一侧不对称就返回false 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用递归函数，比较左节点，右节点</span></span><br><span class="line">    <span class="keyword">return</span> dfs(root.left,root.right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left==<span class="literal">null</span> || right == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left.val!=right.val)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(left.left,right.right)&amp;&amp;dfs(left.right,right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二叉树的最大深度⭐️">二叉树的最大深度⭐️</h2><div class="tag link"><a class="link-card" title="104. 二叉树的最大深度" href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">104. 二叉树的最大深度</p><p class="url">https://leetcode.cn/problems/maximum-depth-of-binary-tree/</p></div></a></div><div class="tag link"><a class="link-card" title="559. n叉树的最大深度" href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">559. n叉树的最大深度</p><p class="url">https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/</p></div></a></div><p>给定一个二叉树，找出其最大深度。</p><p>示例：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">3</span></span><br><span class="line">  / <span class="string">\</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">20</span></span><br><span class="line"> /  <span class="string">\</span></span><br><span class="line"><span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><ol><li>确定递归函数的参数和返回值：参数就是传入树的根节点，返回就返回这棵树的深度，所以返回值为int类型。</li><li>确定终止条件：如果为空节点的话，就返回0，表示高度为0。</li><li>确定单层递归的逻辑：先求它的左子树的深度，再求右子树的深度，最后取左右深度最大的数值再+1 （加1是因为算上当前中间节点）就是目前节点为根节点的树的深度。</li></ol><p>关键：</p><p>根节点的高度其实就是二叉树的最大深度。</p><p>需要<code>后序遍历</code>从低向上返回高度。</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="二叉树" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftDepth</span> <span class="operator">=</span> maxDepth(root.left);</span><br><span class="line">        <span class="type">int</span> rightDepth= maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftDepth,rightDepth)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二叉树的最小深度">二叉树的最小深度</h2><p>给定一个二叉树，找出其最小深度。</p><p>示例 1：</p><img src="https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg" alt="img" style="zoom:67%;" /><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p>直觉上好像和求最大深度差不多，其实还是差不少的。</p><p>本题依然是前序遍历和后序遍历都可以，前序求的是深度，后序求的是高度。</p><hr><hr><h2 id="二叉树的最近公共祖先">二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>节点5,4 的公共祖先为 5  ，节点5，1的公共祖先为3</p><p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p><p>遇到这个题目首先想的是要是能自底向上查找就好了，这样就可以找到公共祖先了。</p><p>那么二叉树如何可以自底向上查找呢？</p><p>回溯啊，二叉树回溯的过程就是从低到上。</p><p>后序遍历（左右中）就是天然的回溯过程，可以根据左右子树的返回值，来处理中节点的逻辑。</p><p>接下来就看如何判断一个节点是节点q和节点p的公共祖先呢。</p><p>首先最容易想到的一个情况：如果找到一个节点，发现左子树出现结点p，右子树出现节点q，或者 左子树出现结点q，右子树出现节点p，那么该节点就是节点p和q的最近公共祖先。 即情况一：</p><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/image-20230511221814323.png" alt="image-20230511221814323" style="zoom:67%;" /><p>判断逻辑是 如果递归遍历遇到q，就将q返回，遇到p 就将p返回，</p><p>那么如果 左右子树的返回值都不为空，说明此时的中节点，一定是q 和p 的最近祖先。</p><p>特殊情况，就是节点本身p(q)，它拥有一个子孙节点q§。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || root == p || root == q) &#123; <span class="comment">// 递归结束条件</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后序遍历</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123; <span class="comment">// 若未找到节点 p 或 q</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123; <span class="comment">// 若找到一个节点</span></span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123; <span class="comment">// 若找到一个节点</span></span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">// 若找到两个节点</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="平衡二叉树">平衡二叉树</h2><hr><hr><h2 id="二叉树的所有路径">二叉树的所有路径</h2><div class="tag link"><a class="link-card" title="257. 二叉树的所有路径" href="https://leetcode.cn/problems/binary-tree-paths/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">257. 二叉树的所有路径</p><p class="url">https://leetcode.cn/problems/binary-tree-paths/</p></div></a></div><p>给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。</p><p>叶子节点 是指没有子节点的节点。</p><img src="https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg" alt="img" style="zoom:67%;" /><p>示例 1：</p><p>输入：root = [1,2,3,null,5]<br>输出：[“1-&gt;2-&gt;5”,“1-&gt;3”]</p><hr><hr><h2 id="找树左下角的值⭐️">找树左下角的值⭐️</h2><div class="tag link"><a class="link-card" title="513. 找树左下角的值" href="https://leetcode.cn/problems/find-bottom-left-tree-value/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">513. 找树左下角的值</p><p class="url">https://leetcode.cn/problems/find-bottom-left-tree-value/</p></div></a></div><p>给定一个二叉树的 根节点 <code>root</code>，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><img src="https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg" alt="img" style="zoom:67%;" /><p>输出: 7</p><div class="tabs" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#0e595ee9-d0e0-428a-b10c-1f89283cc4f9-1"><i class="fas fa-cat"></i>回溯写法</button></li><li class="tab"><button type="button" data-href="#0e595ee9-d0e0-428a-b10c-1f89283cc4f9-2"><i class="fas fa-horse"></i>精简回溯</button></li><li class="tab"><button type="button" data-href="#0e595ee9-d0e0-428a-b10c-1f89283cc4f9-3"><i class="fas fa-cookie-bite"></i>层序</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="type">int</span> result;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        traversal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left== <span class="literal">null</span> &amp;&amp; root .right ==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">                maxDepth=depth;</span><br><span class="line">                result=root.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            traversal(root.left,depth);</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            traversal(root.right,depth);</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9-2"><p>回溯逻辑其实就隐藏在<code>traversal(root.left,depth+1);</code>中的 <code>depth+1</code>。 每次函数调用完，depth依然是没有加上1的，这就是回溯了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    traversal(root, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traversal</span><span class="params">(TreeNode root, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root.left== <span class="literal">null</span> &amp;&amp; root .right ==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(depth&gt;maxDepth)&#123;</span><br><span class="line">            maxDepth=depth;</span><br><span class="line">            result=root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        traversal(root.left,depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">        traversal(root.right,depth+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="0e595ee9-d0e0-428a-b10c-1f89283cc4f9-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; deque= <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    deque.addFirst(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!deque.isEmpty())&#123;</span><br><span class="line">        ans = deque.peekFirst().val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> deque.size();</span><br><span class="line">        <span class="keyword">while</span>(size-- &gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) deque.addLast(poll.left);</span><br><span class="line">            <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) deque.addLast(poll.right);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><hr><h2 id="根据序列构造二叉树">根据序列构造二叉树</h2><div class="tag link"><a class="link-card" title="105. 从前序与中序遍历序列构造二叉树" href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">105. 从前序与中序遍历序列构造二叉树</p><p class="url">https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</p></div></a></div><div class="tag link"><a class="link-card" title="106. 从中序与后序遍历序列构造二叉树" href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">106. 从中序与后序遍历序列构造二叉树</p><p class="url">https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/</p></div></a></div><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗二叉树 。</p><p>输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3],preorder = [3,9,20,15,7]</p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="img" style="zoom:67%;" /><p>前序遍历： 根  左  右</p><p>中序遍历： 左  根   右</p><p>后序遍历： 左  右   根</p><ul><li>第一步：如果数组大小为零的话，说明是空节点了。</li><li>第二步：如果不为空，那么取后序数组最后一个元素作为节点元素。</li><li>第三步：找到后序数组最后一个元素在中序数组的位置，作为切割点</li><li>第四步：切割中序数组，切成中序左数组和中序右数组 （顺序别搞反了，一定是先切中序数组）</li><li>第五步：切割后序数组，切成后序左数组和后序右数组</li><li>第六步：递归处理左区间和右区间</li></ul><p>中序和后序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123; <span class="comment">// 用map保存中序序列的数值对应位置</span></span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findNode(inorder,  <span class="number">0</span>, inorder.length, postorder,<span class="number">0</span>, postorder.length);  <span class="comment">// 前闭后开</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode <span class="title function_">findNode</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd, <span class="type">int</span>[] postorder, <span class="type">int</span> postBegin, <span class="type">int</span> postEnd)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数里的范围都是前闭后开</span></span><br><span class="line">        <span class="keyword">if</span> (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  <span class="comment">// 不满足左闭右开，说明没有元素，返回空树</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span> map.get(postorder[postEnd - <span class="number">1</span>]);  <span class="comment">// 找到后序遍历的最后一个元素在中序遍历中的位置</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(inorder[rootIndex]);  <span class="comment">// 构造结点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lenOfLeft</span> <span class="operator">=</span> rootIndex - inBegin;  <span class="comment">// 保存中序左子树个数，用来确定后序数列的个数</span></span><br><span class="line">        root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">                postorder, postBegin, postBegin + lenOfLeft);</span><br><span class="line">        root.right = findNode(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">                postorder, postBegin + lenOfLeft, postEnd - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>前序和中序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123; <span class="comment">// 用map保存中序序列的数值对应位置</span></span><br><span class="line">        map.put(inorder[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> findNode(inorder,  <span class="number">0</span>, inorder.length, preorder,<span class="number">0</span>, preorder.length);  <span class="comment">// 前闭后开</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TreeNode <span class="title function_">findNode</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inBegin, <span class="type">int</span> inEnd, <span class="type">int</span>[] preorder, <span class="type">int</span> preBegin, <span class="type">int</span> preEnd)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数里的范围都是前闭后开</span></span><br><span class="line">    <span class="keyword">if</span> (inBegin &gt;= inEnd || preBegin &gt;= preEnd) &#123;  <span class="comment">// 不满足左闭右开，说明没有元素，返回空树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootIndex</span> <span class="operator">=</span> map.get(preorder[preBegin]);  <span class="comment">// 找到前序遍历的最后一个元素在中序遍历中的位置</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(inorder[rootIndex]);  <span class="comment">// 构造结点</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lenOfLeft</span> <span class="operator">=</span> rootIndex - inBegin;  <span class="comment">// 保存中序左子树个数，用来确定后序数列的个数</span></span><br><span class="line">    root.left = findNode(inorder, inBegin, rootIndex,</span><br><span class="line">            preorder, preBegin+<span class="number">1</span>, preBegin +<span class="number">1</span> + lenOfLeft);</span><br><span class="line">    root.right = findNode(inorder, rootIndex + <span class="number">1</span>, inEnd,</span><br><span class="line">            preorder, preBegin +<span class="number">1</span> + lenOfLeft, preEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="最大二叉树">最大二叉树</h2><div class="tag link"><a class="link-card" title="654. 最大二叉树" href="https://leetcode.cn/problems/maximum-binary-tree/"><div class="left"><img src="https://lmy-picbed.oss-cn-hangzhou.aliyuncs.com/blog/leetcode.jpg"/></div><div class="right"><p class="text">654. 最大二叉树</p><p class="url">https://leetcode.cn/problems/maximum-binary-tree/</p></div></a></div><p>给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:</p><p>创建一个根节点，其值为 nums 中的最大值。<br>递归地在最大值 左边 的 子数组前缀上 构建左子树。<br>递归地在最大值 右边 的 子数组后缀上 构建右子树。<br>返回 nums 构建的 最大二叉树 。</p><p>输入：nums = [3,2,1,6,0,5]<br>输出：[6,3,5,null,2,0,null,null,1]<br>解释：递归调用如下所示：</p><ul><li>[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。<ul><li>[3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。<ul><li>空数组，无子节点。</li><li>[2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。<ul><li>空数组，无子节点。</li><li>只有一个元素，所以子节点是一个值为 1 的节点。</li></ul></li></ul></li><li>[0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。<ul><li>只有一个元素，所以子节点是一个值为 0 的节点。</li><li>空数组，无子节点。</li></ul></li></ul></li></ul><img src="https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg" alt="img" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> constructMaximumBinaryTree(nums,<span class="number">0</span>,nums.length); <span class="comment">// 前闭后开</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> begin,<span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数范围前闭后开</span></span><br><span class="line">    <span class="keyword">if</span>(begin&gt;=end)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 寻找最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= begin;i&lt;end;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;=maxValue)&#123;</span><br><span class="line">            maxValue=nums[i];</span><br><span class="line">            maxIndex=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[maxIndex]);  <span class="comment">// 构造结点</span></span><br><span class="line">    <span class="comment">// 构造左子树</span></span><br><span class="line">    root.left = constructMaximumBinaryTree(nums,begin,maxIndex);</span><br><span class="line">    <span class="comment">// 构造右子树</span></span><br><span class="line">    root.right = constructMaximumBinaryTree(nums,maxIndex+<span class="number">1</span>,end);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h2 id="二叉搜索树的插入">二叉搜索树的插入</h2><p>一般是插入到叶子节点上</p><hr><h2 id="二叉搜索树的删除">二叉搜索树的删除</h2>]]></content>
    
    
    <summary type="html">二叉树专题</summary>
    
    
    
    <category term="算法" scheme="https://wuwawawa.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="递归" scheme="https://wuwawawa.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="回溯" scheme="https://wuwawawa.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
</feed>
